{"ast":null,"code":"var _jsxFileName = \"E:\\\\FYP\\\\HospitalAid\\\\Implementation\\\\Web App\\\\Website\\\\src\\\\components\\\\pages\\\\Surveillance\\\\Log.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect } from 'react';\nimport './Log.css';\nimport fire from '../../../fire';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nfunction Log() {\n  _s();\n\n  const db = fire.firestore();\n  const [detectionList, setDetectionList] = useState([]);\n  useEffect(() => {\n    const unsubscribe = fire.firestore().collection('detections').orderBy('time').onSnapshot(snapshot => {\n      if (snapshot.size) {\n        let arr = [];\n        snapshot.docs.map(doc => arr.push(doc.data()));\n        setDetectionList(arr);\n        console.log(detectionList);\n      } else {\n        console.log('no data in firebase');\n      }\n    });\n    return () => {\n      unsubscribe();\n    };\n  }, [fire]);\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"log-container\",\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"text\",\n        children: detectionList.map(detection => /*#__PURE__*/_jsxDEV(\"h1\", {\n          className: \"heading-text\",\n          children: [/*#__PURE__*/_jsxDEV(\"span\", {\n            children: [detection['time'].toDate().toLocaleDateString('en-GB'), \" \", detection['time'].toDate().toLocaleTimeString()]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 39,\n            columnNumber: 27\n          }, this), \" \", detection['type']]\n        }, detection['id'], true, {\n          fileName: _jsxFileName,\n          lineNumber: 38,\n          columnNumber: 23\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 36,\n        columnNumber: 15\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 35,\n      columnNumber: 11\n    }, this)\n  }, void 0, false);\n}\n\n_s(Log, \"9Fk4s/chw/IhP6+VFy4cAxF+g9Q=\");\n\n_c = Log;\nexport default Log;\n\nvar _c;\n\n$RefreshReg$(_c, \"Log\");","map":{"version":3,"sources":["E:/FYP/HospitalAid/Implementation/Web App/Website/src/components/pages/Surveillance/Log.js"],"names":["React","useState","useEffect","fire","Log","db","firestore","detectionList","setDetectionList","unsubscribe","collection","orderBy","onSnapshot","snapshot","size","arr","docs","map","doc","push","data","console","log","detection","toDate","toLocaleDateString","toLocaleTimeString"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,SAA1B,QAA4C,OAA5C;AACA,OAAO,WAAP;AACA,OAAOC,IAAP,MAAiB,eAAjB;;;;AAEA,SAASC,GAAT,GAAe;AAAA;;AAEX,QAAMC,EAAE,GAAGF,IAAI,CAACG,SAAL,EAAX;AAEA,QAAM,CAACC,aAAD,EAAgBC,gBAAhB,IAAoCP,QAAQ,CAAC,EAAD,CAAlD;AAEAC,EAAAA,SAAS,CAAC,MAAM;AACZ,UAAMO,WAAW,GAAGN,IAAI,CACnBG,SADe,GACHI,UADG,CACQ,YADR,EAEfC,OAFe,CAEP,MAFO,EAGfC,UAHe,CAGJC,QAAQ,IAAI;AACpB,UAAIA,QAAQ,CAACC,IAAb,EAAmB;AACf,YAAIC,GAAG,GAAG,EAAV;AACAF,QAAAA,QAAQ,CAACG,IAAT,CAAcC,GAAd,CAAmBC,GAAD,IACdH,GAAG,CAACI,IAAJ,CAASD,GAAG,CAACE,IAAJ,EAAT,CADJ;AAIAZ,QAAAA,gBAAgB,CAACO,GAAD,CAAhB;AACAM,QAAAA,OAAO,CAACC,GAAR,CAAYf,aAAZ;AACH,OARD,MAQO;AACHc,QAAAA,OAAO,CAACC,GAAR,CAAY,qBAAZ;AACH;AACJ,KAfe,CAApB;AAgBA,WAAO,MAAM;AACTb,MAAAA,WAAW;AACd,KAFD;AAGH,GApBQ,EAoBN,CAACN,IAAD,CApBM,CAAT;AAsBA,sBACE;AAAA,2BACI;AAAK,MAAA,SAAS,EAAC,eAAf;AAAA,6BACI;AAAK,QAAA,SAAS,EAAC,MAAf;AAAA,kBACKI,aAAa,CAACU,GAAd,CAAmBM,SAAD,iBACf;AAAI,UAAA,SAAS,EAAC,cAAd;AAAA,kCACI;AAAA,uBAAOA,SAAS,CAAC,MAAD,CAAT,CAAkBC,MAAlB,GAA2BC,kBAA3B,CAA8C,OAA9C,CAAP,OAAgEF,SAAS,CAAC,MAAD,CAAT,CAAkBC,MAAlB,GAA2BE,kBAA3B,EAAhE;AAAA;AAAA;AAAA;AAAA;AAAA,kBADJ,OAC6HH,SAAS,CAAC,MAAD,CADtI;AAAA,WAAkCA,SAAS,CAAC,IAAD,CAA3C;AAAA;AAAA;AAAA;AAAA,gBADH;AADL;AAAA;AAAA;AAAA;AAAA;AADJ;AAAA;AAAA;AAAA;AAAA;AADJ,mBADF;AAaD;;GAzCMnB,G;;KAAAA,G;AA2CP,eAAeA,GAAf","sourcesContent":["import React, { useState, useEffect, } from 'react';\r\nimport './Log.css';\r\nimport fire from '../../../fire';\r\n\r\nfunction Log() {\r\n\r\n    const db = fire.firestore();\r\n\r\n    const [detectionList, setDetectionList] = useState([]);\r\n\r\n    useEffect(() => {\r\n        const unsubscribe = fire\r\n            .firestore().collection('detections')\r\n            .orderBy('time')\r\n            .onSnapshot(snapshot => {\r\n                if (snapshot.size) {\r\n                    let arr = [];\r\n                    snapshot.docs.map((doc) =>\r\n                        arr.push(doc.data())\r\n                    );\r\n\r\n                    setDetectionList(arr)\r\n                    console.log(detectionList);\r\n                } else {\r\n                    console.log('no data in firebase');\r\n                }\r\n            })\r\n        return () => {\r\n            unsubscribe()\r\n        }\r\n    }, [fire])\r\n\r\n    return (\r\n      <>\r\n          <div className='log-container'>\r\n              <div className='text'>\r\n                  {detectionList.map((detection) => (\r\n                      <h1 className='heading-text' key={detection['id']}>\r\n                          <span>{detection['time'].toDate().toLocaleDateString('en-GB')} {detection['time'].toDate().toLocaleTimeString()}</span> {detection['type']}\r\n                      </h1>\r\n                  ))}\r\n              </div>\r\n          </div>\r\n      </>\r\n    );\r\n  }\r\n\r\n  export default Log;\r\n"]},"metadata":{},"sourceType":"module"}