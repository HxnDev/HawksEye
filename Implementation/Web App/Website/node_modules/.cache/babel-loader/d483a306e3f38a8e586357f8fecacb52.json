{"ast":null,"code":"import firebase from '@firebase/app';\nimport { Provider, ComponentContainer, Component } from '@firebase/component';\nimport { stringify, jsonEval, contains, assert, isNodeSdk, base64, stringToByteArray, Sha1, deepCopy, base64Encode, isMobileCordova, stringLength, Deferred, safeGet, isAdmin, isValidFormat, isEmpty, isReactNative, assertionError, map, querystring, errorPrefix, getModularInstance, createMockUserToken, validateArgCount, validateCallback, validateContextObject } from '@firebase/util';\nimport { __spreadArray, __read, __values, __extends, __awaiter, __generator, __assign } from 'tslib';\nimport { Logger, LogLevel } from '@firebase/logger';\nvar name = \"@firebase/database\";\nvar version = \"0.10.9\";\n/**\r\n * @license\r\n * Copyright 2019 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\n/** The semver (www.semver.org) version of the SDK. */\n\nvar SDK_VERSION = ''; // SDK_VERSION should be set before any database instance is created\n\nfunction setSDKVersion(version) {\n  SDK_VERSION = version;\n}\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\n/**\r\n * Wraps a DOM Storage object and:\r\n * - automatically encode objects as JSON strings before storing them to allow us to store arbitrary types.\r\n * - prefixes names with \"firebase:\" to avoid collisions with app data.\r\n *\r\n * We automatically (see storage.js) create two such wrappers, one for sessionStorage,\r\n * and one for localStorage.\r\n *\r\n */\n\n\nvar DOMStorageWrapper =\n/** @class */\nfunction () {\n  /**\r\n   * @param domStorage_ - The underlying storage object (e.g. localStorage or sessionStorage)\r\n   */\n  function DOMStorageWrapper(domStorage_) {\n    this.domStorage_ = domStorage_; // Use a prefix to avoid collisions with other stuff saved by the app.\n\n    this.prefix_ = 'firebase:';\n  }\n  /**\r\n   * @param key - The key to save the value under\r\n   * @param value - The value being stored, or null to remove the key.\r\n   */\n\n\n  DOMStorageWrapper.prototype.set = function (key, value) {\n    if (value == null) {\n      this.domStorage_.removeItem(this.prefixedName_(key));\n    } else {\n      this.domStorage_.setItem(this.prefixedName_(key), stringify(value));\n    }\n  };\n  /**\r\n   * @returns The value that was stored under this key, or null\r\n   */\n\n\n  DOMStorageWrapper.prototype.get = function (key) {\n    var storedVal = this.domStorage_.getItem(this.prefixedName_(key));\n\n    if (storedVal == null) {\n      return null;\n    } else {\n      return jsonEval(storedVal);\n    }\n  };\n\n  DOMStorageWrapper.prototype.remove = function (key) {\n    this.domStorage_.removeItem(this.prefixedName_(key));\n  };\n\n  DOMStorageWrapper.prototype.prefixedName_ = function (name) {\n    return this.prefix_ + name;\n  };\n\n  DOMStorageWrapper.prototype.toString = function () {\n    return this.domStorage_.toString();\n  };\n\n  return DOMStorageWrapper;\n}();\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\n/**\r\n * An in-memory storage implementation that matches the API of DOMStorageWrapper\r\n * (TODO: create interface for both to implement).\r\n */\n\n\nvar MemoryStorage =\n/** @class */\nfunction () {\n  function MemoryStorage() {\n    this.cache_ = {};\n    this.isInMemoryStorage = true;\n  }\n\n  MemoryStorage.prototype.set = function (key, value) {\n    if (value == null) {\n      delete this.cache_[key];\n    } else {\n      this.cache_[key] = value;\n    }\n  };\n\n  MemoryStorage.prototype.get = function (key) {\n    if (contains(this.cache_, key)) {\n      return this.cache_[key];\n    }\n\n    return null;\n  };\n\n  MemoryStorage.prototype.remove = function (key) {\n    delete this.cache_[key];\n  };\n\n  return MemoryStorage;\n}();\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\n/**\r\n * Helper to create a DOMStorageWrapper or else fall back to MemoryStorage.\r\n * TODO: Once MemoryStorage and DOMStorageWrapper have a shared interface this method annotation should change\r\n * to reflect this type\r\n *\r\n * @param domStorageName - Name of the underlying storage object\r\n *   (e.g. 'localStorage' or 'sessionStorage').\r\n * @returns Turning off type information until a common interface is defined.\r\n */\n\n\nvar createStoragefor = function (domStorageName) {\n  try {\n    // NOTE: just accessing \"localStorage\" or \"window['localStorage']\" may throw a security exception,\n    // so it must be inside the try/catch.\n    if (typeof window !== 'undefined' && typeof window[domStorageName] !== 'undefined') {\n      // Need to test cache. Just because it's here doesn't mean it works\n      var domStorage = window[domStorageName];\n      domStorage.setItem('firebase:sentinel', 'cache');\n      domStorage.removeItem('firebase:sentinel');\n      return new DOMStorageWrapper(domStorage);\n    }\n  } catch (e) {} // Failed to create wrapper.  Just return in-memory storage.\n  // TODO: log?\n\n\n  return new MemoryStorage();\n};\n/** A storage object that lasts across sessions */\n\n\nvar PersistentStorage = createStoragefor('localStorage');\n/** A storage object that only lasts one session */\n\nvar SessionStorage = createStoragefor('sessionStorage');\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\nvar logClient = new Logger('@firebase/database');\n/**\r\n * Returns a locally-unique ID (generated by just incrementing up from 0 each time its called).\r\n */\n\nvar LUIDGenerator = function () {\n  var id = 1;\n  return function () {\n    return id++;\n  };\n}();\n/**\r\n * Sha1 hash of the input string\r\n * @param str - The string to hash\r\n * @returns {!string} The resulting hash\r\n */\n\n\nvar sha1 = function (str) {\n  var utf8Bytes = stringToByteArray(str);\n  var sha1 = new Sha1();\n  sha1.update(utf8Bytes);\n  var sha1Bytes = sha1.digest();\n  return base64.encodeByteArray(sha1Bytes);\n};\n\nvar buildLogMessage_ = function () {\n  var varArgs = [];\n\n  for (var _i = 0; _i < arguments.length; _i++) {\n    varArgs[_i] = arguments[_i];\n  }\n\n  var message = '';\n\n  for (var i = 0; i < varArgs.length; i++) {\n    var arg = varArgs[i];\n\n    if (Array.isArray(arg) || arg && typeof arg === 'object' && // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    typeof arg.length === 'number') {\n      message += buildLogMessage_.apply(null, arg);\n    } else if (typeof arg === 'object') {\n      message += stringify(arg);\n    } else {\n      message += arg;\n    }\n\n    message += ' ';\n  }\n\n  return message;\n};\n/**\r\n * Use this for all debug messages in Firebase.\r\n */\n\n\nvar logger = null;\n/**\r\n * Flag to check for log availability on first log message\r\n */\n\nvar firstLog_ = true;\n/**\r\n * The implementation of Firebase.enableLogging (defined here to break dependencies)\r\n * @param logger_ - A flag to turn on logging, or a custom logger\r\n * @param persistent - Whether or not to persist logging settings across refreshes\r\n */\n\nvar enableLogging = function (logger_, persistent) {\n  assert(!persistent || logger_ === true || logger_ === false, \"Can't turn on custom loggers persistently.\");\n\n  if (logger_ === true) {\n    logClient.logLevel = LogLevel.VERBOSE;\n    logger = logClient.log.bind(logClient);\n\n    if (persistent) {\n      SessionStorage.set('logging_enabled', true);\n    }\n  } else if (typeof logger_ === 'function') {\n    logger = logger_;\n  } else {\n    logger = null;\n    SessionStorage.remove('logging_enabled');\n  }\n};\n\nvar log = function () {\n  var varArgs = [];\n\n  for (var _i = 0; _i < arguments.length; _i++) {\n    varArgs[_i] = arguments[_i];\n  }\n\n  if (firstLog_ === true) {\n    firstLog_ = false;\n\n    if (logger === null && SessionStorage.get('logging_enabled') === true) {\n      enableLogging(true);\n    }\n  }\n\n  if (logger) {\n    var message = buildLogMessage_.apply(null, varArgs);\n    logger(message);\n  }\n};\n\nvar logWrapper = function (prefix) {\n  return function () {\n    var varArgs = [];\n\n    for (var _i = 0; _i < arguments.length; _i++) {\n      varArgs[_i] = arguments[_i];\n    }\n\n    log.apply(void 0, __spreadArray([prefix], __read(varArgs)));\n  };\n};\n\nvar error = function () {\n  var varArgs = [];\n\n  for (var _i = 0; _i < arguments.length; _i++) {\n    varArgs[_i] = arguments[_i];\n  }\n\n  var message = 'FIREBASE INTERNAL ERROR: ' + buildLogMessage_.apply(void 0, __spreadArray([], __read(varArgs)));\n  logClient.error(message);\n};\n\nvar fatal = function () {\n  var varArgs = [];\n\n  for (var _i = 0; _i < arguments.length; _i++) {\n    varArgs[_i] = arguments[_i];\n  }\n\n  var message = \"FIREBASE FATAL ERROR: \" + buildLogMessage_.apply(void 0, __spreadArray([], __read(varArgs)));\n  logClient.error(message);\n  throw new Error(message);\n};\n\nvar warn = function () {\n  var varArgs = [];\n\n  for (var _i = 0; _i < arguments.length; _i++) {\n    varArgs[_i] = arguments[_i];\n  }\n\n  var message = 'FIREBASE WARNING: ' + buildLogMessage_.apply(void 0, __spreadArray([], __read(varArgs)));\n  logClient.warn(message);\n};\n/**\r\n * Logs a warning if the containing page uses https. Called when a call to new Firebase\r\n * does not use https.\r\n */\n\n\nvar warnIfPageIsSecure = function () {\n  // Be very careful accessing browser globals. Who knows what may or may not exist.\n  if (typeof window !== 'undefined' && window.location && window.location.protocol && window.location.protocol.indexOf('https:') !== -1) {\n    warn('Insecure Firebase access from a secure page. ' + 'Please use https in calls to new Firebase().');\n  }\n};\n/**\r\n * Returns true if data is NaN, or +/- Infinity.\r\n */\n\n\nvar isInvalidJSONNumber = function (data) {\n  return typeof data === 'number' && (data !== data || // NaN\n  data === Number.POSITIVE_INFINITY || data === Number.NEGATIVE_INFINITY);\n};\n\nvar executeWhenDOMReady = function (fn) {\n  if (isNodeSdk() || document.readyState === 'complete') {\n    fn();\n  } else {\n    // Modeled after jQuery. Try DOMContentLoaded and onreadystatechange (which\n    // fire before onload), but fall back to onload.\n    var called_1 = false;\n\n    var wrappedFn_1 = function () {\n      if (!document.body) {\n        setTimeout(wrappedFn_1, Math.floor(10));\n        return;\n      }\n\n      if (!called_1) {\n        called_1 = true;\n        fn();\n      }\n    };\n\n    if (document.addEventListener) {\n      document.addEventListener('DOMContentLoaded', wrappedFn_1, false); // fallback to onload.\n\n      window.addEventListener('load', wrappedFn_1, false); // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    } else if (document.attachEvent) {\n      // IE.\n      // eslint-disable-next-line @typescript-eslint/no-explicit-any\n      document.attachEvent('onreadystatechange', function () {\n        if (document.readyState === 'complete') {\n          wrappedFn_1();\n        }\n      }); // fallback to onload.\n      // eslint-disable-next-line @typescript-eslint/no-explicit-any\n\n      window.attachEvent('onload', wrappedFn_1); // jQuery has an extra hack for IE that we could employ (based on\n      // http://javascript.nwbox.com/IEContentLoaded/) But it looks really old.\n      // I'm hoping we don't need it.\n    }\n  }\n};\n/**\r\n * Minimum key name. Invalid for actual data, used as a marker to sort before any valid names\r\n */\n\n\nvar MIN_NAME = '[MIN_NAME]';\n/**\r\n * Maximum key name. Invalid for actual data, used as a marker to sort above any valid names\r\n */\n\nvar MAX_NAME = '[MAX_NAME]';\n/**\r\n * Compares valid Firebase key names, plus min and max name\r\n */\n\nvar nameCompare = function (a, b) {\n  if (a === b) {\n    return 0;\n  } else if (a === MIN_NAME || b === MAX_NAME) {\n    return -1;\n  } else if (b === MIN_NAME || a === MAX_NAME) {\n    return 1;\n  } else {\n    var aAsInt = tryParseInt(a),\n        bAsInt = tryParseInt(b);\n\n    if (aAsInt !== null) {\n      if (bAsInt !== null) {\n        return aAsInt - bAsInt === 0 ? a.length - b.length : aAsInt - bAsInt;\n      } else {\n        return -1;\n      }\n    } else if (bAsInt !== null) {\n      return 1;\n    } else {\n      return a < b ? -1 : 1;\n    }\n  }\n};\n/**\r\n * @returns {!number} comparison result.\r\n */\n\n\nvar stringCompare = function (a, b) {\n  if (a === b) {\n    return 0;\n  } else if (a < b) {\n    return -1;\n  } else {\n    return 1;\n  }\n};\n\nvar requireKey = function (key, obj) {\n  if (obj && key in obj) {\n    return obj[key];\n  } else {\n    throw new Error('Missing required key (' + key + ') in object: ' + stringify(obj));\n  }\n};\n\nvar ObjectToUniqueKey = function (obj) {\n  if (typeof obj !== 'object' || obj === null) {\n    return stringify(obj);\n  }\n\n  var keys = []; // eslint-disable-next-line guard-for-in\n\n  for (var k in obj) {\n    keys.push(k);\n  } // Export as json, but with the keys sorted.\n\n\n  keys.sort();\n  var key = '{';\n\n  for (var i = 0; i < keys.length; i++) {\n    if (i !== 0) {\n      key += ',';\n    }\n\n    key += stringify(keys[i]);\n    key += ':';\n    key += ObjectToUniqueKey(obj[keys[i]]);\n  }\n\n  key += '}';\n  return key;\n};\n/**\r\n * Splits a string into a number of smaller segments of maximum size\r\n * @param str - The string\r\n * @param segsize - The maximum number of chars in the string.\r\n * @returns The string, split into appropriately-sized chunks\r\n */\n\n\nvar splitStringBySize = function (str, segsize) {\n  var len = str.length;\n\n  if (len <= segsize) {\n    return [str];\n  }\n\n  var dataSegs = [];\n\n  for (var c = 0; c < len; c += segsize) {\n    if (c + segsize > len) {\n      dataSegs.push(str.substring(c, len));\n    } else {\n      dataSegs.push(str.substring(c, c + segsize));\n    }\n  }\n\n  return dataSegs;\n};\n/**\r\n * Apply a function to each (key, value) pair in an object or\r\n * apply a function to each (index, value) pair in an array\r\n * @param obj - The object or array to iterate over\r\n * @param fn - The function to apply\r\n */\n\n\nfunction each(obj, fn) {\n  for (var key in obj) {\n    if (obj.hasOwnProperty(key)) {\n      fn(key, obj[key]);\n    }\n  }\n}\n/**\r\n * Borrowed from http://hg.secondlife.com/llsd/src/tip/js/typedarray.js (MIT License)\r\n * I made one modification at the end and removed the NaN / Infinity\r\n * handling (since it seemed broken [caused an overflow] and we don't need it).  See MJL comments.\r\n * @param v - A double\r\n *\r\n */\n\n\nvar doubleToIEEE754String = function (v) {\n  assert(!isInvalidJSONNumber(v), 'Invalid JSON number'); // MJL\n\n  var ebits = 11,\n      fbits = 52;\n  var bias = (1 << ebits - 1) - 1;\n  var s, e, f, ln, i; // Compute sign, exponent, fraction\n  // Skip NaN / Infinity handling --MJL.\n\n  if (v === 0) {\n    e = 0;\n    f = 0;\n    s = 1 / v === -Infinity ? 1 : 0;\n  } else {\n    s = v < 0;\n    v = Math.abs(v);\n\n    if (v >= Math.pow(2, 1 - bias)) {\n      // Normalized\n      ln = Math.min(Math.floor(Math.log(v) / Math.LN2), bias);\n      e = ln + bias;\n      f = Math.round(v * Math.pow(2, fbits - ln) - Math.pow(2, fbits));\n    } else {\n      // Denormalized\n      e = 0;\n      f = Math.round(v / Math.pow(2, 1 - bias - fbits));\n    }\n  } // Pack sign, exponent, fraction\n\n\n  var bits = [];\n\n  for (i = fbits; i; i -= 1) {\n    bits.push(f % 2 ? 1 : 0);\n    f = Math.floor(f / 2);\n  }\n\n  for (i = ebits; i; i -= 1) {\n    bits.push(e % 2 ? 1 : 0);\n    e = Math.floor(e / 2);\n  }\n\n  bits.push(s ? 1 : 0);\n  bits.reverse();\n  var str = bits.join(''); // Return the data as a hex string. --MJL\n\n  var hexByteString = '';\n\n  for (i = 0; i < 64; i += 8) {\n    var hexByte = parseInt(str.substr(i, 8), 2).toString(16);\n\n    if (hexByte.length === 1) {\n      hexByte = '0' + hexByte;\n    }\n\n    hexByteString = hexByteString + hexByte;\n  }\n\n  return hexByteString.toLowerCase();\n};\n/**\r\n * Used to detect if we're in a Chrome content script (which executes in an\r\n * isolated environment where long-polling doesn't work).\r\n */\n\n\nvar isChromeExtensionContentScript = function () {\n  return !!(typeof window === 'object' && window['chrome'] && window['chrome']['extension'] && !/^chrome/.test(window.location.href));\n};\n/**\r\n * Used to detect if we're in a Windows 8 Store app.\r\n */\n\n\nvar isWindowsStoreApp = function () {\n  // Check for the presence of a couple WinRT globals\n  return typeof Windows === 'object' && typeof Windows.UI === 'object';\n};\n/**\r\n * Converts a server error code to a Javascript Error\r\n */\n\n\nfunction errorForServerCode(code, query) {\n  var reason = 'Unknown Error';\n\n  if (code === 'too_big') {\n    reason = 'The data requested exceeds the maximum size ' + 'that can be accessed with a single request.';\n  } else if (code === 'permission_denied') {\n    reason = \"Client doesn't have permission to access the desired data.\";\n  } else if (code === 'unavailable') {\n    reason = 'The service is unavailable';\n  }\n\n  var error = new Error(code + ' at ' + query._path.toString() + ': ' + reason); // eslint-disable-next-line @typescript-eslint/no-explicit-any\n\n  error.code = code.toUpperCase();\n  return error;\n}\n/**\r\n * Used to test for integer-looking strings\r\n */\n\n\nvar INTEGER_REGEXP_ = new RegExp('^-?(0*)\\\\d{1,10}$');\n/**\r\n * For use in keys, the minimum possible 32-bit integer.\r\n */\n\nvar INTEGER_32_MIN = -2147483648;\n/**\r\n * For use in kyes, the maximum possible 32-bit integer.\r\n */\n\nvar INTEGER_32_MAX = 2147483647;\n/**\r\n * If the string contains a 32-bit integer, return it.  Else return null.\r\n */\n\nvar tryParseInt = function (str) {\n  if (INTEGER_REGEXP_.test(str)) {\n    var intVal = Number(str);\n\n    if (intVal >= INTEGER_32_MIN && intVal <= INTEGER_32_MAX) {\n      return intVal;\n    }\n  }\n\n  return null;\n};\n/**\r\n * Helper to run some code but catch any exceptions and re-throw them later.\r\n * Useful for preventing user callbacks from breaking internal code.\r\n *\r\n * Re-throwing the exception from a setTimeout is a little evil, but it's very\r\n * convenient (we don't have to try to figure out when is a safe point to\r\n * re-throw it), and the behavior seems reasonable:\r\n *\r\n * * If you aren't pausing on exceptions, you get an error in the console with\r\n *   the correct stack trace.\r\n * * If you're pausing on all exceptions, the debugger will pause on your\r\n *   exception and then again when we rethrow it.\r\n * * If you're only pausing on uncaught exceptions, the debugger will only pause\r\n *   on us re-throwing it.\r\n *\r\n * @param fn - The code to guard.\r\n */\n\n\nvar exceptionGuard = function (fn) {\n  try {\n    fn();\n  } catch (e) {\n    // Re-throw exception when it's safe.\n    setTimeout(function () {\n      // It used to be that \"throw e\" would result in a good console error with\n      // relevant context, but as of Chrome 39, you just get the firebase.js\n      // file/line number where we re-throw it, which is useless. So we log\n      // e.stack explicitly.\n      var stack = e.stack || '';\n      warn('Exception was thrown by user callback.', stack);\n      throw e;\n    }, Math.floor(0));\n  }\n};\n/**\r\n * @returns {boolean} true if we think we're currently being crawled.\r\n */\n\n\nvar beingCrawled = function () {\n  var userAgent = typeof window === 'object' && window['navigator'] && window['navigator']['userAgent'] || ''; // For now we whitelist the most popular crawlers.  We should refine this to be the set of crawlers we\n  // believe to support JavaScript/AJAX rendering.\n  // NOTE: Google Webmaster Tools doesn't really belong, but their \"This is how a visitor to your website\n  // would have seen the page\" is flaky if we don't treat it as a crawler.\n\n  return userAgent.search(/googlebot|google webmaster tools|bingbot|yahoo! slurp|baiduspider|yandexbot|duckduckbot/i) >= 0;\n};\n/**\r\n * Same as setTimeout() except on Node.JS it will /not/ prevent the process from exiting.\r\n *\r\n * It is removed with clearTimeout() as normal.\r\n *\r\n * @param fn - Function to run.\r\n * @param time - Milliseconds to wait before running.\r\n * @returns The setTimeout() return value.\r\n */\n\n\nvar setTimeoutNonBlocking = function (fn, time) {\n  var timeout = setTimeout(fn, time); // eslint-disable-next-line @typescript-eslint/no-explicit-any\n\n  if (typeof timeout === 'object' && timeout['unref']) {\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    timeout['unref']();\n  }\n\n  return timeout;\n};\n/**\r\n * @license\r\n * Copyright 2021 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\n/**\r\n * Abstraction around AppCheck's token fetching capabilities.\r\n */\n\n\nvar AppCheckTokenProvider =\n/** @class */\nfunction () {\n  function AppCheckTokenProvider(appName_, appCheckProvider) {\n    var _this = this;\n\n    this.appName_ = appName_;\n    this.appCheckProvider = appCheckProvider;\n    this.appCheck = appCheckProvider === null || appCheckProvider === void 0 ? void 0 : appCheckProvider.getImmediate({\n      optional: true\n    });\n\n    if (!this.appCheck) {\n      appCheckProvider === null || appCheckProvider === void 0 ? void 0 : appCheckProvider.get().then(function (appCheck) {\n        return _this.appCheck = appCheck;\n      });\n    }\n  }\n\n  AppCheckTokenProvider.prototype.getToken = function (forceRefresh) {\n    var _this = this;\n\n    if (!this.appCheck) {\n      return new Promise(function (resolve, reject) {\n        // Support delayed initialization of FirebaseAppCheck. This allows our\n        // customers to initialize the RTDB SDK before initializing Firebase\n        // AppCheck and ensures that all requests are authenticated if a token\n        // becomes available before the timoeout below expires.\n        setTimeout(function () {\n          if (_this.appCheck) {\n            _this.getToken(forceRefresh).then(resolve, reject);\n          } else {\n            resolve(null);\n          }\n        }, 0);\n      });\n    }\n\n    return this.appCheck.getToken(forceRefresh);\n  };\n\n  AppCheckTokenProvider.prototype.addTokenChangeListener = function (listener) {\n    var _a;\n\n    (_a = this.appCheckProvider) === null || _a === void 0 ? void 0 : _a.get().then(function (appCheck) {\n      return appCheck.addTokenListener(listener);\n    });\n  };\n\n  AppCheckTokenProvider.prototype.notifyForInvalidToken = function () {\n    warn(\"Provided AppCheck credentials for the app named \\\"\" + this.appName_ + \"\\\" \" + 'are invalid. This usually indicates your app was not initialized correctly.');\n  };\n\n  return AppCheckTokenProvider;\n}();\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\n/**\r\n * Abstraction around FirebaseApp's token fetching capabilities.\r\n */\n\n\nvar FirebaseAuthTokenProvider =\n/** @class */\nfunction () {\n  function FirebaseAuthTokenProvider(appName_, firebaseOptions_, authProvider_) {\n    var _this = this;\n\n    this.appName_ = appName_;\n    this.firebaseOptions_ = firebaseOptions_;\n    this.authProvider_ = authProvider_;\n    this.auth_ = null;\n    this.auth_ = authProvider_.getImmediate({\n      optional: true\n    });\n\n    if (!this.auth_) {\n      authProvider_.onInit(function (auth) {\n        return _this.auth_ = auth;\n      });\n    }\n  }\n\n  FirebaseAuthTokenProvider.prototype.getToken = function (forceRefresh) {\n    var _this = this;\n\n    if (!this.auth_) {\n      return new Promise(function (resolve, reject) {\n        // Support delayed initialization of FirebaseAuth. This allows our\n        // customers to initialize the RTDB SDK before initializing Firebase\n        // Auth and ensures that all requests are authenticated if a token\n        // becomes available before the timoeout below expires.\n        setTimeout(function () {\n          if (_this.auth_) {\n            _this.getToken(forceRefresh).then(resolve, reject);\n          } else {\n            resolve(null);\n          }\n        }, 0);\n      });\n    }\n\n    return this.auth_.getToken(forceRefresh).catch(function (error) {\n      // TODO: Need to figure out all the cases this is raised and whether\n      // this makes sense.\n      if (error && error.code === 'auth/token-not-initialized') {\n        log('Got auth/token-not-initialized error.  Treating as null token.');\n        return null;\n      } else {\n        return Promise.reject(error);\n      }\n    });\n  };\n\n  FirebaseAuthTokenProvider.prototype.addTokenChangeListener = function (listener) {\n    // TODO: We might want to wrap the listener and call it with no args to\n    // avoid a leaky abstraction, but that makes removing the listener harder.\n    if (this.auth_) {\n      this.auth_.addAuthTokenListener(listener);\n    } else {\n      this.authProvider_.get().then(function (auth) {\n        return auth.addAuthTokenListener(listener);\n      });\n    }\n  };\n\n  FirebaseAuthTokenProvider.prototype.removeTokenChangeListener = function (listener) {\n    this.authProvider_.get().then(function (auth) {\n      return auth.removeAuthTokenListener(listener);\n    });\n  };\n\n  FirebaseAuthTokenProvider.prototype.notifyForInvalidToken = function () {\n    var errorMessage = 'Provided authentication credentials for the app named \"' + this.appName_ + '\" are invalid. This usually indicates your app was not ' + 'initialized correctly. ';\n\n    if ('credential' in this.firebaseOptions_) {\n      errorMessage += 'Make sure the \"credential\" property provided to initializeApp() ' + 'is authorized to access the specified \"databaseURL\" and is from the correct ' + 'project.';\n    } else if ('serviceAccount' in this.firebaseOptions_) {\n      errorMessage += 'Make sure the \"serviceAccount\" property provided to initializeApp() ' + 'is authorized to access the specified \"databaseURL\" and is from the correct ' + 'project.';\n    } else {\n      errorMessage += 'Make sure the \"apiKey\" and \"databaseURL\" properties provided to ' + 'initializeApp() match the values provided for your app at ' + 'https://console.firebase.google.com/.';\n    }\n\n    warn(errorMessage);\n  };\n\n  return FirebaseAuthTokenProvider;\n}();\n/* AuthTokenProvider that supplies a constant token. Used by Admin SDK or mockUserToken with emulators. */\n\n\nvar EmulatorTokenProvider =\n/** @class */\nfunction () {\n  function EmulatorTokenProvider(accessToken) {\n    this.accessToken = accessToken;\n  }\n\n  EmulatorTokenProvider.prototype.getToken = function (forceRefresh) {\n    return Promise.resolve({\n      accessToken: this.accessToken\n    });\n  };\n\n  EmulatorTokenProvider.prototype.addTokenChangeListener = function (listener) {\n    // Invoke the listener immediately to match the behavior in Firebase Auth\n    // (see packages/auth/src/auth.js#L1807)\n    listener(this.accessToken);\n  };\n\n  EmulatorTokenProvider.prototype.removeTokenChangeListener = function (listener) {};\n\n  EmulatorTokenProvider.prototype.notifyForInvalidToken = function () {};\n  /** A string that is treated as an admin access token by the RTDB emulator. Used by Admin SDK. */\n\n\n  EmulatorTokenProvider.OWNER = 'owner';\n  return EmulatorTokenProvider;\n}();\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\n\nvar PROTOCOL_VERSION = '5';\nvar VERSION_PARAM = 'v';\nvar TRANSPORT_SESSION_PARAM = 's';\nvar REFERER_PARAM = 'r';\nvar FORGE_REF = 'f'; // Matches console.firebase.google.com, firebase-console-*.corp.google.com and\n// firebase.corp.google.com\n\nvar FORGE_DOMAIN_RE = /(console\\.firebase|firebase-console-\\w+\\.corp|firebase\\.corp)\\.google\\.com/;\nvar LAST_SESSION_PARAM = 'ls';\nvar APPLICATION_ID_PARAM = 'p';\nvar APP_CHECK_TOKEN_PARAM = 'ac';\nvar WEBSOCKET = 'websocket';\nvar LONG_POLLING = 'long_polling';\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\n/**\r\n * A class that holds metadata about a Repo object\r\n */\n\nvar RepoInfo =\n/** @class */\nfunction () {\n  /**\r\n   * @param host - Hostname portion of the url for the repo\r\n   * @param secure - Whether or not this repo is accessed over ssl\r\n   * @param namespace - The namespace represented by the repo\r\n   * @param webSocketOnly - Whether to prefer websockets over all other transports (used by Nest).\r\n   * @param nodeAdmin - Whether this instance uses Admin SDK credentials\r\n   * @param persistenceKey - Override the default session persistence storage key\r\n   */\n  function RepoInfo(host, secure, namespace, webSocketOnly, nodeAdmin, persistenceKey, includeNamespaceInQueryParams) {\n    if (nodeAdmin === void 0) {\n      nodeAdmin = false;\n    }\n\n    if (persistenceKey === void 0) {\n      persistenceKey = '';\n    }\n\n    if (includeNamespaceInQueryParams === void 0) {\n      includeNamespaceInQueryParams = false;\n    }\n\n    this.secure = secure;\n    this.namespace = namespace;\n    this.webSocketOnly = webSocketOnly;\n    this.nodeAdmin = nodeAdmin;\n    this.persistenceKey = persistenceKey;\n    this.includeNamespaceInQueryParams = includeNamespaceInQueryParams;\n    this._host = host.toLowerCase();\n    this._domain = this._host.substr(this._host.indexOf('.') + 1);\n    this.internalHost = PersistentStorage.get('host:' + host) || this._host;\n  }\n\n  RepoInfo.prototype.isCacheableHost = function () {\n    return this.internalHost.substr(0, 2) === 's-';\n  };\n\n  RepoInfo.prototype.isCustomHost = function () {\n    return this._domain !== 'firebaseio.com' && this._domain !== 'firebaseio-demo.com';\n  };\n\n  Object.defineProperty(RepoInfo.prototype, \"host\", {\n    get: function () {\n      return this._host;\n    },\n    set: function (newHost) {\n      if (newHost !== this.internalHost) {\n        this.internalHost = newHost;\n\n        if (this.isCacheableHost()) {\n          PersistentStorage.set('host:' + this._host, this.internalHost);\n        }\n      }\n    },\n    enumerable: false,\n    configurable: true\n  });\n\n  RepoInfo.prototype.toString = function () {\n    var str = this.toURLString();\n\n    if (this.persistenceKey) {\n      str += '<' + this.persistenceKey + '>';\n    }\n\n    return str;\n  };\n\n  RepoInfo.prototype.toURLString = function () {\n    var protocol = this.secure ? 'https://' : 'http://';\n    var query = this.includeNamespaceInQueryParams ? \"?ns=\" + this.namespace : '';\n    return \"\" + protocol + this.host + \"/\" + query;\n  };\n\n  return RepoInfo;\n}();\n\nfunction repoInfoNeedsQueryParam(repoInfo) {\n  return repoInfo.host !== repoInfo.internalHost || repoInfo.isCustomHost() || repoInfo.includeNamespaceInQueryParams;\n}\n/**\r\n * Returns the websocket URL for this repo\r\n * @param repoInfo - RepoInfo object\r\n * @param type - of connection\r\n * @param params - list\r\n * @returns The URL for this repo\r\n */\n\n\nfunction repoInfoConnectionURL(repoInfo, type, params) {\n  assert(typeof type === 'string', 'typeof type must == string');\n  assert(typeof params === 'object', 'typeof params must == object');\n  var connURL;\n\n  if (type === WEBSOCKET) {\n    connURL = (repoInfo.secure ? 'wss://' : 'ws://') + repoInfo.internalHost + '/.ws?';\n  } else if (type === LONG_POLLING) {\n    connURL = (repoInfo.secure ? 'https://' : 'http://') + repoInfo.internalHost + '/.lp?';\n  } else {\n    throw new Error('Unknown connection type: ' + type);\n  }\n\n  if (repoInfoNeedsQueryParam(repoInfo)) {\n    params['ns'] = repoInfo.namespace;\n  }\n\n  var pairs = [];\n  each(params, function (key, value) {\n    pairs.push(key + '=' + value);\n  });\n  return connURL + pairs.join('&');\n}\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\n/**\r\n * Tracks a collection of stats.\r\n */\n\n\nvar StatsCollection =\n/** @class */\nfunction () {\n  function StatsCollection() {\n    this.counters_ = {};\n  }\n\n  StatsCollection.prototype.incrementCounter = function (name, amount) {\n    if (amount === void 0) {\n      amount = 1;\n    }\n\n    if (!contains(this.counters_, name)) {\n      this.counters_[name] = 0;\n    }\n\n    this.counters_[name] += amount;\n  };\n\n  StatsCollection.prototype.get = function () {\n    return deepCopy(this.counters_);\n  };\n\n  return StatsCollection;\n}();\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\n\nvar collections = {};\nvar reporters = {};\n\nfunction statsManagerGetCollection(repoInfo) {\n  var hashString = repoInfo.toString();\n\n  if (!collections[hashString]) {\n    collections[hashString] = new StatsCollection();\n  }\n\n  return collections[hashString];\n}\n\nfunction statsManagerGetOrCreateReporter(repoInfo, creatorFunction) {\n  var hashString = repoInfo.toString();\n\n  if (!reporters[hashString]) {\n    reporters[hashString] = creatorFunction();\n  }\n\n  return reporters[hashString];\n}\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\n/**\r\n * This class ensures the packets from the server arrive in order\r\n * This class takes data from the server and ensures it gets passed into the callbacks in order.\r\n */\n\n\nvar PacketReceiver =\n/** @class */\nfunction () {\n  /**\r\n   * @param onMessage_\r\n   */\n  function PacketReceiver(onMessage_) {\n    this.onMessage_ = onMessage_;\n    this.pendingResponses = [];\n    this.currentResponseNum = 0;\n    this.closeAfterResponse = -1;\n    this.onClose = null;\n  }\n\n  PacketReceiver.prototype.closeAfter = function (responseNum, callback) {\n    this.closeAfterResponse = responseNum;\n    this.onClose = callback;\n\n    if (this.closeAfterResponse < this.currentResponseNum) {\n      this.onClose();\n      this.onClose = null;\n    }\n  };\n  /**\r\n   * Each message from the server comes with a response number, and an array of data. The responseNumber\r\n   * allows us to ensure that we process them in the right order, since we can't be guaranteed that all\r\n   * browsers will respond in the same order as the requests we sent\r\n   */\n\n\n  PacketReceiver.prototype.handleResponse = function (requestNum, data) {\n    var _this = this;\n\n    this.pendingResponses[requestNum] = data;\n\n    var _loop_1 = function () {\n      var toProcess = this_1.pendingResponses[this_1.currentResponseNum];\n      delete this_1.pendingResponses[this_1.currentResponseNum];\n\n      var _loop_2 = function (i) {\n        if (toProcess[i]) {\n          exceptionGuard(function () {\n            _this.onMessage_(toProcess[i]);\n          });\n        }\n      };\n\n      for (var i = 0; i < toProcess.length; ++i) {\n        _loop_2(i);\n      }\n\n      if (this_1.currentResponseNum === this_1.closeAfterResponse) {\n        if (this_1.onClose) {\n          this_1.onClose();\n          this_1.onClose = null;\n        }\n\n        return \"break\";\n      }\n\n      this_1.currentResponseNum++;\n    };\n\n    var this_1 = this;\n\n    while (this.pendingResponses[this.currentResponseNum]) {\n      var state_1 = _loop_1();\n\n      if (state_1 === \"break\") break;\n    }\n  };\n\n  return PacketReceiver;\n}();\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n// URL query parameters associated with longpolling\n\n\nvar FIREBASE_LONGPOLL_START_PARAM = 'start';\nvar FIREBASE_LONGPOLL_CLOSE_COMMAND = 'close';\nvar FIREBASE_LONGPOLL_COMMAND_CB_NAME = 'pLPCommand';\nvar FIREBASE_LONGPOLL_DATA_CB_NAME = 'pRTLPCB';\nvar FIREBASE_LONGPOLL_ID_PARAM = 'id';\nvar FIREBASE_LONGPOLL_PW_PARAM = 'pw';\nvar FIREBASE_LONGPOLL_SERIAL_PARAM = 'ser';\nvar FIREBASE_LONGPOLL_CALLBACK_ID_PARAM = 'cb';\nvar FIREBASE_LONGPOLL_SEGMENT_NUM_PARAM = 'seg';\nvar FIREBASE_LONGPOLL_SEGMENTS_IN_PACKET = 'ts';\nvar FIREBASE_LONGPOLL_DATA_PARAM = 'd';\nvar FIREBASE_LONGPOLL_DISCONN_FRAME_REQUEST_PARAM = 'dframe'; //Data size constants.\n//TODO: Perf: the maximum length actually differs from browser to browser.\n// We should check what browser we're on and set accordingly.\n\nvar MAX_URL_DATA_SIZE = 1870;\nvar SEG_HEADER_SIZE = 30; //ie: &seg=8299234&ts=982389123&d=\n\nvar MAX_PAYLOAD_SIZE = MAX_URL_DATA_SIZE - SEG_HEADER_SIZE;\n/**\r\n * Keepalive period\r\n * send a fresh request at minimum every 25 seconds. Opera has a maximum request\r\n * length of 30 seconds that we can't exceed.\r\n */\n\nvar KEEPALIVE_REQUEST_INTERVAL = 25000;\n/**\r\n * How long to wait before aborting a long-polling connection attempt.\r\n */\n\nvar LP_CONNECT_TIMEOUT = 30000;\n/**\r\n * This class manages a single long-polling connection.\r\n */\n\nvar BrowserPollConnection =\n/** @class */\nfunction () {\n  /**\r\n   * @param connId An identifier for this connection, used for logging\r\n   * @param repoInfo The info for the endpoint to send data to.\r\n   * @param applicationId The Firebase App ID for this project.\r\n   * @param appCheckToken The AppCheck token for this client.\r\n   * @param authToken The AuthToken to use for this connection.\r\n   * @param transportSessionId Optional transportSessionid if we are\r\n   * reconnecting for an existing transport session\r\n   * @param lastSessionId Optional lastSessionId if the PersistentConnection has\r\n   * already created a connection previously\r\n   */\n  function BrowserPollConnection(connId, repoInfo, applicationId, appCheckToken, authToken, transportSessionId, lastSessionId) {\n    var _this = this;\n\n    this.connId = connId;\n    this.repoInfo = repoInfo;\n    this.applicationId = applicationId;\n    this.appCheckToken = appCheckToken;\n    this.authToken = authToken;\n    this.transportSessionId = transportSessionId;\n    this.lastSessionId = lastSessionId;\n    this.bytesSent = 0;\n    this.bytesReceived = 0;\n    this.everConnected_ = false;\n    this.log_ = logWrapper(connId);\n    this.stats_ = statsManagerGetCollection(repoInfo);\n\n    this.urlFn = function (params) {\n      // Always add the token if we have one.\n      if (_this.appCheckToken) {\n        params[APP_CHECK_TOKEN_PARAM] = _this.appCheckToken;\n      }\n\n      return repoInfoConnectionURL(repoInfo, LONG_POLLING, params);\n    };\n  }\n  /**\r\n   * @param onMessage - Callback when messages arrive\r\n   * @param onDisconnect - Callback with connection lost.\r\n   */\n\n\n  BrowserPollConnection.prototype.open = function (onMessage, onDisconnect) {\n    var _this = this;\n\n    this.curSegmentNum = 0;\n    this.onDisconnect_ = onDisconnect;\n    this.myPacketOrderer = new PacketReceiver(onMessage);\n    this.isClosed_ = false;\n    this.connectTimeoutTimer_ = setTimeout(function () {\n      _this.log_('Timed out trying to connect.'); // Make sure we clear the host cache\n\n\n      _this.onClosed_();\n\n      _this.connectTimeoutTimer_ = null; // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    }, Math.floor(LP_CONNECT_TIMEOUT)); // Ensure we delay the creation of the iframe until the DOM is loaded.\n\n    executeWhenDOMReady(function () {\n      if (_this.isClosed_) {\n        return;\n      } //Set up a callback that gets triggered once a connection is set up.\n\n\n      _this.scriptTagHolder = new FirebaseIFrameScriptHolder(function () {\n        var args = [];\n\n        for (var _i = 0; _i < arguments.length; _i++) {\n          args[_i] = arguments[_i];\n        }\n\n        var _a = __read(args, 5),\n            command = _a[0],\n            arg1 = _a[1],\n            arg2 = _a[2];\n\n        _a[3];\n        _a[4];\n\n        _this.incrementIncomingBytes_(args);\n\n        if (!_this.scriptTagHolder) {\n          return; // we closed the connection.\n        }\n\n        if (_this.connectTimeoutTimer_) {\n          clearTimeout(_this.connectTimeoutTimer_);\n          _this.connectTimeoutTimer_ = null;\n        }\n\n        _this.everConnected_ = true;\n\n        if (command === FIREBASE_LONGPOLL_START_PARAM) {\n          _this.id = arg1;\n          _this.password = arg2;\n        } else if (command === FIREBASE_LONGPOLL_CLOSE_COMMAND) {\n          // Don't clear the host cache. We got a response from the server, so we know it's reachable\n          if (arg1) {\n            // We aren't expecting any more data (other than what the server's already in the process of sending us\n            // through our already open polls), so don't send any more.\n            _this.scriptTagHolder.sendNewPolls = false; // arg1 in this case is the last response number sent by the server. We should try to receive\n            // all of the responses up to this one before closing\n\n            _this.myPacketOrderer.closeAfter(arg1, function () {\n              _this.onClosed_();\n            });\n          } else {\n            _this.onClosed_();\n          }\n        } else {\n          throw new Error('Unrecognized command received: ' + command);\n        }\n      }, function () {\n        var args = [];\n\n        for (var _i = 0; _i < arguments.length; _i++) {\n          args[_i] = arguments[_i];\n        }\n\n        var _a = __read(args, 2),\n            pN = _a[0],\n            data = _a[1];\n\n        _this.incrementIncomingBytes_(args);\n\n        _this.myPacketOrderer.handleResponse(pN, data);\n      }, function () {\n        _this.onClosed_();\n      }, _this.urlFn); //Send the initial request to connect. The serial number is simply to keep the browser from pulling previous results\n      //from cache.\n\n      var urlParams = {};\n      urlParams[FIREBASE_LONGPOLL_START_PARAM] = 't';\n      urlParams[FIREBASE_LONGPOLL_SERIAL_PARAM] = Math.floor(Math.random() * 100000000);\n\n      if (_this.scriptTagHolder.uniqueCallbackIdentifier) {\n        urlParams[FIREBASE_LONGPOLL_CALLBACK_ID_PARAM] = _this.scriptTagHolder.uniqueCallbackIdentifier;\n      }\n\n      urlParams[VERSION_PARAM] = PROTOCOL_VERSION;\n\n      if (_this.transportSessionId) {\n        urlParams[TRANSPORT_SESSION_PARAM] = _this.transportSessionId;\n      }\n\n      if (_this.lastSessionId) {\n        urlParams[LAST_SESSION_PARAM] = _this.lastSessionId;\n      }\n\n      if (_this.applicationId) {\n        urlParams[APPLICATION_ID_PARAM] = _this.applicationId;\n      }\n\n      if (_this.appCheckToken) {\n        urlParams[APP_CHECK_TOKEN_PARAM] = _this.appCheckToken;\n      }\n\n      if (typeof location !== 'undefined' && location.hostname && FORGE_DOMAIN_RE.test(location.hostname)) {\n        urlParams[REFERER_PARAM] = FORGE_REF;\n      }\n\n      var connectURL = _this.urlFn(urlParams);\n\n      _this.log_('Connecting via long-poll to ' + connectURL);\n\n      _this.scriptTagHolder.addTag(connectURL, function () {\n        /* do nothing */\n      });\n    });\n  };\n  /**\r\n   * Call this when a handshake has completed successfully and we want to consider the connection established\r\n   */\n\n\n  BrowserPollConnection.prototype.start = function () {\n    this.scriptTagHolder.startLongPoll(this.id, this.password);\n    this.addDisconnectPingFrame(this.id, this.password);\n  };\n  /**\r\n   * Forces long polling to be considered as a potential transport\r\n   */\n\n\n  BrowserPollConnection.forceAllow = function () {\n    BrowserPollConnection.forceAllow_ = true;\n  };\n  /**\r\n   * Forces longpolling to not be considered as a potential transport\r\n   */\n\n\n  BrowserPollConnection.forceDisallow = function () {\n    BrowserPollConnection.forceDisallow_ = true;\n  }; // Static method, use string literal so it can be accessed in a generic way\n\n\n  BrowserPollConnection.isAvailable = function () {\n    if (isNodeSdk()) {\n      return false;\n    } else if (BrowserPollConnection.forceAllow_) {\n      return true;\n    } else {\n      // NOTE: In React-Native there's normally no 'document', but if you debug a React-Native app in\n      // the Chrome debugger, 'document' is defined, but document.createElement is null (2015/06/08).\n      return !BrowserPollConnection.forceDisallow_ && typeof document !== 'undefined' && document.createElement != null && !isChromeExtensionContentScript() && !isWindowsStoreApp();\n    }\n  };\n  /**\r\n   * No-op for polling\r\n   */\n\n\n  BrowserPollConnection.prototype.markConnectionHealthy = function () {};\n  /**\r\n   * Stops polling and cleans up the iframe\r\n   */\n\n\n  BrowserPollConnection.prototype.shutdown_ = function () {\n    this.isClosed_ = true;\n\n    if (this.scriptTagHolder) {\n      this.scriptTagHolder.close();\n      this.scriptTagHolder = null;\n    } //remove the disconnect frame, which will trigger an XHR call to the server to tell it we're leaving.\n\n\n    if (this.myDisconnFrame) {\n      document.body.removeChild(this.myDisconnFrame);\n      this.myDisconnFrame = null;\n    }\n\n    if (this.connectTimeoutTimer_) {\n      clearTimeout(this.connectTimeoutTimer_);\n      this.connectTimeoutTimer_ = null;\n    }\n  };\n  /**\r\n   * Triggered when this transport is closed\r\n   */\n\n\n  BrowserPollConnection.prototype.onClosed_ = function () {\n    if (!this.isClosed_) {\n      this.log_('Longpoll is closing itself');\n      this.shutdown_();\n\n      if (this.onDisconnect_) {\n        this.onDisconnect_(this.everConnected_);\n        this.onDisconnect_ = null;\n      }\n    }\n  };\n  /**\r\n   * External-facing close handler. RealTime has requested we shut down. Kill our connection and tell the server\r\n   * that we've left.\r\n   */\n\n\n  BrowserPollConnection.prototype.close = function () {\n    if (!this.isClosed_) {\n      this.log_('Longpoll is being closed.');\n      this.shutdown_();\n    }\n  };\n  /**\r\n   * Send the JSON object down to the server. It will need to be stringified, base64 encoded, and then\r\n   * broken into chunks (since URLs have a small maximum length).\r\n   * @param data - The JSON data to transmit.\r\n   */\n\n\n  BrowserPollConnection.prototype.send = function (data) {\n    var dataStr = stringify(data);\n    this.bytesSent += dataStr.length;\n    this.stats_.incrementCounter('bytes_sent', dataStr.length); //first, lets get the base64-encoded data\n\n    var base64data = base64Encode(dataStr); //We can only fit a certain amount in each URL, so we need to split this request\n    //up into multiple pieces if it doesn't fit in one request.\n\n    var dataSegs = splitStringBySize(base64data, MAX_PAYLOAD_SIZE); //Enqueue each segment for transmission. We assign each chunk a sequential ID and a total number\n    //of segments so that we can reassemble the packet on the server.\n\n    for (var i = 0; i < dataSegs.length; i++) {\n      this.scriptTagHolder.enqueueSegment(this.curSegmentNum, dataSegs.length, dataSegs[i]);\n      this.curSegmentNum++;\n    }\n  };\n  /**\r\n   * This is how we notify the server that we're leaving.\r\n   * We aren't able to send requests with DHTML on a window close event, but we can\r\n   * trigger XHR requests in some browsers (everything but Opera basically).\r\n   */\n\n\n  BrowserPollConnection.prototype.addDisconnectPingFrame = function (id, pw) {\n    if (isNodeSdk()) {\n      return;\n    }\n\n    this.myDisconnFrame = document.createElement('iframe');\n    var urlParams = {};\n    urlParams[FIREBASE_LONGPOLL_DISCONN_FRAME_REQUEST_PARAM] = 't';\n    urlParams[FIREBASE_LONGPOLL_ID_PARAM] = id;\n    urlParams[FIREBASE_LONGPOLL_PW_PARAM] = pw;\n    this.myDisconnFrame.src = this.urlFn(urlParams);\n    this.myDisconnFrame.style.display = 'none';\n    document.body.appendChild(this.myDisconnFrame);\n  };\n  /**\r\n   * Used to track the bytes received by this client\r\n   */\n\n\n  BrowserPollConnection.prototype.incrementIncomingBytes_ = function (args) {\n    // TODO: This is an annoying perf hit just to track the number of incoming bytes.  Maybe it should be opt-in.\n    var bytesReceived = stringify(args).length;\n    this.bytesReceived += bytesReceived;\n    this.stats_.incrementCounter('bytes_received', bytesReceived);\n  };\n\n  return BrowserPollConnection;\n}();\n/*********************************************************************************************\r\n * A wrapper around an iframe that is used as a long-polling script holder.\r\n *********************************************************************************************/\n\n\nvar FirebaseIFrameScriptHolder =\n/** @class */\nfunction () {\n  /**\r\n   * @param commandCB - The callback to be called when control commands are recevied from the server.\r\n   * @param onMessageCB - The callback to be triggered when responses arrive from the server.\r\n   * @param onDisconnect - The callback to be triggered when this tag holder is closed\r\n   * @param urlFn - A function that provides the URL of the endpoint to send data to.\r\n   */\n  function FirebaseIFrameScriptHolder(commandCB, onMessageCB, onDisconnect, urlFn) {\n    this.onDisconnect = onDisconnect;\n    this.urlFn = urlFn; //We maintain a count of all of the outstanding requests, because if we have too many active at once it can cause\n    //problems in some browsers.\n\n    this.outstandingRequests = new Set(); //A queue of the pending segments waiting for transmission to the server.\n\n    this.pendingSegs = []; //A serial number. We use this for two things:\n    // 1) A way to ensure the browser doesn't cache responses to polls\n    // 2) A way to make the server aware when long-polls arrive in a different order than we started them. The\n    //    server needs to release both polls in this case or it will cause problems in Opera since Opera can only execute\n    //    JSONP code in the order it was added to the iframe.\n\n    this.currentSerial = Math.floor(Math.random() * 100000000); // This gets set to false when we're \"closing down\" the connection (e.g. we're switching transports but there's still\n    // incoming data from the server that we're waiting for).\n\n    this.sendNewPolls = true;\n\n    if (!isNodeSdk()) {\n      //Each script holder registers a couple of uniquely named callbacks with the window. These are called from the\n      //iframes where we put the long-polling script tags. We have two callbacks:\n      //   1) Command Callback - Triggered for control issues, like starting a connection.\n      //   2) Message Callback - Triggered when new data arrives.\n      this.uniqueCallbackIdentifier = LUIDGenerator();\n      window[FIREBASE_LONGPOLL_COMMAND_CB_NAME + this.uniqueCallbackIdentifier] = commandCB;\n      window[FIREBASE_LONGPOLL_DATA_CB_NAME + this.uniqueCallbackIdentifier] = onMessageCB; //Create an iframe for us to add script tags to.\n\n      this.myIFrame = FirebaseIFrameScriptHolder.createIFrame_(); // Set the iframe's contents.\n\n      var script = ''; // if we set a javascript url, it's IE and we need to set the document domain. The javascript url is sufficient\n      // for ie9, but ie8 needs to do it again in the document itself.\n\n      if (this.myIFrame.src && this.myIFrame.src.substr(0, 'javascript:'.length) === 'javascript:') {\n        var currentDomain = document.domain;\n        script = '<script>document.domain=\"' + currentDomain + '\";</script>';\n      }\n\n      var iframeContents = '<html><body>' + script + '</body></html>';\n\n      try {\n        this.myIFrame.doc.open();\n        this.myIFrame.doc.write(iframeContents);\n        this.myIFrame.doc.close();\n      } catch (e) {\n        log('frame writing exception');\n\n        if (e.stack) {\n          log(e.stack);\n        }\n\n        log(e);\n      }\n    } else {\n      this.commandCB = commandCB;\n      this.onMessageCB = onMessageCB;\n    }\n  }\n  /**\r\n   * Each browser has its own funny way to handle iframes. Here we mush them all together into one object that I can\r\n   * actually use.\r\n   */\n\n\n  FirebaseIFrameScriptHolder.createIFrame_ = function () {\n    var iframe = document.createElement('iframe');\n    iframe.style.display = 'none'; // This is necessary in order to initialize the document inside the iframe\n\n    if (document.body) {\n      document.body.appendChild(iframe);\n\n      try {\n        // If document.domain has been modified in IE, this will throw an error, and we need to set the\n        // domain of the iframe's document manually. We can do this via a javascript: url as the src attribute\n        // Also note that we must do this *after* the iframe has been appended to the page. Otherwise it doesn't work.\n        var a = iframe.contentWindow.document;\n\n        if (!a) {\n          // Apologies for the log-spam, I need to do something to keep closure from optimizing out the assignment above.\n          log('No IE domain setting required');\n        }\n      } catch (e) {\n        var domain = document.domain;\n        iframe.src = \"javascript:void((function(){document.open();document.domain='\" + domain + \"';document.close();})())\";\n      }\n    } else {\n      // LongPollConnection attempts to delay initialization until the document is ready, so hopefully this\n      // never gets hit.\n      throw 'Document body has not initialized. Wait to initialize Firebase until after the document is ready.';\n    } // Get the document of the iframe in a browser-specific way.\n\n\n    if (iframe.contentDocument) {\n      iframe.doc = iframe.contentDocument; // Firefox, Opera, Safari\n    } else if (iframe.contentWindow) {\n      iframe.doc = iframe.contentWindow.document; // Internet Explorer\n      // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    } else if (iframe.document) {\n      // eslint-disable-next-line @typescript-eslint/no-explicit-any\n      iframe.doc = iframe.document; //others?\n    }\n\n    return iframe;\n  };\n  /**\r\n   * Cancel all outstanding queries and remove the frame.\r\n   */\n\n\n  FirebaseIFrameScriptHolder.prototype.close = function () {\n    var _this = this; //Mark this iframe as dead, so no new requests are sent.\n\n\n    this.alive = false;\n\n    if (this.myIFrame) {\n      //We have to actually remove all of the html inside this iframe before removing it from the\n      //window, or IE will continue loading and executing the script tags we've already added, which\n      //can lead to some errors being thrown. Setting innerHTML seems to be the easiest way to do this.\n      this.myIFrame.doc.body.innerHTML = '';\n      setTimeout(function () {\n        if (_this.myIFrame !== null) {\n          document.body.removeChild(_this.myIFrame);\n          _this.myIFrame = null;\n        }\n      }, Math.floor(0));\n    } // Protect from being called recursively.\n\n\n    var onDisconnect = this.onDisconnect;\n\n    if (onDisconnect) {\n      this.onDisconnect = null;\n      onDisconnect();\n    }\n  };\n  /**\r\n   * Actually start the long-polling session by adding the first script tag(s) to the iframe.\r\n   * @param id - The ID of this connection\r\n   * @param pw - The password for this connection\r\n   */\n\n\n  FirebaseIFrameScriptHolder.prototype.startLongPoll = function (id, pw) {\n    this.myID = id;\n    this.myPW = pw;\n    this.alive = true; //send the initial request. If there are requests queued, make sure that we transmit as many as we are currently able to.\n\n    while (this.newRequest_()) {}\n  };\n  /**\r\n   * This is called any time someone might want a script tag to be added. It adds a script tag when there aren't\r\n   * too many outstanding requests and we are still alive.\r\n   *\r\n   * If there are outstanding packet segments to send, it sends one. If there aren't, it sends a long-poll anyways if\r\n   * needed.\r\n   */\n\n\n  FirebaseIFrameScriptHolder.prototype.newRequest_ = function () {\n    // We keep one outstanding request open all the time to receive data, but if we need to send data\n    // (pendingSegs.length > 0) then we create a new request to send the data.  The server will automatically\n    // close the old request.\n    if (this.alive && this.sendNewPolls && this.outstandingRequests.size < (this.pendingSegs.length > 0 ? 2 : 1)) {\n      //construct our url\n      this.currentSerial++;\n      var urlParams = {};\n      urlParams[FIREBASE_LONGPOLL_ID_PARAM] = this.myID;\n      urlParams[FIREBASE_LONGPOLL_PW_PARAM] = this.myPW;\n      urlParams[FIREBASE_LONGPOLL_SERIAL_PARAM] = this.currentSerial;\n      var theURL = this.urlFn(urlParams); //Now add as much data as we can.\n\n      var curDataString = '';\n      var i = 0;\n\n      while (this.pendingSegs.length > 0) {\n        //first, lets see if the next segment will fit.\n        var nextSeg = this.pendingSegs[0];\n\n        if (nextSeg.d.length + SEG_HEADER_SIZE + curDataString.length <= MAX_URL_DATA_SIZE) {\n          //great, the segment will fit. Lets append it.\n          var theSeg = this.pendingSegs.shift();\n          curDataString = curDataString + '&' + FIREBASE_LONGPOLL_SEGMENT_NUM_PARAM + i + '=' + theSeg.seg + '&' + FIREBASE_LONGPOLL_SEGMENTS_IN_PACKET + i + '=' + theSeg.ts + '&' + FIREBASE_LONGPOLL_DATA_PARAM + i + '=' + theSeg.d;\n          i++;\n        } else {\n          break;\n        }\n      }\n\n      theURL = theURL + curDataString;\n      this.addLongPollTag_(theURL, this.currentSerial);\n      return true;\n    } else {\n      return false;\n    }\n  };\n  /**\r\n   * Queue a packet for transmission to the server.\r\n   * @param segnum - A sequential id for this packet segment used for reassembly\r\n   * @param totalsegs - The total number of segments in this packet\r\n   * @param data - The data for this segment.\r\n   */\n\n\n  FirebaseIFrameScriptHolder.prototype.enqueueSegment = function (segnum, totalsegs, data) {\n    //add this to the queue of segments to send.\n    this.pendingSegs.push({\n      seg: segnum,\n      ts: totalsegs,\n      d: data\n    }); //send the data immediately if there isn't already data being transmitted, unless\n    //startLongPoll hasn't been called yet.\n\n    if (this.alive) {\n      this.newRequest_();\n    }\n  };\n  /**\r\n   * Add a script tag for a regular long-poll request.\r\n   * @param url - The URL of the script tag.\r\n   * @param serial - The serial number of the request.\r\n   */\n\n\n  FirebaseIFrameScriptHolder.prototype.addLongPollTag_ = function (url, serial) {\n    var _this = this; //remember that we sent this request.\n\n\n    this.outstandingRequests.add(serial);\n\n    var doNewRequest = function () {\n      _this.outstandingRequests.delete(serial);\n\n      _this.newRequest_();\n    }; // If this request doesn't return on its own accord (by the server sending us some data), we'll\n    // create a new one after the KEEPALIVE interval to make sure we always keep a fresh request open.\n\n\n    var keepaliveTimeout = setTimeout(doNewRequest, Math.floor(KEEPALIVE_REQUEST_INTERVAL));\n\n    var readyStateCB = function () {\n      // Request completed.  Cancel the keepalive.\n      clearTimeout(keepaliveTimeout); // Trigger a new request so we can continue receiving data.\n\n      doNewRequest();\n    };\n\n    this.addTag(url, readyStateCB);\n  };\n  /**\r\n   * Add an arbitrary script tag to the iframe.\r\n   * @param url - The URL for the script tag source.\r\n   * @param loadCB - A callback to be triggered once the script has loaded.\r\n   */\n\n\n  FirebaseIFrameScriptHolder.prototype.addTag = function (url, loadCB) {\n    var _this = this;\n\n    if (isNodeSdk()) {\n      // eslint-disable-next-line @typescript-eslint/no-explicit-any\n      this.doNodeLongPoll(url, loadCB);\n    } else {\n      setTimeout(function () {\n        try {\n          // if we're already closed, don't add this poll\n          if (!_this.sendNewPolls) {\n            return;\n          }\n\n          var newScript_1 = _this.myIFrame.doc.createElement('script');\n\n          newScript_1.type = 'text/javascript';\n          newScript_1.async = true;\n          newScript_1.src = url; // eslint-disable-next-line @typescript-eslint/no-explicit-any\n\n          newScript_1.onload = newScript_1.onreadystatechange = function () {\n            // eslint-disable-next-line @typescript-eslint/no-explicit-any\n            var rstate = newScript_1.readyState;\n\n            if (!rstate || rstate === 'loaded' || rstate === 'complete') {\n              // eslint-disable-next-line @typescript-eslint/no-explicit-any\n              newScript_1.onload = newScript_1.onreadystatechange = null;\n\n              if (newScript_1.parentNode) {\n                newScript_1.parentNode.removeChild(newScript_1);\n              }\n\n              loadCB();\n            }\n          };\n\n          newScript_1.onerror = function () {\n            log('Long-poll script failed to load: ' + url);\n            _this.sendNewPolls = false;\n\n            _this.close();\n          };\n\n          _this.myIFrame.doc.body.appendChild(newScript_1);\n        } catch (e) {// TODO: we should make this error visible somehow\n        }\n      }, Math.floor(1));\n    }\n  };\n\n  return FirebaseIFrameScriptHolder;\n}();\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\n\nvar WEBSOCKET_MAX_FRAME_SIZE = 16384;\nvar WEBSOCKET_KEEPALIVE_INTERVAL = 45000;\nvar WebSocketImpl = null;\n\nif (typeof MozWebSocket !== 'undefined') {\n  WebSocketImpl = MozWebSocket;\n} else if (typeof WebSocket !== 'undefined') {\n  WebSocketImpl = WebSocket;\n}\n/**\r\n * Create a new websocket connection with the given callbacks.\r\n */\n\n\nvar WebSocketConnection =\n/** @class */\nfunction () {\n  /**\r\n   * @param connId identifier for this transport\r\n   * @param repoInfo The info for the websocket endpoint.\r\n   * @param applicationId The Firebase App ID for this project.\r\n   * @param appCheckToken The App Check Token for this client.\r\n   * @param authToken The Auth Token for this client.\r\n   * @param transportSessionId Optional transportSessionId if this is connecting\r\n   * to an existing transport session\r\n   * @param lastSessionId Optional lastSessionId if there was a previous\r\n   * connection\r\n   */\n  function WebSocketConnection(connId, repoInfo, applicationId, appCheckToken, authToken, transportSessionId, lastSessionId) {\n    this.connId = connId;\n    this.applicationId = applicationId;\n    this.appCheckToken = appCheckToken;\n    this.authToken = authToken;\n    this.keepaliveTimer = null;\n    this.frames = null;\n    this.totalFrames = 0;\n    this.bytesSent = 0;\n    this.bytesReceived = 0;\n    this.log_ = logWrapper(this.connId);\n    this.stats_ = statsManagerGetCollection(repoInfo);\n    this.connURL = WebSocketConnection.connectionURL_(repoInfo, transportSessionId, lastSessionId, appCheckToken);\n    this.nodeAdmin = repoInfo.nodeAdmin;\n  }\n  /**\r\n   * @param repoInfo - The info for the websocket endpoint.\r\n   * @param transportSessionId - Optional transportSessionId if this is connecting to an existing transport\r\n   *                                         session\r\n   * @param lastSessionId - Optional lastSessionId if there was a previous connection\r\n   * @returns connection url\r\n   */\n\n\n  WebSocketConnection.connectionURL_ = function (repoInfo, transportSessionId, lastSessionId, appCheckToken) {\n    var urlParams = {};\n    urlParams[VERSION_PARAM] = PROTOCOL_VERSION;\n\n    if (!isNodeSdk() && typeof location !== 'undefined' && location.hostname && FORGE_DOMAIN_RE.test(location.hostname)) {\n      urlParams[REFERER_PARAM] = FORGE_REF;\n    }\n\n    if (transportSessionId) {\n      urlParams[TRANSPORT_SESSION_PARAM] = transportSessionId;\n    }\n\n    if (lastSessionId) {\n      urlParams[LAST_SESSION_PARAM] = lastSessionId;\n    }\n\n    if (appCheckToken) {\n      urlParams[APP_CHECK_TOKEN_PARAM] = appCheckToken;\n    }\n\n    return repoInfoConnectionURL(repoInfo, WEBSOCKET, urlParams);\n  };\n  /**\r\n   * @param onMessage - Callback when messages arrive\r\n   * @param onDisconnect - Callback with connection lost.\r\n   */\n\n\n  WebSocketConnection.prototype.open = function (onMessage, onDisconnect) {\n    var _this = this;\n\n    this.onDisconnect = onDisconnect;\n    this.onMessage = onMessage;\n    this.log_('Websocket connecting to ' + this.connURL);\n    this.everConnected_ = false; // Assume failure until proven otherwise.\n\n    PersistentStorage.set('previous_websocket_failure', true);\n\n    try {\n      if (isNodeSdk()) {\n        var device = this.nodeAdmin ? 'AdminNode' : 'Node'; // UA Format: Firebase/<wire_protocol>/<sdk_version>/<platform>/<device>\n\n        var options = {\n          headers: {\n            'User-Agent': \"Firebase/\" + PROTOCOL_VERSION + \"/\" + SDK_VERSION + \"/\" + process.platform + \"/\" + device,\n            'X-Firebase-GMPID': this.applicationId || ''\n          }\n        }; // If using Node with admin creds, AppCheck-related checks are unnecessary.\n        // Note that we send the credentials here even if they aren't admin credentials, which is\n        // not a problem.\n        // Note that this header is just used to bypass appcheck, and the token should still be sent\n        // through the websocket connection once it is established.\n\n        if (this.authToken) {\n          options.headers['Authorization'] = \"Bearer \" + this.authToken;\n        }\n\n        if (this.appCheckToken) {\n          options.headers['X-Firebase-AppCheck'] = this.appCheckToken;\n        } // Plumb appropriate http_proxy environment variable into faye-websocket if it exists.\n\n\n        var env = process['env'];\n        var proxy = this.connURL.indexOf('wss://') === 0 ? env['HTTPS_PROXY'] || env['https_proxy'] : env['HTTP_PROXY'] || env['http_proxy'];\n\n        if (proxy) {\n          options['proxy'] = {\n            origin: proxy\n          };\n        }\n\n        this.mySock = new WebSocketImpl(this.connURL, [], options);\n      } else {\n        var options = {\n          headers: {\n            'X-Firebase-GMPID': this.applicationId || '',\n            'X-Firebase-AppCheck': this.appCheckToken || ''\n          }\n        };\n        this.mySock = new WebSocketImpl(this.connURL, [], options);\n      }\n    } catch (e) {\n      this.log_('Error instantiating WebSocket.');\n      var error = e.message || e.data;\n\n      if (error) {\n        this.log_(error);\n      }\n\n      this.onClosed_();\n      return;\n    }\n\n    this.mySock.onopen = function () {\n      _this.log_('Websocket connected.');\n\n      _this.everConnected_ = true;\n    };\n\n    this.mySock.onclose = function () {\n      _this.log_('Websocket connection was disconnected.');\n\n      _this.mySock = null;\n\n      _this.onClosed_();\n    };\n\n    this.mySock.onmessage = function (m) {\n      _this.handleIncomingFrame(m);\n    };\n\n    this.mySock.onerror = function (e) {\n      _this.log_('WebSocket error.  Closing connection.'); // eslint-disable-next-line @typescript-eslint/no-explicit-any\n\n\n      var error = e.message || e.data;\n\n      if (error) {\n        _this.log_(error);\n      }\n\n      _this.onClosed_();\n    };\n  };\n  /**\r\n   * No-op for websockets, we don't need to do anything once the connection is confirmed as open\r\n   */\n\n\n  WebSocketConnection.prototype.start = function () {};\n\n  WebSocketConnection.forceDisallow = function () {\n    WebSocketConnection.forceDisallow_ = true;\n  };\n\n  WebSocketConnection.isAvailable = function () {\n    var isOldAndroid = false;\n\n    if (typeof navigator !== 'undefined' && navigator.userAgent) {\n      var oldAndroidRegex = /Android ([0-9]{0,}\\.[0-9]{0,})/;\n      var oldAndroidMatch = navigator.userAgent.match(oldAndroidRegex);\n\n      if (oldAndroidMatch && oldAndroidMatch.length > 1) {\n        if (parseFloat(oldAndroidMatch[1]) < 4.4) {\n          isOldAndroid = true;\n        }\n      }\n    }\n\n    return !isOldAndroid && WebSocketImpl !== null && !WebSocketConnection.forceDisallow_;\n  };\n  /**\r\n   * Returns true if we previously failed to connect with this transport.\r\n   */\n\n\n  WebSocketConnection.previouslyFailed = function () {\n    // If our persistent storage is actually only in-memory storage,\n    // we default to assuming that it previously failed to be safe.\n    return PersistentStorage.isInMemoryStorage || PersistentStorage.get('previous_websocket_failure') === true;\n  };\n\n  WebSocketConnection.prototype.markConnectionHealthy = function () {\n    PersistentStorage.remove('previous_websocket_failure');\n  };\n\n  WebSocketConnection.prototype.appendFrame_ = function (data) {\n    this.frames.push(data);\n\n    if (this.frames.length === this.totalFrames) {\n      var fullMess = this.frames.join('');\n      this.frames = null;\n      var jsonMess = jsonEval(fullMess); //handle the message\n\n      this.onMessage(jsonMess);\n    }\n  };\n  /**\r\n   * @param frameCount - The number of frames we are expecting from the server\r\n   */\n\n\n  WebSocketConnection.prototype.handleNewFrameCount_ = function (frameCount) {\n    this.totalFrames = frameCount;\n    this.frames = [];\n  };\n  /**\r\n   * Attempts to parse a frame count out of some text. If it can't, assumes a value of 1\r\n   * @returns Any remaining data to be process, or null if there is none\r\n   */\n\n\n  WebSocketConnection.prototype.extractFrameCount_ = function (data) {\n    assert(this.frames === null, 'We already have a frame buffer'); // TODO: The server is only supposed to send up to 9999 frames (i.e. length <= 4), but that isn't being enforced\n    // currently.  So allowing larger frame counts (length <= 6).  See https://app.asana.com/0/search/8688598998380/8237608042508\n\n    if (data.length <= 6) {\n      var frameCount = Number(data);\n\n      if (!isNaN(frameCount)) {\n        this.handleNewFrameCount_(frameCount);\n        return null;\n      }\n    }\n\n    this.handleNewFrameCount_(1);\n    return data;\n  };\n  /**\r\n   * Process a websocket frame that has arrived from the server.\r\n   * @param mess - The frame data\r\n   */\n\n\n  WebSocketConnection.prototype.handleIncomingFrame = function (mess) {\n    if (this.mySock === null) {\n      return; // Chrome apparently delivers incoming packets even after we .close() the connection sometimes.\n    }\n\n    var data = mess['data'];\n    this.bytesReceived += data.length;\n    this.stats_.incrementCounter('bytes_received', data.length);\n    this.resetKeepAlive();\n\n    if (this.frames !== null) {\n      // we're buffering\n      this.appendFrame_(data);\n    } else {\n      // try to parse out a frame count, otherwise, assume 1 and process it\n      var remainingData = this.extractFrameCount_(data);\n\n      if (remainingData !== null) {\n        this.appendFrame_(remainingData);\n      }\n    }\n  };\n  /**\r\n   * Send a message to the server\r\n   * @param data - The JSON object to transmit\r\n   */\n\n\n  WebSocketConnection.prototype.send = function (data) {\n    this.resetKeepAlive();\n    var dataStr = stringify(data);\n    this.bytesSent += dataStr.length;\n    this.stats_.incrementCounter('bytes_sent', dataStr.length); //We can only fit a certain amount in each websocket frame, so we need to split this request\n    //up into multiple pieces if it doesn't fit in one request.\n\n    var dataSegs = splitStringBySize(dataStr, WEBSOCKET_MAX_FRAME_SIZE); //Send the length header\n\n    if (dataSegs.length > 1) {\n      this.sendString_(String(dataSegs.length));\n    } //Send the actual data in segments.\n\n\n    for (var i = 0; i < dataSegs.length; i++) {\n      this.sendString_(dataSegs[i]);\n    }\n  };\n\n  WebSocketConnection.prototype.shutdown_ = function () {\n    this.isClosed_ = true;\n\n    if (this.keepaliveTimer) {\n      clearInterval(this.keepaliveTimer);\n      this.keepaliveTimer = null;\n    }\n\n    if (this.mySock) {\n      this.mySock.close();\n      this.mySock = null;\n    }\n  };\n\n  WebSocketConnection.prototype.onClosed_ = function () {\n    if (!this.isClosed_) {\n      this.log_('WebSocket is closing itself');\n      this.shutdown_(); // since this is an internal close, trigger the close listener\n\n      if (this.onDisconnect) {\n        this.onDisconnect(this.everConnected_);\n        this.onDisconnect = null;\n      }\n    }\n  };\n  /**\r\n   * External-facing close handler.\r\n   * Close the websocket and kill the connection.\r\n   */\n\n\n  WebSocketConnection.prototype.close = function () {\n    if (!this.isClosed_) {\n      this.log_('WebSocket is being closed');\n      this.shutdown_();\n    }\n  };\n  /**\r\n   * Kill the current keepalive timer and start a new one, to ensure that it always fires N seconds after\r\n   * the last activity.\r\n   */\n\n\n  WebSocketConnection.prototype.resetKeepAlive = function () {\n    var _this = this;\n\n    clearInterval(this.keepaliveTimer);\n    this.keepaliveTimer = setInterval(function () {\n      //If there has been no websocket activity for a while, send a no-op\n      if (_this.mySock) {\n        _this.sendString_('0');\n      }\n\n      _this.resetKeepAlive(); // eslint-disable-next-line @typescript-eslint/no-explicit-any\n\n    }, Math.floor(WEBSOCKET_KEEPALIVE_INTERVAL));\n  };\n  /**\r\n   * Send a string over the websocket.\r\n   *\r\n   * @param str - String to send.\r\n   */\n\n\n  WebSocketConnection.prototype.sendString_ = function (str) {\n    // Firefox seems to sometimes throw exceptions (NS_ERROR_UNEXPECTED) from websocket .send()\n    // calls for some unknown reason.  We treat these as an error and disconnect.\n    // See https://app.asana.com/0/58926111402292/68021340250410\n    try {\n      this.mySock.send(str);\n    } catch (e) {\n      this.log_('Exception thrown from WebSocket.send():', e.message || e.data, 'Closing connection.');\n      setTimeout(this.onClosed_.bind(this), 0);\n    }\n  };\n  /**\r\n   * Number of response before we consider the connection \"healthy.\"\r\n   */\n\n\n  WebSocketConnection.responsesRequiredToBeHealthy = 2;\n  /**\r\n   * Time to wait for the connection te become healthy before giving up.\r\n   */\n\n  WebSocketConnection.healthyTimeout = 30000;\n  return WebSocketConnection;\n}();\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\n/**\r\n * Currently simplistic, this class manages what transport a Connection should use at various stages of its\r\n * lifecycle.\r\n *\r\n * It starts with longpolling in a browser, and httppolling on node. It then upgrades to websockets if\r\n * they are available.\r\n */\n\n\nvar TransportManager =\n/** @class */\nfunction () {\n  /**\r\n   * @param repoInfo - Metadata around the namespace we're connecting to\r\n   */\n  function TransportManager(repoInfo) {\n    this.initTransports_(repoInfo);\n  }\n\n  Object.defineProperty(TransportManager, \"ALL_TRANSPORTS\", {\n    get: function () {\n      return [BrowserPollConnection, WebSocketConnection];\n    },\n    enumerable: false,\n    configurable: true\n  });\n\n  TransportManager.prototype.initTransports_ = function (repoInfo) {\n    var e_1, _a;\n\n    var isWebSocketsAvailable = WebSocketConnection && WebSocketConnection['isAvailable']();\n    var isSkipPollConnection = isWebSocketsAvailable && !WebSocketConnection.previouslyFailed();\n\n    if (repoInfo.webSocketOnly) {\n      if (!isWebSocketsAvailable) {\n        warn(\"wss:// URL used, but browser isn't known to support websockets.  Trying anyway.\");\n      }\n\n      isSkipPollConnection = true;\n    }\n\n    if (isSkipPollConnection) {\n      this.transports_ = [WebSocketConnection];\n    } else {\n      var transports = this.transports_ = [];\n\n      try {\n        for (var _b = __values(TransportManager.ALL_TRANSPORTS), _c = _b.next(); !_c.done; _c = _b.next()) {\n          var transport = _c.value;\n\n          if (transport && transport['isAvailable']()) {\n            transports.push(transport);\n          }\n        }\n      } catch (e_1_1) {\n        e_1 = {\n          error: e_1_1\n        };\n      } finally {\n        try {\n          if (_c && !_c.done && (_a = _b.return)) _a.call(_b);\n        } finally {\n          if (e_1) throw e_1.error;\n        }\n      }\n    }\n  };\n  /**\r\n   * @returns The constructor for the initial transport to use\r\n   */\n\n\n  TransportManager.prototype.initialTransport = function () {\n    if (this.transports_.length > 0) {\n      return this.transports_[0];\n    } else {\n      throw new Error('No transports available');\n    }\n  };\n  /**\r\n   * @returns The constructor for the next transport, or null\r\n   */\n\n\n  TransportManager.prototype.upgradeTransport = function () {\n    if (this.transports_.length > 1) {\n      return this.transports_[1];\n    } else {\n      return null;\n    }\n  };\n\n  return TransportManager;\n}();\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n// Abort upgrade attempt if it takes longer than 60s.\n\n\nvar UPGRADE_TIMEOUT = 60000; // For some transports (WebSockets), we need to \"validate\" the transport by exchanging a few requests and responses.\n// If we haven't sent enough requests within 5s, we'll start sending noop ping requests.\n\nvar DELAY_BEFORE_SENDING_EXTRA_REQUESTS = 5000; // If the initial data sent triggers a lot of bandwidth (i.e. it's a large put or a listen for a large amount of data)\n// then we may not be able to exchange our ping/pong requests within the healthy timeout.  So if we reach the timeout\n// but we've sent/received enough bytes, we don't cancel the connection.\n\nvar BYTES_SENT_HEALTHY_OVERRIDE = 10 * 1024;\nvar BYTES_RECEIVED_HEALTHY_OVERRIDE = 100 * 1024;\nvar MESSAGE_TYPE = 't';\nvar MESSAGE_DATA = 'd';\nvar CONTROL_SHUTDOWN = 's';\nvar CONTROL_RESET = 'r';\nvar CONTROL_ERROR = 'e';\nvar CONTROL_PONG = 'o';\nvar SWITCH_ACK = 'a';\nvar END_TRANSMISSION = 'n';\nvar PING = 'p';\nvar SERVER_HELLO = 'h';\n/**\r\n * Creates a new real-time connection to the server using whichever method works\r\n * best in the current browser.\r\n */\n\nvar Connection =\n/** @class */\nfunction () {\n  /**\r\n   * @param id - an id for this connection\r\n   * @param repoInfo_ - the info for the endpoint to connect to\r\n   * @param applicationId_ - the Firebase App ID for this project\r\n   * @param appCheckToken_ - The App Check Token for this device.\r\n   * @param authToken_ - The auth token for this session.\r\n   * @param onMessage_ - the callback to be triggered when a server-push message arrives\r\n   * @param onReady_ - the callback to be triggered when this connection is ready to send messages.\r\n   * @param onDisconnect_ - the callback to be triggered when a connection was lost\r\n   * @param onKill_ - the callback to be triggered when this connection has permanently shut down.\r\n   * @param lastSessionId - last session id in persistent connection. is used to clean up old session in real-time server\r\n   */\n  function Connection(id, repoInfo_, applicationId_, appCheckToken_, authToken_, onMessage_, onReady_, onDisconnect_, onKill_, lastSessionId) {\n    this.id = id;\n    this.repoInfo_ = repoInfo_;\n    this.applicationId_ = applicationId_;\n    this.appCheckToken_ = appCheckToken_;\n    this.authToken_ = authToken_;\n    this.onMessage_ = onMessage_;\n    this.onReady_ = onReady_;\n    this.onDisconnect_ = onDisconnect_;\n    this.onKill_ = onKill_;\n    this.lastSessionId = lastSessionId;\n    this.connectionCount = 0;\n    this.pendingDataMessages = [];\n    this.state_ = 0\n    /* CONNECTING */\n    ;\n    this.log_ = logWrapper('c:' + this.id + ':');\n    this.transportManager_ = new TransportManager(repoInfo_);\n    this.log_('Connection created');\n    this.start_();\n  }\n  /**\r\n   * Starts a connection attempt\r\n   */\n\n\n  Connection.prototype.start_ = function () {\n    var _this = this;\n\n    var conn = this.transportManager_.initialTransport();\n    this.conn_ = new conn(this.nextTransportId_(), this.repoInfo_, this.applicationId_, this.appCheckToken_, this.authToken_, null, this.lastSessionId); // For certain transports (WebSockets), we need to send and receive several messages back and forth before we\n    // can consider the transport healthy.\n\n    this.primaryResponsesRequired_ = conn['responsesRequiredToBeHealthy'] || 0;\n    var onMessageReceived = this.connReceiver_(this.conn_);\n    var onConnectionLost = this.disconnReceiver_(this.conn_);\n    this.tx_ = this.conn_;\n    this.rx_ = this.conn_;\n    this.secondaryConn_ = null;\n    this.isHealthy_ = false;\n    /*\r\n     * Firefox doesn't like when code from one iframe tries to create another iframe by way of the parent frame.\r\n     * This can occur in the case of a redirect, i.e. we guessed wrong on what server to connect to and received a reset.\r\n     * Somehow, setTimeout seems to make this ok. That doesn't make sense from a security perspective, since you should\r\n     * still have the context of your originating frame.\r\n     */\n\n    setTimeout(function () {\n      // this.conn_ gets set to null in some of the tests. Check to make sure it still exists before using it\n      _this.conn_ && _this.conn_.open(onMessageReceived, onConnectionLost);\n    }, Math.floor(0));\n    var healthyTimeoutMS = conn['healthyTimeout'] || 0;\n\n    if (healthyTimeoutMS > 0) {\n      this.healthyTimeout_ = setTimeoutNonBlocking(function () {\n        _this.healthyTimeout_ = null;\n\n        if (!_this.isHealthy_) {\n          if (_this.conn_ && _this.conn_.bytesReceived > BYTES_RECEIVED_HEALTHY_OVERRIDE) {\n            _this.log_('Connection exceeded healthy timeout but has received ' + _this.conn_.bytesReceived + ' bytes.  Marking connection healthy.');\n\n            _this.isHealthy_ = true;\n\n            _this.conn_.markConnectionHealthy();\n          } else if (_this.conn_ && _this.conn_.bytesSent > BYTES_SENT_HEALTHY_OVERRIDE) {\n            _this.log_('Connection exceeded healthy timeout but has sent ' + _this.conn_.bytesSent + ' bytes.  Leaving connection alive.'); // NOTE: We don't want to mark it healthy, since we have no guarantee that the bytes have made it to\n            // the server.\n\n          } else {\n            _this.log_('Closing unhealthy connection after timeout.');\n\n            _this.close();\n          }\n        } // eslint-disable-next-line @typescript-eslint/no-explicit-any\n\n      }, Math.floor(healthyTimeoutMS));\n    }\n  };\n\n  Connection.prototype.nextTransportId_ = function () {\n    return 'c:' + this.id + ':' + this.connectionCount++;\n  };\n\n  Connection.prototype.disconnReceiver_ = function (conn) {\n    var _this = this;\n\n    return function (everConnected) {\n      if (conn === _this.conn_) {\n        _this.onConnectionLost_(everConnected);\n      } else if (conn === _this.secondaryConn_) {\n        _this.log_('Secondary connection lost.');\n\n        _this.onSecondaryConnectionLost_();\n      } else {\n        _this.log_('closing an old connection');\n      }\n    };\n  };\n\n  Connection.prototype.connReceiver_ = function (conn) {\n    var _this = this;\n\n    return function (message) {\n      if (_this.state_ !== 2\n      /* DISCONNECTED */\n      ) {\n        if (conn === _this.rx_) {\n          _this.onPrimaryMessageReceived_(message);\n        } else if (conn === _this.secondaryConn_) {\n          _this.onSecondaryMessageReceived_(message);\n        } else {\n          _this.log_('message on old connection');\n        }\n      }\n    };\n  };\n  /**\r\n   * @param dataMsg - An arbitrary data message to be sent to the server\r\n   */\n\n\n  Connection.prototype.sendRequest = function (dataMsg) {\n    // wrap in a data message envelope and send it on\n    var msg = {\n      t: 'd',\n      d: dataMsg\n    };\n    this.sendData_(msg);\n  };\n\n  Connection.prototype.tryCleanupConnection = function () {\n    if (this.tx_ === this.secondaryConn_ && this.rx_ === this.secondaryConn_) {\n      this.log_('cleaning up and promoting a connection: ' + this.secondaryConn_.connId);\n      this.conn_ = this.secondaryConn_;\n      this.secondaryConn_ = null; // the server will shutdown the old connection\n    }\n  };\n\n  Connection.prototype.onSecondaryControl_ = function (controlData) {\n    if (MESSAGE_TYPE in controlData) {\n      var cmd = controlData[MESSAGE_TYPE];\n\n      if (cmd === SWITCH_ACK) {\n        this.upgradeIfSecondaryHealthy_();\n      } else if (cmd === CONTROL_RESET) {\n        // Most likely the session wasn't valid. Abandon the switch attempt\n        this.log_('Got a reset on secondary, closing it');\n        this.secondaryConn_.close(); // If we were already using this connection for something, than we need to fully close\n\n        if (this.tx_ === this.secondaryConn_ || this.rx_ === this.secondaryConn_) {\n          this.close();\n        }\n      } else if (cmd === CONTROL_PONG) {\n        this.log_('got pong on secondary.');\n        this.secondaryResponsesRequired_--;\n        this.upgradeIfSecondaryHealthy_();\n      }\n    }\n  };\n\n  Connection.prototype.onSecondaryMessageReceived_ = function (parsedData) {\n    var layer = requireKey('t', parsedData);\n    var data = requireKey('d', parsedData);\n\n    if (layer === 'c') {\n      this.onSecondaryControl_(data);\n    } else if (layer === 'd') {\n      // got a data message, but we're still second connection. Need to buffer it up\n      this.pendingDataMessages.push(data);\n    } else {\n      throw new Error('Unknown protocol layer: ' + layer);\n    }\n  };\n\n  Connection.prototype.upgradeIfSecondaryHealthy_ = function () {\n    if (this.secondaryResponsesRequired_ <= 0) {\n      this.log_('Secondary connection is healthy.');\n      this.isHealthy_ = true;\n      this.secondaryConn_.markConnectionHealthy();\n      this.proceedWithUpgrade_();\n    } else {\n      // Send a ping to make sure the connection is healthy.\n      this.log_('sending ping on secondary.');\n      this.secondaryConn_.send({\n        t: 'c',\n        d: {\n          t: PING,\n          d: {}\n        }\n      });\n    }\n  };\n\n  Connection.prototype.proceedWithUpgrade_ = function () {\n    // tell this connection to consider itself open\n    this.secondaryConn_.start(); // send ack\n\n    this.log_('sending client ack on secondary');\n    this.secondaryConn_.send({\n      t: 'c',\n      d: {\n        t: SWITCH_ACK,\n        d: {}\n      }\n    }); // send end packet on primary transport, switch to sending on this one\n    // can receive on this one, buffer responses until end received on primary transport\n\n    this.log_('Ending transmission on primary');\n    this.conn_.send({\n      t: 'c',\n      d: {\n        t: END_TRANSMISSION,\n        d: {}\n      }\n    });\n    this.tx_ = this.secondaryConn_;\n    this.tryCleanupConnection();\n  };\n\n  Connection.prototype.onPrimaryMessageReceived_ = function (parsedData) {\n    // Must refer to parsedData properties in quotes, so closure doesn't touch them.\n    var layer = requireKey('t', parsedData);\n    var data = requireKey('d', parsedData);\n\n    if (layer === 'c') {\n      this.onControl_(data);\n    } else if (layer === 'd') {\n      this.onDataMessage_(data);\n    }\n  };\n\n  Connection.prototype.onDataMessage_ = function (message) {\n    this.onPrimaryResponse_(); // We don't do anything with data messages, just kick them up a level\n\n    this.onMessage_(message);\n  };\n\n  Connection.prototype.onPrimaryResponse_ = function () {\n    if (!this.isHealthy_) {\n      this.primaryResponsesRequired_--;\n\n      if (this.primaryResponsesRequired_ <= 0) {\n        this.log_('Primary connection is healthy.');\n        this.isHealthy_ = true;\n        this.conn_.markConnectionHealthy();\n      }\n    }\n  };\n\n  Connection.prototype.onControl_ = function (controlData) {\n    var cmd = requireKey(MESSAGE_TYPE, controlData);\n\n    if (MESSAGE_DATA in controlData) {\n      var payload = controlData[MESSAGE_DATA];\n\n      if (cmd === SERVER_HELLO) {\n        this.onHandshake_(payload);\n      } else if (cmd === END_TRANSMISSION) {\n        this.log_('recvd end transmission on primary');\n        this.rx_ = this.secondaryConn_;\n\n        for (var i = 0; i < this.pendingDataMessages.length; ++i) {\n          this.onDataMessage_(this.pendingDataMessages[i]);\n        }\n\n        this.pendingDataMessages = [];\n        this.tryCleanupConnection();\n      } else if (cmd === CONTROL_SHUTDOWN) {\n        // This was previously the 'onKill' callback passed to the lower-level connection\n        // payload in this case is the reason for the shutdown. Generally a human-readable error\n        this.onConnectionShutdown_(payload);\n      } else if (cmd === CONTROL_RESET) {\n        // payload in this case is the host we should contact\n        this.onReset_(payload);\n      } else if (cmd === CONTROL_ERROR) {\n        error('Server Error: ' + payload);\n      } else if (cmd === CONTROL_PONG) {\n        this.log_('got pong on primary.');\n        this.onPrimaryResponse_();\n        this.sendPingOnPrimaryIfNecessary_();\n      } else {\n        error('Unknown control packet command: ' + cmd);\n      }\n    }\n  };\n  /**\r\n   * @param handshake - The handshake data returned from the server\r\n   */\n\n\n  Connection.prototype.onHandshake_ = function (handshake) {\n    var timestamp = handshake.ts;\n    var version = handshake.v;\n    var host = handshake.h;\n    this.sessionId = handshake.s;\n    this.repoInfo_.host = host; // if we've already closed the connection, then don't bother trying to progress further\n\n    if (this.state_ === 0\n    /* CONNECTING */\n    ) {\n      this.conn_.start();\n      this.onConnectionEstablished_(this.conn_, timestamp);\n\n      if (PROTOCOL_VERSION !== version) {\n        warn('Protocol version mismatch detected');\n      } // TODO: do we want to upgrade? when? maybe a delay?\n\n\n      this.tryStartUpgrade_();\n    }\n  };\n\n  Connection.prototype.tryStartUpgrade_ = function () {\n    var conn = this.transportManager_.upgradeTransport();\n\n    if (conn) {\n      this.startUpgrade_(conn);\n    }\n  };\n\n  Connection.prototype.startUpgrade_ = function (conn) {\n    var _this = this;\n\n    this.secondaryConn_ = new conn(this.nextTransportId_(), this.repoInfo_, this.applicationId_, this.appCheckToken_, this.authToken_, this.sessionId); // For certain transports (WebSockets), we need to send and receive several messages back and forth before we\n    // can consider the transport healthy.\n\n    this.secondaryResponsesRequired_ = conn['responsesRequiredToBeHealthy'] || 0;\n    var onMessage = this.connReceiver_(this.secondaryConn_);\n    var onDisconnect = this.disconnReceiver_(this.secondaryConn_);\n    this.secondaryConn_.open(onMessage, onDisconnect); // If we haven't successfully upgraded after UPGRADE_TIMEOUT, give up and kill the secondary.\n\n    setTimeoutNonBlocking(function () {\n      if (_this.secondaryConn_) {\n        _this.log_('Timed out trying to upgrade.');\n\n        _this.secondaryConn_.close();\n      }\n    }, Math.floor(UPGRADE_TIMEOUT));\n  };\n\n  Connection.prototype.onReset_ = function (host) {\n    this.log_('Reset packet received.  New host: ' + host);\n    this.repoInfo_.host = host; // TODO: if we're already \"connected\", we need to trigger a disconnect at the next layer up.\n    // We don't currently support resets after the connection has already been established\n\n    if (this.state_ === 1\n    /* CONNECTED */\n    ) {\n      this.close();\n    } else {\n      // Close whatever connections we have open and start again.\n      this.closeConnections_();\n      this.start_();\n    }\n  };\n\n  Connection.prototype.onConnectionEstablished_ = function (conn, timestamp) {\n    var _this = this;\n\n    this.log_('Realtime connection established.');\n    this.conn_ = conn;\n    this.state_ = 1\n    /* CONNECTED */\n    ;\n\n    if (this.onReady_) {\n      this.onReady_(timestamp, this.sessionId);\n      this.onReady_ = null;\n    } // If after 5 seconds we haven't sent enough requests to the server to get the connection healthy,\n    // send some pings.\n\n\n    if (this.primaryResponsesRequired_ === 0) {\n      this.log_('Primary connection is healthy.');\n      this.isHealthy_ = true;\n    } else {\n      setTimeoutNonBlocking(function () {\n        _this.sendPingOnPrimaryIfNecessary_();\n      }, Math.floor(DELAY_BEFORE_SENDING_EXTRA_REQUESTS));\n    }\n  };\n\n  Connection.prototype.sendPingOnPrimaryIfNecessary_ = function () {\n    // If the connection isn't considered healthy yet, we'll send a noop ping packet request.\n    if (!this.isHealthy_ && this.state_ === 1\n    /* CONNECTED */\n    ) {\n      this.log_('sending ping on primary.');\n      this.sendData_({\n        t: 'c',\n        d: {\n          t: PING,\n          d: {}\n        }\n      });\n    }\n  };\n\n  Connection.prototype.onSecondaryConnectionLost_ = function () {\n    var conn = this.secondaryConn_;\n    this.secondaryConn_ = null;\n\n    if (this.tx_ === conn || this.rx_ === conn) {\n      // we are relying on this connection already in some capacity. Therefore, a failure is real\n      this.close();\n    }\n  };\n  /**\r\n   * @param everConnected - Whether or not the connection ever reached a server. Used to determine if\r\n   * we should flush the host cache\r\n   */\n\n\n  Connection.prototype.onConnectionLost_ = function (everConnected) {\n    this.conn_ = null; // NOTE: IF you're seeing a Firefox error for this line, I think it might be because it's getting\n    // called on window close and RealtimeState.CONNECTING is no longer defined.  Just a guess.\n\n    if (!everConnected && this.state_ === 0\n    /* CONNECTING */\n    ) {\n      this.log_('Realtime connection failed.'); // Since we failed to connect at all, clear any cached entry for this namespace in case the machine went away\n\n      if (this.repoInfo_.isCacheableHost()) {\n        PersistentStorage.remove('host:' + this.repoInfo_.host); // reset the internal host to what we would show the user, i.e. <ns>.firebaseio.com\n\n        this.repoInfo_.internalHost = this.repoInfo_.host;\n      }\n    } else if (this.state_ === 1\n    /* CONNECTED */\n    ) {\n      this.log_('Realtime connection lost.');\n    }\n\n    this.close();\n  };\n\n  Connection.prototype.onConnectionShutdown_ = function (reason) {\n    this.log_('Connection shutdown command received. Shutting down...');\n\n    if (this.onKill_) {\n      this.onKill_(reason);\n      this.onKill_ = null;\n    } // We intentionally don't want to fire onDisconnect (kill is a different case),\n    // so clear the callback.\n\n\n    this.onDisconnect_ = null;\n    this.close();\n  };\n\n  Connection.prototype.sendData_ = function (data) {\n    if (this.state_ !== 1\n    /* CONNECTED */\n    ) {\n      throw 'Connection is not connected';\n    } else {\n      this.tx_.send(data);\n    }\n  };\n  /**\r\n   * Cleans up this connection, calling the appropriate callbacks\r\n   */\n\n\n  Connection.prototype.close = function () {\n    if (this.state_ !== 2\n    /* DISCONNECTED */\n    ) {\n      this.log_('Closing realtime connection.');\n      this.state_ = 2\n      /* DISCONNECTED */\n      ;\n      this.closeConnections_();\n\n      if (this.onDisconnect_) {\n        this.onDisconnect_();\n        this.onDisconnect_ = null;\n      }\n    }\n  };\n\n  Connection.prototype.closeConnections_ = function () {\n    this.log_('Shutting down all connections');\n\n    if (this.conn_) {\n      this.conn_.close();\n      this.conn_ = null;\n    }\n\n    if (this.secondaryConn_) {\n      this.secondaryConn_.close();\n      this.secondaryConn_ = null;\n    }\n\n    if (this.healthyTimeout_) {\n      clearTimeout(this.healthyTimeout_);\n      this.healthyTimeout_ = null;\n    }\n  };\n\n  return Connection;\n}();\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\n/**\r\n * Interface defining the set of actions that can be performed against the Firebase server\r\n * (basically corresponds to our wire protocol).\r\n *\r\n * @interface\r\n */\n\n\nvar ServerActions =\n/** @class */\nfunction () {\n  function ServerActions() {}\n\n  ServerActions.prototype.put = function (pathString, data, onComplete, hash) {};\n\n  ServerActions.prototype.merge = function (pathString, data, onComplete, hash) {};\n  /**\r\n   * Refreshes the auth token for the current connection.\r\n   * @param token - The authentication token\r\n   */\n\n\n  ServerActions.prototype.refreshAuthToken = function (token) {};\n  /**\r\n   * Refreshes the app check token for the current connection.\r\n   * @param token The app check token\r\n   */\n\n\n  ServerActions.prototype.refreshAppCheckToken = function (token) {};\n\n  ServerActions.prototype.onDisconnectPut = function (pathString, data, onComplete) {};\n\n  ServerActions.prototype.onDisconnectMerge = function (pathString, data, onComplete) {};\n\n  ServerActions.prototype.onDisconnectCancel = function (pathString, onComplete) {};\n\n  ServerActions.prototype.reportStats = function (stats) {};\n\n  return ServerActions;\n}();\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\n/**\r\n * Base class to be used if you want to emit events. Call the constructor with\r\n * the set of allowed event names.\r\n */\n\n\nvar EventEmitter =\n/** @class */\nfunction () {\n  function EventEmitter(allowedEvents_) {\n    this.allowedEvents_ = allowedEvents_;\n    this.listeners_ = {};\n    assert(Array.isArray(allowedEvents_) && allowedEvents_.length > 0, 'Requires a non-empty array');\n  }\n  /**\r\n   * To be called by derived classes to trigger events.\r\n   */\n\n\n  EventEmitter.prototype.trigger = function (eventType) {\n    var varArgs = [];\n\n    for (var _i = 1; _i < arguments.length; _i++) {\n      varArgs[_i - 1] = arguments[_i];\n    }\n\n    if (Array.isArray(this.listeners_[eventType])) {\n      // Clone the list, since callbacks could add/remove listeners.\n      var listeners = __spreadArray([], __read(this.listeners_[eventType]));\n\n      for (var i = 0; i < listeners.length; i++) {\n        listeners[i].callback.apply(listeners[i].context, varArgs);\n      }\n    }\n  };\n\n  EventEmitter.prototype.on = function (eventType, callback, context) {\n    this.validateEventType_(eventType);\n    this.listeners_[eventType] = this.listeners_[eventType] || [];\n    this.listeners_[eventType].push({\n      callback: callback,\n      context: context\n    });\n    var eventData = this.getInitialEvent(eventType);\n\n    if (eventData) {\n      callback.apply(context, eventData);\n    }\n  };\n\n  EventEmitter.prototype.off = function (eventType, callback, context) {\n    this.validateEventType_(eventType);\n    var listeners = this.listeners_[eventType] || [];\n\n    for (var i = 0; i < listeners.length; i++) {\n      if (listeners[i].callback === callback && (!context || context === listeners[i].context)) {\n        listeners.splice(i, 1);\n        return;\n      }\n    }\n  };\n\n  EventEmitter.prototype.validateEventType_ = function (eventType) {\n    assert(this.allowedEvents_.find(function (et) {\n      return et === eventType;\n    }), 'Unknown event: ' + eventType);\n  };\n\n  return EventEmitter;\n}();\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\n/**\r\n * Monitors online state (as reported by window.online/offline events).\r\n *\r\n * The expectation is that this could have many false positives (thinks we are online\r\n * when we're not), but no false negatives.  So we can safely use it to determine when\r\n * we definitely cannot reach the internet.\r\n */\n\n\nvar OnlineMonitor =\n/** @class */\nfunction (_super) {\n  __extends(OnlineMonitor, _super);\n\n  function OnlineMonitor() {\n    var _this = _super.call(this, ['online']) || this;\n\n    _this.online_ = true; // We've had repeated complaints that Cordova apps can get stuck \"offline\", e.g.\n    // https://forum.ionicframework.com/t/firebase-connection-is-lost-and-never-come-back/43810\n    // It would seem that the 'online' event does not always fire consistently. So we disable it\n    // for Cordova.\n\n    if (typeof window !== 'undefined' && typeof window.addEventListener !== 'undefined' && !isMobileCordova()) {\n      window.addEventListener('online', function () {\n        if (!_this.online_) {\n          _this.online_ = true;\n\n          _this.trigger('online', true);\n        }\n      }, false);\n      window.addEventListener('offline', function () {\n        if (_this.online_) {\n          _this.online_ = false;\n\n          _this.trigger('online', false);\n        }\n      }, false);\n    }\n\n    return _this;\n  }\n\n  OnlineMonitor.getInstance = function () {\n    return new OnlineMonitor();\n  };\n\n  OnlineMonitor.prototype.getInitialEvent = function (eventType) {\n    assert(eventType === 'online', 'Unknown event type: ' + eventType);\n    return [this.online_];\n  };\n\n  OnlineMonitor.prototype.currentlyOnline = function () {\n    return this.online_;\n  };\n\n  return OnlineMonitor;\n}(EventEmitter);\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\n/** Maximum key depth. */\n\n\nvar MAX_PATH_DEPTH = 32;\n/** Maximum number of (UTF8) bytes in a Firebase path. */\n\nvar MAX_PATH_LENGTH_BYTES = 768;\n/**\r\n * An immutable object representing a parsed path.  It's immutable so that you\r\n * can pass them around to other functions without worrying about them changing\r\n * it.\r\n */\n\nvar Path =\n/** @class */\nfunction () {\n  /**\r\n   * @param pathOrString - Path string to parse, or another path, or the raw\r\n   * tokens array\r\n   */\n  function Path(pathOrString, pieceNum) {\n    if (pieceNum === void 0) {\n      this.pieces_ = pathOrString.split('/'); // Remove empty pieces.\n\n      var copyTo = 0;\n\n      for (var i = 0; i < this.pieces_.length; i++) {\n        if (this.pieces_[i].length > 0) {\n          this.pieces_[copyTo] = this.pieces_[i];\n          copyTo++;\n        }\n      }\n\n      this.pieces_.length = copyTo;\n      this.pieceNum_ = 0;\n    } else {\n      this.pieces_ = pathOrString;\n      this.pieceNum_ = pieceNum;\n    }\n  }\n\n  Path.prototype.toString = function () {\n    var pathString = '';\n\n    for (var i = this.pieceNum_; i < this.pieces_.length; i++) {\n      if (this.pieces_[i] !== '') {\n        pathString += '/' + this.pieces_[i];\n      }\n    }\n\n    return pathString || '/';\n  };\n\n  return Path;\n}();\n\nfunction newEmptyPath() {\n  return new Path('');\n}\n\nfunction pathGetFront(path) {\n  if (path.pieceNum_ >= path.pieces_.length) {\n    return null;\n  }\n\n  return path.pieces_[path.pieceNum_];\n}\n/**\r\n * @returns The number of segments in this path\r\n */\n\n\nfunction pathGetLength(path) {\n  return path.pieces_.length - path.pieceNum_;\n}\n\nfunction pathPopFront(path) {\n  var pieceNum = path.pieceNum_;\n\n  if (pieceNum < path.pieces_.length) {\n    pieceNum++;\n  }\n\n  return new Path(path.pieces_, pieceNum);\n}\n\nfunction pathGetBack(path) {\n  if (path.pieceNum_ < path.pieces_.length) {\n    return path.pieces_[path.pieces_.length - 1];\n  }\n\n  return null;\n}\n\nfunction pathToUrlEncodedString(path) {\n  var pathString = '';\n\n  for (var i = path.pieceNum_; i < path.pieces_.length; i++) {\n    if (path.pieces_[i] !== '') {\n      pathString += '/' + encodeURIComponent(String(path.pieces_[i]));\n    }\n  }\n\n  return pathString || '/';\n}\n/**\r\n * Shallow copy of the parts of the path.\r\n *\r\n */\n\n\nfunction pathSlice(path, begin) {\n  if (begin === void 0) {\n    begin = 0;\n  }\n\n  return path.pieces_.slice(path.pieceNum_ + begin);\n}\n\nfunction pathParent(path) {\n  if (path.pieceNum_ >= path.pieces_.length) {\n    return null;\n  }\n\n  var pieces = [];\n\n  for (var i = path.pieceNum_; i < path.pieces_.length - 1; i++) {\n    pieces.push(path.pieces_[i]);\n  }\n\n  return new Path(pieces, 0);\n}\n\nfunction pathChild(path, childPathObj) {\n  var pieces = [];\n\n  for (var i = path.pieceNum_; i < path.pieces_.length; i++) {\n    pieces.push(path.pieces_[i]);\n  }\n\n  if (childPathObj instanceof Path) {\n    for (var i = childPathObj.pieceNum_; i < childPathObj.pieces_.length; i++) {\n      pieces.push(childPathObj.pieces_[i]);\n    }\n  } else {\n    var childPieces = childPathObj.split('/');\n\n    for (var i = 0; i < childPieces.length; i++) {\n      if (childPieces[i].length > 0) {\n        pieces.push(childPieces[i]);\n      }\n    }\n  }\n\n  return new Path(pieces, 0);\n}\n/**\r\n * @returns True if there are no segments in this path\r\n */\n\n\nfunction pathIsEmpty(path) {\n  return path.pieceNum_ >= path.pieces_.length;\n}\n/**\r\n * @returns The path from outerPath to innerPath\r\n */\n\n\nfunction newRelativePath(outerPath, innerPath) {\n  var outer = pathGetFront(outerPath),\n      inner = pathGetFront(innerPath);\n\n  if (outer === null) {\n    return innerPath;\n  } else if (outer === inner) {\n    return newRelativePath(pathPopFront(outerPath), pathPopFront(innerPath));\n  } else {\n    throw new Error('INTERNAL ERROR: innerPath (' + innerPath + ') is not within ' + 'outerPath (' + outerPath + ')');\n  }\n}\n/**\r\n * @returns -1, 0, 1 if left is less, equal, or greater than the right.\r\n */\n\n\nfunction pathCompare(left, right) {\n  var leftKeys = pathSlice(left, 0);\n  var rightKeys = pathSlice(right, 0);\n\n  for (var i = 0; i < leftKeys.length && i < rightKeys.length; i++) {\n    var cmp = nameCompare(leftKeys[i], rightKeys[i]);\n\n    if (cmp !== 0) {\n      return cmp;\n    }\n  }\n\n  if (leftKeys.length === rightKeys.length) {\n    return 0;\n  }\n\n  return leftKeys.length < rightKeys.length ? -1 : 1;\n}\n/**\r\n * @returns true if paths are the same.\r\n */\n\n\nfunction pathEquals(path, other) {\n  if (pathGetLength(path) !== pathGetLength(other)) {\n    return false;\n  }\n\n  for (var i = path.pieceNum_, j = other.pieceNum_; i <= path.pieces_.length; i++, j++) {\n    if (path.pieces_[i] !== other.pieces_[j]) {\n      return false;\n    }\n  }\n\n  return true;\n}\n/**\r\n * @returns True if this path is a parent (or the same as) other\r\n */\n\n\nfunction pathContains(path, other) {\n  var i = path.pieceNum_;\n  var j = other.pieceNum_;\n\n  if (pathGetLength(path) > pathGetLength(other)) {\n    return false;\n  }\n\n  while (i < path.pieces_.length) {\n    if (path.pieces_[i] !== other.pieces_[j]) {\n      return false;\n    }\n\n    ++i;\n    ++j;\n  }\n\n  return true;\n}\n/**\r\n * Dynamic (mutable) path used to count path lengths.\r\n *\r\n * This class is used to efficiently check paths for valid\r\n * length (in UTF8 bytes) and depth (used in path validation).\r\n *\r\n * Throws Error exception if path is ever invalid.\r\n *\r\n * The definition of a path always begins with '/'.\r\n */\n\n\nvar ValidationPath =\n/** @class */\nfunction () {\n  /**\r\n   * @param path - Initial Path.\r\n   * @param errorPrefix_ - Prefix for any error messages.\r\n   */\n  function ValidationPath(path, errorPrefix_) {\n    this.errorPrefix_ = errorPrefix_;\n    this.parts_ = pathSlice(path, 0);\n    /** Initialize to number of '/' chars needed in path. */\n\n    this.byteLength_ = Math.max(1, this.parts_.length);\n\n    for (var i = 0; i < this.parts_.length; i++) {\n      this.byteLength_ += stringLength(this.parts_[i]);\n    }\n\n    validationPathCheckValid(this);\n  }\n\n  return ValidationPath;\n}();\n\nfunction validationPathPush(validationPath, child) {\n  // Count the needed '/'\n  if (validationPath.parts_.length > 0) {\n    validationPath.byteLength_ += 1;\n  }\n\n  validationPath.parts_.push(child);\n  validationPath.byteLength_ += stringLength(child);\n  validationPathCheckValid(validationPath);\n}\n\nfunction validationPathPop(validationPath) {\n  var last = validationPath.parts_.pop();\n  validationPath.byteLength_ -= stringLength(last); // Un-count the previous '/'\n\n  if (validationPath.parts_.length > 0) {\n    validationPath.byteLength_ -= 1;\n  }\n}\n\nfunction validationPathCheckValid(validationPath) {\n  if (validationPath.byteLength_ > MAX_PATH_LENGTH_BYTES) {\n    throw new Error(validationPath.errorPrefix_ + 'has a key path longer than ' + MAX_PATH_LENGTH_BYTES + ' bytes (' + validationPath.byteLength_ + ').');\n  }\n\n  if (validationPath.parts_.length > MAX_PATH_DEPTH) {\n    throw new Error(validationPath.errorPrefix_ + 'path specified exceeds the maximum depth that can be written (' + MAX_PATH_DEPTH + ') or object contains a cycle ' + validationPathToErrorString(validationPath));\n  }\n}\n/**\r\n * String for use in error messages - uses '.' notation for path.\r\n */\n\n\nfunction validationPathToErrorString(validationPath) {\n  if (validationPath.parts_.length === 0) {\n    return '';\n  }\n\n  return \"in property '\" + validationPath.parts_.join('.') + \"'\";\n}\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\n\nvar VisibilityMonitor =\n/** @class */\nfunction (_super) {\n  __extends(VisibilityMonitor, _super);\n\n  function VisibilityMonitor() {\n    var _this = _super.call(this, ['visible']) || this;\n\n    var hidden;\n    var visibilityChange;\n\n    if (typeof document !== 'undefined' && typeof document.addEventListener !== 'undefined') {\n      if (typeof document['hidden'] !== 'undefined') {\n        // Opera 12.10 and Firefox 18 and later support\n        visibilityChange = 'visibilitychange';\n        hidden = 'hidden';\n      } else if (typeof document['mozHidden'] !== 'undefined') {\n        visibilityChange = 'mozvisibilitychange';\n        hidden = 'mozHidden';\n      } else if (typeof document['msHidden'] !== 'undefined') {\n        visibilityChange = 'msvisibilitychange';\n        hidden = 'msHidden';\n      } else if (typeof document['webkitHidden'] !== 'undefined') {\n        visibilityChange = 'webkitvisibilitychange';\n        hidden = 'webkitHidden';\n      }\n    } // Initially, we always assume we are visible. This ensures that in browsers\n    // without page visibility support or in cases where we are never visible\n    // (e.g. chrome extension), we act as if we are visible, i.e. don't delay\n    // reconnects\n\n\n    _this.visible_ = true;\n\n    if (visibilityChange) {\n      document.addEventListener(visibilityChange, function () {\n        var visible = !document[hidden];\n\n        if (visible !== _this.visible_) {\n          _this.visible_ = visible;\n\n          _this.trigger('visible', visible);\n        }\n      }, false);\n    }\n\n    return _this;\n  }\n\n  VisibilityMonitor.getInstance = function () {\n    return new VisibilityMonitor();\n  };\n\n  VisibilityMonitor.prototype.getInitialEvent = function (eventType) {\n    assert(eventType === 'visible', 'Unknown event type: ' + eventType);\n    return [this.visible_];\n  };\n\n  return VisibilityMonitor;\n}(EventEmitter);\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\n\nvar RECONNECT_MIN_DELAY = 1000;\nvar RECONNECT_MAX_DELAY_DEFAULT = 60 * 5 * 1000; // 5 minutes in milliseconds (Case: 1858)\n\nvar GET_CONNECT_TIMEOUT = 3 * 1000;\nvar RECONNECT_MAX_DELAY_FOR_ADMINS = 30 * 1000; // 30 seconds for admin clients (likely to be a backend server)\n\nvar RECONNECT_DELAY_MULTIPLIER = 1.3;\nvar RECONNECT_DELAY_RESET_TIMEOUT = 30000; // Reset delay back to MIN_DELAY after being connected for 30sec.\n\nvar SERVER_KILL_INTERRUPT_REASON = 'server_kill'; // If auth fails repeatedly, we'll assume something is wrong and log a warning / back off.\n\nvar INVALID_TOKEN_THRESHOLD = 3;\n/**\r\n * Firebase connection.  Abstracts wire protocol and handles reconnecting.\r\n *\r\n * NOTE: All JSON objects sent to the realtime connection must have property names enclosed\r\n * in quotes to make sure the closure compiler does not minify them.\r\n */\n\nvar PersistentConnection =\n/** @class */\nfunction (_super) {\n  __extends(PersistentConnection, _super);\n  /**\r\n   * @param repoInfo_ - Data about the namespace we are connecting to\r\n   * @param applicationId_ - The Firebase App ID for this project\r\n   * @param onDataUpdate_ - A callback for new data from the server\r\n   */\n\n\n  function PersistentConnection(repoInfo_, applicationId_, onDataUpdate_, onConnectStatus_, onServerInfoUpdate_, authTokenProvider_, appCheckTokenProvider_, authOverride_) {\n    var _this = _super.call(this) || this;\n\n    _this.repoInfo_ = repoInfo_;\n    _this.applicationId_ = applicationId_;\n    _this.onDataUpdate_ = onDataUpdate_;\n    _this.onConnectStatus_ = onConnectStatus_;\n    _this.onServerInfoUpdate_ = onServerInfoUpdate_;\n    _this.authTokenProvider_ = authTokenProvider_;\n    _this.appCheckTokenProvider_ = appCheckTokenProvider_;\n    _this.authOverride_ = authOverride_; // Used for diagnostic logging.\n\n    _this.id = PersistentConnection.nextPersistentConnectionId_++;\n    _this.log_ = logWrapper('p:' + _this.id + ':');\n    _this.interruptReasons_ = {};\n    _this.listens = new Map();\n    _this.outstandingPuts_ = [];\n    _this.outstandingGets_ = [];\n    _this.outstandingPutCount_ = 0;\n    _this.outstandingGetCount_ = 0;\n    _this.onDisconnectRequestQueue_ = [];\n    _this.connected_ = false;\n    _this.reconnectDelay_ = RECONNECT_MIN_DELAY;\n    _this.maxReconnectDelay_ = RECONNECT_MAX_DELAY_DEFAULT;\n    _this.securityDebugCallback_ = null;\n    _this.lastSessionId = null;\n    _this.establishConnectionTimer_ = null;\n    _this.visible_ = false; // Before we get connected, we keep a queue of pending messages to send.\n\n    _this.requestCBHash_ = {};\n    _this.requestNumber_ = 0;\n    _this.realtime_ = null;\n    _this.authToken_ = null;\n    _this.appCheckToken_ = null;\n    _this.forceTokenRefresh_ = false;\n    _this.invalidAuthTokenCount_ = 0;\n    _this.invalidAppCheckTokenCount_ = 0;\n    _this.firstConnection_ = true;\n    _this.lastConnectionAttemptTime_ = null;\n    _this.lastConnectionEstablishedTime_ = null;\n\n    if (authOverride_ && !isNodeSdk()) {\n      throw new Error('Auth override specified in options, but not supported on non Node.js platforms');\n    }\n\n    VisibilityMonitor.getInstance().on('visible', _this.onVisible_, _this);\n\n    if (repoInfo_.host.indexOf('fblocal') === -1) {\n      OnlineMonitor.getInstance().on('online', _this.onOnline_, _this);\n    }\n\n    return _this;\n  }\n\n  PersistentConnection.prototype.sendRequest = function (action, body, onResponse) {\n    var curReqNum = ++this.requestNumber_;\n    var msg = {\n      r: curReqNum,\n      a: action,\n      b: body\n    };\n    this.log_(stringify(msg));\n    assert(this.connected_, \"sendRequest call when we're not connected not allowed.\");\n    this.realtime_.sendRequest(msg);\n\n    if (onResponse) {\n      this.requestCBHash_[curReqNum] = onResponse;\n    }\n  };\n\n  PersistentConnection.prototype.get = function (query) {\n    var _this = this;\n\n    this.initConnection_();\n    var deferred = new Deferred();\n    var request = {\n      p: query._path.toString(),\n      q: query._queryObject\n    };\n    var outstandingGet = {\n      action: 'g',\n      request: request,\n      onComplete: function (message) {\n        var payload = message['d'];\n\n        if (message['s'] === 'ok') {\n          _this.onDataUpdate_(request['p'], payload,\n          /*isMerge*/\n          false,\n          /*tag*/\n          null);\n\n          deferred.resolve(payload);\n        } else {\n          deferred.reject(payload);\n        }\n      }\n    };\n    this.outstandingGets_.push(outstandingGet);\n    this.outstandingGetCount_++;\n    var index = this.outstandingGets_.length - 1;\n\n    if (!this.connected_) {\n      setTimeout(function () {\n        var get = _this.outstandingGets_[index];\n\n        if (get === undefined || outstandingGet !== get) {\n          return;\n        }\n\n        delete _this.outstandingGets_[index];\n        _this.outstandingGetCount_--;\n\n        if (_this.outstandingGetCount_ === 0) {\n          _this.outstandingGets_ = [];\n        }\n\n        _this.log_('get ' + index + ' timed out on connection');\n\n        deferred.reject(new Error('Client is offline.'));\n      }, GET_CONNECT_TIMEOUT);\n    }\n\n    if (this.connected_) {\n      this.sendGet_(index);\n    }\n\n    return deferred.promise;\n  };\n\n  PersistentConnection.prototype.listen = function (query, currentHashFn, tag, onComplete) {\n    this.initConnection_();\n    var queryId = query._queryIdentifier;\n\n    var pathString = query._path.toString();\n\n    this.log_('Listen called for ' + pathString + ' ' + queryId);\n\n    if (!this.listens.has(pathString)) {\n      this.listens.set(pathString, new Map());\n    }\n\n    assert(query._queryParams.isDefault() || !query._queryParams.loadsAllData(), 'listen() called for non-default but complete query');\n    assert(!this.listens.get(pathString).has(queryId), 'listen() called twice for same path/queryId.');\n    var listenSpec = {\n      onComplete: onComplete,\n      hashFn: currentHashFn,\n      query: query,\n      tag: tag\n    };\n    this.listens.get(pathString).set(queryId, listenSpec);\n\n    if (this.connected_) {\n      this.sendListen_(listenSpec);\n    }\n  };\n\n  PersistentConnection.prototype.sendGet_ = function (index) {\n    var _this = this;\n\n    var get = this.outstandingGets_[index];\n    this.sendRequest('g', get.request, function (message) {\n      delete _this.outstandingGets_[index];\n      _this.outstandingGetCount_--;\n\n      if (_this.outstandingGetCount_ === 0) {\n        _this.outstandingGets_ = [];\n      }\n\n      if (get.onComplete) {\n        get.onComplete(message);\n      }\n    });\n  };\n\n  PersistentConnection.prototype.sendListen_ = function (listenSpec) {\n    var _this = this;\n\n    var query = listenSpec.query;\n\n    var pathString = query._path.toString();\n\n    var queryId = query._queryIdentifier;\n    this.log_('Listen on ' + pathString + ' for ' + queryId);\n    var req = {\n      /*path*/\n      p: pathString\n    };\n    var action = 'q'; // Only bother to send query if it's non-default.\n\n    if (listenSpec.tag) {\n      req['q'] = query._queryObject;\n      req['t'] = listenSpec.tag;\n    }\n\n    req[\n    /*hash*/\n    'h'] = listenSpec.hashFn();\n    this.sendRequest(action, req, function (message) {\n      var payload = message[\n      /*data*/\n      'd'];\n      var status = message[\n      /*status*/\n      's']; // print warnings in any case...\n\n      PersistentConnection.warnOnListenWarnings_(payload, query);\n\n      var currentListenSpec = _this.listens.get(pathString) && _this.listens.get(pathString).get(queryId); // only trigger actions if the listen hasn't been removed and readded\n\n\n      if (currentListenSpec === listenSpec) {\n        _this.log_('listen response', message);\n\n        if (status !== 'ok') {\n          _this.removeListen_(pathString, queryId);\n        }\n\n        if (listenSpec.onComplete) {\n          listenSpec.onComplete(status, payload);\n        }\n      }\n    });\n  };\n\n  PersistentConnection.warnOnListenWarnings_ = function (payload, query) {\n    if (payload && typeof payload === 'object' && contains(payload, 'w')) {\n      // eslint-disable-next-line @typescript-eslint/no-explicit-any\n      var warnings = safeGet(payload, 'w');\n\n      if (Array.isArray(warnings) && ~warnings.indexOf('no_index')) {\n        var indexSpec = '\".indexOn\": \"' + query._queryParams.getIndex().toString() + '\"';\n\n        var indexPath = query._path.toString();\n\n        warn(\"Using an unspecified index. Your data will be downloaded and \" + (\"filtered on the client. Consider adding \" + indexSpec + \" at \") + (indexPath + \" to your security rules for better performance.\"));\n      }\n    }\n  };\n\n  PersistentConnection.prototype.refreshAuthToken = function (token) {\n    this.authToken_ = token;\n    this.log_('Auth token refreshed');\n\n    if (this.authToken_) {\n      this.tryAuth();\n    } else {\n      //If we're connected we want to let the server know to unauthenticate us. If we're not connected, simply delete\n      //the credential so we dont become authenticated next time we connect.\n      if (this.connected_) {\n        this.sendRequest('unauth', {}, function () {});\n      }\n    }\n\n    this.reduceReconnectDelayIfAdminCredential_(token);\n  };\n\n  PersistentConnection.prototype.reduceReconnectDelayIfAdminCredential_ = function (credential) {\n    // NOTE: This isn't intended to be bulletproof (a malicious developer can always just modify the client).\n    // Additionally, we don't bother resetting the max delay back to the default if auth fails / expires.\n    var isFirebaseSecret = credential && credential.length === 40;\n\n    if (isFirebaseSecret || isAdmin(credential)) {\n      this.log_('Admin auth credential detected.  Reducing max reconnect time.');\n      this.maxReconnectDelay_ = RECONNECT_MAX_DELAY_FOR_ADMINS;\n    }\n  };\n\n  PersistentConnection.prototype.refreshAppCheckToken = function (token) {\n    this.appCheckToken_ = token;\n    this.log_('App check token refreshed');\n\n    if (this.appCheckToken_) {\n      this.tryAppCheck();\n    } else {\n      //If we're connected we want to let the server know to unauthenticate us.\n      //If we're not connected, simply delete the credential so we dont become\n      // authenticated next time we connect.\n      if (this.connected_) {\n        this.sendRequest('unappeck', {}, function () {});\n      }\n    }\n  };\n  /**\r\n   * Attempts to authenticate with the given credentials. If the authentication attempt fails, it's triggered like\r\n   * a auth revoked (the connection is closed).\r\n   */\n\n\n  PersistentConnection.prototype.tryAuth = function () {\n    var _this = this;\n\n    if (this.connected_ && this.authToken_) {\n      var token_1 = this.authToken_;\n      var authMethod = isValidFormat(token_1) ? 'auth' : 'gauth';\n      var requestData = {\n        cred: token_1\n      };\n\n      if (this.authOverride_ === null) {\n        requestData['noauth'] = true;\n      } else if (typeof this.authOverride_ === 'object') {\n        requestData['authvar'] = this.authOverride_;\n      }\n\n      this.sendRequest(authMethod, requestData, function (res) {\n        var status = res[\n        /*status*/\n        's'];\n        var data = res[\n        /*data*/\n        'd'] || 'error';\n\n        if (_this.authToken_ === token_1) {\n          if (status === 'ok') {\n            _this.invalidAuthTokenCount_ = 0;\n          } else {\n            // Triggers reconnect and force refresh for auth token\n            _this.onAuthRevoked_(status, data);\n          }\n        }\n      });\n    }\n  };\n  /**\r\n   * Attempts to authenticate with the given token. If the authentication\r\n   * attempt fails, it's triggered like the token was revoked (the connection is\r\n   * closed).\r\n   */\n\n\n  PersistentConnection.prototype.tryAppCheck = function () {\n    var _this = this;\n\n    if (this.connected_ && this.appCheckToken_) {\n      this.sendRequest('appcheck', {\n        'token': this.appCheckToken_\n      }, function (res) {\n        var status = res[\n        /*status*/\n        's'];\n        var data = res[\n        /*data*/\n        'd'] || 'error';\n\n        if (status === 'ok') {\n          _this.invalidAppCheckTokenCount_ = 0;\n        } else {\n          _this.onAppCheckRevoked_(status, data);\n        }\n      });\n    }\n  };\n  /**\r\n   * @inheritDoc\r\n   */\n\n\n  PersistentConnection.prototype.unlisten = function (query, tag) {\n    var pathString = query._path.toString();\n\n    var queryId = query._queryIdentifier;\n    this.log_('Unlisten called for ' + pathString + ' ' + queryId);\n    assert(query._queryParams.isDefault() || !query._queryParams.loadsAllData(), 'unlisten() called for non-default but complete query');\n    var listen = this.removeListen_(pathString, queryId);\n\n    if (listen && this.connected_) {\n      this.sendUnlisten_(pathString, queryId, query._queryObject, tag);\n    }\n  };\n\n  PersistentConnection.prototype.sendUnlisten_ = function (pathString, queryId, queryObj, tag) {\n    this.log_('Unlisten on ' + pathString + ' for ' + queryId);\n    var req = {\n      /*path*/\n      p: pathString\n    };\n    var action = 'n'; // Only bother sending queryId if it's non-default.\n\n    if (tag) {\n      req['q'] = queryObj;\n      req['t'] = tag;\n    }\n\n    this.sendRequest(action, req);\n  };\n\n  PersistentConnection.prototype.onDisconnectPut = function (pathString, data, onComplete) {\n    this.initConnection_();\n\n    if (this.connected_) {\n      this.sendOnDisconnect_('o', pathString, data, onComplete);\n    } else {\n      this.onDisconnectRequestQueue_.push({\n        pathString: pathString,\n        action: 'o',\n        data: data,\n        onComplete: onComplete\n      });\n    }\n  };\n\n  PersistentConnection.prototype.onDisconnectMerge = function (pathString, data, onComplete) {\n    this.initConnection_();\n\n    if (this.connected_) {\n      this.sendOnDisconnect_('om', pathString, data, onComplete);\n    } else {\n      this.onDisconnectRequestQueue_.push({\n        pathString: pathString,\n        action: 'om',\n        data: data,\n        onComplete: onComplete\n      });\n    }\n  };\n\n  PersistentConnection.prototype.onDisconnectCancel = function (pathString, onComplete) {\n    this.initConnection_();\n\n    if (this.connected_) {\n      this.sendOnDisconnect_('oc', pathString, null, onComplete);\n    } else {\n      this.onDisconnectRequestQueue_.push({\n        pathString: pathString,\n        action: 'oc',\n        data: null,\n        onComplete: onComplete\n      });\n    }\n  };\n\n  PersistentConnection.prototype.sendOnDisconnect_ = function (action, pathString, data, onComplete) {\n    var request = {\n      /*path*/\n      p: pathString,\n\n      /*data*/\n      d: data\n    };\n    this.log_('onDisconnect ' + action, request);\n    this.sendRequest(action, request, function (response) {\n      if (onComplete) {\n        setTimeout(function () {\n          onComplete(response[\n          /*status*/\n          's'], response[\n          /* data */\n          'd']);\n        }, Math.floor(0));\n      }\n    });\n  };\n\n  PersistentConnection.prototype.put = function (pathString, data, onComplete, hash) {\n    this.putInternal('p', pathString, data, onComplete, hash);\n  };\n\n  PersistentConnection.prototype.merge = function (pathString, data, onComplete, hash) {\n    this.putInternal('m', pathString, data, onComplete, hash);\n  };\n\n  PersistentConnection.prototype.putInternal = function (action, pathString, data, onComplete, hash) {\n    this.initConnection_();\n    var request = {\n      /*path*/\n      p: pathString,\n\n      /*data*/\n      d: data\n    };\n\n    if (hash !== undefined) {\n      request[\n      /*hash*/\n      'h'] = hash;\n    } // TODO: Only keep track of the most recent put for a given path?\n\n\n    this.outstandingPuts_.push({\n      action: action,\n      request: request,\n      onComplete: onComplete\n    });\n    this.outstandingPutCount_++;\n    var index = this.outstandingPuts_.length - 1;\n\n    if (this.connected_) {\n      this.sendPut_(index);\n    } else {\n      this.log_('Buffering put: ' + pathString);\n    }\n  };\n\n  PersistentConnection.prototype.sendPut_ = function (index) {\n    var _this = this;\n\n    var action = this.outstandingPuts_[index].action;\n    var request = this.outstandingPuts_[index].request;\n    var onComplete = this.outstandingPuts_[index].onComplete;\n    this.outstandingPuts_[index].queued = this.connected_;\n    this.sendRequest(action, request, function (message) {\n      _this.log_(action + ' response', message);\n\n      delete _this.outstandingPuts_[index];\n      _this.outstandingPutCount_--; // Clean up array occasionally.\n\n      if (_this.outstandingPutCount_ === 0) {\n        _this.outstandingPuts_ = [];\n      }\n\n      if (onComplete) {\n        onComplete(message[\n        /*status*/\n        's'], message[\n        /* data */\n        'd']);\n      }\n    });\n  };\n\n  PersistentConnection.prototype.reportStats = function (stats) {\n    var _this = this; // If we're not connected, we just drop the stats.\n\n\n    if (this.connected_) {\n      var request = {\n        /*counters*/\n        c: stats\n      };\n      this.log_('reportStats', request);\n      this.sendRequest(\n      /*stats*/\n      's', request, function (result) {\n        var status = result[\n        /*status*/\n        's'];\n\n        if (status !== 'ok') {\n          var errorReason = result[\n          /* data */\n          'd'];\n\n          _this.log_('reportStats', 'Error sending stats: ' + errorReason);\n        }\n      });\n    }\n  };\n\n  PersistentConnection.prototype.onDataMessage_ = function (message) {\n    if ('r' in message) {\n      // this is a response\n      this.log_('from server: ' + stringify(message));\n      var reqNum = message['r'];\n      var onResponse = this.requestCBHash_[reqNum];\n\n      if (onResponse) {\n        delete this.requestCBHash_[reqNum];\n        onResponse(message[\n        /*body*/\n        'b']);\n      }\n    } else if ('error' in message) {\n      throw 'A server-side error has occurred: ' + message['error'];\n    } else if ('a' in message) {\n      // a and b are action and body, respectively\n      this.onDataPush_(message['a'], message['b']);\n    }\n  };\n\n  PersistentConnection.prototype.onDataPush_ = function (action, body) {\n    this.log_('handleServerMessage', action, body);\n\n    if (action === 'd') {\n      this.onDataUpdate_(body[\n      /*path*/\n      'p'], body[\n      /*data*/\n      'd'],\n      /*isMerge*/\n      false, body['t']);\n    } else if (action === 'm') {\n      this.onDataUpdate_(body[\n      /*path*/\n      'p'], body[\n      /*data*/\n      'd'],\n      /*isMerge=*/\n      true, body['t']);\n    } else if (action === 'c') {\n      this.onListenRevoked_(body[\n      /*path*/\n      'p'], body[\n      /*query*/\n      'q']);\n    } else if (action === 'ac') {\n      this.onAuthRevoked_(body[\n      /*status code*/\n      's'], body[\n      /* explanation */\n      'd']);\n    } else if (action === 'apc') {\n      this.onAppCheckRevoked_(body[\n      /*status code*/\n      's'], body[\n      /* explanation */\n      'd']);\n    } else if (action === 'sd') {\n      this.onSecurityDebugPacket_(body);\n    } else {\n      error('Unrecognized action received from server: ' + stringify(action) + '\\nAre you using the latest client?');\n    }\n  };\n\n  PersistentConnection.prototype.onReady_ = function (timestamp, sessionId) {\n    this.log_('connection ready');\n    this.connected_ = true;\n    this.lastConnectionEstablishedTime_ = new Date().getTime();\n    this.handleTimestamp_(timestamp);\n    this.lastSessionId = sessionId;\n\n    if (this.firstConnection_) {\n      this.sendConnectStats_();\n    }\n\n    this.restoreState_();\n    this.firstConnection_ = false;\n    this.onConnectStatus_(true);\n  };\n\n  PersistentConnection.prototype.scheduleConnect_ = function (timeout) {\n    var _this = this;\n\n    assert(!this.realtime_, \"Scheduling a connect when we're already connected/ing?\");\n\n    if (this.establishConnectionTimer_) {\n      clearTimeout(this.establishConnectionTimer_);\n    } // NOTE: Even when timeout is 0, it's important to do a setTimeout to work around an infuriating \"Security Error\" in\n    // Firefox when trying to write to our long-polling iframe in some scenarios (e.g. Forge or our unit tests).\n\n\n    this.establishConnectionTimer_ = setTimeout(function () {\n      _this.establishConnectionTimer_ = null;\n\n      _this.establishConnection_(); // eslint-disable-next-line @typescript-eslint/no-explicit-any\n\n    }, Math.floor(timeout));\n  };\n\n  PersistentConnection.prototype.initConnection_ = function () {\n    if (!this.realtime_ && this.firstConnection_) {\n      this.scheduleConnect_(0);\n    }\n  };\n\n  PersistentConnection.prototype.onVisible_ = function (visible) {\n    // NOTE: Tabbing away and back to a window will defeat our reconnect backoff, but I think that's fine.\n    if (visible && !this.visible_ && this.reconnectDelay_ === this.maxReconnectDelay_) {\n      this.log_('Window became visible.  Reducing delay.');\n      this.reconnectDelay_ = RECONNECT_MIN_DELAY;\n\n      if (!this.realtime_) {\n        this.scheduleConnect_(0);\n      }\n    }\n\n    this.visible_ = visible;\n  };\n\n  PersistentConnection.prototype.onOnline_ = function (online) {\n    if (online) {\n      this.log_('Browser went online.');\n      this.reconnectDelay_ = RECONNECT_MIN_DELAY;\n\n      if (!this.realtime_) {\n        this.scheduleConnect_(0);\n      }\n    } else {\n      this.log_('Browser went offline.  Killing connection.');\n\n      if (this.realtime_) {\n        this.realtime_.close();\n      }\n    }\n  };\n\n  PersistentConnection.prototype.onRealtimeDisconnect_ = function () {\n    this.log_('data client disconnected');\n    this.connected_ = false;\n    this.realtime_ = null; // Since we don't know if our sent transactions succeeded or not, we need to cancel them.\n\n    this.cancelSentTransactions_(); // Clear out the pending requests.\n\n    this.requestCBHash_ = {};\n\n    if (this.shouldReconnect_()) {\n      if (!this.visible_) {\n        this.log_(\"Window isn't visible.  Delaying reconnect.\");\n        this.reconnectDelay_ = this.maxReconnectDelay_;\n        this.lastConnectionAttemptTime_ = new Date().getTime();\n      } else if (this.lastConnectionEstablishedTime_) {\n        // If we've been connected long enough, reset reconnect delay to minimum.\n        var timeSinceLastConnectSucceeded = new Date().getTime() - this.lastConnectionEstablishedTime_;\n\n        if (timeSinceLastConnectSucceeded > RECONNECT_DELAY_RESET_TIMEOUT) {\n          this.reconnectDelay_ = RECONNECT_MIN_DELAY;\n        }\n\n        this.lastConnectionEstablishedTime_ = null;\n      }\n\n      var timeSinceLastConnectAttempt = new Date().getTime() - this.lastConnectionAttemptTime_;\n      var reconnectDelay = Math.max(0, this.reconnectDelay_ - timeSinceLastConnectAttempt);\n      reconnectDelay = Math.random() * reconnectDelay;\n      this.log_('Trying to reconnect in ' + reconnectDelay + 'ms');\n      this.scheduleConnect_(reconnectDelay); // Adjust reconnect delay for next time.\n\n      this.reconnectDelay_ = Math.min(this.maxReconnectDelay_, this.reconnectDelay_ * RECONNECT_DELAY_MULTIPLIER);\n    }\n\n    this.onConnectStatus_(false);\n  };\n\n  PersistentConnection.prototype.establishConnection_ = function () {\n    return __awaiter(this, void 0, void 0, function () {\n      var onDataMessage, onReady, onDisconnect_1, connId, lastSessionId, canceled_1, connection_1, closeFn, sendRequestFn, forceRefresh, _a, authToken, appCheckToken, error_1;\n\n      var _this = this;\n\n      return __generator(this, function (_b) {\n        switch (_b.label) {\n          case 0:\n            if (!this.shouldReconnect_()) return [3\n            /*break*/\n            , 4];\n            this.log_('Making a connection attempt');\n            this.lastConnectionAttemptTime_ = new Date().getTime();\n            this.lastConnectionEstablishedTime_ = null;\n            onDataMessage = this.onDataMessage_.bind(this);\n            onReady = this.onReady_.bind(this);\n            onDisconnect_1 = this.onRealtimeDisconnect_.bind(this);\n            connId = this.id + ':' + PersistentConnection.nextConnectionId_++;\n            lastSessionId = this.lastSessionId;\n            canceled_1 = false;\n            connection_1 = null;\n\n            closeFn = function () {\n              if (connection_1) {\n                connection_1.close();\n              } else {\n                canceled_1 = true;\n                onDisconnect_1();\n              }\n            };\n\n            sendRequestFn = function (msg) {\n              assert(connection_1, \"sendRequest call when we're not connected not allowed.\");\n              connection_1.sendRequest(msg);\n            };\n\n            this.realtime_ = {\n              close: closeFn,\n              sendRequest: sendRequestFn\n            };\n            forceRefresh = this.forceTokenRefresh_;\n            this.forceTokenRefresh_ = false;\n            _b.label = 1;\n\n          case 1:\n            _b.trys.push([1, 3,, 4]);\n\n            return [4\n            /*yield*/\n            , Promise.all([this.authTokenProvider_.getToken(forceRefresh), this.appCheckTokenProvider_.getToken(forceRefresh)])];\n\n          case 2:\n            _a = __read.apply(void 0, [_b.sent(), 2]), authToken = _a[0], appCheckToken = _a[1];\n\n            if (!canceled_1) {\n              log('getToken() completed. Creating connection.');\n              this.authToken_ = authToken && authToken.accessToken;\n              this.appCheckToken_ = appCheckToken && appCheckToken.token;\n              connection_1 = new Connection(connId, this.repoInfo_, this.applicationId_, this.appCheckToken_, this.authToken_, onDataMessage, onReady, onDisconnect_1,\n              /* onKill= */\n              function (reason) {\n                warn(reason + ' (' + _this.repoInfo_.toString() + ')');\n\n                _this.interrupt(SERVER_KILL_INTERRUPT_REASON);\n              }, lastSessionId);\n            } else {\n              log('getToken() completed but was canceled');\n            }\n\n            return [3\n            /*break*/\n            , 4];\n\n          case 3:\n            error_1 = _b.sent();\n            this.log_('Failed to get token: ' + error_1);\n\n            if (!canceled_1) {\n              if (this.repoInfo_.nodeAdmin) {\n                // This may be a critical error for the Admin Node.js SDK, so log a warning.\n                // But getToken() may also just have temporarily failed, so we still want to\n                // continue retrying.\n                warn(error_1);\n              }\n\n              closeFn();\n            }\n\n            return [3\n            /*break*/\n            , 4];\n\n          case 4:\n            return [2\n            /*return*/\n            ];\n        }\n      });\n    });\n  };\n\n  PersistentConnection.prototype.interrupt = function (reason) {\n    log('Interrupting connection for reason: ' + reason);\n    this.interruptReasons_[reason] = true;\n\n    if (this.realtime_) {\n      this.realtime_.close();\n    } else {\n      if (this.establishConnectionTimer_) {\n        clearTimeout(this.establishConnectionTimer_);\n        this.establishConnectionTimer_ = null;\n      }\n\n      if (this.connected_) {\n        this.onRealtimeDisconnect_();\n      }\n    }\n  };\n\n  PersistentConnection.prototype.resume = function (reason) {\n    log('Resuming connection for reason: ' + reason);\n    delete this.interruptReasons_[reason];\n\n    if (isEmpty(this.interruptReasons_)) {\n      this.reconnectDelay_ = RECONNECT_MIN_DELAY;\n\n      if (!this.realtime_) {\n        this.scheduleConnect_(0);\n      }\n    }\n  };\n\n  PersistentConnection.prototype.handleTimestamp_ = function (timestamp) {\n    var delta = timestamp - new Date().getTime();\n    this.onServerInfoUpdate_({\n      serverTimeOffset: delta\n    });\n  };\n\n  PersistentConnection.prototype.cancelSentTransactions_ = function () {\n    for (var i = 0; i < this.outstandingPuts_.length; i++) {\n      var put = this.outstandingPuts_[i];\n\n      if (put &&\n      /*hash*/\n      'h' in put.request && put.queued) {\n        if (put.onComplete) {\n          put.onComplete('disconnect');\n        }\n\n        delete this.outstandingPuts_[i];\n        this.outstandingPutCount_--;\n      }\n    } // Clean up array occasionally.\n\n\n    if (this.outstandingPutCount_ === 0) {\n      this.outstandingPuts_ = [];\n    }\n  };\n\n  PersistentConnection.prototype.onListenRevoked_ = function (pathString, query) {\n    // Remove the listen and manufacture a \"permission_denied\" error for the failed listen.\n    var queryId;\n\n    if (!query) {\n      queryId = 'default';\n    } else {\n      queryId = query.map(function (q) {\n        return ObjectToUniqueKey(q);\n      }).join('$');\n    }\n\n    var listen = this.removeListen_(pathString, queryId);\n\n    if (listen && listen.onComplete) {\n      listen.onComplete('permission_denied');\n    }\n  };\n\n  PersistentConnection.prototype.removeListen_ = function (pathString, queryId) {\n    var normalizedPathString = new Path(pathString).toString(); // normalize path.\n\n    var listen;\n\n    if (this.listens.has(normalizedPathString)) {\n      var map = this.listens.get(normalizedPathString);\n      listen = map.get(queryId);\n      map.delete(queryId);\n\n      if (map.size === 0) {\n        this.listens.delete(normalizedPathString);\n      }\n    } else {\n      // all listens for this path has already been removed\n      listen = undefined;\n    }\n\n    return listen;\n  };\n\n  PersistentConnection.prototype.onAuthRevoked_ = function (statusCode, explanation) {\n    log('Auth token revoked: ' + statusCode + '/' + explanation);\n    this.authToken_ = null;\n    this.forceTokenRefresh_ = true;\n    this.realtime_.close();\n\n    if (statusCode === 'invalid_token' || statusCode === 'permission_denied') {\n      // We'll wait a couple times before logging the warning / increasing the\n      // retry period since oauth tokens will report as \"invalid\" if they're\n      // just expired. Plus there may be transient issues that resolve themselves.\n      this.invalidAuthTokenCount_++;\n\n      if (this.invalidAuthTokenCount_ >= INVALID_TOKEN_THRESHOLD) {\n        // Set a long reconnect delay because recovery is unlikely\n        this.reconnectDelay_ = RECONNECT_MAX_DELAY_FOR_ADMINS; // Notify the auth token provider that the token is invalid, which will log\n        // a warning\n\n        this.authTokenProvider_.notifyForInvalidToken();\n      }\n    }\n  };\n\n  PersistentConnection.prototype.onAppCheckRevoked_ = function (statusCode, explanation) {\n    log('App check token revoked: ' + statusCode + '/' + explanation);\n    this.appCheckToken_ = null;\n    this.forceTokenRefresh_ = true; // Note: We don't close the connection as the developer may not have\n    // enforcement enabled. The backend closes connections with enforcements.\n\n    if (statusCode === 'invalid_token' || statusCode === 'permission_denied') {\n      // We'll wait a couple times before logging the warning / increasing the\n      // retry period since oauth tokens will report as \"invalid\" if they're\n      // just expired. Plus there may be transient issues that resolve themselves.\n      this.invalidAppCheckTokenCount_++;\n\n      if (this.invalidAppCheckTokenCount_ >= INVALID_TOKEN_THRESHOLD) {\n        this.appCheckTokenProvider_.notifyForInvalidToken();\n      }\n    }\n  };\n\n  PersistentConnection.prototype.onSecurityDebugPacket_ = function (body) {\n    if (this.securityDebugCallback_) {\n      this.securityDebugCallback_(body);\n    } else {\n      if ('msg' in body) {\n        console.log('FIREBASE: ' + body['msg'].replace('\\n', '\\nFIREBASE: '));\n      }\n    }\n  };\n\n  PersistentConnection.prototype.restoreState_ = function () {\n    var e_1, _a, e_2, _b; //Re-authenticate ourselves if we have a credential stored.\n\n\n    this.tryAuth();\n    this.tryAppCheck();\n\n    try {\n      // Puts depend on having received the corresponding data update from the server before they complete, so we must\n      // make sure to send listens before puts.\n      for (var _c = __values(this.listens.values()), _d = _c.next(); !_d.done; _d = _c.next()) {\n        var queries = _d.value;\n\n        try {\n          for (var _e = (e_2 = void 0, __values(queries.values())), _f = _e.next(); !_f.done; _f = _e.next()) {\n            var listenSpec = _f.value;\n            this.sendListen_(listenSpec);\n          }\n        } catch (e_2_1) {\n          e_2 = {\n            error: e_2_1\n          };\n        } finally {\n          try {\n            if (_f && !_f.done && (_b = _e.return)) _b.call(_e);\n          } finally {\n            if (e_2) throw e_2.error;\n          }\n        }\n      }\n    } catch (e_1_1) {\n      e_1 = {\n        error: e_1_1\n      };\n    } finally {\n      try {\n        if (_d && !_d.done && (_a = _c.return)) _a.call(_c);\n      } finally {\n        if (e_1) throw e_1.error;\n      }\n    }\n\n    for (var i = 0; i < this.outstandingPuts_.length; i++) {\n      if (this.outstandingPuts_[i]) {\n        this.sendPut_(i);\n      }\n    }\n\n    while (this.onDisconnectRequestQueue_.length) {\n      var request = this.onDisconnectRequestQueue_.shift();\n      this.sendOnDisconnect_(request.action, request.pathString, request.data, request.onComplete);\n    }\n\n    for (var i = 0; i < this.outstandingGets_.length; i++) {\n      if (this.outstandingGets_[i]) {\n        this.sendGet_(i);\n      }\n    }\n  };\n  /**\r\n   * Sends client stats for first connection\r\n   */\n\n\n  PersistentConnection.prototype.sendConnectStats_ = function () {\n    var stats = {};\n    var clientName = 'js';\n\n    if (isNodeSdk()) {\n      if (this.repoInfo_.nodeAdmin) {\n        clientName = 'admin_node';\n      } else {\n        clientName = 'node';\n      }\n    }\n\n    stats['sdk.' + clientName + '.' + SDK_VERSION.replace(/\\./g, '-')] = 1;\n\n    if (isMobileCordova()) {\n      stats['framework.cordova'] = 1;\n    } else if (isReactNative()) {\n      stats['framework.reactnative'] = 1;\n    }\n\n    this.reportStats(stats);\n  };\n\n  PersistentConnection.prototype.shouldReconnect_ = function () {\n    var online = OnlineMonitor.getInstance().currentlyOnline();\n    return isEmpty(this.interruptReasons_) && online;\n  };\n\n  PersistentConnection.nextPersistentConnectionId_ = 0;\n  /**\r\n   * Counter for number of connections created. Mainly used for tagging in the logs\r\n   */\n\n  PersistentConnection.nextConnectionId_ = 0;\n  return PersistentConnection;\n}(ServerActions);\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\n\nvar NamedNode =\n/** @class */\nfunction () {\n  function NamedNode(name, node) {\n    this.name = name;\n    this.node = node;\n  }\n\n  NamedNode.Wrap = function (name, node) {\n    return new NamedNode(name, node);\n  };\n\n  return NamedNode;\n}();\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\n\nvar Index =\n/** @class */\nfunction () {\n  function Index() {}\n  /**\r\n   * @returns A standalone comparison function for\r\n   * this index\r\n   */\n\n\n  Index.prototype.getCompare = function () {\n    return this.compare.bind(this);\n  };\n  /**\r\n   * Given a before and after value for a node, determine if the indexed value has changed. Even if they are different,\r\n   * it's possible that the changes are isolated to parts of the snapshot that are not indexed.\r\n   *\r\n   *\r\n   * @returns True if the portion of the snapshot being indexed changed between oldNode and newNode\r\n   */\n\n\n  Index.prototype.indexedValueChanged = function (oldNode, newNode) {\n    var oldWrapped = new NamedNode(MIN_NAME, oldNode);\n    var newWrapped = new NamedNode(MIN_NAME, newNode);\n    return this.compare(oldWrapped, newWrapped) !== 0;\n  };\n  /**\r\n   * @returns a node wrapper that will sort equal to or less than\r\n   * any other node wrapper, using this index\r\n   */\n\n\n  Index.prototype.minPost = function () {\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    return NamedNode.MIN;\n  };\n\n  return Index;\n}();\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\n\nvar __EMPTY_NODE;\n\nvar KeyIndex =\n/** @class */\nfunction (_super) {\n  __extends(KeyIndex, _super);\n\n  function KeyIndex() {\n    return _super !== null && _super.apply(this, arguments) || this;\n  }\n\n  Object.defineProperty(KeyIndex, \"__EMPTY_NODE\", {\n    get: function () {\n      return __EMPTY_NODE;\n    },\n    set: function (val) {\n      __EMPTY_NODE = val;\n    },\n    enumerable: false,\n    configurable: true\n  });\n\n  KeyIndex.prototype.compare = function (a, b) {\n    return nameCompare(a.name, b.name);\n  };\n\n  KeyIndex.prototype.isDefinedOn = function (node) {\n    // We could probably return true here (since every node has a key), but it's never called\n    // so just leaving unimplemented for now.\n    throw assertionError('KeyIndex.isDefinedOn not expected to be called.');\n  };\n\n  KeyIndex.prototype.indexedValueChanged = function (oldNode, newNode) {\n    return false; // The key for a node never changes.\n  };\n\n  KeyIndex.prototype.minPost = function () {\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    return NamedNode.MIN;\n  };\n\n  KeyIndex.prototype.maxPost = function () {\n    // TODO: This should really be created once and cached in a static property, but\n    // NamedNode isn't defined yet, so I can't use it in a static.  Bleh.\n    return new NamedNode(MAX_NAME, __EMPTY_NODE);\n  };\n\n  KeyIndex.prototype.makePost = function (indexValue, name) {\n    assert(typeof indexValue === 'string', 'KeyIndex indexValue must always be a string.'); // We just use empty node, but it'll never be compared, since our comparator only looks at name.\n\n    return new NamedNode(indexValue, __EMPTY_NODE);\n  };\n  /**\r\n   * @returns String representation for inclusion in a query spec\r\n   */\n\n\n  KeyIndex.prototype.toString = function () {\n    return '.key';\n  };\n\n  return KeyIndex;\n}(Index);\n\nvar KEY_INDEX = new KeyIndex();\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\n/**\r\n * An iterator over an LLRBNode.\r\n */\n\nvar SortedMapIterator =\n/** @class */\nfunction () {\n  /**\r\n   * @param node - Node to iterate.\r\n   * @param isReverse_ - Whether or not to iterate in reverse\r\n   */\n  function SortedMapIterator(node, startKey, comparator, isReverse_, resultGenerator_) {\n    if (resultGenerator_ === void 0) {\n      resultGenerator_ = null;\n    }\n\n    this.isReverse_ = isReverse_;\n    this.resultGenerator_ = resultGenerator_;\n    this.nodeStack_ = [];\n    var cmp = 1;\n\n    while (!node.isEmpty()) {\n      node = node;\n      cmp = startKey ? comparator(node.key, startKey) : 1; // flip the comparison if we're going in reverse\n\n      if (isReverse_) {\n        cmp *= -1;\n      }\n\n      if (cmp < 0) {\n        // This node is less than our start key. ignore it\n        if (this.isReverse_) {\n          node = node.left;\n        } else {\n          node = node.right;\n        }\n      } else if (cmp === 0) {\n        // This node is exactly equal to our start key. Push it on the stack, but stop iterating;\n        this.nodeStack_.push(node);\n        break;\n      } else {\n        // This node is greater than our start key, add it to the stack and move to the next one\n        this.nodeStack_.push(node);\n\n        if (this.isReverse_) {\n          node = node.right;\n        } else {\n          node = node.left;\n        }\n      }\n    }\n  }\n\n  SortedMapIterator.prototype.getNext = function () {\n    if (this.nodeStack_.length === 0) {\n      return null;\n    }\n\n    var node = this.nodeStack_.pop();\n    var result;\n\n    if (this.resultGenerator_) {\n      result = this.resultGenerator_(node.key, node.value);\n    } else {\n      result = {\n        key: node.key,\n        value: node.value\n      };\n    }\n\n    if (this.isReverse_) {\n      node = node.left;\n\n      while (!node.isEmpty()) {\n        this.nodeStack_.push(node);\n        node = node.right;\n      }\n    } else {\n      node = node.right;\n\n      while (!node.isEmpty()) {\n        this.nodeStack_.push(node);\n        node = node.left;\n      }\n    }\n\n    return result;\n  };\n\n  SortedMapIterator.prototype.hasNext = function () {\n    return this.nodeStack_.length > 0;\n  };\n\n  SortedMapIterator.prototype.peek = function () {\n    if (this.nodeStack_.length === 0) {\n      return null;\n    }\n\n    var node = this.nodeStack_[this.nodeStack_.length - 1];\n\n    if (this.resultGenerator_) {\n      return this.resultGenerator_(node.key, node.value);\n    } else {\n      return {\n        key: node.key,\n        value: node.value\n      };\n    }\n  };\n\n  return SortedMapIterator;\n}();\n/**\r\n * Represents a node in a Left-leaning Red-Black tree.\r\n */\n\n\nvar LLRBNode =\n/** @class */\nfunction () {\n  /**\r\n   * @param key - Key associated with this node.\r\n   * @param value - Value associated with this node.\r\n   * @param color - Whether this node is red.\r\n   * @param left - Left child.\r\n   * @param right - Right child.\r\n   */\n  function LLRBNode(key, value, color, left, right) {\n    this.key = key;\n    this.value = value;\n    this.color = color != null ? color : LLRBNode.RED;\n    this.left = left != null ? left : SortedMap.EMPTY_NODE;\n    this.right = right != null ? right : SortedMap.EMPTY_NODE;\n  }\n  /**\r\n   * Returns a copy of the current node, optionally replacing pieces of it.\r\n   *\r\n   * @param key - New key for the node, or null.\r\n   * @param value - New value for the node, or null.\r\n   * @param color - New color for the node, or null.\r\n   * @param left - New left child for the node, or null.\r\n   * @param right - New right child for the node, or null.\r\n   * @returns The node copy.\r\n   */\n\n\n  LLRBNode.prototype.copy = function (key, value, color, left, right) {\n    return new LLRBNode(key != null ? key : this.key, value != null ? value : this.value, color != null ? color : this.color, left != null ? left : this.left, right != null ? right : this.right);\n  };\n  /**\r\n   * @returns The total number of nodes in the tree.\r\n   */\n\n\n  LLRBNode.prototype.count = function () {\n    return this.left.count() + 1 + this.right.count();\n  };\n  /**\r\n   * @returns True if the tree is empty.\r\n   */\n\n\n  LLRBNode.prototype.isEmpty = function () {\n    return false;\n  };\n  /**\r\n   * Traverses the tree in key order and calls the specified action function\r\n   * for each node.\r\n   *\r\n   * @param action - Callback function to be called for each\r\n   *   node.  If it returns true, traversal is aborted.\r\n   * @returns The first truthy value returned by action, or the last falsey\r\n   *   value returned by action\r\n   */\n\n\n  LLRBNode.prototype.inorderTraversal = function (action) {\n    return this.left.inorderTraversal(action) || !!action(this.key, this.value) || this.right.inorderTraversal(action);\n  };\n  /**\r\n   * Traverses the tree in reverse key order and calls the specified action function\r\n   * for each node.\r\n   *\r\n   * @param action - Callback function to be called for each\r\n   * node.  If it returns true, traversal is aborted.\r\n   * @returns True if traversal was aborted.\r\n   */\n\n\n  LLRBNode.prototype.reverseTraversal = function (action) {\n    return this.right.reverseTraversal(action) || action(this.key, this.value) || this.left.reverseTraversal(action);\n  };\n  /**\r\n   * @returns The minimum node in the tree.\r\n   */\n\n\n  LLRBNode.prototype.min_ = function () {\n    if (this.left.isEmpty()) {\n      return this;\n    } else {\n      return this.left.min_();\n    }\n  };\n  /**\r\n   * @returns The maximum key in the tree.\r\n   */\n\n\n  LLRBNode.prototype.minKey = function () {\n    return this.min_().key;\n  };\n  /**\r\n   * @returns The maximum key in the tree.\r\n   */\n\n\n  LLRBNode.prototype.maxKey = function () {\n    if (this.right.isEmpty()) {\n      return this.key;\n    } else {\n      return this.right.maxKey();\n    }\n  };\n  /**\r\n   * @param key - Key to insert.\r\n   * @param value - Value to insert.\r\n   * @param comparator - Comparator.\r\n   * @returns New tree, with the key/value added.\r\n   */\n\n\n  LLRBNode.prototype.insert = function (key, value, comparator) {\n    var n = this;\n    var cmp = comparator(key, n.key);\n\n    if (cmp < 0) {\n      n = n.copy(null, null, null, n.left.insert(key, value, comparator), null);\n    } else if (cmp === 0) {\n      n = n.copy(null, value, null, null, null);\n    } else {\n      n = n.copy(null, null, null, null, n.right.insert(key, value, comparator));\n    }\n\n    return n.fixUp_();\n  };\n  /**\r\n   * @returns New tree, with the minimum key removed.\r\n   */\n\n\n  LLRBNode.prototype.removeMin_ = function () {\n    if (this.left.isEmpty()) {\n      return SortedMap.EMPTY_NODE;\n    }\n\n    var n = this;\n\n    if (!n.left.isRed_() && !n.left.left.isRed_()) {\n      n = n.moveRedLeft_();\n    }\n\n    n = n.copy(null, null, null, n.left.removeMin_(), null);\n    return n.fixUp_();\n  };\n  /**\r\n   * @param key - The key of the item to remove.\r\n   * @param comparator - Comparator.\r\n   * @returns New tree, with the specified item removed.\r\n   */\n\n\n  LLRBNode.prototype.remove = function (key, comparator) {\n    var n, smallest;\n    n = this;\n\n    if (comparator(key, n.key) < 0) {\n      if (!n.left.isEmpty() && !n.left.isRed_() && !n.left.left.isRed_()) {\n        n = n.moveRedLeft_();\n      }\n\n      n = n.copy(null, null, null, n.left.remove(key, comparator), null);\n    } else {\n      if (n.left.isRed_()) {\n        n = n.rotateRight_();\n      }\n\n      if (!n.right.isEmpty() && !n.right.isRed_() && !n.right.left.isRed_()) {\n        n = n.moveRedRight_();\n      }\n\n      if (comparator(key, n.key) === 0) {\n        if (n.right.isEmpty()) {\n          return SortedMap.EMPTY_NODE;\n        } else {\n          smallest = n.right.min_();\n          n = n.copy(smallest.key, smallest.value, null, null, n.right.removeMin_());\n        }\n      }\n\n      n = n.copy(null, null, null, null, n.right.remove(key, comparator));\n    }\n\n    return n.fixUp_();\n  };\n  /**\r\n   * @returns Whether this is a RED node.\r\n   */\n\n\n  LLRBNode.prototype.isRed_ = function () {\n    return this.color;\n  };\n  /**\r\n   * @returns New tree after performing any needed rotations.\r\n   */\n\n\n  LLRBNode.prototype.fixUp_ = function () {\n    var n = this;\n\n    if (n.right.isRed_() && !n.left.isRed_()) {\n      n = n.rotateLeft_();\n    }\n\n    if (n.left.isRed_() && n.left.left.isRed_()) {\n      n = n.rotateRight_();\n    }\n\n    if (n.left.isRed_() && n.right.isRed_()) {\n      n = n.colorFlip_();\n    }\n\n    return n;\n  };\n  /**\r\n   * @returns New tree, after moveRedLeft.\r\n   */\n\n\n  LLRBNode.prototype.moveRedLeft_ = function () {\n    var n = this.colorFlip_();\n\n    if (n.right.left.isRed_()) {\n      n = n.copy(null, null, null, null, n.right.rotateRight_());\n      n = n.rotateLeft_();\n      n = n.colorFlip_();\n    }\n\n    return n;\n  };\n  /**\r\n   * @returns New tree, after moveRedRight.\r\n   */\n\n\n  LLRBNode.prototype.moveRedRight_ = function () {\n    var n = this.colorFlip_();\n\n    if (n.left.left.isRed_()) {\n      n = n.rotateRight_();\n      n = n.colorFlip_();\n    }\n\n    return n;\n  };\n  /**\r\n   * @returns New tree, after rotateLeft.\r\n   */\n\n\n  LLRBNode.prototype.rotateLeft_ = function () {\n    var nl = this.copy(null, null, LLRBNode.RED, null, this.right.left);\n    return this.right.copy(null, null, this.color, nl, null);\n  };\n  /**\r\n   * @returns New tree, after rotateRight.\r\n   */\n\n\n  LLRBNode.prototype.rotateRight_ = function () {\n    var nr = this.copy(null, null, LLRBNode.RED, this.left.right, null);\n    return this.left.copy(null, null, this.color, null, nr);\n  };\n  /**\r\n   * @returns Newt ree, after colorFlip.\r\n   */\n\n\n  LLRBNode.prototype.colorFlip_ = function () {\n    var left = this.left.copy(null, null, !this.left.color, null, null);\n    var right = this.right.copy(null, null, !this.right.color, null, null);\n    return this.copy(null, null, !this.color, left, right);\n  };\n  /**\r\n   * For testing.\r\n   *\r\n   * @returns True if all is well.\r\n   */\n\n\n  LLRBNode.prototype.checkMaxDepth_ = function () {\n    var blackDepth = this.check_();\n    return Math.pow(2.0, blackDepth) <= this.count() + 1;\n  };\n\n  LLRBNode.prototype.check_ = function () {\n    if (this.isRed_() && this.left.isRed_()) {\n      throw new Error('Red node has red child(' + this.key + ',' + this.value + ')');\n    }\n\n    if (this.right.isRed_()) {\n      throw new Error('Right child of (' + this.key + ',' + this.value + ') is red');\n    }\n\n    var blackDepth = this.left.check_();\n\n    if (blackDepth !== this.right.check_()) {\n      throw new Error('Black depths differ');\n    } else {\n      return blackDepth + (this.isRed_() ? 0 : 1);\n    }\n  };\n\n  LLRBNode.RED = true;\n  LLRBNode.BLACK = false;\n  return LLRBNode;\n}();\n/**\r\n * Represents an empty node (a leaf node in the Red-Black Tree).\r\n */\n\n\nvar LLRBEmptyNode =\n/** @class */\nfunction () {\n  function LLRBEmptyNode() {}\n  /**\r\n   * Returns a copy of the current node.\r\n   *\r\n   * @returns The node copy.\r\n   */\n\n\n  LLRBEmptyNode.prototype.copy = function (key, value, color, left, right) {\n    return this;\n  };\n  /**\r\n   * Returns a copy of the tree, with the specified key/value added.\r\n   *\r\n   * @param key - Key to be added.\r\n   * @param value - Value to be added.\r\n   * @param comparator - Comparator.\r\n   * @returns New tree, with item added.\r\n   */\n\n\n  LLRBEmptyNode.prototype.insert = function (key, value, comparator) {\n    return new LLRBNode(key, value, null);\n  };\n  /**\r\n   * Returns a copy of the tree, with the specified key removed.\r\n   *\r\n   * @param key - The key to remove.\r\n   * @param comparator - Comparator.\r\n   * @returns New tree, with item removed.\r\n   */\n\n\n  LLRBEmptyNode.prototype.remove = function (key, comparator) {\n    return this;\n  };\n  /**\r\n   * @returns The total number of nodes in the tree.\r\n   */\n\n\n  LLRBEmptyNode.prototype.count = function () {\n    return 0;\n  };\n  /**\r\n   * @returns True if the tree is empty.\r\n   */\n\n\n  LLRBEmptyNode.prototype.isEmpty = function () {\n    return true;\n  };\n  /**\r\n   * Traverses the tree in key order and calls the specified action function\r\n   * for each node.\r\n   *\r\n   * @param action - Callback function to be called for each\r\n   * node.  If it returns true, traversal is aborted.\r\n   * @returns True if traversal was aborted.\r\n   */\n\n\n  LLRBEmptyNode.prototype.inorderTraversal = function (action) {\n    return false;\n  };\n  /**\r\n   * Traverses the tree in reverse key order and calls the specified action function\r\n   * for each node.\r\n   *\r\n   * @param action - Callback function to be called for each\r\n   * node.  If it returns true, traversal is aborted.\r\n   * @returns True if traversal was aborted.\r\n   */\n\n\n  LLRBEmptyNode.prototype.reverseTraversal = function (action) {\n    return false;\n  };\n\n  LLRBEmptyNode.prototype.minKey = function () {\n    return null;\n  };\n\n  LLRBEmptyNode.prototype.maxKey = function () {\n    return null;\n  };\n\n  LLRBEmptyNode.prototype.check_ = function () {\n    return 0;\n  };\n  /**\r\n   * @returns Whether this node is red.\r\n   */\n\n\n  LLRBEmptyNode.prototype.isRed_ = function () {\n    return false;\n  };\n\n  return LLRBEmptyNode;\n}();\n/**\r\n * An immutable sorted map implementation, based on a Left-leaning Red-Black\r\n * tree.\r\n */\n\n\nvar SortedMap =\n/** @class */\nfunction () {\n  /**\r\n   * @param comparator_ - Key comparator.\r\n   * @param root_ - Optional root node for the map.\r\n   */\n  function SortedMap(comparator_, root_) {\n    if (root_ === void 0) {\n      root_ = SortedMap.EMPTY_NODE;\n    }\n\n    this.comparator_ = comparator_;\n    this.root_ = root_;\n  }\n  /**\r\n   * Returns a copy of the map, with the specified key/value added or replaced.\r\n   * (TODO: We should perhaps rename this method to 'put')\r\n   *\r\n   * @param key - Key to be added.\r\n   * @param value - Value to be added.\r\n   * @returns New map, with item added.\r\n   */\n\n\n  SortedMap.prototype.insert = function (key, value) {\n    return new SortedMap(this.comparator_, this.root_.insert(key, value, this.comparator_).copy(null, null, LLRBNode.BLACK, null, null));\n  };\n  /**\r\n   * Returns a copy of the map, with the specified key removed.\r\n   *\r\n   * @param key - The key to remove.\r\n   * @returns New map, with item removed.\r\n   */\n\n\n  SortedMap.prototype.remove = function (key) {\n    return new SortedMap(this.comparator_, this.root_.remove(key, this.comparator_).copy(null, null, LLRBNode.BLACK, null, null));\n  };\n  /**\r\n   * Returns the value of the node with the given key, or null.\r\n   *\r\n   * @param key - The key to look up.\r\n   * @returns The value of the node with the given key, or null if the\r\n   * key doesn't exist.\r\n   */\n\n\n  SortedMap.prototype.get = function (key) {\n    var cmp;\n    var node = this.root_;\n\n    while (!node.isEmpty()) {\n      cmp = this.comparator_(key, node.key);\n\n      if (cmp === 0) {\n        return node.value;\n      } else if (cmp < 0) {\n        node = node.left;\n      } else if (cmp > 0) {\n        node = node.right;\n      }\n    }\n\n    return null;\n  };\n  /**\r\n   * Returns the key of the item *before* the specified key, or null if key is the first item.\r\n   * @param key - The key to find the predecessor of\r\n   * @returns The predecessor key.\r\n   */\n\n\n  SortedMap.prototype.getPredecessorKey = function (key) {\n    var cmp,\n        node = this.root_,\n        rightParent = null;\n\n    while (!node.isEmpty()) {\n      cmp = this.comparator_(key, node.key);\n\n      if (cmp === 0) {\n        if (!node.left.isEmpty()) {\n          node = node.left;\n\n          while (!node.right.isEmpty()) {\n            node = node.right;\n          }\n\n          return node.key;\n        } else if (rightParent) {\n          return rightParent.key;\n        } else {\n          return null; // first item.\n        }\n      } else if (cmp < 0) {\n        node = node.left;\n      } else if (cmp > 0) {\n        rightParent = node;\n        node = node.right;\n      }\n    }\n\n    throw new Error('Attempted to find predecessor key for a nonexistent key.  What gives?');\n  };\n  /**\r\n   * @returns True if the map is empty.\r\n   */\n\n\n  SortedMap.prototype.isEmpty = function () {\n    return this.root_.isEmpty();\n  };\n  /**\r\n   * @returns The total number of nodes in the map.\r\n   */\n\n\n  SortedMap.prototype.count = function () {\n    return this.root_.count();\n  };\n  /**\r\n   * @returns The minimum key in the map.\r\n   */\n\n\n  SortedMap.prototype.minKey = function () {\n    return this.root_.minKey();\n  };\n  /**\r\n   * @returns The maximum key in the map.\r\n   */\n\n\n  SortedMap.prototype.maxKey = function () {\n    return this.root_.maxKey();\n  };\n  /**\r\n   * Traverses the map in key order and calls the specified action function\r\n   * for each key/value pair.\r\n   *\r\n   * @param action - Callback function to be called\r\n   * for each key/value pair.  If action returns true, traversal is aborted.\r\n   * @returns The first truthy value returned by action, or the last falsey\r\n   *   value returned by action\r\n   */\n\n\n  SortedMap.prototype.inorderTraversal = function (action) {\n    return this.root_.inorderTraversal(action);\n  };\n  /**\r\n   * Traverses the map in reverse key order and calls the specified action function\r\n   * for each key/value pair.\r\n   *\r\n   * @param action - Callback function to be called\r\n   * for each key/value pair.  If action returns true, traversal is aborted.\r\n   * @returns True if the traversal was aborted.\r\n   */\n\n\n  SortedMap.prototype.reverseTraversal = function (action) {\n    return this.root_.reverseTraversal(action);\n  };\n  /**\r\n   * Returns an iterator over the SortedMap.\r\n   * @returns The iterator.\r\n   */\n\n\n  SortedMap.prototype.getIterator = function (resultGenerator) {\n    return new SortedMapIterator(this.root_, null, this.comparator_, false, resultGenerator);\n  };\n\n  SortedMap.prototype.getIteratorFrom = function (key, resultGenerator) {\n    return new SortedMapIterator(this.root_, key, this.comparator_, false, resultGenerator);\n  };\n\n  SortedMap.prototype.getReverseIteratorFrom = function (key, resultGenerator) {\n    return new SortedMapIterator(this.root_, key, this.comparator_, true, resultGenerator);\n  };\n\n  SortedMap.prototype.getReverseIterator = function (resultGenerator) {\n    return new SortedMapIterator(this.root_, null, this.comparator_, true, resultGenerator);\n  };\n  /**\r\n   * Always use the same empty node, to reduce memory.\r\n   */\n\n\n  SortedMap.EMPTY_NODE = new LLRBEmptyNode();\n  return SortedMap;\n}();\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\n\nfunction NAME_ONLY_COMPARATOR(left, right) {\n  return nameCompare(left.name, right.name);\n}\n\nfunction NAME_COMPARATOR(left, right) {\n  return nameCompare(left, right);\n}\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\n\nvar MAX_NODE$2;\n\nfunction setMaxNode$1(val) {\n  MAX_NODE$2 = val;\n}\n\nvar priorityHashText = function (priority) {\n  if (typeof priority === 'number') {\n    return 'number:' + doubleToIEEE754String(priority);\n  } else {\n    return 'string:' + priority;\n  }\n};\n/**\r\n * Validates that a priority snapshot Node is valid.\r\n */\n\n\nvar validatePriorityNode = function (priorityNode) {\n  if (priorityNode.isLeafNode()) {\n    var val = priorityNode.val();\n    assert(typeof val === 'string' || typeof val === 'number' || typeof val === 'object' && contains(val, '.sv'), 'Priority must be a string or number.');\n  } else {\n    assert(priorityNode === MAX_NODE$2 || priorityNode.isEmpty(), 'priority of unexpected type.');\n  } // Don't call getPriority() on MAX_NODE to avoid hitting assertion.\n\n\n  assert(priorityNode === MAX_NODE$2 || priorityNode.getPriority().isEmpty(), \"Priority nodes can't have a priority of their own.\");\n};\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\n\nvar __childrenNodeConstructor;\n/**\r\n * LeafNode is a class for storing leaf nodes in a DataSnapshot.  It\r\n * implements Node and stores the value of the node (a string,\r\n * number, or boolean) accessible via getValue().\r\n */\n\n\nvar LeafNode =\n/** @class */\nfunction () {\n  /**\r\n   * @param value_ - The value to store in this leaf node. The object type is\r\n   * possible in the event of a deferred value\r\n   * @param priorityNode_ - The priority of this node.\r\n   */\n  function LeafNode(value_, priorityNode_) {\n    if (priorityNode_ === void 0) {\n      priorityNode_ = LeafNode.__childrenNodeConstructor.EMPTY_NODE;\n    }\n\n    this.value_ = value_;\n    this.priorityNode_ = priorityNode_;\n    this.lazyHash_ = null;\n    assert(this.value_ !== undefined && this.value_ !== null, \"LeafNode shouldn't be created with null/undefined value.\");\n    validatePriorityNode(this.priorityNode_);\n  }\n\n  Object.defineProperty(LeafNode, \"__childrenNodeConstructor\", {\n    get: function () {\n      return __childrenNodeConstructor;\n    },\n    set: function (val) {\n      __childrenNodeConstructor = val;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  /** @inheritDoc */\n\n  LeafNode.prototype.isLeafNode = function () {\n    return true;\n  };\n  /** @inheritDoc */\n\n\n  LeafNode.prototype.getPriority = function () {\n    return this.priorityNode_;\n  };\n  /** @inheritDoc */\n\n\n  LeafNode.prototype.updatePriority = function (newPriorityNode) {\n    return new LeafNode(this.value_, newPriorityNode);\n  };\n  /** @inheritDoc */\n\n\n  LeafNode.prototype.getImmediateChild = function (childName) {\n    // Hack to treat priority as a regular child\n    if (childName === '.priority') {\n      return this.priorityNode_;\n    } else {\n      return LeafNode.__childrenNodeConstructor.EMPTY_NODE;\n    }\n  };\n  /** @inheritDoc */\n\n\n  LeafNode.prototype.getChild = function (path) {\n    if (pathIsEmpty(path)) {\n      return this;\n    } else if (pathGetFront(path) === '.priority') {\n      return this.priorityNode_;\n    } else {\n      return LeafNode.__childrenNodeConstructor.EMPTY_NODE;\n    }\n  };\n\n  LeafNode.prototype.hasChild = function () {\n    return false;\n  };\n  /** @inheritDoc */\n\n\n  LeafNode.prototype.getPredecessorChildName = function (childName, childNode) {\n    return null;\n  };\n  /** @inheritDoc */\n\n\n  LeafNode.prototype.updateImmediateChild = function (childName, newChildNode) {\n    if (childName === '.priority') {\n      return this.updatePriority(newChildNode);\n    } else if (newChildNode.isEmpty() && childName !== '.priority') {\n      return this;\n    } else {\n      return LeafNode.__childrenNodeConstructor.EMPTY_NODE.updateImmediateChild(childName, newChildNode).updatePriority(this.priorityNode_);\n    }\n  };\n  /** @inheritDoc */\n\n\n  LeafNode.prototype.updateChild = function (path, newChildNode) {\n    var front = pathGetFront(path);\n\n    if (front === null) {\n      return newChildNode;\n    } else if (newChildNode.isEmpty() && front !== '.priority') {\n      return this;\n    } else {\n      assert(front !== '.priority' || pathGetLength(path) === 1, '.priority must be the last token in a path');\n      return this.updateImmediateChild(front, LeafNode.__childrenNodeConstructor.EMPTY_NODE.updateChild(pathPopFront(path), newChildNode));\n    }\n  };\n  /** @inheritDoc */\n\n\n  LeafNode.prototype.isEmpty = function () {\n    return false;\n  };\n  /** @inheritDoc */\n\n\n  LeafNode.prototype.numChildren = function () {\n    return 0;\n  };\n  /** @inheritDoc */\n\n\n  LeafNode.prototype.forEachChild = function (index, action) {\n    return false;\n  };\n\n  LeafNode.prototype.val = function (exportFormat) {\n    if (exportFormat && !this.getPriority().isEmpty()) {\n      return {\n        '.value': this.getValue(),\n        '.priority': this.getPriority().val()\n      };\n    } else {\n      return this.getValue();\n    }\n  };\n  /** @inheritDoc */\n\n\n  LeafNode.prototype.hash = function () {\n    if (this.lazyHash_ === null) {\n      var toHash = '';\n\n      if (!this.priorityNode_.isEmpty()) {\n        toHash += 'priority:' + priorityHashText(this.priorityNode_.val()) + ':';\n      }\n\n      var type = typeof this.value_;\n      toHash += type + ':';\n\n      if (type === 'number') {\n        toHash += doubleToIEEE754String(this.value_);\n      } else {\n        toHash += this.value_;\n      }\n\n      this.lazyHash_ = sha1(toHash);\n    }\n\n    return this.lazyHash_;\n  };\n  /**\r\n   * Returns the value of the leaf node.\r\n   * @returns The value of the node.\r\n   */\n\n\n  LeafNode.prototype.getValue = function () {\n    return this.value_;\n  };\n\n  LeafNode.prototype.compareTo = function (other) {\n    if (other === LeafNode.__childrenNodeConstructor.EMPTY_NODE) {\n      return 1;\n    } else if (other instanceof LeafNode.__childrenNodeConstructor) {\n      return -1;\n    } else {\n      assert(other.isLeafNode(), 'Unknown node type');\n      return this.compareToLeafNode_(other);\n    }\n  };\n  /**\r\n   * Comparison specifically for two leaf nodes\r\n   */\n\n\n  LeafNode.prototype.compareToLeafNode_ = function (otherLeaf) {\n    var otherLeafType = typeof otherLeaf.value_;\n    var thisLeafType = typeof this.value_;\n    var otherIndex = LeafNode.VALUE_TYPE_ORDER.indexOf(otherLeafType);\n    var thisIndex = LeafNode.VALUE_TYPE_ORDER.indexOf(thisLeafType);\n    assert(otherIndex >= 0, 'Unknown leaf type: ' + otherLeafType);\n    assert(thisIndex >= 0, 'Unknown leaf type: ' + thisLeafType);\n\n    if (otherIndex === thisIndex) {\n      // Same type, compare values\n      if (thisLeafType === 'object') {\n        // Deferred value nodes are all equal, but we should also never get to this point...\n        return 0;\n      } else {\n        // Note that this works because true > false, all others are number or string comparisons\n        if (this.value_ < otherLeaf.value_) {\n          return -1;\n        } else if (this.value_ === otherLeaf.value_) {\n          return 0;\n        } else {\n          return 1;\n        }\n      }\n    } else {\n      return thisIndex - otherIndex;\n    }\n  };\n\n  LeafNode.prototype.withIndex = function () {\n    return this;\n  };\n\n  LeafNode.prototype.isIndexed = function () {\n    return true;\n  };\n\n  LeafNode.prototype.equals = function (other) {\n    if (other === this) {\n      return true;\n    } else if (other.isLeafNode()) {\n      var otherLeaf = other;\n      return this.value_ === otherLeaf.value_ && this.priorityNode_.equals(otherLeaf.priorityNode_);\n    } else {\n      return false;\n    }\n  };\n  /**\r\n   * The sort order for comparing leaf nodes of different types. If two leaf nodes have\r\n   * the same type, the comparison falls back to their value\r\n   */\n\n\n  LeafNode.VALUE_TYPE_ORDER = ['object', 'boolean', 'number', 'string'];\n  return LeafNode;\n}();\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\n\nvar nodeFromJSON$1;\nvar MAX_NODE$1;\n\nfunction setNodeFromJSON(val) {\n  nodeFromJSON$1 = val;\n}\n\nfunction setMaxNode(val) {\n  MAX_NODE$1 = val;\n}\n\nvar PriorityIndex =\n/** @class */\nfunction (_super) {\n  __extends(PriorityIndex, _super);\n\n  function PriorityIndex() {\n    return _super !== null && _super.apply(this, arguments) || this;\n  }\n\n  PriorityIndex.prototype.compare = function (a, b) {\n    var aPriority = a.node.getPriority();\n    var bPriority = b.node.getPriority();\n    var indexCmp = aPriority.compareTo(bPriority);\n\n    if (indexCmp === 0) {\n      return nameCompare(a.name, b.name);\n    } else {\n      return indexCmp;\n    }\n  };\n\n  PriorityIndex.prototype.isDefinedOn = function (node) {\n    return !node.getPriority().isEmpty();\n  };\n\n  PriorityIndex.prototype.indexedValueChanged = function (oldNode, newNode) {\n    return !oldNode.getPriority().equals(newNode.getPriority());\n  };\n\n  PriorityIndex.prototype.minPost = function () {\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    return NamedNode.MIN;\n  };\n\n  PriorityIndex.prototype.maxPost = function () {\n    return new NamedNode(MAX_NAME, new LeafNode('[PRIORITY-POST]', MAX_NODE$1));\n  };\n\n  PriorityIndex.prototype.makePost = function (indexValue, name) {\n    var priorityNode = nodeFromJSON$1(indexValue);\n    return new NamedNode(name, new LeafNode('[PRIORITY-POST]', priorityNode));\n  };\n  /**\r\n   * @returns String representation for inclusion in a query spec\r\n   */\n\n\n  PriorityIndex.prototype.toString = function () {\n    return '.priority';\n  };\n\n  return PriorityIndex;\n}(Index);\n\nvar PRIORITY_INDEX = new PriorityIndex();\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\nvar LOG_2 = Math.log(2);\n\nvar Base12Num =\n/** @class */\nfunction () {\n  function Base12Num(length) {\n    var logBase2 = function (num) {\n      // eslint-disable-next-line @typescript-eslint/no-explicit-any\n      return parseInt(Math.log(num) / LOG_2, 10);\n    };\n\n    var bitMask = function (bits) {\n      return parseInt(Array(bits + 1).join('1'), 2);\n    };\n\n    this.count = logBase2(length + 1);\n    this.current_ = this.count - 1;\n    var mask = bitMask(this.count);\n    this.bits_ = length + 1 & mask;\n  }\n\n  Base12Num.prototype.nextBitIsOne = function () {\n    //noinspection JSBitwiseOperatorUsage\n    var result = !(this.bits_ & 0x1 << this.current_);\n    this.current_--;\n    return result;\n  };\n\n  return Base12Num;\n}();\n/**\r\n * Takes a list of child nodes and constructs a SortedSet using the given comparison\r\n * function\r\n *\r\n * Uses the algorithm described in the paper linked here:\r\n * http://citeseerx.ist.psu.edu/viewdoc/summary?doi=10.1.1.46.1458\r\n *\r\n * @param childList - Unsorted list of children\r\n * @param cmp - The comparison method to be used\r\n * @param keyFn - An optional function to extract K from a node wrapper, if K's\r\n * type is not NamedNode\r\n * @param mapSortFn - An optional override for comparator used by the generated sorted map\r\n */\n\n\nvar buildChildSet = function (childList, cmp, keyFn, mapSortFn) {\n  childList.sort(cmp);\n\n  var buildBalancedTree = function (low, high) {\n    var length = high - low;\n    var namedNode;\n    var key;\n\n    if (length === 0) {\n      return null;\n    } else if (length === 1) {\n      namedNode = childList[low];\n      key = keyFn ? keyFn(namedNode) : namedNode;\n      return new LLRBNode(key, namedNode.node, LLRBNode.BLACK, null, null);\n    } else {\n      // eslint-disable-next-line @typescript-eslint/no-explicit-any\n      var middle = parseInt(length / 2, 10) + low;\n      var left = buildBalancedTree(low, middle);\n      var right = buildBalancedTree(middle + 1, high);\n      namedNode = childList[middle];\n      key = keyFn ? keyFn(namedNode) : namedNode;\n      return new LLRBNode(key, namedNode.node, LLRBNode.BLACK, left, right);\n    }\n  };\n\n  var buildFrom12Array = function (base12) {\n    var node = null;\n    var root = null;\n    var index = childList.length;\n\n    var buildPennant = function (chunkSize, color) {\n      var low = index - chunkSize;\n      var high = index;\n      index -= chunkSize;\n      var childTree = buildBalancedTree(low + 1, high);\n      var namedNode = childList[low];\n      var key = keyFn ? keyFn(namedNode) : namedNode;\n      attachPennant(new LLRBNode(key, namedNode.node, color, null, childTree));\n    };\n\n    var attachPennant = function (pennant) {\n      if (node) {\n        node.left = pennant;\n        node = pennant;\n      } else {\n        root = pennant;\n        node = pennant;\n      }\n    };\n\n    for (var i = 0; i < base12.count; ++i) {\n      var isOne = base12.nextBitIsOne(); // The number of nodes taken in each slice is 2^(arr.length - (i + 1))\n\n      var chunkSize = Math.pow(2, base12.count - (i + 1));\n\n      if (isOne) {\n        buildPennant(chunkSize, LLRBNode.BLACK);\n      } else {\n        // current == 2\n        buildPennant(chunkSize, LLRBNode.BLACK);\n        buildPennant(chunkSize, LLRBNode.RED);\n      }\n    }\n\n    return root;\n  };\n\n  var base12 = new Base12Num(childList.length);\n  var root = buildFrom12Array(base12); // eslint-disable-next-line @typescript-eslint/no-explicit-any\n\n  return new SortedMap(mapSortFn || cmp, root);\n};\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\n\nvar _defaultIndexMap;\n\nvar fallbackObject = {};\n\nvar IndexMap =\n/** @class */\nfunction () {\n  function IndexMap(indexes_, indexSet_) {\n    this.indexes_ = indexes_;\n    this.indexSet_ = indexSet_;\n  }\n\n  Object.defineProperty(IndexMap, \"Default\", {\n    /**\r\n     * The default IndexMap for nodes without a priority\r\n     */\n    get: function () {\n      assert(fallbackObject && PRIORITY_INDEX, 'ChildrenNode.ts has not been loaded');\n      _defaultIndexMap = _defaultIndexMap || new IndexMap({\n        '.priority': fallbackObject\n      }, {\n        '.priority': PRIORITY_INDEX\n      });\n      return _defaultIndexMap;\n    },\n    enumerable: false,\n    configurable: true\n  });\n\n  IndexMap.prototype.get = function (indexKey) {\n    var sortedMap = safeGet(this.indexes_, indexKey);\n\n    if (!sortedMap) {\n      throw new Error('No index defined for ' + indexKey);\n    }\n\n    if (sortedMap instanceof SortedMap) {\n      return sortedMap;\n    } else {\n      // The index exists, but it falls back to just name comparison. Return null so that the calling code uses the\n      // regular child map\n      return null;\n    }\n  };\n\n  IndexMap.prototype.hasIndex = function (indexDefinition) {\n    return contains(this.indexSet_, indexDefinition.toString());\n  };\n\n  IndexMap.prototype.addIndex = function (indexDefinition, existingChildren) {\n    assert(indexDefinition !== KEY_INDEX, \"KeyIndex always exists and isn't meant to be added to the IndexMap.\");\n    var childList = [];\n    var sawIndexedValue = false;\n    var iter = existingChildren.getIterator(NamedNode.Wrap);\n    var next = iter.getNext();\n\n    while (next) {\n      sawIndexedValue = sawIndexedValue || indexDefinition.isDefinedOn(next.node);\n      childList.push(next);\n      next = iter.getNext();\n    }\n\n    var newIndex;\n\n    if (sawIndexedValue) {\n      newIndex = buildChildSet(childList, indexDefinition.getCompare());\n    } else {\n      newIndex = fallbackObject;\n    }\n\n    var indexName = indexDefinition.toString();\n\n    var newIndexSet = __assign({}, this.indexSet_);\n\n    newIndexSet[indexName] = indexDefinition;\n\n    var newIndexes = __assign({}, this.indexes_);\n\n    newIndexes[indexName] = newIndex;\n    return new IndexMap(newIndexes, newIndexSet);\n  };\n  /**\r\n   * Ensure that this node is properly tracked in any indexes that we're maintaining\r\n   */\n\n\n  IndexMap.prototype.addToIndexes = function (namedNode, existingChildren) {\n    var _this = this;\n\n    var newIndexes = map(this.indexes_, function (indexedChildren, indexName) {\n      var index = safeGet(_this.indexSet_, indexName);\n      assert(index, 'Missing index implementation for ' + indexName);\n\n      if (indexedChildren === fallbackObject) {\n        // Check to see if we need to index everything\n        if (index.isDefinedOn(namedNode.node)) {\n          // We need to build this index\n          var childList = [];\n          var iter = existingChildren.getIterator(NamedNode.Wrap);\n          var next = iter.getNext();\n\n          while (next) {\n            if (next.name !== namedNode.name) {\n              childList.push(next);\n            }\n\n            next = iter.getNext();\n          }\n\n          childList.push(namedNode);\n          return buildChildSet(childList, index.getCompare());\n        } else {\n          // No change, this remains a fallback\n          return fallbackObject;\n        }\n      } else {\n        var existingSnap = existingChildren.get(namedNode.name);\n        var newChildren = indexedChildren;\n\n        if (existingSnap) {\n          newChildren = newChildren.remove(new NamedNode(namedNode.name, existingSnap));\n        }\n\n        return newChildren.insert(namedNode, namedNode.node);\n      }\n    });\n    return new IndexMap(newIndexes, this.indexSet_);\n  };\n  /**\r\n   * Create a new IndexMap instance with the given value removed\r\n   */\n\n\n  IndexMap.prototype.removeFromIndexes = function (namedNode, existingChildren) {\n    var newIndexes = map(this.indexes_, function (indexedChildren) {\n      if (indexedChildren === fallbackObject) {\n        // This is the fallback. Just return it, nothing to do in this case\n        return indexedChildren;\n      } else {\n        var existingSnap = existingChildren.get(namedNode.name);\n\n        if (existingSnap) {\n          return indexedChildren.remove(new NamedNode(namedNode.name, existingSnap));\n        } else {\n          // No record of this child\n          return indexedChildren;\n        }\n      }\n    });\n    return new IndexMap(newIndexes, this.indexSet_);\n  };\n\n  return IndexMap;\n}();\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n// TODO: For memory savings, don't store priorityNode_ if it's empty.\n\n\nvar EMPTY_NODE;\n/**\r\n * ChildrenNode is a class for storing internal nodes in a DataSnapshot\r\n * (i.e. nodes with children).  It implements Node and stores the\r\n * list of children in the children property, sorted by child name.\r\n */\n\nvar ChildrenNode =\n/** @class */\nfunction () {\n  /**\r\n   * @param children_ - List of children of this node..\r\n   * @param priorityNode_ - The priority of this node (as a snapshot node).\r\n   */\n  function ChildrenNode(children_, priorityNode_, indexMap_) {\n    this.children_ = children_;\n    this.priorityNode_ = priorityNode_;\n    this.indexMap_ = indexMap_;\n    this.lazyHash_ = null;\n    /**\r\n     * Note: The only reason we allow null priority is for EMPTY_NODE, since we can't use\r\n     * EMPTY_NODE as the priority of EMPTY_NODE.  We might want to consider making EMPTY_NODE its own\r\n     * class instead of an empty ChildrenNode.\r\n     */\n\n    if (this.priorityNode_) {\n      validatePriorityNode(this.priorityNode_);\n    }\n\n    if (this.children_.isEmpty()) {\n      assert(!this.priorityNode_ || this.priorityNode_.isEmpty(), 'An empty node cannot have a priority');\n    }\n  }\n\n  Object.defineProperty(ChildrenNode, \"EMPTY_NODE\", {\n    get: function () {\n      return EMPTY_NODE || (EMPTY_NODE = new ChildrenNode(new SortedMap(NAME_COMPARATOR), null, IndexMap.Default));\n    },\n    enumerable: false,\n    configurable: true\n  });\n  /** @inheritDoc */\n\n  ChildrenNode.prototype.isLeafNode = function () {\n    return false;\n  };\n  /** @inheritDoc */\n\n\n  ChildrenNode.prototype.getPriority = function () {\n    return this.priorityNode_ || EMPTY_NODE;\n  };\n  /** @inheritDoc */\n\n\n  ChildrenNode.prototype.updatePriority = function (newPriorityNode) {\n    if (this.children_.isEmpty()) {\n      // Don't allow priorities on empty nodes\n      return this;\n    } else {\n      return new ChildrenNode(this.children_, newPriorityNode, this.indexMap_);\n    }\n  };\n  /** @inheritDoc */\n\n\n  ChildrenNode.prototype.getImmediateChild = function (childName) {\n    // Hack to treat priority as a regular child\n    if (childName === '.priority') {\n      return this.getPriority();\n    } else {\n      var child = this.children_.get(childName);\n      return child === null ? EMPTY_NODE : child;\n    }\n  };\n  /** @inheritDoc */\n\n\n  ChildrenNode.prototype.getChild = function (path) {\n    var front = pathGetFront(path);\n\n    if (front === null) {\n      return this;\n    }\n\n    return this.getImmediateChild(front).getChild(pathPopFront(path));\n  };\n  /** @inheritDoc */\n\n\n  ChildrenNode.prototype.hasChild = function (childName) {\n    return this.children_.get(childName) !== null;\n  };\n  /** @inheritDoc */\n\n\n  ChildrenNode.prototype.updateImmediateChild = function (childName, newChildNode) {\n    assert(newChildNode, 'We should always be passing snapshot nodes');\n\n    if (childName === '.priority') {\n      return this.updatePriority(newChildNode);\n    } else {\n      var namedNode = new NamedNode(childName, newChildNode);\n      var newChildren = void 0,\n          newIndexMap = void 0;\n\n      if (newChildNode.isEmpty()) {\n        newChildren = this.children_.remove(childName);\n        newIndexMap = this.indexMap_.removeFromIndexes(namedNode, this.children_);\n      } else {\n        newChildren = this.children_.insert(childName, newChildNode);\n        newIndexMap = this.indexMap_.addToIndexes(namedNode, this.children_);\n      }\n\n      var newPriority = newChildren.isEmpty() ? EMPTY_NODE : this.priorityNode_;\n      return new ChildrenNode(newChildren, newPriority, newIndexMap);\n    }\n  };\n  /** @inheritDoc */\n\n\n  ChildrenNode.prototype.updateChild = function (path, newChildNode) {\n    var front = pathGetFront(path);\n\n    if (front === null) {\n      return newChildNode;\n    } else {\n      assert(pathGetFront(path) !== '.priority' || pathGetLength(path) === 1, '.priority must be the last token in a path');\n      var newImmediateChild = this.getImmediateChild(front).updateChild(pathPopFront(path), newChildNode);\n      return this.updateImmediateChild(front, newImmediateChild);\n    }\n  };\n  /** @inheritDoc */\n\n\n  ChildrenNode.prototype.isEmpty = function () {\n    return this.children_.isEmpty();\n  };\n  /** @inheritDoc */\n\n\n  ChildrenNode.prototype.numChildren = function () {\n    return this.children_.count();\n  };\n  /** @inheritDoc */\n\n\n  ChildrenNode.prototype.val = function (exportFormat) {\n    if (this.isEmpty()) {\n      return null;\n    }\n\n    var obj = {};\n    var numKeys = 0,\n        maxKey = 0,\n        allIntegerKeys = true;\n    this.forEachChild(PRIORITY_INDEX, function (key, childNode) {\n      obj[key] = childNode.val(exportFormat);\n      numKeys++;\n\n      if (allIntegerKeys && ChildrenNode.INTEGER_REGEXP_.test(key)) {\n        maxKey = Math.max(maxKey, Number(key));\n      } else {\n        allIntegerKeys = false;\n      }\n    });\n\n    if (!exportFormat && allIntegerKeys && maxKey < 2 * numKeys) {\n      // convert to array.\n      var array = []; // eslint-disable-next-line guard-for-in\n\n      for (var key in obj) {\n        array[key] = obj[key];\n      }\n\n      return array;\n    } else {\n      if (exportFormat && !this.getPriority().isEmpty()) {\n        obj['.priority'] = this.getPriority().val();\n      }\n\n      return obj;\n    }\n  };\n  /** @inheritDoc */\n\n\n  ChildrenNode.prototype.hash = function () {\n    if (this.lazyHash_ === null) {\n      var toHash_1 = '';\n\n      if (!this.getPriority().isEmpty()) {\n        toHash_1 += 'priority:' + priorityHashText(this.getPriority().val()) + ':';\n      }\n\n      this.forEachChild(PRIORITY_INDEX, function (key, childNode) {\n        var childHash = childNode.hash();\n\n        if (childHash !== '') {\n          toHash_1 += ':' + key + ':' + childHash;\n        }\n      });\n      this.lazyHash_ = toHash_1 === '' ? '' : sha1(toHash_1);\n    }\n\n    return this.lazyHash_;\n  };\n  /** @inheritDoc */\n\n\n  ChildrenNode.prototype.getPredecessorChildName = function (childName, childNode, index) {\n    var idx = this.resolveIndex_(index);\n\n    if (idx) {\n      var predecessor = idx.getPredecessorKey(new NamedNode(childName, childNode));\n      return predecessor ? predecessor.name : null;\n    } else {\n      return this.children_.getPredecessorKey(childName);\n    }\n  };\n\n  ChildrenNode.prototype.getFirstChildName = function (indexDefinition) {\n    var idx = this.resolveIndex_(indexDefinition);\n\n    if (idx) {\n      var minKey = idx.minKey();\n      return minKey && minKey.name;\n    } else {\n      return this.children_.minKey();\n    }\n  };\n\n  ChildrenNode.prototype.getFirstChild = function (indexDefinition) {\n    var minKey = this.getFirstChildName(indexDefinition);\n\n    if (minKey) {\n      return new NamedNode(minKey, this.children_.get(minKey));\n    } else {\n      return null;\n    }\n  };\n  /**\r\n   * Given an index, return the key name of the largest value we have, according to that index\r\n   */\n\n\n  ChildrenNode.prototype.getLastChildName = function (indexDefinition) {\n    var idx = this.resolveIndex_(indexDefinition);\n\n    if (idx) {\n      var maxKey = idx.maxKey();\n      return maxKey && maxKey.name;\n    } else {\n      return this.children_.maxKey();\n    }\n  };\n\n  ChildrenNode.prototype.getLastChild = function (indexDefinition) {\n    var maxKey = this.getLastChildName(indexDefinition);\n\n    if (maxKey) {\n      return new NamedNode(maxKey, this.children_.get(maxKey));\n    } else {\n      return null;\n    }\n  };\n\n  ChildrenNode.prototype.forEachChild = function (index, action) {\n    var idx = this.resolveIndex_(index);\n\n    if (idx) {\n      return idx.inorderTraversal(function (wrappedNode) {\n        return action(wrappedNode.name, wrappedNode.node);\n      });\n    } else {\n      return this.children_.inorderTraversal(action);\n    }\n  };\n\n  ChildrenNode.prototype.getIterator = function (indexDefinition) {\n    return this.getIteratorFrom(indexDefinition.minPost(), indexDefinition);\n  };\n\n  ChildrenNode.prototype.getIteratorFrom = function (startPost, indexDefinition) {\n    var idx = this.resolveIndex_(indexDefinition);\n\n    if (idx) {\n      return idx.getIteratorFrom(startPost, function (key) {\n        return key;\n      });\n    } else {\n      var iterator = this.children_.getIteratorFrom(startPost.name, NamedNode.Wrap);\n      var next = iterator.peek();\n\n      while (next != null && indexDefinition.compare(next, startPost) < 0) {\n        iterator.getNext();\n        next = iterator.peek();\n      }\n\n      return iterator;\n    }\n  };\n\n  ChildrenNode.prototype.getReverseIterator = function (indexDefinition) {\n    return this.getReverseIteratorFrom(indexDefinition.maxPost(), indexDefinition);\n  };\n\n  ChildrenNode.prototype.getReverseIteratorFrom = function (endPost, indexDefinition) {\n    var idx = this.resolveIndex_(indexDefinition);\n\n    if (idx) {\n      return idx.getReverseIteratorFrom(endPost, function (key) {\n        return key;\n      });\n    } else {\n      var iterator = this.children_.getReverseIteratorFrom(endPost.name, NamedNode.Wrap);\n      var next = iterator.peek();\n\n      while (next != null && indexDefinition.compare(next, endPost) > 0) {\n        iterator.getNext();\n        next = iterator.peek();\n      }\n\n      return iterator;\n    }\n  };\n\n  ChildrenNode.prototype.compareTo = function (other) {\n    if (this.isEmpty()) {\n      if (other.isEmpty()) {\n        return 0;\n      } else {\n        return -1;\n      }\n    } else if (other.isLeafNode() || other.isEmpty()) {\n      return 1;\n    } else if (other === MAX_NODE) {\n      return -1;\n    } else {\n      // Must be another node with children.\n      return 0;\n    }\n  };\n\n  ChildrenNode.prototype.withIndex = function (indexDefinition) {\n    if (indexDefinition === KEY_INDEX || this.indexMap_.hasIndex(indexDefinition)) {\n      return this;\n    } else {\n      var newIndexMap = this.indexMap_.addIndex(indexDefinition, this.children_);\n      return new ChildrenNode(this.children_, this.priorityNode_, newIndexMap);\n    }\n  };\n\n  ChildrenNode.prototype.isIndexed = function (index) {\n    return index === KEY_INDEX || this.indexMap_.hasIndex(index);\n  };\n\n  ChildrenNode.prototype.equals = function (other) {\n    if (other === this) {\n      return true;\n    } else if (other.isLeafNode()) {\n      return false;\n    } else {\n      var otherChildrenNode = other;\n\n      if (!this.getPriority().equals(otherChildrenNode.getPriority())) {\n        return false;\n      } else if (this.children_.count() === otherChildrenNode.children_.count()) {\n        var thisIter = this.getIterator(PRIORITY_INDEX);\n        var otherIter = otherChildrenNode.getIterator(PRIORITY_INDEX);\n        var thisCurrent = thisIter.getNext();\n        var otherCurrent = otherIter.getNext();\n\n        while (thisCurrent && otherCurrent) {\n          if (thisCurrent.name !== otherCurrent.name || !thisCurrent.node.equals(otherCurrent.node)) {\n            return false;\n          }\n\n          thisCurrent = thisIter.getNext();\n          otherCurrent = otherIter.getNext();\n        }\n\n        return thisCurrent === null && otherCurrent === null;\n      } else {\n        return false;\n      }\n    }\n  };\n  /**\r\n   * Returns a SortedMap ordered by index, or null if the default (by-key) ordering can be used\r\n   * instead.\r\n   *\r\n   */\n\n\n  ChildrenNode.prototype.resolveIndex_ = function (indexDefinition) {\n    if (indexDefinition === KEY_INDEX) {\n      return null;\n    } else {\n      return this.indexMap_.get(indexDefinition.toString());\n    }\n  };\n\n  ChildrenNode.INTEGER_REGEXP_ = /^(0|[1-9]\\d*)$/;\n  return ChildrenNode;\n}();\n\nvar MaxNode =\n/** @class */\nfunction (_super) {\n  __extends(MaxNode, _super);\n\n  function MaxNode() {\n    return _super.call(this, new SortedMap(NAME_COMPARATOR), ChildrenNode.EMPTY_NODE, IndexMap.Default) || this;\n  }\n\n  MaxNode.prototype.compareTo = function (other) {\n    if (other === this) {\n      return 0;\n    } else {\n      return 1;\n    }\n  };\n\n  MaxNode.prototype.equals = function (other) {\n    // Not that we every compare it, but MAX_NODE is only ever equal to itself\n    return other === this;\n  };\n\n  MaxNode.prototype.getPriority = function () {\n    return this;\n  };\n\n  MaxNode.prototype.getImmediateChild = function (childName) {\n    return ChildrenNode.EMPTY_NODE;\n  };\n\n  MaxNode.prototype.isEmpty = function () {\n    return false;\n  };\n\n  return MaxNode;\n}(ChildrenNode);\n/**\r\n * Marker that will sort higher than any other snapshot.\r\n */\n\n\nvar MAX_NODE = new MaxNode();\nObject.defineProperties(NamedNode, {\n  MIN: {\n    value: new NamedNode(MIN_NAME, ChildrenNode.EMPTY_NODE)\n  },\n  MAX: {\n    value: new NamedNode(MAX_NAME, MAX_NODE)\n  }\n});\n/**\r\n * Reference Extensions\r\n */\n\nKeyIndex.__EMPTY_NODE = ChildrenNode.EMPTY_NODE;\nLeafNode.__childrenNodeConstructor = ChildrenNode;\nsetMaxNode$1(MAX_NODE);\nsetMaxNode(MAX_NODE);\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\nvar USE_HINZE = true;\n/**\r\n * Constructs a snapshot node representing the passed JSON and returns it.\r\n * @param json - JSON to create a node for.\r\n * @param priority - Optional priority to use.  This will be ignored if the\r\n * passed JSON contains a .priority property.\r\n */\n\nfunction nodeFromJSON(json, priority) {\n  if (priority === void 0) {\n    priority = null;\n  }\n\n  if (json === null) {\n    return ChildrenNode.EMPTY_NODE;\n  }\n\n  if (typeof json === 'object' && '.priority' in json) {\n    priority = json['.priority'];\n  }\n\n  assert(priority === null || typeof priority === 'string' || typeof priority === 'number' || typeof priority === 'object' && '.sv' in priority, 'Invalid priority type found: ' + typeof priority);\n\n  if (typeof json === 'object' && '.value' in json && json['.value'] !== null) {\n    json = json['.value'];\n  } // Valid leaf nodes include non-objects or server-value wrapper objects\n\n\n  if (typeof json !== 'object' || '.sv' in json) {\n    var jsonLeaf = json;\n    return new LeafNode(jsonLeaf, nodeFromJSON(priority));\n  }\n\n  if (!(json instanceof Array) && USE_HINZE) {\n    var children_1 = [];\n    var childrenHavePriority_1 = false;\n    var hinzeJsonObj = json;\n    each(hinzeJsonObj, function (key, child) {\n      if (key.substring(0, 1) !== '.') {\n        // Ignore metadata nodes\n        var childNode = nodeFromJSON(child);\n\n        if (!childNode.isEmpty()) {\n          childrenHavePriority_1 = childrenHavePriority_1 || !childNode.getPriority().isEmpty();\n          children_1.push(new NamedNode(key, childNode));\n        }\n      }\n    });\n\n    if (children_1.length === 0) {\n      return ChildrenNode.EMPTY_NODE;\n    }\n\n    var childSet = buildChildSet(children_1, NAME_ONLY_COMPARATOR, function (namedNode) {\n      return namedNode.name;\n    }, NAME_COMPARATOR);\n\n    if (childrenHavePriority_1) {\n      var sortedChildSet = buildChildSet(children_1, PRIORITY_INDEX.getCompare());\n      return new ChildrenNode(childSet, nodeFromJSON(priority), new IndexMap({\n        '.priority': sortedChildSet\n      }, {\n        '.priority': PRIORITY_INDEX\n      }));\n    } else {\n      return new ChildrenNode(childSet, nodeFromJSON(priority), IndexMap.Default);\n    }\n  } else {\n    var node_1 = ChildrenNode.EMPTY_NODE;\n    each(json, function (key, childData) {\n      if (contains(json, key)) {\n        if (key.substring(0, 1) !== '.') {\n          // ignore metadata nodes.\n          var childNode = nodeFromJSON(childData);\n\n          if (childNode.isLeafNode() || !childNode.isEmpty()) {\n            node_1 = node_1.updateImmediateChild(key, childNode);\n          }\n        }\n      }\n    });\n    return node_1.updatePriority(nodeFromJSON(priority));\n  }\n}\n\nsetNodeFromJSON(nodeFromJSON);\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\nvar PathIndex =\n/** @class */\nfunction (_super) {\n  __extends(PathIndex, _super);\n\n  function PathIndex(indexPath_) {\n    var _this = _super.call(this) || this;\n\n    _this.indexPath_ = indexPath_;\n    assert(!pathIsEmpty(indexPath_) && pathGetFront(indexPath_) !== '.priority', \"Can't create PathIndex with empty path or .priority key\");\n    return _this;\n  }\n\n  PathIndex.prototype.extractChild = function (snap) {\n    return snap.getChild(this.indexPath_);\n  };\n\n  PathIndex.prototype.isDefinedOn = function (node) {\n    return !node.getChild(this.indexPath_).isEmpty();\n  };\n\n  PathIndex.prototype.compare = function (a, b) {\n    var aChild = this.extractChild(a.node);\n    var bChild = this.extractChild(b.node);\n    var indexCmp = aChild.compareTo(bChild);\n\n    if (indexCmp === 0) {\n      return nameCompare(a.name, b.name);\n    } else {\n      return indexCmp;\n    }\n  };\n\n  PathIndex.prototype.makePost = function (indexValue, name) {\n    var valueNode = nodeFromJSON(indexValue);\n    var node = ChildrenNode.EMPTY_NODE.updateChild(this.indexPath_, valueNode);\n    return new NamedNode(name, node);\n  };\n\n  PathIndex.prototype.maxPost = function () {\n    var node = ChildrenNode.EMPTY_NODE.updateChild(this.indexPath_, MAX_NODE);\n    return new NamedNode(MAX_NAME, node);\n  };\n\n  PathIndex.prototype.toString = function () {\n    return pathSlice(this.indexPath_, 0).join('/');\n  };\n\n  return PathIndex;\n}(Index);\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\n\nvar ValueIndex =\n/** @class */\nfunction (_super) {\n  __extends(ValueIndex, _super);\n\n  function ValueIndex() {\n    return _super !== null && _super.apply(this, arguments) || this;\n  }\n\n  ValueIndex.prototype.compare = function (a, b) {\n    var indexCmp = a.node.compareTo(b.node);\n\n    if (indexCmp === 0) {\n      return nameCompare(a.name, b.name);\n    } else {\n      return indexCmp;\n    }\n  };\n\n  ValueIndex.prototype.isDefinedOn = function (node) {\n    return true;\n  };\n\n  ValueIndex.prototype.indexedValueChanged = function (oldNode, newNode) {\n    return !oldNode.equals(newNode);\n  };\n\n  ValueIndex.prototype.minPost = function () {\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    return NamedNode.MIN;\n  };\n\n  ValueIndex.prototype.maxPost = function () {\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    return NamedNode.MAX;\n  };\n\n  ValueIndex.prototype.makePost = function (indexValue, name) {\n    var valueNode = nodeFromJSON(indexValue);\n    return new NamedNode(name, valueNode);\n  };\n  /**\r\n   * @returns String representation for inclusion in a query spec\r\n   */\n\n\n  ValueIndex.prototype.toString = function () {\n    return '.value';\n  };\n\n  return ValueIndex;\n}(Index);\n\nvar VALUE_INDEX = new ValueIndex();\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n// Modeled after base64 web-safe chars, but ordered by ASCII.\n\nvar PUSH_CHARS = '-0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ_abcdefghijklmnopqrstuvwxyz';\nvar MIN_PUSH_CHAR = '-';\nvar MAX_PUSH_CHAR = 'z';\nvar MAX_KEY_LEN = 786;\n/**\r\n * Fancy ID generator that creates 20-character string identifiers with the\r\n * following properties:\r\n *\r\n * 1. They're based on timestamp so that they sort *after* any existing ids.\r\n * 2. They contain 72-bits of random data after the timestamp so that IDs won't\r\n *    collide with other clients' IDs.\r\n * 3. They sort *lexicographically* (so the timestamp is converted to characters\r\n *    that will sort properly).\r\n * 4. They're monotonically increasing. Even if you generate more than one in\r\n *    the same timestamp, the latter ones will sort after the former ones. We do\r\n *    this by using the previous random bits but \"incrementing\" them by 1 (only\r\n *    in the case of a timestamp collision).\r\n */\n\nvar nextPushId = function () {\n  // Timestamp of last push, used to prevent local collisions if you push twice\n  // in one ms.\n  var lastPushTime = 0; // We generate 72-bits of randomness which get turned into 12 characters and\n  // appended to the timestamp to prevent collisions with other clients. We\n  // store the last characters we generated because in the event of a collision,\n  // we'll use those same characters except \"incremented\" by one.\n\n  var lastRandChars = [];\n  return function (now) {\n    var duplicateTime = now === lastPushTime;\n    lastPushTime = now;\n    var i;\n    var timeStampChars = new Array(8);\n\n    for (i = 7; i >= 0; i--) {\n      timeStampChars[i] = PUSH_CHARS.charAt(now % 64); // NOTE: Can't use << here because javascript will convert to int and lose\n      // the upper bits.\n\n      now = Math.floor(now / 64);\n    }\n\n    assert(now === 0, 'Cannot push at time == 0');\n    var id = timeStampChars.join('');\n\n    if (!duplicateTime) {\n      for (i = 0; i < 12; i++) {\n        lastRandChars[i] = Math.floor(Math.random() * 64);\n      }\n    } else {\n      // If the timestamp hasn't changed since last push, use the same random\n      // number, except incremented by 1.\n      for (i = 11; i >= 0 && lastRandChars[i] === 63; i--) {\n        lastRandChars[i] = 0;\n      }\n\n      lastRandChars[i]++;\n    }\n\n    for (i = 0; i < 12; i++) {\n      id += PUSH_CHARS.charAt(lastRandChars[i]);\n    }\n\n    assert(id.length === 20, 'nextPushId: Length should be 20.');\n    return id;\n  };\n}();\n\nvar successor = function (key) {\n  if (key === '' + INTEGER_32_MAX) {\n    // See https://firebase.google.com/docs/database/web/lists-of-data#data-order\n    return MIN_PUSH_CHAR;\n  }\n\n  var keyAsInt = tryParseInt(key);\n\n  if (keyAsInt != null) {\n    return '' + (keyAsInt + 1);\n  }\n\n  var next = new Array(key.length);\n\n  for (var i_1 = 0; i_1 < next.length; i_1++) {\n    next[i_1] = key.charAt(i_1);\n  }\n\n  if (next.length < MAX_KEY_LEN) {\n    next.push(MIN_PUSH_CHAR);\n    return next.join('');\n  }\n\n  var i = next.length - 1;\n\n  while (i >= 0 && next[i] === MAX_PUSH_CHAR) {\n    i--;\n  } // `successor` was called on the largest possible key, so return the\n  // MAX_NAME, which sorts larger than all keys.\n\n\n  if (i === -1) {\n    return MAX_NAME;\n  }\n\n  var source = next[i];\n  var sourcePlusOne = PUSH_CHARS.charAt(PUSH_CHARS.indexOf(source) + 1);\n  next[i] = sourcePlusOne;\n  return next.slice(0, i + 1).join('');\n}; // `key` is assumed to be non-empty.\n\n\nvar predecessor = function (key) {\n  if (key === '' + INTEGER_32_MIN) {\n    return MIN_NAME;\n  }\n\n  var keyAsInt = tryParseInt(key);\n\n  if (keyAsInt != null) {\n    return '' + (keyAsInt - 1);\n  }\n\n  var next = new Array(key.length);\n\n  for (var i = 0; i < next.length; i++) {\n    next[i] = key.charAt(i);\n  } // If `key` ends in `MIN_PUSH_CHAR`, the largest key lexicographically\n  // smaller than `key`, is `key[0:key.length - 1]`. The next key smaller\n  // than that, `predecessor(predecessor(key))`, is\n  //\n  // `key[0:key.length - 2] + (key[key.length - 1] - 1) + \\\n  //   { MAX_PUSH_CHAR repeated MAX_KEY_LEN - (key.length - 1) times }\n  //\n  // analogous to increment/decrement for base-10 integers.\n  //\n  // This works because lexigographic comparison works character-by-character,\n  // using length as a tie-breaker if one key is a prefix of the other.\n\n\n  if (next[next.length - 1] === MIN_PUSH_CHAR) {\n    if (next.length === 1) {\n      // See https://firebase.google.com/docs/database/web/lists-of-data#orderbykey\n      return '' + INTEGER_32_MAX;\n    }\n\n    delete next[next.length - 1];\n    return next.join('');\n  } // Replace the last character with it's immediate predecessor, and\n  // fill the suffix of the key with MAX_PUSH_CHAR. This is the\n  // lexicographically largest possible key smaller than `key`.\n\n\n  next[next.length - 1] = PUSH_CHARS.charAt(PUSH_CHARS.indexOf(next[next.length - 1]) - 1);\n  return next.join('') + MAX_PUSH_CHAR.repeat(MAX_KEY_LEN - next.length);\n};\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\n\nfunction changeValue(snapshotNode) {\n  return {\n    type: \"value\"\n    /* VALUE */\n    ,\n    snapshotNode: snapshotNode\n  };\n}\n\nfunction changeChildAdded(childName, snapshotNode) {\n  return {\n    type: \"child_added\"\n    /* CHILD_ADDED */\n    ,\n    snapshotNode: snapshotNode,\n    childName: childName\n  };\n}\n\nfunction changeChildRemoved(childName, snapshotNode) {\n  return {\n    type: \"child_removed\"\n    /* CHILD_REMOVED */\n    ,\n    snapshotNode: snapshotNode,\n    childName: childName\n  };\n}\n\nfunction changeChildChanged(childName, snapshotNode, oldSnap) {\n  return {\n    type: \"child_changed\"\n    /* CHILD_CHANGED */\n    ,\n    snapshotNode: snapshotNode,\n    childName: childName,\n    oldSnap: oldSnap\n  };\n}\n\nfunction changeChildMoved(childName, snapshotNode) {\n  return {\n    type: \"child_moved\"\n    /* CHILD_MOVED */\n    ,\n    snapshotNode: snapshotNode,\n    childName: childName\n  };\n}\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\n/**\r\n * Doesn't really filter nodes but applies an index to the node and keeps track of any changes\r\n */\n\n\nvar IndexedFilter =\n/** @class */\nfunction () {\n  function IndexedFilter(index_) {\n    this.index_ = index_;\n  }\n\n  IndexedFilter.prototype.updateChild = function (snap, key, newChild, affectedPath, source, optChangeAccumulator) {\n    assert(snap.isIndexed(this.index_), 'A node must be indexed if only a child is updated');\n    var oldChild = snap.getImmediateChild(key); // Check if anything actually changed.\n\n    if (oldChild.getChild(affectedPath).equals(newChild.getChild(affectedPath))) {\n      // There's an edge case where a child can enter or leave the view because affectedPath was set to null.\n      // In this case, affectedPath will appear null in both the old and new snapshots.  So we need\n      // to avoid treating these cases as \"nothing changed.\"\n      if (oldChild.isEmpty() === newChild.isEmpty()) {\n        // Nothing changed.\n        // This assert should be valid, but it's expensive (can dominate perf testing) so don't actually do it.\n        //assert(oldChild.equals(newChild), 'Old and new snapshots should be equal.');\n        return snap;\n      }\n    }\n\n    if (optChangeAccumulator != null) {\n      if (newChild.isEmpty()) {\n        if (snap.hasChild(key)) {\n          optChangeAccumulator.trackChildChange(changeChildRemoved(key, oldChild));\n        } else {\n          assert(snap.isLeafNode(), 'A child remove without an old child only makes sense on a leaf node');\n        }\n      } else if (oldChild.isEmpty()) {\n        optChangeAccumulator.trackChildChange(changeChildAdded(key, newChild));\n      } else {\n        optChangeAccumulator.trackChildChange(changeChildChanged(key, newChild, oldChild));\n      }\n    }\n\n    if (snap.isLeafNode() && newChild.isEmpty()) {\n      return snap;\n    } else {\n      // Make sure the node is indexed\n      return snap.updateImmediateChild(key, newChild).withIndex(this.index_);\n    }\n  };\n\n  IndexedFilter.prototype.updateFullNode = function (oldSnap, newSnap, optChangeAccumulator) {\n    if (optChangeAccumulator != null) {\n      if (!oldSnap.isLeafNode()) {\n        oldSnap.forEachChild(PRIORITY_INDEX, function (key, childNode) {\n          if (!newSnap.hasChild(key)) {\n            optChangeAccumulator.trackChildChange(changeChildRemoved(key, childNode));\n          }\n        });\n      }\n\n      if (!newSnap.isLeafNode()) {\n        newSnap.forEachChild(PRIORITY_INDEX, function (key, childNode) {\n          if (oldSnap.hasChild(key)) {\n            var oldChild = oldSnap.getImmediateChild(key);\n\n            if (!oldChild.equals(childNode)) {\n              optChangeAccumulator.trackChildChange(changeChildChanged(key, childNode, oldChild));\n            }\n          } else {\n            optChangeAccumulator.trackChildChange(changeChildAdded(key, childNode));\n          }\n        });\n      }\n    }\n\n    return newSnap.withIndex(this.index_);\n  };\n\n  IndexedFilter.prototype.updatePriority = function (oldSnap, newPriority) {\n    if (oldSnap.isEmpty()) {\n      return ChildrenNode.EMPTY_NODE;\n    } else {\n      return oldSnap.updatePriority(newPriority);\n    }\n  };\n\n  IndexedFilter.prototype.filtersNodes = function () {\n    return false;\n  };\n\n  IndexedFilter.prototype.getIndexedFilter = function () {\n    return this;\n  };\n\n  IndexedFilter.prototype.getIndex = function () {\n    return this.index_;\n  };\n\n  return IndexedFilter;\n}();\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\n/**\r\n * Filters nodes by range and uses an IndexFilter to track any changes after filtering the node\r\n */\n\n\nvar RangedFilter =\n/** @class */\nfunction () {\n  function RangedFilter(params) {\n    this.indexedFilter_ = new IndexedFilter(params.getIndex());\n    this.index_ = params.getIndex();\n    this.startPost_ = RangedFilter.getStartPost_(params);\n    this.endPost_ = RangedFilter.getEndPost_(params);\n  }\n\n  RangedFilter.prototype.getStartPost = function () {\n    return this.startPost_;\n  };\n\n  RangedFilter.prototype.getEndPost = function () {\n    return this.endPost_;\n  };\n\n  RangedFilter.prototype.matches = function (node) {\n    return this.index_.compare(this.getStartPost(), node) <= 0 && this.index_.compare(node, this.getEndPost()) <= 0;\n  };\n\n  RangedFilter.prototype.updateChild = function (snap, key, newChild, affectedPath, source, optChangeAccumulator) {\n    if (!this.matches(new NamedNode(key, newChild))) {\n      newChild = ChildrenNode.EMPTY_NODE;\n    }\n\n    return this.indexedFilter_.updateChild(snap, key, newChild, affectedPath, source, optChangeAccumulator);\n  };\n\n  RangedFilter.prototype.updateFullNode = function (oldSnap, newSnap, optChangeAccumulator) {\n    if (newSnap.isLeafNode()) {\n      // Make sure we have a children node with the correct index, not a leaf node;\n      newSnap = ChildrenNode.EMPTY_NODE;\n    }\n\n    var filtered = newSnap.withIndex(this.index_); // Don't support priorities on queries\n\n    filtered = filtered.updatePriority(ChildrenNode.EMPTY_NODE);\n    var self = this;\n    newSnap.forEachChild(PRIORITY_INDEX, function (key, childNode) {\n      if (!self.matches(new NamedNode(key, childNode))) {\n        filtered = filtered.updateImmediateChild(key, ChildrenNode.EMPTY_NODE);\n      }\n    });\n    return this.indexedFilter_.updateFullNode(oldSnap, filtered, optChangeAccumulator);\n  };\n\n  RangedFilter.prototype.updatePriority = function (oldSnap, newPriority) {\n    // Don't support priorities on queries\n    return oldSnap;\n  };\n\n  RangedFilter.prototype.filtersNodes = function () {\n    return true;\n  };\n\n  RangedFilter.prototype.getIndexedFilter = function () {\n    return this.indexedFilter_;\n  };\n\n  RangedFilter.prototype.getIndex = function () {\n    return this.index_;\n  };\n\n  RangedFilter.getStartPost_ = function (params) {\n    if (params.hasStart()) {\n      var startName = params.getIndexStartName();\n      return params.getIndex().makePost(params.getIndexStartValue(), startName);\n    } else {\n      return params.getIndex().minPost();\n    }\n  };\n\n  RangedFilter.getEndPost_ = function (params) {\n    if (params.hasEnd()) {\n      var endName = params.getIndexEndName();\n      return params.getIndex().makePost(params.getIndexEndValue(), endName);\n    } else {\n      return params.getIndex().maxPost();\n    }\n  };\n\n  return RangedFilter;\n}();\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\n/**\r\n * Applies a limit and a range to a node and uses RangedFilter to do the heavy lifting where possible\r\n */\n\n\nvar LimitedFilter =\n/** @class */\nfunction () {\n  function LimitedFilter(params) {\n    this.rangedFilter_ = new RangedFilter(params);\n    this.index_ = params.getIndex();\n    this.limit_ = params.getLimit();\n    this.reverse_ = !params.isViewFromLeft();\n  }\n\n  LimitedFilter.prototype.updateChild = function (snap, key, newChild, affectedPath, source, optChangeAccumulator) {\n    if (!this.rangedFilter_.matches(new NamedNode(key, newChild))) {\n      newChild = ChildrenNode.EMPTY_NODE;\n    }\n\n    if (snap.getImmediateChild(key).equals(newChild)) {\n      // No change\n      return snap;\n    } else if (snap.numChildren() < this.limit_) {\n      return this.rangedFilter_.getIndexedFilter().updateChild(snap, key, newChild, affectedPath, source, optChangeAccumulator);\n    } else {\n      return this.fullLimitUpdateChild_(snap, key, newChild, source, optChangeAccumulator);\n    }\n  };\n\n  LimitedFilter.prototype.updateFullNode = function (oldSnap, newSnap, optChangeAccumulator) {\n    var filtered;\n\n    if (newSnap.isLeafNode() || newSnap.isEmpty()) {\n      // Make sure we have a children node with the correct index, not a leaf node;\n      filtered = ChildrenNode.EMPTY_NODE.withIndex(this.index_);\n    } else {\n      if (this.limit_ * 2 < newSnap.numChildren() && newSnap.isIndexed(this.index_)) {\n        // Easier to build up a snapshot, since what we're given has more than twice the elements we want\n        filtered = ChildrenNode.EMPTY_NODE.withIndex(this.index_); // anchor to the startPost, endPost, or last element as appropriate\n\n        var iterator = void 0;\n\n        if (this.reverse_) {\n          iterator = newSnap.getReverseIteratorFrom(this.rangedFilter_.getEndPost(), this.index_);\n        } else {\n          iterator = newSnap.getIteratorFrom(this.rangedFilter_.getStartPost(), this.index_);\n        }\n\n        var count = 0;\n\n        while (iterator.hasNext() && count < this.limit_) {\n          var next = iterator.getNext();\n          var inRange = void 0;\n\n          if (this.reverse_) {\n            inRange = this.index_.compare(this.rangedFilter_.getStartPost(), next) <= 0;\n          } else {\n            inRange = this.index_.compare(next, this.rangedFilter_.getEndPost()) <= 0;\n          }\n\n          if (inRange) {\n            filtered = filtered.updateImmediateChild(next.name, next.node);\n            count++;\n          } else {\n            // if we have reached the end post, we cannot keep adding elemments\n            break;\n          }\n        }\n      } else {\n        // The snap contains less than twice the limit. Faster to delete from the snap than build up a new one\n        filtered = newSnap.withIndex(this.index_); // Don't support priorities on queries\n\n        filtered = filtered.updatePriority(ChildrenNode.EMPTY_NODE);\n        var startPost = void 0;\n        var endPost = void 0;\n        var cmp = void 0;\n        var iterator = void 0;\n\n        if (this.reverse_) {\n          iterator = filtered.getReverseIterator(this.index_);\n          startPost = this.rangedFilter_.getEndPost();\n          endPost = this.rangedFilter_.getStartPost();\n          var indexCompare_1 = this.index_.getCompare();\n\n          cmp = function (a, b) {\n            return indexCompare_1(b, a);\n          };\n        } else {\n          iterator = filtered.getIterator(this.index_);\n          startPost = this.rangedFilter_.getStartPost();\n          endPost = this.rangedFilter_.getEndPost();\n          cmp = this.index_.getCompare();\n        }\n\n        var count = 0;\n        var foundStartPost = false;\n\n        while (iterator.hasNext()) {\n          var next = iterator.getNext();\n\n          if (!foundStartPost && cmp(startPost, next) <= 0) {\n            // start adding\n            foundStartPost = true;\n          }\n\n          var inRange = foundStartPost && count < this.limit_ && cmp(next, endPost) <= 0;\n\n          if (inRange) {\n            count++;\n          } else {\n            filtered = filtered.updateImmediateChild(next.name, ChildrenNode.EMPTY_NODE);\n          }\n        }\n      }\n    }\n\n    return this.rangedFilter_.getIndexedFilter().updateFullNode(oldSnap, filtered, optChangeAccumulator);\n  };\n\n  LimitedFilter.prototype.updatePriority = function (oldSnap, newPriority) {\n    // Don't support priorities on queries\n    return oldSnap;\n  };\n\n  LimitedFilter.prototype.filtersNodes = function () {\n    return true;\n  };\n\n  LimitedFilter.prototype.getIndexedFilter = function () {\n    return this.rangedFilter_.getIndexedFilter();\n  };\n\n  LimitedFilter.prototype.getIndex = function () {\n    return this.index_;\n  };\n\n  LimitedFilter.prototype.fullLimitUpdateChild_ = function (snap, childKey, childSnap, source, changeAccumulator) {\n    // TODO: rename all cache stuff etc to general snap terminology\n    var cmp;\n\n    if (this.reverse_) {\n      var indexCmp_1 = this.index_.getCompare();\n\n      cmp = function (a, b) {\n        return indexCmp_1(b, a);\n      };\n    } else {\n      cmp = this.index_.getCompare();\n    }\n\n    var oldEventCache = snap;\n    assert(oldEventCache.numChildren() === this.limit_, '');\n    var newChildNamedNode = new NamedNode(childKey, childSnap);\n    var windowBoundary = this.reverse_ ? oldEventCache.getFirstChild(this.index_) : oldEventCache.getLastChild(this.index_);\n    var inRange = this.rangedFilter_.matches(newChildNamedNode);\n\n    if (oldEventCache.hasChild(childKey)) {\n      var oldChildSnap = oldEventCache.getImmediateChild(childKey);\n      var nextChild = source.getChildAfterChild(this.index_, windowBoundary, this.reverse_);\n\n      while (nextChild != null && (nextChild.name === childKey || oldEventCache.hasChild(nextChild.name))) {\n        // There is a weird edge case where a node is updated as part of a merge in the write tree, but hasn't\n        // been applied to the limited filter yet. Ignore this next child which will be updated later in\n        // the limited filter...\n        nextChild = source.getChildAfterChild(this.index_, nextChild, this.reverse_);\n      }\n\n      var compareNext = nextChild == null ? 1 : cmp(nextChild, newChildNamedNode);\n      var remainsInWindow = inRange && !childSnap.isEmpty() && compareNext >= 0;\n\n      if (remainsInWindow) {\n        if (changeAccumulator != null) {\n          changeAccumulator.trackChildChange(changeChildChanged(childKey, childSnap, oldChildSnap));\n        }\n\n        return oldEventCache.updateImmediateChild(childKey, childSnap);\n      } else {\n        if (changeAccumulator != null) {\n          changeAccumulator.trackChildChange(changeChildRemoved(childKey, oldChildSnap));\n        }\n\n        var newEventCache = oldEventCache.updateImmediateChild(childKey, ChildrenNode.EMPTY_NODE);\n        var nextChildInRange = nextChild != null && this.rangedFilter_.matches(nextChild);\n\n        if (nextChildInRange) {\n          if (changeAccumulator != null) {\n            changeAccumulator.trackChildChange(changeChildAdded(nextChild.name, nextChild.node));\n          }\n\n          return newEventCache.updateImmediateChild(nextChild.name, nextChild.node);\n        } else {\n          return newEventCache;\n        }\n      }\n    } else if (childSnap.isEmpty()) {\n      // we're deleting a node, but it was not in the window, so ignore it\n      return snap;\n    } else if (inRange) {\n      if (cmp(windowBoundary, newChildNamedNode) >= 0) {\n        if (changeAccumulator != null) {\n          changeAccumulator.trackChildChange(changeChildRemoved(windowBoundary.name, windowBoundary.node));\n          changeAccumulator.trackChildChange(changeChildAdded(childKey, childSnap));\n        }\n\n        return oldEventCache.updateImmediateChild(childKey, childSnap).updateImmediateChild(windowBoundary.name, ChildrenNode.EMPTY_NODE);\n      } else {\n        return snap;\n      }\n    } else {\n      return snap;\n    }\n  };\n\n  return LimitedFilter;\n}();\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\n/**\r\n * This class is an immutable-from-the-public-api struct containing a set of query parameters defining a\r\n * range to be returned for a particular location. It is assumed that validation of parameters is done at the\r\n * user-facing API level, so it is not done here.\r\n */\n\n\nvar QueryParams =\n/** @class */\nfunction () {\n  function QueryParams() {\n    this.limitSet_ = false;\n    this.startSet_ = false;\n    this.startNameSet_ = false;\n    this.startAfterSet_ = false;\n    this.endSet_ = false;\n    this.endNameSet_ = false;\n    this.endBeforeSet_ = false;\n    this.limit_ = 0;\n    this.viewFrom_ = '';\n    this.indexStartValue_ = null;\n    this.indexStartName_ = '';\n    this.indexEndValue_ = null;\n    this.indexEndName_ = '';\n    this.index_ = PRIORITY_INDEX;\n  }\n\n  QueryParams.prototype.hasStart = function () {\n    return this.startSet_;\n  };\n\n  QueryParams.prototype.hasStartAfter = function () {\n    return this.startAfterSet_;\n  };\n\n  QueryParams.prototype.hasEndBefore = function () {\n    return this.endBeforeSet_;\n  };\n  /**\r\n   * @returns True if it would return from left.\r\n   */\n\n\n  QueryParams.prototype.isViewFromLeft = function () {\n    if (this.viewFrom_ === '') {\n      // limit(), rather than limitToFirst or limitToLast was called.\n      // This means that only one of startSet_ and endSet_ is true. Use them\n      // to calculate which side of the view to anchor to. If neither is set,\n      // anchor to the end.\n      return this.startSet_;\n    } else {\n      return this.viewFrom_ === \"l\"\n      /* VIEW_FROM_LEFT */\n      ;\n    }\n  };\n  /**\r\n   * Only valid to call if hasStart() returns true\r\n   */\n\n\n  QueryParams.prototype.getIndexStartValue = function () {\n    assert(this.startSet_, 'Only valid if start has been set');\n    return this.indexStartValue_;\n  };\n  /**\r\n   * Only valid to call if hasStart() returns true.\r\n   * Returns the starting key name for the range defined by these query parameters\r\n   */\n\n\n  QueryParams.prototype.getIndexStartName = function () {\n    assert(this.startSet_, 'Only valid if start has been set');\n\n    if (this.startNameSet_) {\n      return this.indexStartName_;\n    } else {\n      return MIN_NAME;\n    }\n  };\n\n  QueryParams.prototype.hasEnd = function () {\n    return this.endSet_;\n  };\n  /**\r\n   * Only valid to call if hasEnd() returns true.\r\n   */\n\n\n  QueryParams.prototype.getIndexEndValue = function () {\n    assert(this.endSet_, 'Only valid if end has been set');\n    return this.indexEndValue_;\n  };\n  /**\r\n   * Only valid to call if hasEnd() returns true.\r\n   * Returns the end key name for the range defined by these query parameters\r\n   */\n\n\n  QueryParams.prototype.getIndexEndName = function () {\n    assert(this.endSet_, 'Only valid if end has been set');\n\n    if (this.endNameSet_) {\n      return this.indexEndName_;\n    } else {\n      return MAX_NAME;\n    }\n  };\n\n  QueryParams.prototype.hasLimit = function () {\n    return this.limitSet_;\n  };\n  /**\r\n   * @returns True if a limit has been set and it has been explicitly anchored\r\n   */\n\n\n  QueryParams.prototype.hasAnchoredLimit = function () {\n    return this.limitSet_ && this.viewFrom_ !== '';\n  };\n  /**\r\n   * Only valid to call if hasLimit() returns true\r\n   */\n\n\n  QueryParams.prototype.getLimit = function () {\n    assert(this.limitSet_, 'Only valid if limit has been set');\n    return this.limit_;\n  };\n\n  QueryParams.prototype.getIndex = function () {\n    return this.index_;\n  };\n\n  QueryParams.prototype.loadsAllData = function () {\n    return !(this.startSet_ || this.endSet_ || this.limitSet_);\n  };\n\n  QueryParams.prototype.isDefault = function () {\n    return this.loadsAllData() && this.index_ === PRIORITY_INDEX;\n  };\n\n  QueryParams.prototype.copy = function () {\n    var copy = new QueryParams();\n    copy.limitSet_ = this.limitSet_;\n    copy.limit_ = this.limit_;\n    copy.startSet_ = this.startSet_;\n    copy.indexStartValue_ = this.indexStartValue_;\n    copy.startNameSet_ = this.startNameSet_;\n    copy.indexStartName_ = this.indexStartName_;\n    copy.endSet_ = this.endSet_;\n    copy.indexEndValue_ = this.indexEndValue_;\n    copy.endNameSet_ = this.endNameSet_;\n    copy.indexEndName_ = this.indexEndName_;\n    copy.index_ = this.index_;\n    copy.viewFrom_ = this.viewFrom_;\n    return copy;\n  };\n\n  return QueryParams;\n}();\n\nfunction queryParamsGetNodeFilter(queryParams) {\n  if (queryParams.loadsAllData()) {\n    return new IndexedFilter(queryParams.getIndex());\n  } else if (queryParams.hasLimit()) {\n    return new LimitedFilter(queryParams);\n  } else {\n    return new RangedFilter(queryParams);\n  }\n}\n\nfunction queryParamsLimitToFirst(queryParams, newLimit) {\n  var newParams = queryParams.copy();\n  newParams.limitSet_ = true;\n  newParams.limit_ = newLimit;\n  newParams.viewFrom_ = \"l\"\n  /* VIEW_FROM_LEFT */\n  ;\n  return newParams;\n}\n\nfunction queryParamsLimitToLast(queryParams, newLimit) {\n  var newParams = queryParams.copy();\n  newParams.limitSet_ = true;\n  newParams.limit_ = newLimit;\n  newParams.viewFrom_ = \"r\"\n  /* VIEW_FROM_RIGHT */\n  ;\n  return newParams;\n}\n\nfunction queryParamsStartAt(queryParams, indexValue, key) {\n  var newParams = queryParams.copy();\n  newParams.startSet_ = true;\n\n  if (indexValue === undefined) {\n    indexValue = null;\n  }\n\n  newParams.indexStartValue_ = indexValue;\n\n  if (key != null) {\n    newParams.startNameSet_ = true;\n    newParams.indexStartName_ = key;\n  } else {\n    newParams.startNameSet_ = false;\n    newParams.indexStartName_ = '';\n  }\n\n  return newParams;\n}\n\nfunction queryParamsStartAfter(queryParams, indexValue, key) {\n  var params;\n\n  if (queryParams.index_ === KEY_INDEX) {\n    if (typeof indexValue === 'string') {\n      indexValue = successor(indexValue);\n    }\n\n    params = queryParamsStartAt(queryParams, indexValue, key);\n  } else {\n    var childKey = void 0;\n\n    if (key == null) {\n      childKey = MAX_NAME;\n    } else {\n      childKey = successor(key);\n    }\n\n    params = queryParamsStartAt(queryParams, indexValue, childKey);\n  }\n\n  params.startAfterSet_ = true;\n  return params;\n}\n\nfunction queryParamsEndAt(queryParams, indexValue, key) {\n  var newParams = queryParams.copy();\n  newParams.endSet_ = true;\n\n  if (indexValue === undefined) {\n    indexValue = null;\n  }\n\n  newParams.indexEndValue_ = indexValue;\n\n  if (key !== undefined) {\n    newParams.endNameSet_ = true;\n    newParams.indexEndName_ = key;\n  } else {\n    newParams.endNameSet_ = false;\n    newParams.indexEndName_ = '';\n  }\n\n  return newParams;\n}\n\nfunction queryParamsEndBefore(queryParams, indexValue, key) {\n  var childKey;\n  var params;\n\n  if (queryParams.index_ === KEY_INDEX) {\n    if (typeof indexValue === 'string') {\n      indexValue = predecessor(indexValue);\n    }\n\n    params = queryParamsEndAt(queryParams, indexValue, key);\n  } else {\n    if (key == null) {\n      childKey = MIN_NAME;\n    } else {\n      childKey = predecessor(key);\n    }\n\n    params = queryParamsEndAt(queryParams, indexValue, childKey);\n  }\n\n  params.endBeforeSet_ = true;\n  return params;\n}\n\nfunction queryParamsOrderBy(queryParams, index) {\n  var newParams = queryParams.copy();\n  newParams.index_ = index;\n  return newParams;\n}\n/**\r\n * Returns a set of REST query string parameters representing this query.\r\n *\r\n * @returns query string parameters\r\n */\n\n\nfunction queryParamsToRestQueryStringParameters(queryParams) {\n  var qs = {};\n\n  if (queryParams.isDefault()) {\n    return qs;\n  }\n\n  var orderBy;\n\n  if (queryParams.index_ === PRIORITY_INDEX) {\n    orderBy = \"$priority\"\n    /* PRIORITY_INDEX */\n    ;\n  } else if (queryParams.index_ === VALUE_INDEX) {\n    orderBy = \"$value\"\n    /* VALUE_INDEX */\n    ;\n  } else if (queryParams.index_ === KEY_INDEX) {\n    orderBy = \"$key\"\n    /* KEY_INDEX */\n    ;\n  } else {\n    assert(queryParams.index_ instanceof PathIndex, 'Unrecognized index type!');\n    orderBy = queryParams.index_.toString();\n  }\n\n  qs[\"orderBy\"\n  /* ORDER_BY */\n  ] = stringify(orderBy);\n\n  if (queryParams.startSet_) {\n    qs[\"startAt\"\n    /* START_AT */\n    ] = stringify(queryParams.indexStartValue_);\n\n    if (queryParams.startNameSet_) {\n      qs[\"startAt\"\n      /* START_AT */\n      ] += ',' + stringify(queryParams.indexStartName_);\n    }\n  }\n\n  if (queryParams.endSet_) {\n    qs[\"endAt\"\n    /* END_AT */\n    ] = stringify(queryParams.indexEndValue_);\n\n    if (queryParams.endNameSet_) {\n      qs[\"endAt\"\n      /* END_AT */\n      ] += ',' + stringify(queryParams.indexEndName_);\n    }\n  }\n\n  if (queryParams.limitSet_) {\n    if (queryParams.isViewFromLeft()) {\n      qs[\"limitToFirst\"\n      /* LIMIT_TO_FIRST */\n      ] = queryParams.limit_;\n    } else {\n      qs[\"limitToLast\"\n      /* LIMIT_TO_LAST */\n      ] = queryParams.limit_;\n    }\n  }\n\n  return qs;\n}\n\nfunction queryParamsGetQueryObject(queryParams) {\n  var obj = {};\n\n  if (queryParams.startSet_) {\n    obj[\"sp\"\n    /* INDEX_START_VALUE */\n    ] = queryParams.indexStartValue_;\n\n    if (queryParams.startNameSet_) {\n      obj[\"sn\"\n      /* INDEX_START_NAME */\n      ] = queryParams.indexStartName_;\n    }\n  }\n\n  if (queryParams.endSet_) {\n    obj[\"ep\"\n    /* INDEX_END_VALUE */\n    ] = queryParams.indexEndValue_;\n\n    if (queryParams.endNameSet_) {\n      obj[\"en\"\n      /* INDEX_END_NAME */\n      ] = queryParams.indexEndName_;\n    }\n  }\n\n  if (queryParams.limitSet_) {\n    obj[\"l\"\n    /* LIMIT */\n    ] = queryParams.limit_;\n    var viewFrom = queryParams.viewFrom_;\n\n    if (viewFrom === '') {\n      if (queryParams.isViewFromLeft()) {\n        viewFrom = \"l\"\n        /* VIEW_FROM_LEFT */\n        ;\n      } else {\n        viewFrom = \"r\"\n        /* VIEW_FROM_RIGHT */\n        ;\n      }\n    }\n\n    obj[\"vf\"\n    /* VIEW_FROM */\n    ] = viewFrom;\n  } // For now, priority index is the default, so we only specify if it's some other index\n\n\n  if (queryParams.index_ !== PRIORITY_INDEX) {\n    obj[\"i\"\n    /* INDEX */\n    ] = queryParams.index_.toString();\n  }\n\n  return obj;\n}\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\n/**\r\n * An implementation of ServerActions that communicates with the server via REST requests.\r\n * This is mostly useful for compatibility with crawlers, where we don't want to spin up a full\r\n * persistent connection (using WebSockets or long-polling)\r\n */\n\n\nvar ReadonlyRestClient =\n/** @class */\nfunction (_super) {\n  __extends(ReadonlyRestClient, _super);\n  /**\r\n   * @param repoInfo_ - Data about the namespace we are connecting to\r\n   * @param onDataUpdate_ - A callback for new data from the server\r\n   */\n\n\n  function ReadonlyRestClient(repoInfo_, onDataUpdate_, authTokenProvider_, appCheckTokenProvider_) {\n    var _this = _super.call(this) || this;\n\n    _this.repoInfo_ = repoInfo_;\n    _this.onDataUpdate_ = onDataUpdate_;\n    _this.authTokenProvider_ = authTokenProvider_;\n    _this.appCheckTokenProvider_ = appCheckTokenProvider_;\n    /** @private {function(...[*])} */\n\n    _this.log_ = logWrapper('p:rest:');\n    /**\r\n     * We don't actually need to track listens, except to prevent us calling an onComplete for a listen\r\n     * that's been removed. :-/\r\n     */\n\n    _this.listens_ = {};\n    return _this;\n  }\n\n  ReadonlyRestClient.prototype.reportStats = function (stats) {\n    throw new Error('Method not implemented.');\n  };\n\n  ReadonlyRestClient.getListenId_ = function (query, tag) {\n    if (tag !== undefined) {\n      return 'tag$' + tag;\n    } else {\n      assert(query._queryParams.isDefault(), \"should have a tag if it's not a default query.\");\n      return query._path.toString();\n    }\n  };\n  /** @inheritDoc */\n\n\n  ReadonlyRestClient.prototype.listen = function (query, currentHashFn, tag, onComplete) {\n    var _this = this;\n\n    var pathString = query._path.toString();\n\n    this.log_('Listen called for ' + pathString + ' ' + query._queryIdentifier); // Mark this listener so we can tell if it's removed.\n\n    var listenId = ReadonlyRestClient.getListenId_(query, tag);\n    var thisListen = {};\n    this.listens_[listenId] = thisListen;\n    var queryStringParameters = queryParamsToRestQueryStringParameters(query._queryParams);\n    this.restRequest_(pathString + '.json', queryStringParameters, function (error, result) {\n      var data = result;\n\n      if (error === 404) {\n        data = null;\n        error = null;\n      }\n\n      if (error === null) {\n        _this.onDataUpdate_(pathString, data,\n        /*isMerge=*/\n        false, tag);\n      }\n\n      if (safeGet(_this.listens_, listenId) === thisListen) {\n        var status_1;\n\n        if (!error) {\n          status_1 = 'ok';\n        } else if (error === 401) {\n          status_1 = 'permission_denied';\n        } else {\n          status_1 = 'rest_error:' + error;\n        }\n\n        onComplete(status_1, null);\n      }\n    });\n  };\n  /** @inheritDoc */\n\n\n  ReadonlyRestClient.prototype.unlisten = function (query, tag) {\n    var listenId = ReadonlyRestClient.getListenId_(query, tag);\n    delete this.listens_[listenId];\n  };\n\n  ReadonlyRestClient.prototype.get = function (query) {\n    var _this = this;\n\n    var queryStringParameters = queryParamsToRestQueryStringParameters(query._queryParams);\n\n    var pathString = query._path.toString();\n\n    var deferred = new Deferred();\n    this.restRequest_(pathString + '.json', queryStringParameters, function (error, result) {\n      var data = result;\n\n      if (error === 404) {\n        data = null;\n        error = null;\n      }\n\n      if (error === null) {\n        _this.onDataUpdate_(pathString, data,\n        /*isMerge=*/\n        false,\n        /*tag=*/\n        null);\n\n        deferred.resolve(data);\n      } else {\n        deferred.reject(new Error(data));\n      }\n    });\n    return deferred.promise;\n  };\n  /** @inheritDoc */\n\n\n  ReadonlyRestClient.prototype.refreshAuthToken = function (token) {// no-op since we just always call getToken.\n  };\n  /**\r\n   * Performs a REST request to the given path, with the provided query string parameters,\r\n   * and any auth credentials we have.\r\n   */\n\n\n  ReadonlyRestClient.prototype.restRequest_ = function (pathString, queryStringParameters, callback) {\n    var _this = this;\n\n    if (queryStringParameters === void 0) {\n      queryStringParameters = {};\n    }\n\n    queryStringParameters['format'] = 'export';\n    return Promise.all([this.authTokenProvider_.getToken(\n    /*forceRefresh=*/\n    false), this.appCheckTokenProvider_.getToken(\n    /*forceRefresh=*/\n    false)]).then(function (_a) {\n      var _b = __read(_a, 2),\n          authToken = _b[0],\n          appCheckToken = _b[1];\n\n      if (authToken && authToken.accessToken) {\n        queryStringParameters['auth'] = authToken.accessToken;\n      }\n\n      if (appCheckToken && appCheckToken.token) {\n        queryStringParameters['ac'] = appCheckToken.token;\n      }\n\n      var url = (_this.repoInfo_.secure ? 'https://' : 'http://') + _this.repoInfo_.host + pathString + '?' + 'ns=' + _this.repoInfo_.namespace + querystring(queryStringParameters);\n\n      _this.log_('Sending REST request for ' + url);\n\n      var xhr = new XMLHttpRequest();\n\n      xhr.onreadystatechange = function () {\n        if (callback && xhr.readyState === 4) {\n          _this.log_('REST Response for ' + url + ' received. status:', xhr.status, 'response:', xhr.responseText);\n\n          var res = null;\n\n          if (xhr.status >= 200 && xhr.status < 300) {\n            try {\n              res = jsonEval(xhr.responseText);\n            } catch (e) {\n              warn('Failed to parse JSON response for ' + url + ': ' + xhr.responseText);\n            }\n\n            callback(null, res);\n          } else {\n            // 401 and 404 are expected.\n            if (xhr.status !== 401 && xhr.status !== 404) {\n              warn('Got unsuccessful REST response for ' + url + ' Status: ' + xhr.status);\n            }\n\n            callback(xhr.status);\n          }\n\n          callback = null;\n        }\n      };\n\n      xhr.open('GET', url,\n      /*asynchronous=*/\n      true);\n      xhr.send();\n    });\n  };\n\n  return ReadonlyRestClient;\n}(ServerActions);\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\n/**\r\n * Mutable object which basically just stores a reference to the \"latest\" immutable snapshot.\r\n */\n\n\nvar SnapshotHolder =\n/** @class */\nfunction () {\n  function SnapshotHolder() {\n    this.rootNode_ = ChildrenNode.EMPTY_NODE;\n  }\n\n  SnapshotHolder.prototype.getNode = function (path) {\n    return this.rootNode_.getChild(path);\n  };\n\n  SnapshotHolder.prototype.updateSnapshot = function (path, newSnapshotNode) {\n    this.rootNode_ = this.rootNode_.updateChild(path, newSnapshotNode);\n  };\n\n  return SnapshotHolder;\n}();\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\n\nfunction newSparseSnapshotTree() {\n  return {\n    value: null,\n    children: new Map()\n  };\n}\n/**\r\n * Stores the given node at the specified path. If there is already a node\r\n * at a shallower path, it merges the new data into that snapshot node.\r\n *\r\n * @param path - Path to look up snapshot for.\r\n * @param data - The new data, or null.\r\n */\n\n\nfunction sparseSnapshotTreeRemember(sparseSnapshotTree, path, data) {\n  if (pathIsEmpty(path)) {\n    sparseSnapshotTree.value = data;\n    sparseSnapshotTree.children.clear();\n  } else if (sparseSnapshotTree.value !== null) {\n    sparseSnapshotTree.value = sparseSnapshotTree.value.updateChild(path, data);\n  } else {\n    var childKey = pathGetFront(path);\n\n    if (!sparseSnapshotTree.children.has(childKey)) {\n      sparseSnapshotTree.children.set(childKey, newSparseSnapshotTree());\n    }\n\n    var child = sparseSnapshotTree.children.get(childKey);\n    path = pathPopFront(path);\n    sparseSnapshotTreeRemember(child, path, data);\n  }\n}\n/**\r\n * Purge the data at path from the cache.\r\n *\r\n * @param path - Path to look up snapshot for.\r\n * @returns True if this node should now be removed.\r\n */\n\n\nfunction sparseSnapshotTreeForget(sparseSnapshotTree, path) {\n  if (pathIsEmpty(path)) {\n    sparseSnapshotTree.value = null;\n    sparseSnapshotTree.children.clear();\n    return true;\n  } else {\n    if (sparseSnapshotTree.value !== null) {\n      if (sparseSnapshotTree.value.isLeafNode()) {\n        // We're trying to forget a node that doesn't exist\n        return false;\n      } else {\n        var value = sparseSnapshotTree.value;\n        sparseSnapshotTree.value = null;\n        value.forEachChild(PRIORITY_INDEX, function (key, tree) {\n          sparseSnapshotTreeRemember(sparseSnapshotTree, new Path(key), tree);\n        });\n        return sparseSnapshotTreeForget(sparseSnapshotTree, path);\n      }\n    } else if (sparseSnapshotTree.children.size > 0) {\n      var childKey = pathGetFront(path);\n      path = pathPopFront(path);\n\n      if (sparseSnapshotTree.children.has(childKey)) {\n        var safeToRemove = sparseSnapshotTreeForget(sparseSnapshotTree.children.get(childKey), path);\n\n        if (safeToRemove) {\n          sparseSnapshotTree.children.delete(childKey);\n        }\n      }\n\n      return sparseSnapshotTree.children.size === 0;\n    } else {\n      return true;\n    }\n  }\n}\n/**\r\n * Recursively iterates through all of the stored tree and calls the\r\n * callback on each one.\r\n *\r\n * @param prefixPath - Path to look up node for.\r\n * @param func - The function to invoke for each tree.\r\n */\n\n\nfunction sparseSnapshotTreeForEachTree(sparseSnapshotTree, prefixPath, func) {\n  if (sparseSnapshotTree.value !== null) {\n    func(prefixPath, sparseSnapshotTree.value);\n  } else {\n    sparseSnapshotTreeForEachChild(sparseSnapshotTree, function (key, tree) {\n      var path = new Path(prefixPath.toString() + '/' + key);\n      sparseSnapshotTreeForEachTree(tree, path, func);\n    });\n  }\n}\n/**\r\n * Iterates through each immediate child and triggers the callback.\r\n * Only seems to be used in tests.\r\n *\r\n * @param func - The function to invoke for each child.\r\n */\n\n\nfunction sparseSnapshotTreeForEachChild(sparseSnapshotTree, func) {\n  sparseSnapshotTree.children.forEach(function (tree, key) {\n    func(key, tree);\n  });\n}\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\n/**\r\n * Returns the delta from the previous call to get stats.\r\n *\r\n * @param collection_ - The collection to \"listen\" to.\r\n */\n\n\nvar StatsListener =\n/** @class */\nfunction () {\n  function StatsListener(collection_) {\n    this.collection_ = collection_;\n    this.last_ = null;\n  }\n\n  StatsListener.prototype.get = function () {\n    var newStats = this.collection_.get();\n\n    var delta = __assign({}, newStats);\n\n    if (this.last_) {\n      each(this.last_, function (stat, value) {\n        delta[stat] = delta[stat] - value;\n      });\n    }\n\n    this.last_ = newStats;\n    return delta;\n  };\n\n  return StatsListener;\n}();\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n// Assuming some apps may have a short amount of time on page, and a bulk of firebase operations probably\n// happen on page load, we try to report our first set of stats pretty quickly, but we wait at least 10\n// seconds to try to ensure the Firebase connection is established / settled.\n\n\nvar FIRST_STATS_MIN_TIME = 10 * 1000;\nvar FIRST_STATS_MAX_TIME = 30 * 1000; // We'll continue to report stats on average every 5 minutes.\n\nvar REPORT_STATS_INTERVAL = 5 * 60 * 1000;\n\nvar StatsReporter =\n/** @class */\nfunction () {\n  function StatsReporter(collection, server_) {\n    this.server_ = server_;\n    this.statsToReport_ = {};\n    this.statsListener_ = new StatsListener(collection);\n    var timeout = FIRST_STATS_MIN_TIME + (FIRST_STATS_MAX_TIME - FIRST_STATS_MIN_TIME) * Math.random();\n    setTimeoutNonBlocking(this.reportStats_.bind(this), Math.floor(timeout));\n  }\n\n  StatsReporter.prototype.reportStats_ = function () {\n    var _this = this;\n\n    var stats = this.statsListener_.get();\n    var reportedStats = {};\n    var haveStatsToReport = false;\n    each(stats, function (stat, value) {\n      if (value > 0 && contains(_this.statsToReport_, stat)) {\n        reportedStats[stat] = value;\n        haveStatsToReport = true;\n      }\n    });\n\n    if (haveStatsToReport) {\n      this.server_.reportStats(reportedStats);\n    } // queue our next run.\n\n\n    setTimeoutNonBlocking(this.reportStats_.bind(this), Math.floor(Math.random() * 2 * REPORT_STATS_INTERVAL));\n  };\n\n  return StatsReporter;\n}();\n\nfunction statsReporterIncludeStat(reporter, stat) {\n  reporter.statsToReport_[stat] = true;\n}\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\n/**\r\n *\r\n * @enum\r\n */\n\n\nvar OperationType;\n\n(function (OperationType) {\n  OperationType[OperationType[\"OVERWRITE\"] = 0] = \"OVERWRITE\";\n  OperationType[OperationType[\"MERGE\"] = 1] = \"MERGE\";\n  OperationType[OperationType[\"ACK_USER_WRITE\"] = 2] = \"ACK_USER_WRITE\";\n  OperationType[OperationType[\"LISTEN_COMPLETE\"] = 3] = \"LISTEN_COMPLETE\";\n})(OperationType || (OperationType = {}));\n\nfunction newOperationSourceUser() {\n  return {\n    fromUser: true,\n    fromServer: false,\n    queryId: null,\n    tagged: false\n  };\n}\n\nfunction newOperationSourceServer() {\n  return {\n    fromUser: false,\n    fromServer: true,\n    queryId: null,\n    tagged: false\n  };\n}\n\nfunction newOperationSourceServerTaggedQuery(queryId) {\n  return {\n    fromUser: false,\n    fromServer: true,\n    queryId: queryId,\n    tagged: true\n  };\n}\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\n\nvar AckUserWrite =\n/** @class */\nfunction () {\n  /**\r\n   * @param affectedTree - A tree containing true for each affected path. Affected paths can't overlap.\r\n   */\n  function AckUserWrite(\n  /** @inheritDoc */\n  path,\n  /** @inheritDoc */\n  affectedTree,\n  /** @inheritDoc */\n  revert) {\n    this.path = path;\n    this.affectedTree = affectedTree;\n    this.revert = revert;\n    /** @inheritDoc */\n\n    this.type = OperationType.ACK_USER_WRITE;\n    /** @inheritDoc */\n\n    this.source = newOperationSourceUser();\n  }\n\n  AckUserWrite.prototype.operationForChild = function (childName) {\n    if (!pathIsEmpty(this.path)) {\n      assert(pathGetFront(this.path) === childName, 'operationForChild called for unrelated child.');\n      return new AckUserWrite(pathPopFront(this.path), this.affectedTree, this.revert);\n    } else if (this.affectedTree.value != null) {\n      assert(this.affectedTree.children.isEmpty(), 'affectedTree should not have overlapping affected paths.'); // All child locations are affected as well; just return same operation.\n\n      return this;\n    } else {\n      var childTree = this.affectedTree.subtree(new Path(childName));\n      return new AckUserWrite(newEmptyPath(), childTree, this.revert);\n    }\n  };\n\n  return AckUserWrite;\n}();\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\n\nvar ListenComplete =\n/** @class */\nfunction () {\n  function ListenComplete(source, path) {\n    this.source = source;\n    this.path = path;\n    /** @inheritDoc */\n\n    this.type = OperationType.LISTEN_COMPLETE;\n  }\n\n  ListenComplete.prototype.operationForChild = function (childName) {\n    if (pathIsEmpty(this.path)) {\n      return new ListenComplete(this.source, newEmptyPath());\n    } else {\n      return new ListenComplete(this.source, pathPopFront(this.path));\n    }\n  };\n\n  return ListenComplete;\n}();\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\n\nvar Overwrite =\n/** @class */\nfunction () {\n  function Overwrite(source, path, snap) {\n    this.source = source;\n    this.path = path;\n    this.snap = snap;\n    /** @inheritDoc */\n\n    this.type = OperationType.OVERWRITE;\n  }\n\n  Overwrite.prototype.operationForChild = function (childName) {\n    if (pathIsEmpty(this.path)) {\n      return new Overwrite(this.source, newEmptyPath(), this.snap.getImmediateChild(childName));\n    } else {\n      return new Overwrite(this.source, pathPopFront(this.path), this.snap);\n    }\n  };\n\n  return Overwrite;\n}();\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\n\nvar Merge =\n/** @class */\nfunction () {\n  function Merge(\n  /** @inheritDoc */\n  source,\n  /** @inheritDoc */\n  path,\n  /** @inheritDoc */\n  children) {\n    this.source = source;\n    this.path = path;\n    this.children = children;\n    /** @inheritDoc */\n\n    this.type = OperationType.MERGE;\n  }\n\n  Merge.prototype.operationForChild = function (childName) {\n    if (pathIsEmpty(this.path)) {\n      var childTree = this.children.subtree(new Path(childName));\n\n      if (childTree.isEmpty()) {\n        // This child is unaffected\n        return null;\n      } else if (childTree.value) {\n        // We have a snapshot for the child in question.  This becomes an overwrite of the child.\n        return new Overwrite(this.source, newEmptyPath(), childTree.value);\n      } else {\n        // This is a merge at a deeper level\n        return new Merge(this.source, newEmptyPath(), childTree);\n      }\n    } else {\n      assert(pathGetFront(this.path) === childName, \"Can't get a merge for a child not on the path of the operation\");\n      return new Merge(this.source, pathPopFront(this.path), this.children);\n    }\n  };\n\n  Merge.prototype.toString = function () {\n    return 'Operation(' + this.path + ': ' + this.source.toString() + ' merge: ' + this.children.toString() + ')';\n  };\n\n  return Merge;\n}();\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\n/**\r\n * A cache node only stores complete children. Additionally it holds a flag whether the node can be considered fully\r\n * initialized in the sense that we know at one point in time this represented a valid state of the world, e.g.\r\n * initialized with data from the server, or a complete overwrite by the client. The filtered flag also tracks\r\n * whether a node potentially had children removed due to a filter.\r\n */\n\n\nvar CacheNode =\n/** @class */\nfunction () {\n  function CacheNode(node_, fullyInitialized_, filtered_) {\n    this.node_ = node_;\n    this.fullyInitialized_ = fullyInitialized_;\n    this.filtered_ = filtered_;\n  }\n  /**\r\n   * Returns whether this node was fully initialized with either server data or a complete overwrite by the client\r\n   */\n\n\n  CacheNode.prototype.isFullyInitialized = function () {\n    return this.fullyInitialized_;\n  };\n  /**\r\n   * Returns whether this node is potentially missing children due to a filter applied to the node\r\n   */\n\n\n  CacheNode.prototype.isFiltered = function () {\n    return this.filtered_;\n  };\n\n  CacheNode.prototype.isCompleteForPath = function (path) {\n    if (pathIsEmpty(path)) {\n      return this.isFullyInitialized() && !this.filtered_;\n    }\n\n    var childKey = pathGetFront(path);\n    return this.isCompleteForChild(childKey);\n  };\n\n  CacheNode.prototype.isCompleteForChild = function (key) {\n    return this.isFullyInitialized() && !this.filtered_ || this.node_.hasChild(key);\n  };\n\n  CacheNode.prototype.getNode = function () {\n    return this.node_;\n  };\n\n  return CacheNode;\n}();\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\n/**\r\n * An EventGenerator is used to convert \"raw\" changes (Change) as computed by the\r\n * CacheDiffer into actual events (Event) that can be raised.  See generateEventsForChanges()\r\n * for details.\r\n *\r\n */\n\n\nvar EventGenerator =\n/** @class */\nfunction () {\n  function EventGenerator(query_) {\n    this.query_ = query_;\n    this.index_ = this.query_._queryParams.getIndex();\n  }\n\n  return EventGenerator;\n}();\n/**\r\n * Given a set of raw changes (no moved events and prevName not specified yet), and a set of\r\n * EventRegistrations that should be notified of these changes, generate the actual events to be raised.\r\n *\r\n * Notes:\r\n *  - child_moved events will be synthesized at this time for any child_changed events that affect\r\n *    our index.\r\n *  - prevName will be calculated based on the index ordering.\r\n */\n\n\nfunction eventGeneratorGenerateEventsForChanges(eventGenerator, changes, eventCache, eventRegistrations) {\n  var events = [];\n  var moves = [];\n  changes.forEach(function (change) {\n    if (change.type === \"child_changed\"\n    /* CHILD_CHANGED */\n    && eventGenerator.index_.indexedValueChanged(change.oldSnap, change.snapshotNode)) {\n      moves.push(changeChildMoved(change.childName, change.snapshotNode));\n    }\n  });\n  eventGeneratorGenerateEventsForType(eventGenerator, events, \"child_removed\"\n  /* CHILD_REMOVED */\n  , changes, eventRegistrations, eventCache);\n  eventGeneratorGenerateEventsForType(eventGenerator, events, \"child_added\"\n  /* CHILD_ADDED */\n  , changes, eventRegistrations, eventCache);\n  eventGeneratorGenerateEventsForType(eventGenerator, events, \"child_moved\"\n  /* CHILD_MOVED */\n  , moves, eventRegistrations, eventCache);\n  eventGeneratorGenerateEventsForType(eventGenerator, events, \"child_changed\"\n  /* CHILD_CHANGED */\n  , changes, eventRegistrations, eventCache);\n  eventGeneratorGenerateEventsForType(eventGenerator, events, \"value\"\n  /* VALUE */\n  , changes, eventRegistrations, eventCache);\n  return events;\n}\n/**\r\n * Given changes of a single change type, generate the corresponding events.\r\n */\n\n\nfunction eventGeneratorGenerateEventsForType(eventGenerator, events, eventType, changes, registrations, eventCache) {\n  var filteredChanges = changes.filter(function (change) {\n    return change.type === eventType;\n  });\n  filteredChanges.sort(function (a, b) {\n    return eventGeneratorCompareChanges(eventGenerator, a, b);\n  });\n  filteredChanges.forEach(function (change) {\n    var materializedChange = eventGeneratorMaterializeSingleChange(eventGenerator, change, eventCache);\n    registrations.forEach(function (registration) {\n      if (registration.respondsTo(change.type)) {\n        events.push(registration.createEvent(materializedChange, eventGenerator.query_));\n      }\n    });\n  });\n}\n\nfunction eventGeneratorMaterializeSingleChange(eventGenerator, change, eventCache) {\n  if (change.type === 'value' || change.type === 'child_removed') {\n    return change;\n  } else {\n    change.prevName = eventCache.getPredecessorChildName(change.childName, change.snapshotNode, eventGenerator.index_);\n    return change;\n  }\n}\n\nfunction eventGeneratorCompareChanges(eventGenerator, a, b) {\n  if (a.childName == null || b.childName == null) {\n    throw assertionError('Should only compare child_ events.');\n  }\n\n  var aWrapped = new NamedNode(a.childName, a.snapshotNode);\n  var bWrapped = new NamedNode(b.childName, b.snapshotNode);\n  return eventGenerator.index_.compare(aWrapped, bWrapped);\n}\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\n\nfunction newViewCache(eventCache, serverCache) {\n  return {\n    eventCache: eventCache,\n    serverCache: serverCache\n  };\n}\n\nfunction viewCacheUpdateEventSnap(viewCache, eventSnap, complete, filtered) {\n  return newViewCache(new CacheNode(eventSnap, complete, filtered), viewCache.serverCache);\n}\n\nfunction viewCacheUpdateServerSnap(viewCache, serverSnap, complete, filtered) {\n  return newViewCache(viewCache.eventCache, new CacheNode(serverSnap, complete, filtered));\n}\n\nfunction viewCacheGetCompleteEventSnap(viewCache) {\n  return viewCache.eventCache.isFullyInitialized() ? viewCache.eventCache.getNode() : null;\n}\n\nfunction viewCacheGetCompleteServerSnap(viewCache) {\n  return viewCache.serverCache.isFullyInitialized() ? viewCache.serverCache.getNode() : null;\n}\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\n\nvar emptyChildrenSingleton;\n/**\r\n * Singleton empty children collection.\r\n *\r\n */\n\nvar EmptyChildren = function () {\n  if (!emptyChildrenSingleton) {\n    emptyChildrenSingleton = new SortedMap(stringCompare);\n  }\n\n  return emptyChildrenSingleton;\n};\n/**\r\n * A tree with immutable elements.\r\n */\n\n\nvar ImmutableTree =\n/** @class */\nfunction () {\n  function ImmutableTree(value, children) {\n    if (children === void 0) {\n      children = EmptyChildren();\n    }\n\n    this.value = value;\n    this.children = children;\n  }\n\n  ImmutableTree.fromObject = function (obj) {\n    var tree = new ImmutableTree(null);\n    each(obj, function (childPath, childSnap) {\n      tree = tree.set(new Path(childPath), childSnap);\n    });\n    return tree;\n  };\n  /**\r\n   * True if the value is empty and there are no children\r\n   */\n\n\n  ImmutableTree.prototype.isEmpty = function () {\n    return this.value === null && this.children.isEmpty();\n  };\n  /**\r\n   * Given a path and predicate, return the first node and the path to that node\r\n   * where the predicate returns true.\r\n   *\r\n   * TODO Do a perf test -- If we're creating a bunch of `{path: value:}`\r\n   * objects on the way back out, it may be better to pass down a pathSoFar obj.\r\n   *\r\n   * @param relativePath - The remainder of the path\r\n   * @param predicate - The predicate to satisfy to return a node\r\n   */\n\n\n  ImmutableTree.prototype.findRootMostMatchingPathAndValue = function (relativePath, predicate) {\n    if (this.value != null && predicate(this.value)) {\n      return {\n        path: newEmptyPath(),\n        value: this.value\n      };\n    } else {\n      if (pathIsEmpty(relativePath)) {\n        return null;\n      } else {\n        var front = pathGetFront(relativePath);\n        var child = this.children.get(front);\n\n        if (child !== null) {\n          var childExistingPathAndValue = child.findRootMostMatchingPathAndValue(pathPopFront(relativePath), predicate);\n\n          if (childExistingPathAndValue != null) {\n            var fullPath = pathChild(new Path(front), childExistingPathAndValue.path);\n            return {\n              path: fullPath,\n              value: childExistingPathAndValue.value\n            };\n          } else {\n            return null;\n          }\n        } else {\n          return null;\n        }\n      }\n    }\n  };\n  /**\r\n   * Find, if it exists, the shortest subpath of the given path that points a defined\r\n   * value in the tree\r\n   */\n\n\n  ImmutableTree.prototype.findRootMostValueAndPath = function (relativePath) {\n    return this.findRootMostMatchingPathAndValue(relativePath, function () {\n      return true;\n    });\n  };\n  /**\r\n   * @returns The subtree at the given path\r\n   */\n\n\n  ImmutableTree.prototype.subtree = function (relativePath) {\n    if (pathIsEmpty(relativePath)) {\n      return this;\n    } else {\n      var front = pathGetFront(relativePath);\n      var childTree = this.children.get(front);\n\n      if (childTree !== null) {\n        return childTree.subtree(pathPopFront(relativePath));\n      } else {\n        return new ImmutableTree(null);\n      }\n    }\n  };\n  /**\r\n   * Sets a value at the specified path.\r\n   *\r\n   * @param relativePath - Path to set value at.\r\n   * @param toSet - Value to set.\r\n   * @returns Resulting tree.\r\n   */\n\n\n  ImmutableTree.prototype.set = function (relativePath, toSet) {\n    if (pathIsEmpty(relativePath)) {\n      return new ImmutableTree(toSet, this.children);\n    } else {\n      var front = pathGetFront(relativePath);\n      var child = this.children.get(front) || new ImmutableTree(null);\n      var newChild = child.set(pathPopFront(relativePath), toSet);\n      var newChildren = this.children.insert(front, newChild);\n      return new ImmutableTree(this.value, newChildren);\n    }\n  };\n  /**\r\n   * Removes the value at the specified path.\r\n   *\r\n   * @param relativePath - Path to value to remove.\r\n   * @returns Resulting tree.\r\n   */\n\n\n  ImmutableTree.prototype.remove = function (relativePath) {\n    if (pathIsEmpty(relativePath)) {\n      if (this.children.isEmpty()) {\n        return new ImmutableTree(null);\n      } else {\n        return new ImmutableTree(null, this.children);\n      }\n    } else {\n      var front = pathGetFront(relativePath);\n      var child = this.children.get(front);\n\n      if (child) {\n        var newChild = child.remove(pathPopFront(relativePath));\n        var newChildren = void 0;\n\n        if (newChild.isEmpty()) {\n          newChildren = this.children.remove(front);\n        } else {\n          newChildren = this.children.insert(front, newChild);\n        }\n\n        if (this.value === null && newChildren.isEmpty()) {\n          return new ImmutableTree(null);\n        } else {\n          return new ImmutableTree(this.value, newChildren);\n        }\n      } else {\n        return this;\n      }\n    }\n  };\n  /**\r\n   * Gets a value from the tree.\r\n   *\r\n   * @param relativePath - Path to get value for.\r\n   * @returns Value at path, or null.\r\n   */\n\n\n  ImmutableTree.prototype.get = function (relativePath) {\n    if (pathIsEmpty(relativePath)) {\n      return this.value;\n    } else {\n      var front = pathGetFront(relativePath);\n      var child = this.children.get(front);\n\n      if (child) {\n        return child.get(pathPopFront(relativePath));\n      } else {\n        return null;\n      }\n    }\n  };\n  /**\r\n   * Replace the subtree at the specified path with the given new tree.\r\n   *\r\n   * @param relativePath - Path to replace subtree for.\r\n   * @param newTree - New tree.\r\n   * @returns Resulting tree.\r\n   */\n\n\n  ImmutableTree.prototype.setTree = function (relativePath, newTree) {\n    if (pathIsEmpty(relativePath)) {\n      return newTree;\n    } else {\n      var front = pathGetFront(relativePath);\n      var child = this.children.get(front) || new ImmutableTree(null);\n      var newChild = child.setTree(pathPopFront(relativePath), newTree);\n      var newChildren = void 0;\n\n      if (newChild.isEmpty()) {\n        newChildren = this.children.remove(front);\n      } else {\n        newChildren = this.children.insert(front, newChild);\n      }\n\n      return new ImmutableTree(this.value, newChildren);\n    }\n  };\n  /**\r\n   * Performs a depth first fold on this tree. Transforms a tree into a single\r\n   * value, given a function that operates on the path to a node, an optional\r\n   * current value, and a map of child names to folded subtrees\r\n   */\n\n\n  ImmutableTree.prototype.fold = function (fn) {\n    return this.fold_(newEmptyPath(), fn);\n  };\n  /**\r\n   * Recursive helper for public-facing fold() method\r\n   */\n\n\n  ImmutableTree.prototype.fold_ = function (pathSoFar, fn) {\n    var accum = {};\n    this.children.inorderTraversal(function (childKey, childTree) {\n      accum[childKey] = childTree.fold_(pathChild(pathSoFar, childKey), fn);\n    });\n    return fn(pathSoFar, this.value, accum);\n  };\n  /**\r\n   * Find the first matching value on the given path. Return the result of applying f to it.\r\n   */\n\n\n  ImmutableTree.prototype.findOnPath = function (path, f) {\n    return this.findOnPath_(path, newEmptyPath(), f);\n  };\n\n  ImmutableTree.prototype.findOnPath_ = function (pathToFollow, pathSoFar, f) {\n    var result = this.value ? f(pathSoFar, this.value) : false;\n\n    if (result) {\n      return result;\n    } else {\n      if (pathIsEmpty(pathToFollow)) {\n        return null;\n      } else {\n        var front = pathGetFront(pathToFollow);\n        var nextChild = this.children.get(front);\n\n        if (nextChild) {\n          return nextChild.findOnPath_(pathPopFront(pathToFollow), pathChild(pathSoFar, front), f);\n        } else {\n          return null;\n        }\n      }\n    }\n  };\n\n  ImmutableTree.prototype.foreachOnPath = function (path, f) {\n    return this.foreachOnPath_(path, newEmptyPath(), f);\n  };\n\n  ImmutableTree.prototype.foreachOnPath_ = function (pathToFollow, currentRelativePath, f) {\n    if (pathIsEmpty(pathToFollow)) {\n      return this;\n    } else {\n      if (this.value) {\n        f(currentRelativePath, this.value);\n      }\n\n      var front = pathGetFront(pathToFollow);\n      var nextChild = this.children.get(front);\n\n      if (nextChild) {\n        return nextChild.foreachOnPath_(pathPopFront(pathToFollow), pathChild(currentRelativePath, front), f);\n      } else {\n        return new ImmutableTree(null);\n      }\n    }\n  };\n  /**\r\n   * Calls the given function for each node in the tree that has a value.\r\n   *\r\n   * @param f - A function to be called with the path from the root of the tree to\r\n   * a node, and the value at that node. Called in depth-first order.\r\n   */\n\n\n  ImmutableTree.prototype.foreach = function (f) {\n    this.foreach_(newEmptyPath(), f);\n  };\n\n  ImmutableTree.prototype.foreach_ = function (currentRelativePath, f) {\n    this.children.inorderTraversal(function (childName, childTree) {\n      childTree.foreach_(pathChild(currentRelativePath, childName), f);\n    });\n\n    if (this.value) {\n      f(currentRelativePath, this.value);\n    }\n  };\n\n  ImmutableTree.prototype.foreachChild = function (f) {\n    this.children.inorderTraversal(function (childName, childTree) {\n      if (childTree.value) {\n        f(childName, childTree.value);\n      }\n    });\n  };\n\n  return ImmutableTree;\n}();\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\n/**\r\n * This class holds a collection of writes that can be applied to nodes in unison. It abstracts away the logic with\r\n * dealing with priority writes and multiple nested writes. At any given path there is only allowed to be one write\r\n * modifying that path. Any write to an existing path or shadowing an existing path will modify that existing write\r\n * to reflect the write added.\r\n */\n\n\nvar CompoundWrite =\n/** @class */\nfunction () {\n  function CompoundWrite(writeTree_) {\n    this.writeTree_ = writeTree_;\n  }\n\n  CompoundWrite.empty = function () {\n    return new CompoundWrite(new ImmutableTree(null));\n  };\n\n  return CompoundWrite;\n}();\n\nfunction compoundWriteAddWrite(compoundWrite, path, node) {\n  if (pathIsEmpty(path)) {\n    return new CompoundWrite(new ImmutableTree(node));\n  } else {\n    var rootmost = compoundWrite.writeTree_.findRootMostValueAndPath(path);\n\n    if (rootmost != null) {\n      var rootMostPath = rootmost.path;\n      var value = rootmost.value;\n      var relativePath = newRelativePath(rootMostPath, path);\n      value = value.updateChild(relativePath, node);\n      return new CompoundWrite(compoundWrite.writeTree_.set(rootMostPath, value));\n    } else {\n      var subtree = new ImmutableTree(node);\n      var newWriteTree = compoundWrite.writeTree_.setTree(path, subtree);\n      return new CompoundWrite(newWriteTree);\n    }\n  }\n}\n\nfunction compoundWriteAddWrites(compoundWrite, path, updates) {\n  var newWrite = compoundWrite;\n  each(updates, function (childKey, node) {\n    newWrite = compoundWriteAddWrite(newWrite, pathChild(path, childKey), node);\n  });\n  return newWrite;\n}\n/**\r\n * Will remove a write at the given path and deeper paths. This will <em>not</em> modify a write at a higher\r\n * location, which must be removed by calling this method with that path.\r\n *\r\n * @param compoundWrite - The CompoundWrite to remove.\r\n * @param path - The path at which a write and all deeper writes should be removed\r\n * @returns The new CompoundWrite with the removed path\r\n */\n\n\nfunction compoundWriteRemoveWrite(compoundWrite, path) {\n  if (pathIsEmpty(path)) {\n    return CompoundWrite.empty();\n  } else {\n    var newWriteTree = compoundWrite.writeTree_.setTree(path, new ImmutableTree(null));\n    return new CompoundWrite(newWriteTree);\n  }\n}\n/**\r\n * Returns whether this CompoundWrite will fully overwrite a node at a given location and can therefore be\r\n * considered \"complete\".\r\n *\r\n * @param compoundWrite - The CompoundWrite to check.\r\n * @param path - The path to check for\r\n * @returns Whether there is a complete write at that path\r\n */\n\n\nfunction compoundWriteHasCompleteWrite(compoundWrite, path) {\n  return compoundWriteGetCompleteNode(compoundWrite, path) != null;\n}\n/**\r\n * Returns a node for a path if and only if the node is a \"complete\" overwrite at that path. This will not aggregate\r\n * writes from deeper paths, but will return child nodes from a more shallow path.\r\n *\r\n * @param compoundWrite - The CompoundWrite to get the node from.\r\n * @param path - The path to get a complete write\r\n * @returns The node if complete at that path, or null otherwise.\r\n */\n\n\nfunction compoundWriteGetCompleteNode(compoundWrite, path) {\n  var rootmost = compoundWrite.writeTree_.findRootMostValueAndPath(path);\n\n  if (rootmost != null) {\n    return compoundWrite.writeTree_.get(rootmost.path).getChild(newRelativePath(rootmost.path, path));\n  } else {\n    return null;\n  }\n}\n/**\r\n * Returns all children that are guaranteed to be a complete overwrite.\r\n *\r\n * @param compoundWrite - The CompoundWrite to get children from.\r\n * @returns A list of all complete children.\r\n */\n\n\nfunction compoundWriteGetCompleteChildren(compoundWrite) {\n  var children = [];\n  var node = compoundWrite.writeTree_.value;\n\n  if (node != null) {\n    // If it's a leaf node, it has no children; so nothing to do.\n    if (!node.isLeafNode()) {\n      node.forEachChild(PRIORITY_INDEX, function (childName, childNode) {\n        children.push(new NamedNode(childName, childNode));\n      });\n    }\n  } else {\n    compoundWrite.writeTree_.children.inorderTraversal(function (childName, childTree) {\n      if (childTree.value != null) {\n        children.push(new NamedNode(childName, childTree.value));\n      }\n    });\n  }\n\n  return children;\n}\n\nfunction compoundWriteChildCompoundWrite(compoundWrite, path) {\n  if (pathIsEmpty(path)) {\n    return compoundWrite;\n  } else {\n    var shadowingNode = compoundWriteGetCompleteNode(compoundWrite, path);\n\n    if (shadowingNode != null) {\n      return new CompoundWrite(new ImmutableTree(shadowingNode));\n    } else {\n      return new CompoundWrite(compoundWrite.writeTree_.subtree(path));\n    }\n  }\n}\n/**\r\n * Returns true if this CompoundWrite is empty and therefore does not modify any nodes.\r\n * @returns Whether this CompoundWrite is empty\r\n */\n\n\nfunction compoundWriteIsEmpty(compoundWrite) {\n  return compoundWrite.writeTree_.isEmpty();\n}\n/**\r\n * Applies this CompoundWrite to a node. The node is returned with all writes from this CompoundWrite applied to the\r\n * node\r\n * @param node - The node to apply this CompoundWrite to\r\n * @returns The node with all writes applied\r\n */\n\n\nfunction compoundWriteApply(compoundWrite, node) {\n  return applySubtreeWrite(newEmptyPath(), compoundWrite.writeTree_, node);\n}\n\nfunction applySubtreeWrite(relativePath, writeTree, node) {\n  if (writeTree.value != null) {\n    // Since there a write is always a leaf, we're done here\n    return node.updateChild(relativePath, writeTree.value);\n  } else {\n    var priorityWrite_1 = null;\n    writeTree.children.inorderTraversal(function (childKey, childTree) {\n      if (childKey === '.priority') {\n        // Apply priorities at the end so we don't update priorities for either empty nodes or forget\n        // to apply priorities to empty nodes that are later filled\n        assert(childTree.value !== null, 'Priority writes must always be leaf nodes');\n        priorityWrite_1 = childTree.value;\n      } else {\n        node = applySubtreeWrite(pathChild(relativePath, childKey), childTree, node);\n      }\n    }); // If there was a priority write, we only apply it if the node is not empty\n\n    if (!node.getChild(relativePath).isEmpty() && priorityWrite_1 !== null) {\n      node = node.updateChild(pathChild(relativePath, '.priority'), priorityWrite_1);\n    }\n\n    return node;\n  }\n}\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\n/**\r\n * Create a new WriteTreeRef for the given path. For use with a new sync point at the given path.\r\n *\r\n */\n\n\nfunction writeTreeChildWrites(writeTree, path) {\n  return newWriteTreeRef(path, writeTree);\n}\n/**\r\n * Record a new overwrite from user code.\r\n *\r\n * @param visible - This is set to false by some transactions. It should be excluded from event caches\r\n */\n\n\nfunction writeTreeAddOverwrite(writeTree, path, snap, writeId, visible) {\n  assert(writeId > writeTree.lastWriteId, 'Stacking an older write on top of newer ones');\n\n  if (visible === undefined) {\n    visible = true;\n  }\n\n  writeTree.allWrites.push({\n    path: path,\n    snap: snap,\n    writeId: writeId,\n    visible: visible\n  });\n\n  if (visible) {\n    writeTree.visibleWrites = compoundWriteAddWrite(writeTree.visibleWrites, path, snap);\n  }\n\n  writeTree.lastWriteId = writeId;\n}\n/**\r\n * Record a new merge from user code.\r\n */\n\n\nfunction writeTreeAddMerge(writeTree, path, changedChildren, writeId) {\n  assert(writeId > writeTree.lastWriteId, 'Stacking an older merge on top of newer ones');\n  writeTree.allWrites.push({\n    path: path,\n    children: changedChildren,\n    writeId: writeId,\n    visible: true\n  });\n  writeTree.visibleWrites = compoundWriteAddWrites(writeTree.visibleWrites, path, changedChildren);\n  writeTree.lastWriteId = writeId;\n}\n\nfunction writeTreeGetWrite(writeTree, writeId) {\n  for (var i = 0; i < writeTree.allWrites.length; i++) {\n    var record = writeTree.allWrites[i];\n\n    if (record.writeId === writeId) {\n      return record;\n    }\n  }\n\n  return null;\n}\n/**\r\n * Remove a write (either an overwrite or merge) that has been successfully acknowledge by the server. Recalculates\r\n * the tree if necessary.  We return true if it may have been visible, meaning views need to reevaluate.\r\n *\r\n * @returns true if the write may have been visible (meaning we'll need to reevaluate / raise\r\n * events as a result).\r\n */\n\n\nfunction writeTreeRemoveWrite(writeTree, writeId) {\n  // Note: disabling this check. It could be a transaction that preempted another transaction, and thus was applied\n  // out of order.\n  //const validClear = revert || this.allWrites_.length === 0 || writeId <= this.allWrites_[0].writeId;\n  //assert(validClear, \"Either we don't have this write, or it's the first one in the queue\");\n  var idx = writeTree.allWrites.findIndex(function (s) {\n    return s.writeId === writeId;\n  });\n  assert(idx >= 0, 'removeWrite called with nonexistent writeId.');\n  var writeToRemove = writeTree.allWrites[idx];\n  writeTree.allWrites.splice(idx, 1);\n  var removedWriteWasVisible = writeToRemove.visible;\n  var removedWriteOverlapsWithOtherWrites = false;\n  var i = writeTree.allWrites.length - 1;\n\n  while (removedWriteWasVisible && i >= 0) {\n    var currentWrite = writeTree.allWrites[i];\n\n    if (currentWrite.visible) {\n      if (i >= idx && writeTreeRecordContainsPath_(currentWrite, writeToRemove.path)) {\n        // The removed write was completely shadowed by a subsequent write.\n        removedWriteWasVisible = false;\n      } else if (pathContains(writeToRemove.path, currentWrite.path)) {\n        // Either we're covering some writes or they're covering part of us (depending on which came first).\n        removedWriteOverlapsWithOtherWrites = true;\n      }\n    }\n\n    i--;\n  }\n\n  if (!removedWriteWasVisible) {\n    return false;\n  } else if (removedWriteOverlapsWithOtherWrites) {\n    // There's some shadowing going on. Just rebuild the visible writes from scratch.\n    writeTreeResetTree_(writeTree);\n    return true;\n  } else {\n    // There's no shadowing.  We can safely just remove the write(s) from visibleWrites.\n    if (writeToRemove.snap) {\n      writeTree.visibleWrites = compoundWriteRemoveWrite(writeTree.visibleWrites, writeToRemove.path);\n    } else {\n      var children = writeToRemove.children;\n      each(children, function (childName) {\n        writeTree.visibleWrites = compoundWriteRemoveWrite(writeTree.visibleWrites, pathChild(writeToRemove.path, childName));\n      });\n    }\n\n    return true;\n  }\n}\n\nfunction writeTreeRecordContainsPath_(writeRecord, path) {\n  if (writeRecord.snap) {\n    return pathContains(writeRecord.path, path);\n  } else {\n    for (var childName in writeRecord.children) {\n      if (writeRecord.children.hasOwnProperty(childName) && pathContains(pathChild(writeRecord.path, childName), path)) {\n        return true;\n      }\n    }\n\n    return false;\n  }\n}\n/**\r\n * Re-layer the writes and merges into a tree so we can efficiently calculate event snapshots\r\n */\n\n\nfunction writeTreeResetTree_(writeTree) {\n  writeTree.visibleWrites = writeTreeLayerTree_(writeTree.allWrites, writeTreeDefaultFilter_, newEmptyPath());\n\n  if (writeTree.allWrites.length > 0) {\n    writeTree.lastWriteId = writeTree.allWrites[writeTree.allWrites.length - 1].writeId;\n  } else {\n    writeTree.lastWriteId = -1;\n  }\n}\n/**\r\n * The default filter used when constructing the tree. Keep everything that's visible.\r\n */\n\n\nfunction writeTreeDefaultFilter_(write) {\n  return write.visible;\n}\n/**\r\n * Static method. Given an array of WriteRecords, a filter for which ones to include, and a path, construct the tree of\r\n * event data at that path.\r\n */\n\n\nfunction writeTreeLayerTree_(writes, filter, treeRoot) {\n  var compoundWrite = CompoundWrite.empty();\n\n  for (var i = 0; i < writes.length; ++i) {\n    var write = writes[i]; // Theory, a later set will either:\n    // a) abort a relevant transaction, so no need to worry about excluding it from calculating that transaction\n    // b) not be relevant to a transaction (separate branch), so again will not affect the data for that transaction\n\n    if (filter(write)) {\n      var writePath = write.path;\n      var relativePath = void 0;\n\n      if (write.snap) {\n        if (pathContains(treeRoot, writePath)) {\n          relativePath = newRelativePath(treeRoot, writePath);\n          compoundWrite = compoundWriteAddWrite(compoundWrite, relativePath, write.snap);\n        } else if (pathContains(writePath, treeRoot)) {\n          relativePath = newRelativePath(writePath, treeRoot);\n          compoundWrite = compoundWriteAddWrite(compoundWrite, newEmptyPath(), write.snap.getChild(relativePath));\n        } else ;\n      } else if (write.children) {\n        if (pathContains(treeRoot, writePath)) {\n          relativePath = newRelativePath(treeRoot, writePath);\n          compoundWrite = compoundWriteAddWrites(compoundWrite, relativePath, write.children);\n        } else if (pathContains(writePath, treeRoot)) {\n          relativePath = newRelativePath(writePath, treeRoot);\n\n          if (pathIsEmpty(relativePath)) {\n            compoundWrite = compoundWriteAddWrites(compoundWrite, newEmptyPath(), write.children);\n          } else {\n            var child = safeGet(write.children, pathGetFront(relativePath));\n\n            if (child) {\n              // There exists a child in this node that matches the root path\n              var deepNode = child.getChild(pathPopFront(relativePath));\n              compoundWrite = compoundWriteAddWrite(compoundWrite, newEmptyPath(), deepNode);\n            }\n          }\n        } else ;\n      } else {\n        throw assertionError('WriteRecord should have .snap or .children');\n      }\n    }\n  }\n\n  return compoundWrite;\n}\n/**\r\n * Given optional, underlying server data, and an optional set of constraints (exclude some sets, include hidden\r\n * writes), attempt to calculate a complete snapshot for the given path\r\n *\r\n * @param writeIdsToExclude - An optional set to be excluded\r\n * @param includeHiddenWrites - Defaults to false, whether or not to layer on writes with visible set to false\r\n */\n\n\nfunction writeTreeCalcCompleteEventCache(writeTree, treePath, completeServerCache, writeIdsToExclude, includeHiddenWrites) {\n  if (!writeIdsToExclude && !includeHiddenWrites) {\n    var shadowingNode = compoundWriteGetCompleteNode(writeTree.visibleWrites, treePath);\n\n    if (shadowingNode != null) {\n      return shadowingNode;\n    } else {\n      var subMerge = compoundWriteChildCompoundWrite(writeTree.visibleWrites, treePath);\n\n      if (compoundWriteIsEmpty(subMerge)) {\n        return completeServerCache;\n      } else if (completeServerCache == null && !compoundWriteHasCompleteWrite(subMerge, newEmptyPath())) {\n        // We wouldn't have a complete snapshot, since there's no underlying data and no complete shadow\n        return null;\n      } else {\n        var layeredCache = completeServerCache || ChildrenNode.EMPTY_NODE;\n        return compoundWriteApply(subMerge, layeredCache);\n      }\n    }\n  } else {\n    var merge = compoundWriteChildCompoundWrite(writeTree.visibleWrites, treePath);\n\n    if (!includeHiddenWrites && compoundWriteIsEmpty(merge)) {\n      return completeServerCache;\n    } else {\n      // If the server cache is null, and we don't have a complete cache, we need to return null\n      if (!includeHiddenWrites && completeServerCache == null && !compoundWriteHasCompleteWrite(merge, newEmptyPath())) {\n        return null;\n      } else {\n        var filter = function (write) {\n          return (write.visible || includeHiddenWrites) && (!writeIdsToExclude || !~writeIdsToExclude.indexOf(write.writeId)) && (pathContains(write.path, treePath) || pathContains(treePath, write.path));\n        };\n\n        var mergeAtPath = writeTreeLayerTree_(writeTree.allWrites, filter, treePath);\n        var layeredCache = completeServerCache || ChildrenNode.EMPTY_NODE;\n        return compoundWriteApply(mergeAtPath, layeredCache);\n      }\n    }\n  }\n}\n/**\r\n * With optional, underlying server data, attempt to return a children node of children that we have complete data for.\r\n * Used when creating new views, to pre-fill their complete event children snapshot.\r\n */\n\n\nfunction writeTreeCalcCompleteEventChildren(writeTree, treePath, completeServerChildren) {\n  var completeChildren = ChildrenNode.EMPTY_NODE;\n  var topLevelSet = compoundWriteGetCompleteNode(writeTree.visibleWrites, treePath);\n\n  if (topLevelSet) {\n    if (!topLevelSet.isLeafNode()) {\n      // we're shadowing everything. Return the children.\n      topLevelSet.forEachChild(PRIORITY_INDEX, function (childName, childSnap) {\n        completeChildren = completeChildren.updateImmediateChild(childName, childSnap);\n      });\n    }\n\n    return completeChildren;\n  } else if (completeServerChildren) {\n    // Layer any children we have on top of this\n    // We know we don't have a top-level set, so just enumerate existing children\n    var merge_1 = compoundWriteChildCompoundWrite(writeTree.visibleWrites, treePath);\n    completeServerChildren.forEachChild(PRIORITY_INDEX, function (childName, childNode) {\n      var node = compoundWriteApply(compoundWriteChildCompoundWrite(merge_1, new Path(childName)), childNode);\n      completeChildren = completeChildren.updateImmediateChild(childName, node);\n    }); // Add any complete children we have from the set\n\n    compoundWriteGetCompleteChildren(merge_1).forEach(function (namedNode) {\n      completeChildren = completeChildren.updateImmediateChild(namedNode.name, namedNode.node);\n    });\n    return completeChildren;\n  } else {\n    // We don't have anything to layer on top of. Layer on any children we have\n    // Note that we can return an empty snap if we have a defined delete\n    var merge = compoundWriteChildCompoundWrite(writeTree.visibleWrites, treePath);\n    compoundWriteGetCompleteChildren(merge).forEach(function (namedNode) {\n      completeChildren = completeChildren.updateImmediateChild(namedNode.name, namedNode.node);\n    });\n    return completeChildren;\n  }\n}\n/**\r\n * Given that the underlying server data has updated, determine what, if anything, needs to be\r\n * applied to the event cache.\r\n *\r\n * Possibilities:\r\n *\r\n * 1. No writes are shadowing. Events should be raised, the snap to be applied comes from the server data\r\n *\r\n * 2. Some write is completely shadowing. No events to be raised\r\n *\r\n * 3. Is partially shadowed. Events\r\n *\r\n * Either existingEventSnap or existingServerSnap must exist\r\n */\n\n\nfunction writeTreeCalcEventCacheAfterServerOverwrite(writeTree, treePath, childPath, existingEventSnap, existingServerSnap) {\n  assert(existingEventSnap || existingServerSnap, 'Either existingEventSnap or existingServerSnap must exist');\n  var path = pathChild(treePath, childPath);\n\n  if (compoundWriteHasCompleteWrite(writeTree.visibleWrites, path)) {\n    // At this point we can probably guarantee that we're in case 2, meaning no events\n    // May need to check visibility while doing the findRootMostValueAndPath call\n    return null;\n  } else {\n    // No complete shadowing. We're either partially shadowing or not shadowing at all.\n    var childMerge = compoundWriteChildCompoundWrite(writeTree.visibleWrites, path);\n\n    if (compoundWriteIsEmpty(childMerge)) {\n      // We're not shadowing at all. Case 1\n      return existingServerSnap.getChild(childPath);\n    } else {\n      // This could be more efficient if the serverNode + updates doesn't change the eventSnap\n      // However this is tricky to find out, since user updates don't necessary change the server\n      // snap, e.g. priority updates on empty nodes, or deep deletes. Another special case is if the server\n      // adds nodes, but doesn't change any existing writes. It is therefore not enough to\n      // only check if the updates change the serverNode.\n      // Maybe check if the merge tree contains these special cases and only do a full overwrite in that case?\n      return compoundWriteApply(childMerge, existingServerSnap.getChild(childPath));\n    }\n  }\n}\n/**\r\n * Returns a complete child for a given server snap after applying all user writes or null if there is no\r\n * complete child for this ChildKey.\r\n */\n\n\nfunction writeTreeCalcCompleteChild(writeTree, treePath, childKey, existingServerSnap) {\n  var path = pathChild(treePath, childKey);\n  var shadowingNode = compoundWriteGetCompleteNode(writeTree.visibleWrites, path);\n\n  if (shadowingNode != null) {\n    return shadowingNode;\n  } else {\n    if (existingServerSnap.isCompleteForChild(childKey)) {\n      var childMerge = compoundWriteChildCompoundWrite(writeTree.visibleWrites, path);\n      return compoundWriteApply(childMerge, existingServerSnap.getNode().getImmediateChild(childKey));\n    } else {\n      return null;\n    }\n  }\n}\n/**\r\n * Returns a node if there is a complete overwrite for this path. More specifically, if there is a write at\r\n * a higher path, this will return the child of that write relative to the write and this path.\r\n * Returns null if there is no write at this path.\r\n */\n\n\nfunction writeTreeShadowingWrite(writeTree, path) {\n  return compoundWriteGetCompleteNode(writeTree.visibleWrites, path);\n}\n/**\r\n * This method is used when processing child remove events on a query. If we can, we pull in children that were outside\r\n * the window, but may now be in the window.\r\n */\n\n\nfunction writeTreeCalcIndexedSlice(writeTree, treePath, completeServerData, startPost, count, reverse, index) {\n  var toIterate;\n  var merge = compoundWriteChildCompoundWrite(writeTree.visibleWrites, treePath);\n  var shadowingNode = compoundWriteGetCompleteNode(merge, newEmptyPath());\n\n  if (shadowingNode != null) {\n    toIterate = shadowingNode;\n  } else if (completeServerData != null) {\n    toIterate = compoundWriteApply(merge, completeServerData);\n  } else {\n    // no children to iterate on\n    return [];\n  }\n\n  toIterate = toIterate.withIndex(index);\n\n  if (!toIterate.isEmpty() && !toIterate.isLeafNode()) {\n    var nodes = [];\n    var cmp = index.getCompare();\n    var iter = reverse ? toIterate.getReverseIteratorFrom(startPost, index) : toIterate.getIteratorFrom(startPost, index);\n    var next = iter.getNext();\n\n    while (next && nodes.length < count) {\n      if (cmp(next, startPost) !== 0) {\n        nodes.push(next);\n      }\n\n      next = iter.getNext();\n    }\n\n    return nodes;\n  } else {\n    return [];\n  }\n}\n\nfunction newWriteTree() {\n  return {\n    visibleWrites: CompoundWrite.empty(),\n    allWrites: [],\n    lastWriteId: -1\n  };\n}\n/**\r\n * If possible, returns a complete event cache, using the underlying server data if possible. In addition, can be used\r\n * to get a cache that includes hidden writes, and excludes arbitrary writes. Note that customizing the returned node\r\n * can lead to a more expensive calculation.\r\n *\r\n * @param writeIdsToExclude - Optional writes to exclude.\r\n * @param includeHiddenWrites - Defaults to false, whether or not to layer on writes with visible set to false\r\n */\n\n\nfunction writeTreeRefCalcCompleteEventCache(writeTreeRef, completeServerCache, writeIdsToExclude, includeHiddenWrites) {\n  return writeTreeCalcCompleteEventCache(writeTreeRef.writeTree, writeTreeRef.treePath, completeServerCache, writeIdsToExclude, includeHiddenWrites);\n}\n/**\r\n * If possible, returns a children node containing all of the complete children we have data for. The returned data is a\r\n * mix of the given server data and write data.\r\n *\r\n */\n\n\nfunction writeTreeRefCalcCompleteEventChildren(writeTreeRef, completeServerChildren) {\n  return writeTreeCalcCompleteEventChildren(writeTreeRef.writeTree, writeTreeRef.treePath, completeServerChildren);\n}\n/**\r\n * Given that either the underlying server data has updated or the outstanding writes have updated, determine what,\r\n * if anything, needs to be applied to the event cache.\r\n *\r\n * Possibilities:\r\n *\r\n * 1. No writes are shadowing. Events should be raised, the snap to be applied comes from the server data\r\n *\r\n * 2. Some write is completely shadowing. No events to be raised\r\n *\r\n * 3. Is partially shadowed. Events should be raised\r\n *\r\n * Either existingEventSnap or existingServerSnap must exist, this is validated via an assert\r\n *\r\n *\r\n */\n\n\nfunction writeTreeRefCalcEventCacheAfterServerOverwrite(writeTreeRef, path, existingEventSnap, existingServerSnap) {\n  return writeTreeCalcEventCacheAfterServerOverwrite(writeTreeRef.writeTree, writeTreeRef.treePath, path, existingEventSnap, existingServerSnap);\n}\n/**\r\n * Returns a node if there is a complete overwrite for this path. More specifically, if there is a write at\r\n * a higher path, this will return the child of that write relative to the write and this path.\r\n * Returns null if there is no write at this path.\r\n *\r\n */\n\n\nfunction writeTreeRefShadowingWrite(writeTreeRef, path) {\n  return writeTreeShadowingWrite(writeTreeRef.writeTree, pathChild(writeTreeRef.treePath, path));\n}\n/**\r\n * This method is used when processing child remove events on a query. If we can, we pull in children that were outside\r\n * the window, but may now be in the window\r\n */\n\n\nfunction writeTreeRefCalcIndexedSlice(writeTreeRef, completeServerData, startPost, count, reverse, index) {\n  return writeTreeCalcIndexedSlice(writeTreeRef.writeTree, writeTreeRef.treePath, completeServerData, startPost, count, reverse, index);\n}\n/**\r\n * Returns a complete child for a given server snap after applying all user writes or null if there is no\r\n * complete child for this ChildKey.\r\n */\n\n\nfunction writeTreeRefCalcCompleteChild(writeTreeRef, childKey, existingServerCache) {\n  return writeTreeCalcCompleteChild(writeTreeRef.writeTree, writeTreeRef.treePath, childKey, existingServerCache);\n}\n/**\r\n * Return a WriteTreeRef for a child.\r\n */\n\n\nfunction writeTreeRefChild(writeTreeRef, childName) {\n  return newWriteTreeRef(pathChild(writeTreeRef.treePath, childName), writeTreeRef.writeTree);\n}\n\nfunction newWriteTreeRef(path, writeTree) {\n  return {\n    treePath: path,\n    writeTree: writeTree\n  };\n}\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\n\nvar ChildChangeAccumulator =\n/** @class */\nfunction () {\n  function ChildChangeAccumulator() {\n    this.changeMap = new Map();\n  }\n\n  ChildChangeAccumulator.prototype.trackChildChange = function (change) {\n    var type = change.type;\n    var childKey = change.childName;\n    assert(type === \"child_added\"\n    /* CHILD_ADDED */\n    || type === \"child_changed\"\n    /* CHILD_CHANGED */\n    || type === \"child_removed\"\n    /* CHILD_REMOVED */\n    , 'Only child changes supported for tracking');\n    assert(childKey !== '.priority', 'Only non-priority child changes can be tracked.');\n    var oldChange = this.changeMap.get(childKey);\n\n    if (oldChange) {\n      var oldType = oldChange.type;\n\n      if (type === \"child_added\"\n      /* CHILD_ADDED */\n      && oldType === \"child_removed\"\n      /* CHILD_REMOVED */\n      ) {\n        this.changeMap.set(childKey, changeChildChanged(childKey, change.snapshotNode, oldChange.snapshotNode));\n      } else if (type === \"child_removed\"\n      /* CHILD_REMOVED */\n      && oldType === \"child_added\"\n      /* CHILD_ADDED */\n      ) {\n        this.changeMap.delete(childKey);\n      } else if (type === \"child_removed\"\n      /* CHILD_REMOVED */\n      && oldType === \"child_changed\"\n      /* CHILD_CHANGED */\n      ) {\n        this.changeMap.set(childKey, changeChildRemoved(childKey, oldChange.oldSnap));\n      } else if (type === \"child_changed\"\n      /* CHILD_CHANGED */\n      && oldType === \"child_added\"\n      /* CHILD_ADDED */\n      ) {\n        this.changeMap.set(childKey, changeChildAdded(childKey, change.snapshotNode));\n      } else if (type === \"child_changed\"\n      /* CHILD_CHANGED */\n      && oldType === \"child_changed\"\n      /* CHILD_CHANGED */\n      ) {\n        this.changeMap.set(childKey, changeChildChanged(childKey, change.snapshotNode, oldChange.oldSnap));\n      } else {\n        throw assertionError('Illegal combination of changes: ' + change + ' occurred after ' + oldChange);\n      }\n    } else {\n      this.changeMap.set(childKey, change);\n    }\n  };\n\n  ChildChangeAccumulator.prototype.getChanges = function () {\n    return Array.from(this.changeMap.values());\n  };\n\n  return ChildChangeAccumulator;\n}();\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\n/**\r\n * An implementation of CompleteChildSource that never returns any additional children\r\n */\n// eslint-disable-next-line @typescript-eslint/naming-convention\n\n\nvar NoCompleteChildSource_ =\n/** @class */\nfunction () {\n  function NoCompleteChildSource_() {}\n\n  NoCompleteChildSource_.prototype.getCompleteChild = function (childKey) {\n    return null;\n  };\n\n  NoCompleteChildSource_.prototype.getChildAfterChild = function (index, child, reverse) {\n    return null;\n  };\n\n  return NoCompleteChildSource_;\n}();\n/**\r\n * Singleton instance.\r\n */\n\n\nvar NO_COMPLETE_CHILD_SOURCE = new NoCompleteChildSource_();\n/**\r\n * An implementation of CompleteChildSource that uses a WriteTree in addition to any other server data or\r\n * old event caches available to calculate complete children.\r\n */\n\nvar WriteTreeCompleteChildSource =\n/** @class */\nfunction () {\n  function WriteTreeCompleteChildSource(writes_, viewCache_, optCompleteServerCache_) {\n    if (optCompleteServerCache_ === void 0) {\n      optCompleteServerCache_ = null;\n    }\n\n    this.writes_ = writes_;\n    this.viewCache_ = viewCache_;\n    this.optCompleteServerCache_ = optCompleteServerCache_;\n  }\n\n  WriteTreeCompleteChildSource.prototype.getCompleteChild = function (childKey) {\n    var node = this.viewCache_.eventCache;\n\n    if (node.isCompleteForChild(childKey)) {\n      return node.getNode().getImmediateChild(childKey);\n    } else {\n      var serverNode = this.optCompleteServerCache_ != null ? new CacheNode(this.optCompleteServerCache_, true, false) : this.viewCache_.serverCache;\n      return writeTreeRefCalcCompleteChild(this.writes_, childKey, serverNode);\n    }\n  };\n\n  WriteTreeCompleteChildSource.prototype.getChildAfterChild = function (index, child, reverse) {\n    var completeServerData = this.optCompleteServerCache_ != null ? this.optCompleteServerCache_ : viewCacheGetCompleteServerSnap(this.viewCache_);\n    var nodes = writeTreeRefCalcIndexedSlice(this.writes_, completeServerData, child, 1, reverse, index);\n\n    if (nodes.length === 0) {\n      return null;\n    } else {\n      return nodes[0];\n    }\n  };\n\n  return WriteTreeCompleteChildSource;\n}();\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\n\nfunction newViewProcessor(filter) {\n  return {\n    filter: filter\n  };\n}\n\nfunction viewProcessorAssertIndexed(viewProcessor, viewCache) {\n  assert(viewCache.eventCache.getNode().isIndexed(viewProcessor.filter.getIndex()), 'Event snap not indexed');\n  assert(viewCache.serverCache.getNode().isIndexed(viewProcessor.filter.getIndex()), 'Server snap not indexed');\n}\n\nfunction viewProcessorApplyOperation(viewProcessor, oldViewCache, operation, writesCache, completeCache) {\n  var accumulator = new ChildChangeAccumulator();\n  var newViewCache, filterServerNode;\n\n  if (operation.type === OperationType.OVERWRITE) {\n    var overwrite = operation;\n\n    if (overwrite.source.fromUser) {\n      newViewCache = viewProcessorApplyUserOverwrite(viewProcessor, oldViewCache, overwrite.path, overwrite.snap, writesCache, completeCache, accumulator);\n    } else {\n      assert(overwrite.source.fromServer, 'Unknown source.'); // We filter the node if it's a tagged update or the node has been previously filtered  and the\n      // update is not at the root in which case it is ok (and necessary) to mark the node unfiltered\n      // again\n\n      filterServerNode = overwrite.source.tagged || oldViewCache.serverCache.isFiltered() && !pathIsEmpty(overwrite.path);\n      newViewCache = viewProcessorApplyServerOverwrite(viewProcessor, oldViewCache, overwrite.path, overwrite.snap, writesCache, completeCache, filterServerNode, accumulator);\n    }\n  } else if (operation.type === OperationType.MERGE) {\n    var merge = operation;\n\n    if (merge.source.fromUser) {\n      newViewCache = viewProcessorApplyUserMerge(viewProcessor, oldViewCache, merge.path, merge.children, writesCache, completeCache, accumulator);\n    } else {\n      assert(merge.source.fromServer, 'Unknown source.'); // We filter the node if it's a tagged update or the node has been previously filtered\n\n      filterServerNode = merge.source.tagged || oldViewCache.serverCache.isFiltered();\n      newViewCache = viewProcessorApplyServerMerge(viewProcessor, oldViewCache, merge.path, merge.children, writesCache, completeCache, filterServerNode, accumulator);\n    }\n  } else if (operation.type === OperationType.ACK_USER_WRITE) {\n    var ackUserWrite = operation;\n\n    if (!ackUserWrite.revert) {\n      newViewCache = viewProcessorAckUserWrite(viewProcessor, oldViewCache, ackUserWrite.path, ackUserWrite.affectedTree, writesCache, completeCache, accumulator);\n    } else {\n      newViewCache = viewProcessorRevertUserWrite(viewProcessor, oldViewCache, ackUserWrite.path, writesCache, completeCache, accumulator);\n    }\n  } else if (operation.type === OperationType.LISTEN_COMPLETE) {\n    newViewCache = viewProcessorListenComplete(viewProcessor, oldViewCache, operation.path, writesCache, accumulator);\n  } else {\n    throw assertionError('Unknown operation type: ' + operation.type);\n  }\n\n  var changes = accumulator.getChanges();\n  viewProcessorMaybeAddValueEvent(oldViewCache, newViewCache, changes);\n  return {\n    viewCache: newViewCache,\n    changes: changes\n  };\n}\n\nfunction viewProcessorMaybeAddValueEvent(oldViewCache, newViewCache, accumulator) {\n  var eventSnap = newViewCache.eventCache;\n\n  if (eventSnap.isFullyInitialized()) {\n    var isLeafOrEmpty = eventSnap.getNode().isLeafNode() || eventSnap.getNode().isEmpty();\n    var oldCompleteSnap = viewCacheGetCompleteEventSnap(oldViewCache);\n\n    if (accumulator.length > 0 || !oldViewCache.eventCache.isFullyInitialized() || isLeafOrEmpty && !eventSnap.getNode().equals(oldCompleteSnap) || !eventSnap.getNode().getPriority().equals(oldCompleteSnap.getPriority())) {\n      accumulator.push(changeValue(viewCacheGetCompleteEventSnap(newViewCache)));\n    }\n  }\n}\n\nfunction viewProcessorGenerateEventCacheAfterServerEvent(viewProcessor, viewCache, changePath, writesCache, source, accumulator) {\n  var oldEventSnap = viewCache.eventCache;\n\n  if (writeTreeRefShadowingWrite(writesCache, changePath) != null) {\n    // we have a shadowing write, ignore changes\n    return viewCache;\n  } else {\n    var newEventCache = void 0,\n        serverNode = void 0;\n\n    if (pathIsEmpty(changePath)) {\n      // TODO: figure out how this plays with \"sliding ack windows\"\n      assert(viewCache.serverCache.isFullyInitialized(), 'If change path is empty, we must have complete server data');\n\n      if (viewCache.serverCache.isFiltered()) {\n        // We need to special case this, because we need to only apply writes to complete children, or\n        // we might end up raising events for incomplete children. If the server data is filtered deep\n        // writes cannot be guaranteed to be complete\n        var serverCache = viewCacheGetCompleteServerSnap(viewCache);\n        var completeChildren = serverCache instanceof ChildrenNode ? serverCache : ChildrenNode.EMPTY_NODE;\n        var completeEventChildren = writeTreeRefCalcCompleteEventChildren(writesCache, completeChildren);\n        newEventCache = viewProcessor.filter.updateFullNode(viewCache.eventCache.getNode(), completeEventChildren, accumulator);\n      } else {\n        var completeNode = writeTreeRefCalcCompleteEventCache(writesCache, viewCacheGetCompleteServerSnap(viewCache));\n        newEventCache = viewProcessor.filter.updateFullNode(viewCache.eventCache.getNode(), completeNode, accumulator);\n      }\n    } else {\n      var childKey = pathGetFront(changePath);\n\n      if (childKey === '.priority') {\n        assert(pathGetLength(changePath) === 1, \"Can't have a priority with additional path components\");\n        var oldEventNode = oldEventSnap.getNode();\n        serverNode = viewCache.serverCache.getNode(); // we might have overwrites for this priority\n\n        var updatedPriority = writeTreeRefCalcEventCacheAfterServerOverwrite(writesCache, changePath, oldEventNode, serverNode);\n\n        if (updatedPriority != null) {\n          newEventCache = viewProcessor.filter.updatePriority(oldEventNode, updatedPriority);\n        } else {\n          // priority didn't change, keep old node\n          newEventCache = oldEventSnap.getNode();\n        }\n      } else {\n        var childChangePath = pathPopFront(changePath); // update child\n\n        var newEventChild = void 0;\n\n        if (oldEventSnap.isCompleteForChild(childKey)) {\n          serverNode = viewCache.serverCache.getNode();\n          var eventChildUpdate = writeTreeRefCalcEventCacheAfterServerOverwrite(writesCache, changePath, oldEventSnap.getNode(), serverNode);\n\n          if (eventChildUpdate != null) {\n            newEventChild = oldEventSnap.getNode().getImmediateChild(childKey).updateChild(childChangePath, eventChildUpdate);\n          } else {\n            // Nothing changed, just keep the old child\n            newEventChild = oldEventSnap.getNode().getImmediateChild(childKey);\n          }\n        } else {\n          newEventChild = writeTreeRefCalcCompleteChild(writesCache, childKey, viewCache.serverCache);\n        }\n\n        if (newEventChild != null) {\n          newEventCache = viewProcessor.filter.updateChild(oldEventSnap.getNode(), childKey, newEventChild, childChangePath, source, accumulator);\n        } else {\n          // no complete child available or no change\n          newEventCache = oldEventSnap.getNode();\n        }\n      }\n    }\n\n    return viewCacheUpdateEventSnap(viewCache, newEventCache, oldEventSnap.isFullyInitialized() || pathIsEmpty(changePath), viewProcessor.filter.filtersNodes());\n  }\n}\n\nfunction viewProcessorApplyServerOverwrite(viewProcessor, oldViewCache, changePath, changedSnap, writesCache, completeCache, filterServerNode, accumulator) {\n  var oldServerSnap = oldViewCache.serverCache;\n  var newServerCache;\n  var serverFilter = filterServerNode ? viewProcessor.filter : viewProcessor.filter.getIndexedFilter();\n\n  if (pathIsEmpty(changePath)) {\n    newServerCache = serverFilter.updateFullNode(oldServerSnap.getNode(), changedSnap, null);\n  } else if (serverFilter.filtersNodes() && !oldServerSnap.isFiltered()) {\n    // we want to filter the server node, but we didn't filter the server node yet, so simulate a full update\n    var newServerNode = oldServerSnap.getNode().updateChild(changePath, changedSnap);\n    newServerCache = serverFilter.updateFullNode(oldServerSnap.getNode(), newServerNode, null);\n  } else {\n    var childKey = pathGetFront(changePath);\n\n    if (!oldServerSnap.isCompleteForPath(changePath) && pathGetLength(changePath) > 1) {\n      // We don't update incomplete nodes with updates intended for other listeners\n      return oldViewCache;\n    }\n\n    var childChangePath = pathPopFront(changePath);\n    var childNode = oldServerSnap.getNode().getImmediateChild(childKey);\n    var newChildNode = childNode.updateChild(childChangePath, changedSnap);\n\n    if (childKey === '.priority') {\n      newServerCache = serverFilter.updatePriority(oldServerSnap.getNode(), newChildNode);\n    } else {\n      newServerCache = serverFilter.updateChild(oldServerSnap.getNode(), childKey, newChildNode, childChangePath, NO_COMPLETE_CHILD_SOURCE, null);\n    }\n  }\n\n  var newViewCache = viewCacheUpdateServerSnap(oldViewCache, newServerCache, oldServerSnap.isFullyInitialized() || pathIsEmpty(changePath), serverFilter.filtersNodes());\n  var source = new WriteTreeCompleteChildSource(writesCache, newViewCache, completeCache);\n  return viewProcessorGenerateEventCacheAfterServerEvent(viewProcessor, newViewCache, changePath, writesCache, source, accumulator);\n}\n\nfunction viewProcessorApplyUserOverwrite(viewProcessor, oldViewCache, changePath, changedSnap, writesCache, completeCache, accumulator) {\n  var oldEventSnap = oldViewCache.eventCache;\n  var newViewCache, newEventCache;\n  var source = new WriteTreeCompleteChildSource(writesCache, oldViewCache, completeCache);\n\n  if (pathIsEmpty(changePath)) {\n    newEventCache = viewProcessor.filter.updateFullNode(oldViewCache.eventCache.getNode(), changedSnap, accumulator);\n    newViewCache = viewCacheUpdateEventSnap(oldViewCache, newEventCache, true, viewProcessor.filter.filtersNodes());\n  } else {\n    var childKey = pathGetFront(changePath);\n\n    if (childKey === '.priority') {\n      newEventCache = viewProcessor.filter.updatePriority(oldViewCache.eventCache.getNode(), changedSnap);\n      newViewCache = viewCacheUpdateEventSnap(oldViewCache, newEventCache, oldEventSnap.isFullyInitialized(), oldEventSnap.isFiltered());\n    } else {\n      var childChangePath = pathPopFront(changePath);\n      var oldChild = oldEventSnap.getNode().getImmediateChild(childKey);\n      var newChild = void 0;\n\n      if (pathIsEmpty(childChangePath)) {\n        // Child overwrite, we can replace the child\n        newChild = changedSnap;\n      } else {\n        var childNode = source.getCompleteChild(childKey);\n\n        if (childNode != null) {\n          if (pathGetBack(childChangePath) === '.priority' && childNode.getChild(pathParent(childChangePath)).isEmpty()) {\n            // This is a priority update on an empty node. If this node exists on the server, the\n            // server will send down the priority in the update, so ignore for now\n            newChild = childNode;\n          } else {\n            newChild = childNode.updateChild(childChangePath, changedSnap);\n          }\n        } else {\n          // There is no complete child node available\n          newChild = ChildrenNode.EMPTY_NODE;\n        }\n      }\n\n      if (!oldChild.equals(newChild)) {\n        var newEventSnap = viewProcessor.filter.updateChild(oldEventSnap.getNode(), childKey, newChild, childChangePath, source, accumulator);\n        newViewCache = viewCacheUpdateEventSnap(oldViewCache, newEventSnap, oldEventSnap.isFullyInitialized(), viewProcessor.filter.filtersNodes());\n      } else {\n        newViewCache = oldViewCache;\n      }\n    }\n  }\n\n  return newViewCache;\n}\n\nfunction viewProcessorCacheHasChild(viewCache, childKey) {\n  return viewCache.eventCache.isCompleteForChild(childKey);\n}\n\nfunction viewProcessorApplyUserMerge(viewProcessor, viewCache, path, changedChildren, writesCache, serverCache, accumulator) {\n  // HACK: In the case of a limit query, there may be some changes that bump things out of the\n  // window leaving room for new items.  It's important we process these changes first, so we\n  // iterate the changes twice, first processing any that affect items currently in view.\n  // TODO: I consider an item \"in view\" if cacheHasChild is true, which checks both the server\n  // and event snap.  I'm not sure if this will result in edge cases when a child is in one but\n  // not the other.\n  var curViewCache = viewCache;\n  changedChildren.foreach(function (relativePath, childNode) {\n    var writePath = pathChild(path, relativePath);\n\n    if (viewProcessorCacheHasChild(viewCache, pathGetFront(writePath))) {\n      curViewCache = viewProcessorApplyUserOverwrite(viewProcessor, curViewCache, writePath, childNode, writesCache, serverCache, accumulator);\n    }\n  });\n  changedChildren.foreach(function (relativePath, childNode) {\n    var writePath = pathChild(path, relativePath);\n\n    if (!viewProcessorCacheHasChild(viewCache, pathGetFront(writePath))) {\n      curViewCache = viewProcessorApplyUserOverwrite(viewProcessor, curViewCache, writePath, childNode, writesCache, serverCache, accumulator);\n    }\n  });\n  return curViewCache;\n}\n\nfunction viewProcessorApplyMerge(viewProcessor, node, merge) {\n  merge.foreach(function (relativePath, childNode) {\n    node = node.updateChild(relativePath, childNode);\n  });\n  return node;\n}\n\nfunction viewProcessorApplyServerMerge(viewProcessor, viewCache, path, changedChildren, writesCache, serverCache, filterServerNode, accumulator) {\n  // If we don't have a cache yet, this merge was intended for a previously listen in the same location. Ignore it and\n  // wait for the complete data update coming soon.\n  if (viewCache.serverCache.getNode().isEmpty() && !viewCache.serverCache.isFullyInitialized()) {\n    return viewCache;\n  } // HACK: In the case of a limit query, there may be some changes that bump things out of the\n  // window leaving room for new items.  It's important we process these changes first, so we\n  // iterate the changes twice, first processing any that affect items currently in view.\n  // TODO: I consider an item \"in view\" if cacheHasChild is true, which checks both the server\n  // and event snap.  I'm not sure if this will result in edge cases when a child is in one but\n  // not the other.\n\n\n  var curViewCache = viewCache;\n  var viewMergeTree;\n\n  if (pathIsEmpty(path)) {\n    viewMergeTree = changedChildren;\n  } else {\n    viewMergeTree = new ImmutableTree(null).setTree(path, changedChildren);\n  }\n\n  var serverNode = viewCache.serverCache.getNode();\n  viewMergeTree.children.inorderTraversal(function (childKey, childTree) {\n    if (serverNode.hasChild(childKey)) {\n      var serverChild = viewCache.serverCache.getNode().getImmediateChild(childKey);\n      var newChild = viewProcessorApplyMerge(viewProcessor, serverChild, childTree);\n      curViewCache = viewProcessorApplyServerOverwrite(viewProcessor, curViewCache, new Path(childKey), newChild, writesCache, serverCache, filterServerNode, accumulator);\n    }\n  });\n  viewMergeTree.children.inorderTraversal(function (childKey, childMergeTree) {\n    var isUnknownDeepMerge = !viewCache.serverCache.isCompleteForChild(childKey) && childMergeTree.value === undefined;\n\n    if (!serverNode.hasChild(childKey) && !isUnknownDeepMerge) {\n      var serverChild = viewCache.serverCache.getNode().getImmediateChild(childKey);\n      var newChild = viewProcessorApplyMerge(viewProcessor, serverChild, childMergeTree);\n      curViewCache = viewProcessorApplyServerOverwrite(viewProcessor, curViewCache, new Path(childKey), newChild, writesCache, serverCache, filterServerNode, accumulator);\n    }\n  });\n  return curViewCache;\n}\n\nfunction viewProcessorAckUserWrite(viewProcessor, viewCache, ackPath, affectedTree, writesCache, completeCache, accumulator) {\n  if (writeTreeRefShadowingWrite(writesCache, ackPath) != null) {\n    return viewCache;\n  } // Only filter server node if it is currently filtered\n\n\n  var filterServerNode = viewCache.serverCache.isFiltered(); // Essentially we'll just get our existing server cache for the affected paths and re-apply it as a server update\n  // now that it won't be shadowed.\n\n  var serverCache = viewCache.serverCache;\n\n  if (affectedTree.value != null) {\n    // This is an overwrite.\n    if (pathIsEmpty(ackPath) && serverCache.isFullyInitialized() || serverCache.isCompleteForPath(ackPath)) {\n      return viewProcessorApplyServerOverwrite(viewProcessor, viewCache, ackPath, serverCache.getNode().getChild(ackPath), writesCache, completeCache, filterServerNode, accumulator);\n    } else if (pathIsEmpty(ackPath)) {\n      // This is a goofy edge case where we are acking data at this location but don't have full data.  We\n      // should just re-apply whatever we have in our cache as a merge.\n      var changedChildren_1 = new ImmutableTree(null);\n      serverCache.getNode().forEachChild(KEY_INDEX, function (name, node) {\n        changedChildren_1 = changedChildren_1.set(new Path(name), node);\n      });\n      return viewProcessorApplyServerMerge(viewProcessor, viewCache, ackPath, changedChildren_1, writesCache, completeCache, filterServerNode, accumulator);\n    } else {\n      return viewCache;\n    }\n  } else {\n    // This is a merge.\n    var changedChildren_2 = new ImmutableTree(null);\n    affectedTree.foreach(function (mergePath, value) {\n      var serverCachePath = pathChild(ackPath, mergePath);\n\n      if (serverCache.isCompleteForPath(serverCachePath)) {\n        changedChildren_2 = changedChildren_2.set(mergePath, serverCache.getNode().getChild(serverCachePath));\n      }\n    });\n    return viewProcessorApplyServerMerge(viewProcessor, viewCache, ackPath, changedChildren_2, writesCache, completeCache, filterServerNode, accumulator);\n  }\n}\n\nfunction viewProcessorListenComplete(viewProcessor, viewCache, path, writesCache, accumulator) {\n  var oldServerNode = viewCache.serverCache;\n  var newViewCache = viewCacheUpdateServerSnap(viewCache, oldServerNode.getNode(), oldServerNode.isFullyInitialized() || pathIsEmpty(path), oldServerNode.isFiltered());\n  return viewProcessorGenerateEventCacheAfterServerEvent(viewProcessor, newViewCache, path, writesCache, NO_COMPLETE_CHILD_SOURCE, accumulator);\n}\n\nfunction viewProcessorRevertUserWrite(viewProcessor, viewCache, path, writesCache, completeServerCache, accumulator) {\n  var complete;\n\n  if (writeTreeRefShadowingWrite(writesCache, path) != null) {\n    return viewCache;\n  } else {\n    var source = new WriteTreeCompleteChildSource(writesCache, viewCache, completeServerCache);\n    var oldEventCache = viewCache.eventCache.getNode();\n    var newEventCache = void 0;\n\n    if (pathIsEmpty(path) || pathGetFront(path) === '.priority') {\n      var newNode = void 0;\n\n      if (viewCache.serverCache.isFullyInitialized()) {\n        newNode = writeTreeRefCalcCompleteEventCache(writesCache, viewCacheGetCompleteServerSnap(viewCache));\n      } else {\n        var serverChildren = viewCache.serverCache.getNode();\n        assert(serverChildren instanceof ChildrenNode, 'serverChildren would be complete if leaf node');\n        newNode = writeTreeRefCalcCompleteEventChildren(writesCache, serverChildren);\n      }\n\n      newNode = newNode;\n      newEventCache = viewProcessor.filter.updateFullNode(oldEventCache, newNode, accumulator);\n    } else {\n      var childKey = pathGetFront(path);\n      var newChild = writeTreeRefCalcCompleteChild(writesCache, childKey, viewCache.serverCache);\n\n      if (newChild == null && viewCache.serverCache.isCompleteForChild(childKey)) {\n        newChild = oldEventCache.getImmediateChild(childKey);\n      }\n\n      if (newChild != null) {\n        newEventCache = viewProcessor.filter.updateChild(oldEventCache, childKey, newChild, pathPopFront(path), source, accumulator);\n      } else if (viewCache.eventCache.getNode().hasChild(childKey)) {\n        // No complete child available, delete the existing one, if any\n        newEventCache = viewProcessor.filter.updateChild(oldEventCache, childKey, ChildrenNode.EMPTY_NODE, pathPopFront(path), source, accumulator);\n      } else {\n        newEventCache = oldEventCache;\n      }\n\n      if (newEventCache.isEmpty() && viewCache.serverCache.isFullyInitialized()) {\n        // We might have reverted all child writes. Maybe the old event was a leaf node\n        complete = writeTreeRefCalcCompleteEventCache(writesCache, viewCacheGetCompleteServerSnap(viewCache));\n\n        if (complete.isLeafNode()) {\n          newEventCache = viewProcessor.filter.updateFullNode(newEventCache, complete, accumulator);\n        }\n      }\n    }\n\n    complete = viewCache.serverCache.isFullyInitialized() || writeTreeRefShadowingWrite(writesCache, newEmptyPath()) != null;\n    return viewCacheUpdateEventSnap(viewCache, newEventCache, complete, viewProcessor.filter.filtersNodes());\n  }\n}\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\n/**\r\n * A view represents a specific location and query that has 1 or more event registrations.\r\n *\r\n * It does several things:\r\n *  - Maintains the list of event registrations for this location/query.\r\n *  - Maintains a cache of the data visible for this location/query.\r\n *  - Applies new operations (via applyOperation), updates the cache, and based on the event\r\n *    registrations returns the set of events to be raised.\r\n */\n\n\nvar View =\n/** @class */\nfunction () {\n  function View(query_, initialViewCache) {\n    this.query_ = query_;\n    this.eventRegistrations_ = [];\n    var params = this.query_._queryParams;\n    var indexFilter = new IndexedFilter(params.getIndex());\n    var filter = queryParamsGetNodeFilter(params);\n    this.processor_ = newViewProcessor(filter);\n    var initialServerCache = initialViewCache.serverCache;\n    var initialEventCache = initialViewCache.eventCache; // Don't filter server node with other filter than index, wait for tagged listen\n\n    var serverSnap = indexFilter.updateFullNode(ChildrenNode.EMPTY_NODE, initialServerCache.getNode(), null);\n    var eventSnap = filter.updateFullNode(ChildrenNode.EMPTY_NODE, initialEventCache.getNode(), null);\n    var newServerCache = new CacheNode(serverSnap, initialServerCache.isFullyInitialized(), indexFilter.filtersNodes());\n    var newEventCache = new CacheNode(eventSnap, initialEventCache.isFullyInitialized(), filter.filtersNodes());\n    this.viewCache_ = newViewCache(newEventCache, newServerCache);\n    this.eventGenerator_ = new EventGenerator(this.query_);\n  }\n\n  Object.defineProperty(View.prototype, \"query\", {\n    get: function () {\n      return this.query_;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  return View;\n}();\n\nfunction viewGetServerCache(view) {\n  return view.viewCache_.serverCache.getNode();\n}\n\nfunction viewGetCompleteNode(view) {\n  return viewCacheGetCompleteEventSnap(view.viewCache_);\n}\n\nfunction viewGetCompleteServerCache(view, path) {\n  var cache = viewCacheGetCompleteServerSnap(view.viewCache_);\n\n  if (cache) {\n    // If this isn't a \"loadsAllData\" view, then cache isn't actually a complete cache and\n    // we need to see if it contains the child we're interested in.\n    if (view.query._queryParams.loadsAllData() || !pathIsEmpty(path) && !cache.getImmediateChild(pathGetFront(path)).isEmpty()) {\n      return cache.getChild(path);\n    }\n  }\n\n  return null;\n}\n\nfunction viewIsEmpty(view) {\n  return view.eventRegistrations_.length === 0;\n}\n\nfunction viewAddEventRegistration(view, eventRegistration) {\n  view.eventRegistrations_.push(eventRegistration);\n}\n/**\r\n * @param eventRegistration - If null, remove all callbacks.\r\n * @param cancelError - If a cancelError is provided, appropriate cancel events will be returned.\r\n * @returns Cancel events, if cancelError was provided.\r\n */\n\n\nfunction viewRemoveEventRegistration(view, eventRegistration, cancelError) {\n  var cancelEvents = [];\n\n  if (cancelError) {\n    assert(eventRegistration == null, 'A cancel should cancel all event registrations.');\n    var path_1 = view.query._path;\n    view.eventRegistrations_.forEach(function (registration) {\n      var maybeEvent = registration.createCancelEvent(cancelError, path_1);\n\n      if (maybeEvent) {\n        cancelEvents.push(maybeEvent);\n      }\n    });\n  }\n\n  if (eventRegistration) {\n    var remaining = [];\n\n    for (var i = 0; i < view.eventRegistrations_.length; ++i) {\n      var existing = view.eventRegistrations_[i];\n\n      if (!existing.matches(eventRegistration)) {\n        remaining.push(existing);\n      } else if (eventRegistration.hasAnyCallback()) {\n        // We're removing just this one\n        remaining = remaining.concat(view.eventRegistrations_.slice(i + 1));\n        break;\n      }\n    }\n\n    view.eventRegistrations_ = remaining;\n  } else {\n    view.eventRegistrations_ = [];\n  }\n\n  return cancelEvents;\n}\n/**\r\n * Applies the given Operation, updates our cache, and returns the appropriate events.\r\n */\n\n\nfunction viewApplyOperation(view, operation, writesCache, completeServerCache) {\n  if (operation.type === OperationType.MERGE && operation.source.queryId !== null) {\n    assert(viewCacheGetCompleteServerSnap(view.viewCache_), 'We should always have a full cache before handling merges');\n    assert(viewCacheGetCompleteEventSnap(view.viewCache_), 'Missing event cache, even though we have a server cache');\n  }\n\n  var oldViewCache = view.viewCache_;\n  var result = viewProcessorApplyOperation(view.processor_, oldViewCache, operation, writesCache, completeServerCache);\n  viewProcessorAssertIndexed(view.processor_, result.viewCache);\n  assert(result.viewCache.serverCache.isFullyInitialized() || !oldViewCache.serverCache.isFullyInitialized(), 'Once a server snap is complete, it should never go back');\n  view.viewCache_ = result.viewCache;\n  return viewGenerateEventsForChanges_(view, result.changes, result.viewCache.eventCache.getNode(), null);\n}\n\nfunction viewGetInitialEvents(view, registration) {\n  var eventSnap = view.viewCache_.eventCache;\n  var initialChanges = [];\n\n  if (!eventSnap.getNode().isLeafNode()) {\n    var eventNode = eventSnap.getNode();\n    eventNode.forEachChild(PRIORITY_INDEX, function (key, childNode) {\n      initialChanges.push(changeChildAdded(key, childNode));\n    });\n  }\n\n  if (eventSnap.isFullyInitialized()) {\n    initialChanges.push(changeValue(eventSnap.getNode()));\n  }\n\n  return viewGenerateEventsForChanges_(view, initialChanges, eventSnap.getNode(), registration);\n}\n\nfunction viewGenerateEventsForChanges_(view, changes, eventCache, eventRegistration) {\n  var registrations = eventRegistration ? [eventRegistration] : view.eventRegistrations_;\n  return eventGeneratorGenerateEventsForChanges(view.eventGenerator_, changes, eventCache, registrations);\n}\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\n\nvar referenceConstructor$1;\n/**\r\n * SyncPoint represents a single location in a SyncTree with 1 or more event registrations, meaning we need to\r\n * maintain 1 or more Views at this location to cache server data and raise appropriate events for server changes\r\n * and user writes (set, transaction, update).\r\n *\r\n * It's responsible for:\r\n *  - Maintaining the set of 1 or more views necessary at this location (a SyncPoint with 0 views should be removed).\r\n *  - Proxying user / server operations to the views as appropriate (i.e. applyServerOverwrite,\r\n *    applyUserOverwrite, etc.)\r\n */\n\nvar SyncPoint =\n/** @class */\nfunction () {\n  function SyncPoint() {\n    /**\r\n     * The Views being tracked at this location in the tree, stored as a map where the key is a\r\n     * queryId and the value is the View for that query.\r\n     *\r\n     * NOTE: This list will be quite small (usually 1, but perhaps 2 or 3; any more is an odd use case).\r\n     */\n    this.views = new Map();\n  }\n\n  return SyncPoint;\n}();\n\nfunction syncPointSetReferenceConstructor(val) {\n  assert(!referenceConstructor$1, '__referenceConstructor has already been defined');\n  referenceConstructor$1 = val;\n}\n\nfunction syncPointGetReferenceConstructor() {\n  assert(referenceConstructor$1, 'Reference.ts has not been loaded');\n  return referenceConstructor$1;\n}\n\nfunction syncPointIsEmpty(syncPoint) {\n  return syncPoint.views.size === 0;\n}\n\nfunction syncPointApplyOperation(syncPoint, operation, writesCache, optCompleteServerCache) {\n  var e_1, _a;\n\n  var queryId = operation.source.queryId;\n\n  if (queryId !== null) {\n    var view = syncPoint.views.get(queryId);\n    assert(view != null, 'SyncTree gave us an op for an invalid query.');\n    return viewApplyOperation(view, operation, writesCache, optCompleteServerCache);\n  } else {\n    var events = [];\n\n    try {\n      for (var _b = __values(syncPoint.views.values()), _c = _b.next(); !_c.done; _c = _b.next()) {\n        var view = _c.value;\n        events = events.concat(viewApplyOperation(view, operation, writesCache, optCompleteServerCache));\n      }\n    } catch (e_1_1) {\n      e_1 = {\n        error: e_1_1\n      };\n    } finally {\n      try {\n        if (_c && !_c.done && (_a = _b.return)) _a.call(_b);\n      } finally {\n        if (e_1) throw e_1.error;\n      }\n    }\n\n    return events;\n  }\n}\n/**\r\n * Get a view for the specified query.\r\n *\r\n * @param query - The query to return a view for\r\n * @param writesCache\r\n * @param serverCache\r\n * @param serverCacheComplete\r\n * @returns Events to raise.\r\n */\n\n\nfunction syncPointGetView(syncPoint, query, writesCache, serverCache, serverCacheComplete) {\n  var queryId = query._queryIdentifier;\n  var view = syncPoint.views.get(queryId);\n\n  if (!view) {\n    // TODO: make writesCache take flag for complete server node\n    var eventCache = writeTreeRefCalcCompleteEventCache(writesCache, serverCacheComplete ? serverCache : null);\n    var eventCacheComplete = false;\n\n    if (eventCache) {\n      eventCacheComplete = true;\n    } else if (serverCache instanceof ChildrenNode) {\n      eventCache = writeTreeRefCalcCompleteEventChildren(writesCache, serverCache);\n      eventCacheComplete = false;\n    } else {\n      eventCache = ChildrenNode.EMPTY_NODE;\n      eventCacheComplete = false;\n    }\n\n    var viewCache = newViewCache(new CacheNode(eventCache, eventCacheComplete, false), new CacheNode(serverCache, serverCacheComplete, false));\n    return new View(query, viewCache);\n  }\n\n  return view;\n}\n/**\r\n * Add an event callback for the specified query.\r\n *\r\n * @param query\r\n * @param eventRegistration\r\n * @param writesCache\r\n * @param serverCache - Complete server cache, if we have it.\r\n * @param serverCacheComplete\r\n * @returns Events to raise.\r\n */\n\n\nfunction syncPointAddEventRegistration(syncPoint, query, eventRegistration, writesCache, serverCache, serverCacheComplete) {\n  var view = syncPointGetView(syncPoint, query, writesCache, serverCache, serverCacheComplete);\n\n  if (!syncPoint.views.has(query._queryIdentifier)) {\n    syncPoint.views.set(query._queryIdentifier, view);\n  } // This is guaranteed to exist now, we just created anything that was missing\n\n\n  viewAddEventRegistration(view, eventRegistration);\n  return viewGetInitialEvents(view, eventRegistration);\n}\n/**\r\n * Remove event callback(s).  Return cancelEvents if a cancelError is specified.\r\n *\r\n * If query is the default query, we'll check all views for the specified eventRegistration.\r\n * If eventRegistration is null, we'll remove all callbacks for the specified view(s).\r\n *\r\n * @param eventRegistration - If null, remove all callbacks.\r\n * @param cancelError - If a cancelError is provided, appropriate cancel events will be returned.\r\n * @returns removed queries and any cancel events\r\n */\n\n\nfunction syncPointRemoveEventRegistration(syncPoint, query, eventRegistration, cancelError) {\n  var e_2, _a;\n\n  var queryId = query._queryIdentifier;\n  var removed = [];\n  var cancelEvents = [];\n  var hadCompleteView = syncPointHasCompleteView(syncPoint);\n\n  if (queryId === 'default') {\n    try {\n      // When you do ref.off(...), we search all views for the registration to remove.\n      for (var _b = __values(syncPoint.views.entries()), _c = _b.next(); !_c.done; _c = _b.next()) {\n        var _d = __read(_c.value, 2),\n            viewQueryId = _d[0],\n            view = _d[1];\n\n        cancelEvents = cancelEvents.concat(viewRemoveEventRegistration(view, eventRegistration, cancelError));\n\n        if (viewIsEmpty(view)) {\n          syncPoint.views.delete(viewQueryId); // We'll deal with complete views later.\n\n          if (!view.query._queryParams.loadsAllData()) {\n            removed.push(view.query);\n          }\n        }\n      }\n    } catch (e_2_1) {\n      e_2 = {\n        error: e_2_1\n      };\n    } finally {\n      try {\n        if (_c && !_c.done && (_a = _b.return)) _a.call(_b);\n      } finally {\n        if (e_2) throw e_2.error;\n      }\n    }\n  } else {\n    // remove the callback from the specific view.\n    var view = syncPoint.views.get(queryId);\n\n    if (view) {\n      cancelEvents = cancelEvents.concat(viewRemoveEventRegistration(view, eventRegistration, cancelError));\n\n      if (viewIsEmpty(view)) {\n        syncPoint.views.delete(queryId); // We'll deal with complete views later.\n\n        if (!view.query._queryParams.loadsAllData()) {\n          removed.push(view.query);\n        }\n      }\n    }\n  }\n\n  if (hadCompleteView && !syncPointHasCompleteView(syncPoint)) {\n    // We removed our last complete view.\n    removed.push(new (syncPointGetReferenceConstructor())(query._repo, query._path));\n  }\n\n  return {\n    removed: removed,\n    events: cancelEvents\n  };\n}\n\nfunction syncPointGetQueryViews(syncPoint) {\n  var e_3, _a;\n\n  var result = [];\n\n  try {\n    for (var _b = __values(syncPoint.views.values()), _c = _b.next(); !_c.done; _c = _b.next()) {\n      var view = _c.value;\n\n      if (!view.query._queryParams.loadsAllData()) {\n        result.push(view);\n      }\n    }\n  } catch (e_3_1) {\n    e_3 = {\n      error: e_3_1\n    };\n  } finally {\n    try {\n      if (_c && !_c.done && (_a = _b.return)) _a.call(_b);\n    } finally {\n      if (e_3) throw e_3.error;\n    }\n  }\n\n  return result;\n}\n/**\r\n * @param path - The path to the desired complete snapshot\r\n * @returns A complete cache, if it exists\r\n */\n\n\nfunction syncPointGetCompleteServerCache(syncPoint, path) {\n  var e_4, _a;\n\n  var serverCache = null;\n\n  try {\n    for (var _b = __values(syncPoint.views.values()), _c = _b.next(); !_c.done; _c = _b.next()) {\n      var view = _c.value;\n      serverCache = serverCache || viewGetCompleteServerCache(view, path);\n    }\n  } catch (e_4_1) {\n    e_4 = {\n      error: e_4_1\n    };\n  } finally {\n    try {\n      if (_c && !_c.done && (_a = _b.return)) _a.call(_b);\n    } finally {\n      if (e_4) throw e_4.error;\n    }\n  }\n\n  return serverCache;\n}\n\nfunction syncPointViewForQuery(syncPoint, query) {\n  var params = query._queryParams;\n\n  if (params.loadsAllData()) {\n    return syncPointGetCompleteView(syncPoint);\n  } else {\n    var queryId = query._queryIdentifier;\n    return syncPoint.views.get(queryId);\n  }\n}\n\nfunction syncPointViewExistsForQuery(syncPoint, query) {\n  return syncPointViewForQuery(syncPoint, query) != null;\n}\n\nfunction syncPointHasCompleteView(syncPoint) {\n  return syncPointGetCompleteView(syncPoint) != null;\n}\n\nfunction syncPointGetCompleteView(syncPoint) {\n  var e_5, _a;\n\n  try {\n    for (var _b = __values(syncPoint.views.values()), _c = _b.next(); !_c.done; _c = _b.next()) {\n      var view = _c.value;\n\n      if (view.query._queryParams.loadsAllData()) {\n        return view;\n      }\n    }\n  } catch (e_5_1) {\n    e_5 = {\n      error: e_5_1\n    };\n  } finally {\n    try {\n      if (_c && !_c.done && (_a = _b.return)) _a.call(_b);\n    } finally {\n      if (e_5) throw e_5.error;\n    }\n  }\n\n  return null;\n}\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\n\nvar referenceConstructor;\n\nfunction syncTreeSetReferenceConstructor(val) {\n  assert(!referenceConstructor, '__referenceConstructor has already been defined');\n  referenceConstructor = val;\n}\n\nfunction syncTreeGetReferenceConstructor() {\n  assert(referenceConstructor, 'Reference.ts has not been loaded');\n  return referenceConstructor;\n}\n/**\r\n * Static tracker for next query tag.\r\n */\n\n\nvar syncTreeNextQueryTag_ = 1;\n/**\r\n * SyncTree is the central class for managing event callback registration, data caching, views\r\n * (query processing), and event generation.  There are typically two SyncTree instances for\r\n * each Repo, one for the normal Firebase data, and one for the .info data.\r\n *\r\n * It has a number of responsibilities, including:\r\n *  - Tracking all user event callbacks (registered via addEventRegistration() and removeEventRegistration()).\r\n *  - Applying and caching data changes for user set(), transaction(), and update() calls\r\n *    (applyUserOverwrite(), applyUserMerge()).\r\n *  - Applying and caching data changes for server data changes (applyServerOverwrite(),\r\n *    applyServerMerge()).\r\n *  - Generating user-facing events for server and user changes (all of the apply* methods\r\n *    return the set of events that need to be raised as a result).\r\n *  - Maintaining the appropriate set of server listens to ensure we are always subscribed\r\n *    to the correct set of paths and queries to satisfy the current set of user event\r\n *    callbacks (listens are started/stopped using the provided listenProvider).\r\n *\r\n * NOTE: Although SyncTree tracks event callbacks and calculates events to raise, the actual\r\n * events are returned to the caller rather than raised synchronously.\r\n *\r\n */\n\nvar SyncTree =\n/** @class */\nfunction () {\n  /**\r\n   * @param listenProvider_ - Used by SyncTree to start / stop listening\r\n   *   to server data.\r\n   */\n  function SyncTree(listenProvider_) {\n    this.listenProvider_ = listenProvider_;\n    /**\r\n     * Tree of SyncPoints.  There's a SyncPoint at any location that has 1 or more views.\r\n     */\n\n    this.syncPointTree_ = new ImmutableTree(null);\n    /**\r\n     * A tree of all pending user writes (user-initiated set()'s, transaction()'s, update()'s, etc.).\r\n     */\n\n    this.pendingWriteTree_ = newWriteTree();\n    this.tagToQueryMap = new Map();\n    this.queryToTagMap = new Map();\n  }\n\n  return SyncTree;\n}();\n/**\r\n * Apply the data changes for a user-generated set() or transaction() call.\r\n *\r\n * @returns Events to raise.\r\n */\n\n\nfunction syncTreeApplyUserOverwrite(syncTree, path, newData, writeId, visible) {\n  // Record pending write.\n  writeTreeAddOverwrite(syncTree.pendingWriteTree_, path, newData, writeId, visible);\n\n  if (!visible) {\n    return [];\n  } else {\n    return syncTreeApplyOperationToSyncPoints_(syncTree, new Overwrite(newOperationSourceUser(), path, newData));\n  }\n}\n/**\r\n * Apply the data from a user-generated update() call\r\n *\r\n * @returns Events to raise.\r\n */\n\n\nfunction syncTreeApplyUserMerge(syncTree, path, changedChildren, writeId) {\n  // Record pending merge.\n  writeTreeAddMerge(syncTree.pendingWriteTree_, path, changedChildren, writeId);\n  var changeTree = ImmutableTree.fromObject(changedChildren);\n  return syncTreeApplyOperationToSyncPoints_(syncTree, new Merge(newOperationSourceUser(), path, changeTree));\n}\n/**\r\n * Acknowledge a pending user write that was previously registered with applyUserOverwrite() or applyUserMerge().\r\n *\r\n * @param revert - True if the given write failed and needs to be reverted\r\n * @returns Events to raise.\r\n */\n\n\nfunction syncTreeAckUserWrite(syncTree, writeId, revert) {\n  if (revert === void 0) {\n    revert = false;\n  }\n\n  var write = writeTreeGetWrite(syncTree.pendingWriteTree_, writeId);\n  var needToReevaluate = writeTreeRemoveWrite(syncTree.pendingWriteTree_, writeId);\n\n  if (!needToReevaluate) {\n    return [];\n  } else {\n    var affectedTree_1 = new ImmutableTree(null);\n\n    if (write.snap != null) {\n      // overwrite\n      affectedTree_1 = affectedTree_1.set(newEmptyPath(), true);\n    } else {\n      each(write.children, function (pathString) {\n        affectedTree_1 = affectedTree_1.set(new Path(pathString), true);\n      });\n    }\n\n    return syncTreeApplyOperationToSyncPoints_(syncTree, new AckUserWrite(write.path, affectedTree_1, revert));\n  }\n}\n/**\r\n * Apply new server data for the specified path..\r\n *\r\n * @returns Events to raise.\r\n */\n\n\nfunction syncTreeApplyServerOverwrite(syncTree, path, newData) {\n  return syncTreeApplyOperationToSyncPoints_(syncTree, new Overwrite(newOperationSourceServer(), path, newData));\n}\n/**\r\n * Apply new server data to be merged in at the specified path.\r\n *\r\n * @returns Events to raise.\r\n */\n\n\nfunction syncTreeApplyServerMerge(syncTree, path, changedChildren) {\n  var changeTree = ImmutableTree.fromObject(changedChildren);\n  return syncTreeApplyOperationToSyncPoints_(syncTree, new Merge(newOperationSourceServer(), path, changeTree));\n}\n/**\r\n * Apply a listen complete for a query\r\n *\r\n * @returns Events to raise.\r\n */\n\n\nfunction syncTreeApplyListenComplete(syncTree, path) {\n  return syncTreeApplyOperationToSyncPoints_(syncTree, new ListenComplete(newOperationSourceServer(), path));\n}\n/**\r\n * Apply a listen complete for a tagged query\r\n *\r\n * @returns Events to raise.\r\n */\n\n\nfunction syncTreeApplyTaggedListenComplete(syncTree, path, tag) {\n  var queryKey = syncTreeQueryKeyForTag_(syncTree, tag);\n\n  if (queryKey) {\n    var r = syncTreeParseQueryKey_(queryKey);\n    var queryPath = r.path,\n        queryId = r.queryId;\n    var relativePath = newRelativePath(queryPath, path);\n    var op = new ListenComplete(newOperationSourceServerTaggedQuery(queryId), relativePath);\n    return syncTreeApplyTaggedOperation_(syncTree, queryPath, op);\n  } else {\n    // We've already removed the query. No big deal, ignore the update\n    return [];\n  }\n}\n/**\r\n * Remove event callback(s).\r\n *\r\n * If query is the default query, we'll check all queries for the specified eventRegistration.\r\n * If eventRegistration is null, we'll remove all callbacks for the specified query/queries.\r\n *\r\n * @param eventRegistration - If null, all callbacks are removed.\r\n * @param cancelError - If a cancelError is provided, appropriate cancel events will be returned.\r\n * @returns Cancel events, if cancelError was provided.\r\n */\n\n\nfunction syncTreeRemoveEventRegistration(syncTree, query, eventRegistration, cancelError) {\n  // Find the syncPoint first. Then deal with whether or not it has matching listeners\n  var path = query._path;\n  var maybeSyncPoint = syncTree.syncPointTree_.get(path);\n  var cancelEvents = []; // A removal on a default query affects all queries at that location. A removal on an indexed query, even one without\n  // other query constraints, does *not* affect all queries at that location. So this check must be for 'default', and\n  // not loadsAllData().\n\n  if (maybeSyncPoint && (query._queryIdentifier === 'default' || syncPointViewExistsForQuery(maybeSyncPoint, query))) {\n    var removedAndEvents = syncPointRemoveEventRegistration(maybeSyncPoint, query, eventRegistration, cancelError);\n\n    if (syncPointIsEmpty(maybeSyncPoint)) {\n      syncTree.syncPointTree_ = syncTree.syncPointTree_.remove(path);\n    }\n\n    var removed = removedAndEvents.removed;\n    cancelEvents = removedAndEvents.events; // We may have just removed one of many listeners and can short-circuit this whole process\n    // We may also not have removed a default listener, in which case all of the descendant listeners should already be\n    // properly set up.\n    //\n    // Since indexed queries can shadow if they don't have other query constraints, check for loadsAllData(), instead of\n    // queryId === 'default'\n\n    var removingDefault = -1 !== removed.findIndex(function (query) {\n      return query._queryParams.loadsAllData();\n    });\n    var covered = syncTree.syncPointTree_.findOnPath(path, function (relativePath, parentSyncPoint) {\n      return syncPointHasCompleteView(parentSyncPoint);\n    });\n\n    if (removingDefault && !covered) {\n      var subtree = syncTree.syncPointTree_.subtree(path); // There are potentially child listeners. Determine what if any listens we need to send before executing the\n      // removal\n\n      if (!subtree.isEmpty()) {\n        // We need to fold over our subtree and collect the listeners to send\n        var newViews = syncTreeCollectDistinctViewsForSubTree_(subtree); // Ok, we've collected all the listens we need. Set them up.\n\n        for (var i = 0; i < newViews.length; ++i) {\n          var view = newViews[i],\n              newQuery = view.query;\n          var listener = syncTreeCreateListenerForView_(syncTree, view);\n          syncTree.listenProvider_.startListening(syncTreeQueryForListening_(newQuery), syncTreeTagForQuery_(syncTree, newQuery), listener.hashFn, listener.onComplete);\n        }\n      }\n    } // If we removed anything and we're not covered by a higher up listen, we need to stop listening on this query\n    // The above block has us covered in terms of making sure we're set up on listens lower in the tree.\n    // Also, note that if we have a cancelError, it's already been removed at the provider level.\n\n\n    if (!covered && removed.length > 0 && !cancelError) {\n      // If we removed a default, then we weren't listening on any of the other queries here. Just cancel the one\n      // default. Otherwise, we need to iterate through and cancel each individual query\n      if (removingDefault) {\n        // We don't tag default listeners\n        var defaultTag = null;\n        syncTree.listenProvider_.stopListening(syncTreeQueryForListening_(query), defaultTag);\n      } else {\n        removed.forEach(function (queryToRemove) {\n          var tagToRemove = syncTree.queryToTagMap.get(syncTreeMakeQueryKey_(queryToRemove));\n          syncTree.listenProvider_.stopListening(syncTreeQueryForListening_(queryToRemove), tagToRemove);\n        });\n      }\n    } // Now, clear all of the tags we're tracking for the removed listens\n\n\n    syncTreeRemoveTags_(syncTree, removed);\n  }\n\n  return cancelEvents;\n}\n/**\r\n * Apply new server data for the specified tagged query.\r\n *\r\n * @returns Events to raise.\r\n */\n\n\nfunction syncTreeApplyTaggedQueryOverwrite(syncTree, path, snap, tag) {\n  var queryKey = syncTreeQueryKeyForTag_(syncTree, tag);\n\n  if (queryKey != null) {\n    var r = syncTreeParseQueryKey_(queryKey);\n    var queryPath = r.path,\n        queryId = r.queryId;\n    var relativePath = newRelativePath(queryPath, path);\n    var op = new Overwrite(newOperationSourceServerTaggedQuery(queryId), relativePath, snap);\n    return syncTreeApplyTaggedOperation_(syncTree, queryPath, op);\n  } else {\n    // Query must have been removed already\n    return [];\n  }\n}\n/**\r\n * Apply server data to be merged in for the specified tagged query.\r\n *\r\n * @returns Events to raise.\r\n */\n\n\nfunction syncTreeApplyTaggedQueryMerge(syncTree, path, changedChildren, tag) {\n  var queryKey = syncTreeQueryKeyForTag_(syncTree, tag);\n\n  if (queryKey) {\n    var r = syncTreeParseQueryKey_(queryKey);\n    var queryPath = r.path,\n        queryId = r.queryId;\n    var relativePath = newRelativePath(queryPath, path);\n    var changeTree = ImmutableTree.fromObject(changedChildren);\n    var op = new Merge(newOperationSourceServerTaggedQuery(queryId), relativePath, changeTree);\n    return syncTreeApplyTaggedOperation_(syncTree, queryPath, op);\n  } else {\n    // We've already removed the query. No big deal, ignore the update\n    return [];\n  }\n}\n/**\r\n * Add an event callback for the specified query.\r\n *\r\n * @returns Events to raise.\r\n */\n\n\nfunction syncTreeAddEventRegistration(syncTree, query, eventRegistration) {\n  var path = query._path;\n  var serverCache = null;\n  var foundAncestorDefaultView = false; // Any covering writes will necessarily be at the root, so really all we need to find is the server cache.\n  // Consider optimizing this once there's a better understanding of what actual behavior will be.\n\n  syncTree.syncPointTree_.foreachOnPath(path, function (pathToSyncPoint, sp) {\n    var relativePath = newRelativePath(pathToSyncPoint, path);\n    serverCache = serverCache || syncPointGetCompleteServerCache(sp, relativePath);\n    foundAncestorDefaultView = foundAncestorDefaultView || syncPointHasCompleteView(sp);\n  });\n  var syncPoint = syncTree.syncPointTree_.get(path);\n\n  if (!syncPoint) {\n    syncPoint = new SyncPoint();\n    syncTree.syncPointTree_ = syncTree.syncPointTree_.set(path, syncPoint);\n  } else {\n    foundAncestorDefaultView = foundAncestorDefaultView || syncPointHasCompleteView(syncPoint);\n    serverCache = serverCache || syncPointGetCompleteServerCache(syncPoint, newEmptyPath());\n  }\n\n  var serverCacheComplete;\n\n  if (serverCache != null) {\n    serverCacheComplete = true;\n  } else {\n    serverCacheComplete = false;\n    serverCache = ChildrenNode.EMPTY_NODE;\n    var subtree = syncTree.syncPointTree_.subtree(path);\n    subtree.foreachChild(function (childName, childSyncPoint) {\n      var completeCache = syncPointGetCompleteServerCache(childSyncPoint, newEmptyPath());\n\n      if (completeCache) {\n        serverCache = serverCache.updateImmediateChild(childName, completeCache);\n      }\n    });\n  }\n\n  var viewAlreadyExists = syncPointViewExistsForQuery(syncPoint, query);\n\n  if (!viewAlreadyExists && !query._queryParams.loadsAllData()) {\n    // We need to track a tag for this query\n    var queryKey = syncTreeMakeQueryKey_(query);\n    assert(!syncTree.queryToTagMap.has(queryKey), 'View does not exist, but we have a tag');\n    var tag = syncTreeGetNextQueryTag_();\n    syncTree.queryToTagMap.set(queryKey, tag);\n    syncTree.tagToQueryMap.set(tag, queryKey);\n  }\n\n  var writesCache = writeTreeChildWrites(syncTree.pendingWriteTree_, path);\n  var events = syncPointAddEventRegistration(syncPoint, query, eventRegistration, writesCache, serverCache, serverCacheComplete);\n\n  if (!viewAlreadyExists && !foundAncestorDefaultView) {\n    var view = syncPointViewForQuery(syncPoint, query);\n    events = events.concat(syncTreeSetupListener_(syncTree, query, view));\n  }\n\n  return events;\n}\n/**\r\n * Returns a complete cache, if we have one, of the data at a particular path. If the location does not have a\r\n * listener above it, we will get a false \"null\". This shouldn't be a problem because transactions will always\r\n * have a listener above, and atomic operations would correctly show a jitter of <increment value> ->\r\n *     <incremented total> as the write is applied locally and then acknowledged at the server.\r\n *\r\n * Note: this method will *include* hidden writes from transaction with applyLocally set to false.\r\n *\r\n * @param path - The path to the data we want\r\n * @param writeIdsToExclude - A specific set to be excluded\r\n */\n\n\nfunction syncTreeCalcCompleteEventCache(syncTree, path, writeIdsToExclude) {\n  var includeHiddenSets = true;\n  var writeTree = syncTree.pendingWriteTree_;\n  var serverCache = syncTree.syncPointTree_.findOnPath(path, function (pathSoFar, syncPoint) {\n    var relativePath = newRelativePath(pathSoFar, path);\n    var serverCache = syncPointGetCompleteServerCache(syncPoint, relativePath);\n\n    if (serverCache) {\n      return serverCache;\n    }\n  });\n  return writeTreeCalcCompleteEventCache(writeTree, path, serverCache, writeIdsToExclude, includeHiddenSets);\n}\n\nfunction syncTreeGetServerValue(syncTree, query) {\n  var path = query._path;\n  var serverCache = null; // Any covering writes will necessarily be at the root, so really all we need to find is the server cache.\n  // Consider optimizing this once there's a better understanding of what actual behavior will be.\n\n  syncTree.syncPointTree_.foreachOnPath(path, function (pathToSyncPoint, sp) {\n    var relativePath = newRelativePath(pathToSyncPoint, path);\n    serverCache = serverCache || syncPointGetCompleteServerCache(sp, relativePath);\n  });\n  var syncPoint = syncTree.syncPointTree_.get(path);\n\n  if (!syncPoint) {\n    syncPoint = new SyncPoint();\n    syncTree.syncPointTree_ = syncTree.syncPointTree_.set(path, syncPoint);\n  } else {\n    serverCache = serverCache || syncPointGetCompleteServerCache(syncPoint, newEmptyPath());\n  }\n\n  var serverCacheComplete = serverCache != null;\n  var serverCacheNode = serverCacheComplete ? new CacheNode(serverCache, true, false) : null;\n  var writesCache = writeTreeChildWrites(syncTree.pendingWriteTree_, query._path);\n  var view = syncPointGetView(syncPoint, query, writesCache, serverCacheComplete ? serverCacheNode.getNode() : ChildrenNode.EMPTY_NODE, serverCacheComplete);\n  return viewGetCompleteNode(view);\n}\n/**\r\n * A helper method that visits all descendant and ancestor SyncPoints, applying the operation.\r\n *\r\n * NOTES:\r\n * - Descendant SyncPoints will be visited first (since we raise events depth-first).\r\n *\r\n * - We call applyOperation() on each SyncPoint passing three things:\r\n *   1. A version of the Operation that has been made relative to the SyncPoint location.\r\n *   2. A WriteTreeRef of any writes we have cached at the SyncPoint location.\r\n *   3. A snapshot Node with cached server data, if we have it.\r\n *\r\n * - We concatenate all of the events returned by each SyncPoint and return the result.\r\n */\n\n\nfunction syncTreeApplyOperationToSyncPoints_(syncTree, operation) {\n  return syncTreeApplyOperationHelper_(operation, syncTree.syncPointTree_,\n  /*serverCache=*/\n  null, writeTreeChildWrites(syncTree.pendingWriteTree_, newEmptyPath()));\n}\n/**\r\n * Recursive helper for applyOperationToSyncPoints_\r\n */\n\n\nfunction syncTreeApplyOperationHelper_(operation, syncPointTree, serverCache, writesCache) {\n  if (pathIsEmpty(operation.path)) {\n    return syncTreeApplyOperationDescendantsHelper_(operation, syncPointTree, serverCache, writesCache);\n  } else {\n    var syncPoint = syncPointTree.get(newEmptyPath()); // If we don't have cached server data, see if we can get it from this SyncPoint.\n\n    if (serverCache == null && syncPoint != null) {\n      serverCache = syncPointGetCompleteServerCache(syncPoint, newEmptyPath());\n    }\n\n    var events = [];\n    var childName = pathGetFront(operation.path);\n    var childOperation = operation.operationForChild(childName);\n    var childTree = syncPointTree.children.get(childName);\n\n    if (childTree && childOperation) {\n      var childServerCache = serverCache ? serverCache.getImmediateChild(childName) : null;\n      var childWritesCache = writeTreeRefChild(writesCache, childName);\n      events = events.concat(syncTreeApplyOperationHelper_(childOperation, childTree, childServerCache, childWritesCache));\n    }\n\n    if (syncPoint) {\n      events = events.concat(syncPointApplyOperation(syncPoint, operation, writesCache, serverCache));\n    }\n\n    return events;\n  }\n}\n/**\r\n * Recursive helper for applyOperationToSyncPoints_\r\n */\n\n\nfunction syncTreeApplyOperationDescendantsHelper_(operation, syncPointTree, serverCache, writesCache) {\n  var syncPoint = syncPointTree.get(newEmptyPath()); // If we don't have cached server data, see if we can get it from this SyncPoint.\n\n  if (serverCache == null && syncPoint != null) {\n    serverCache = syncPointGetCompleteServerCache(syncPoint, newEmptyPath());\n  }\n\n  var events = [];\n  syncPointTree.children.inorderTraversal(function (childName, childTree) {\n    var childServerCache = serverCache ? serverCache.getImmediateChild(childName) : null;\n    var childWritesCache = writeTreeRefChild(writesCache, childName);\n    var childOperation = operation.operationForChild(childName);\n\n    if (childOperation) {\n      events = events.concat(syncTreeApplyOperationDescendantsHelper_(childOperation, childTree, childServerCache, childWritesCache));\n    }\n  });\n\n  if (syncPoint) {\n    events = events.concat(syncPointApplyOperation(syncPoint, operation, writesCache, serverCache));\n  }\n\n  return events;\n}\n\nfunction syncTreeCreateListenerForView_(syncTree, view) {\n  var query = view.query;\n  var tag = syncTreeTagForQuery_(syncTree, query);\n  return {\n    hashFn: function () {\n      var cache = viewGetServerCache(view) || ChildrenNode.EMPTY_NODE;\n      return cache.hash();\n    },\n    onComplete: function (status) {\n      if (status === 'ok') {\n        if (tag) {\n          return syncTreeApplyTaggedListenComplete(syncTree, query._path, tag);\n        } else {\n          return syncTreeApplyListenComplete(syncTree, query._path);\n        }\n      } else {\n        // If a listen failed, kill all of the listeners here, not just the one that triggered the error.\n        // Note that this may need to be scoped to just this listener if we change permissions on filtered children\n        var error = errorForServerCode(status, query);\n        return syncTreeRemoveEventRegistration(syncTree, query,\n        /*eventRegistration*/\n        null, error);\n      }\n    }\n  };\n}\n/**\r\n * Return the tag associated with the given query.\r\n */\n\n\nfunction syncTreeTagForQuery_(syncTree, query) {\n  var queryKey = syncTreeMakeQueryKey_(query);\n  return syncTree.queryToTagMap.get(queryKey);\n}\n/**\r\n * Given a query, computes a \"queryKey\" suitable for use in our queryToTagMap_.\r\n */\n\n\nfunction syncTreeMakeQueryKey_(query) {\n  return query._path.toString() + '$' + query._queryIdentifier;\n}\n/**\r\n * Return the query associated with the given tag, if we have one\r\n */\n\n\nfunction syncTreeQueryKeyForTag_(syncTree, tag) {\n  return syncTree.tagToQueryMap.get(tag);\n}\n/**\r\n * Given a queryKey (created by makeQueryKey), parse it back into a path and queryId.\r\n */\n\n\nfunction syncTreeParseQueryKey_(queryKey) {\n  var splitIndex = queryKey.indexOf('$');\n  assert(splitIndex !== -1 && splitIndex < queryKey.length - 1, 'Bad queryKey.');\n  return {\n    queryId: queryKey.substr(splitIndex + 1),\n    path: new Path(queryKey.substr(0, splitIndex))\n  };\n}\n/**\r\n * A helper method to apply tagged operations\r\n */\n\n\nfunction syncTreeApplyTaggedOperation_(syncTree, queryPath, operation) {\n  var syncPoint = syncTree.syncPointTree_.get(queryPath);\n  assert(syncPoint, \"Missing sync point for query tag that we're tracking\");\n  var writesCache = writeTreeChildWrites(syncTree.pendingWriteTree_, queryPath);\n  return syncPointApplyOperation(syncPoint, operation, writesCache, null);\n}\n/**\r\n * This collapses multiple unfiltered views into a single view, since we only need a single\r\n * listener for them.\r\n */\n\n\nfunction syncTreeCollectDistinctViewsForSubTree_(subtree) {\n  return subtree.fold(function (relativePath, maybeChildSyncPoint, childMap) {\n    if (maybeChildSyncPoint && syncPointHasCompleteView(maybeChildSyncPoint)) {\n      var completeView = syncPointGetCompleteView(maybeChildSyncPoint);\n      return [completeView];\n    } else {\n      // No complete view here, flatten any deeper listens into an array\n      var views_1 = [];\n\n      if (maybeChildSyncPoint) {\n        views_1 = syncPointGetQueryViews(maybeChildSyncPoint);\n      }\n\n      each(childMap, function (_key, childViews) {\n        views_1 = views_1.concat(childViews);\n      });\n      return views_1;\n    }\n  });\n}\n/**\r\n * Normalizes a query to a query we send the server for listening\r\n *\r\n * @returns The normalized query\r\n */\n\n\nfunction syncTreeQueryForListening_(query) {\n  if (query._queryParams.loadsAllData() && !query._queryParams.isDefault()) {\n    // We treat queries that load all data as default queries\n    // Cast is necessary because ref() technically returns Firebase which is actually fb.api.Firebase which inherits\n    // from Query\n    return new (syncTreeGetReferenceConstructor())(query._repo, query._path);\n  } else {\n    return query;\n  }\n}\n\nfunction syncTreeRemoveTags_(syncTree, queries) {\n  for (var j = 0; j < queries.length; ++j) {\n    var removedQuery = queries[j];\n\n    if (!removedQuery._queryParams.loadsAllData()) {\n      // We should have a tag for this\n      var removedQueryKey = syncTreeMakeQueryKey_(removedQuery);\n      var removedQueryTag = syncTree.queryToTagMap.get(removedQueryKey);\n      syncTree.queryToTagMap.delete(removedQueryKey);\n      syncTree.tagToQueryMap.delete(removedQueryTag);\n    }\n  }\n}\n/**\r\n * Static accessor for query tags.\r\n */\n\n\nfunction syncTreeGetNextQueryTag_() {\n  return syncTreeNextQueryTag_++;\n}\n/**\r\n * For a given new listen, manage the de-duplication of outstanding subscriptions.\r\n *\r\n * @returns This method can return events to support synchronous data sources\r\n */\n\n\nfunction syncTreeSetupListener_(syncTree, query, view) {\n  var path = query._path;\n  var tag = syncTreeTagForQuery_(syncTree, query);\n  var listener = syncTreeCreateListenerForView_(syncTree, view);\n  var events = syncTree.listenProvider_.startListening(syncTreeQueryForListening_(query), tag, listener.hashFn, listener.onComplete);\n  var subtree = syncTree.syncPointTree_.subtree(path); // The root of this subtree has our query. We're here because we definitely need to send a listen for that, but we\n  // may need to shadow other listens as well.\n\n  if (tag) {\n    assert(!syncPointHasCompleteView(subtree.value), \"If we're adding a query, it shouldn't be shadowed\");\n  } else {\n    // Shadow everything at or below this location, this is a default listener.\n    var queriesToStop = subtree.fold(function (relativePath, maybeChildSyncPoint, childMap) {\n      if (!pathIsEmpty(relativePath) && maybeChildSyncPoint && syncPointHasCompleteView(maybeChildSyncPoint)) {\n        return [syncPointGetCompleteView(maybeChildSyncPoint).query];\n      } else {\n        // No default listener here, flatten any deeper queries into an array\n        var queries_1 = [];\n\n        if (maybeChildSyncPoint) {\n          queries_1 = queries_1.concat(syncPointGetQueryViews(maybeChildSyncPoint).map(function (view) {\n            return view.query;\n          }));\n        }\n\n        each(childMap, function (_key, childQueries) {\n          queries_1 = queries_1.concat(childQueries);\n        });\n        return queries_1;\n      }\n    });\n\n    for (var i = 0; i < queriesToStop.length; ++i) {\n      var queryToStop = queriesToStop[i];\n      syncTree.listenProvider_.stopListening(syncTreeQueryForListening_(queryToStop), syncTreeTagForQuery_(syncTree, queryToStop));\n    }\n  }\n\n  return events;\n}\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\n\nvar ExistingValueProvider =\n/** @class */\nfunction () {\n  function ExistingValueProvider(node_) {\n    this.node_ = node_;\n  }\n\n  ExistingValueProvider.prototype.getImmediateChild = function (childName) {\n    var child = this.node_.getImmediateChild(childName);\n    return new ExistingValueProvider(child);\n  };\n\n  ExistingValueProvider.prototype.node = function () {\n    return this.node_;\n  };\n\n  return ExistingValueProvider;\n}();\n\nvar DeferredValueProvider =\n/** @class */\nfunction () {\n  function DeferredValueProvider(syncTree, path) {\n    this.syncTree_ = syncTree;\n    this.path_ = path;\n  }\n\n  DeferredValueProvider.prototype.getImmediateChild = function (childName) {\n    var childPath = pathChild(this.path_, childName);\n    return new DeferredValueProvider(this.syncTree_, childPath);\n  };\n\n  DeferredValueProvider.prototype.node = function () {\n    return syncTreeCalcCompleteEventCache(this.syncTree_, this.path_);\n  };\n\n  return DeferredValueProvider;\n}();\n/**\r\n * Generate placeholders for deferred values.\r\n */\n\n\nvar generateWithValues = function (values) {\n  values = values || {};\n  values['timestamp'] = values['timestamp'] || new Date().getTime();\n  return values;\n};\n/**\r\n * Value to use when firing local events. When writing server values, fire\r\n * local events with an approximate value, otherwise return value as-is.\r\n */\n\n\nvar resolveDeferredLeafValue = function (value, existingVal, serverValues) {\n  if (!value || typeof value !== 'object') {\n    return value;\n  }\n\n  assert('.sv' in value, 'Unexpected leaf node or priority contents');\n\n  if (typeof value['.sv'] === 'string') {\n    return resolveScalarDeferredValue(value['.sv'], existingVal, serverValues);\n  } else if (typeof value['.sv'] === 'object') {\n    return resolveComplexDeferredValue(value['.sv'], existingVal);\n  } else {\n    assert(false, 'Unexpected server value: ' + JSON.stringify(value, null, 2));\n  }\n};\n\nvar resolveScalarDeferredValue = function (op, existing, serverValues) {\n  switch (op) {\n    case 'timestamp':\n      return serverValues['timestamp'];\n\n    default:\n      assert(false, 'Unexpected server value: ' + op);\n  }\n};\n\nvar resolveComplexDeferredValue = function (op, existing, unused) {\n  if (!op.hasOwnProperty('increment')) {\n    assert(false, 'Unexpected server value: ' + JSON.stringify(op, null, 2));\n  }\n\n  var delta = op['increment'];\n\n  if (typeof delta !== 'number') {\n    assert(false, 'Unexpected increment value: ' + delta);\n  }\n\n  var existingNode = existing.node();\n  assert(existingNode !== null && typeof existingNode !== 'undefined', 'Expected ChildrenNode.EMPTY_NODE for nulls'); // Incrementing a non-number sets the value to the incremented amount\n\n  if (!existingNode.isLeafNode()) {\n    return delta;\n  }\n\n  var leaf = existingNode;\n  var existingVal = leaf.getValue();\n\n  if (typeof existingVal !== 'number') {\n    return delta;\n  } // No need to do over/underflow arithmetic here because JS only handles floats under the covers\n\n\n  return existingVal + delta;\n};\n/**\r\n * Recursively replace all deferred values and priorities in the tree with the\r\n * specified generated replacement values.\r\n * @param path - path to which write is relative\r\n * @param node - new data written at path\r\n * @param syncTree - current data\r\n */\n\n\nvar resolveDeferredValueTree = function (path, node, syncTree, serverValues) {\n  return resolveDeferredValue(node, new DeferredValueProvider(syncTree, path), serverValues);\n};\n/**\r\n * Recursively replace all deferred values and priorities in the node with the\r\n * specified generated replacement values.  If there are no server values in the node,\r\n * it'll be returned as-is.\r\n */\n\n\nvar resolveDeferredValueSnapshot = function (node, existing, serverValues) {\n  return resolveDeferredValue(node, new ExistingValueProvider(existing), serverValues);\n};\n\nfunction resolveDeferredValue(node, existingVal, serverValues) {\n  var rawPri = node.getPriority().val();\n  var priority = resolveDeferredLeafValue(rawPri, existingVal.getImmediateChild('.priority'), serverValues);\n  var newNode;\n\n  if (node.isLeafNode()) {\n    var leafNode = node;\n    var value = resolveDeferredLeafValue(leafNode.getValue(), existingVal, serverValues);\n\n    if (value !== leafNode.getValue() || priority !== leafNode.getPriority().val()) {\n      return new LeafNode(value, nodeFromJSON(priority));\n    } else {\n      return node;\n    }\n  } else {\n    var childrenNode = node;\n    newNode = childrenNode;\n\n    if (priority !== childrenNode.getPriority().val()) {\n      newNode = newNode.updatePriority(new LeafNode(priority));\n    }\n\n    childrenNode.forEachChild(PRIORITY_INDEX, function (childName, childNode) {\n      var newChildNode = resolveDeferredValue(childNode, existingVal.getImmediateChild(childName), serverValues);\n\n      if (newChildNode !== childNode) {\n        newNode = newNode.updateImmediateChild(childName, newChildNode);\n      }\n    });\n    return newNode;\n  }\n}\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\n/**\r\n * A light-weight tree, traversable by path.  Nodes can have both values and children.\r\n * Nodes are not enumerated (by forEachChild) unless they have a value or non-empty\r\n * children.\r\n */\n\n\nvar Tree =\n/** @class */\nfunction () {\n  /**\r\n   * @param name - Optional name of the node.\r\n   * @param parent - Optional parent node.\r\n   * @param node - Optional node to wrap.\r\n   */\n  function Tree(name, parent, node) {\n    if (name === void 0) {\n      name = '';\n    }\n\n    if (parent === void 0) {\n      parent = null;\n    }\n\n    if (node === void 0) {\n      node = {\n        children: {},\n        childCount: 0\n      };\n    }\n\n    this.name = name;\n    this.parent = parent;\n    this.node = node;\n  }\n\n  return Tree;\n}();\n/**\r\n * Returns a sub-Tree for the given path.\r\n *\r\n * @param pathObj - Path to look up.\r\n * @returns Tree for path.\r\n */\n\n\nfunction treeSubTree(tree, pathObj) {\n  // TODO: Require pathObj to be Path?\n  var path = pathObj instanceof Path ? pathObj : new Path(pathObj);\n  var child = tree,\n      next = pathGetFront(path);\n\n  while (next !== null) {\n    var childNode = safeGet(child.node.children, next) || {\n      children: {},\n      childCount: 0\n    };\n    child = new Tree(next, child, childNode);\n    path = pathPopFront(path);\n    next = pathGetFront(path);\n  }\n\n  return child;\n}\n/**\r\n * Returns the data associated with this tree node.\r\n *\r\n * @returns The data or null if no data exists.\r\n */\n\n\nfunction treeGetValue(tree) {\n  return tree.node.value;\n}\n/**\r\n * Sets data to this tree node.\r\n *\r\n * @param value - Value to set.\r\n */\n\n\nfunction treeSetValue(tree, value) {\n  tree.node.value = value;\n  treeUpdateParents(tree);\n}\n/**\r\n * @returns Whether the tree has any children.\r\n */\n\n\nfunction treeHasChildren(tree) {\n  return tree.node.childCount > 0;\n}\n/**\r\n * @returns Whethe rthe tree is empty (no value or children).\r\n */\n\n\nfunction treeIsEmpty(tree) {\n  return treeGetValue(tree) === undefined && !treeHasChildren(tree);\n}\n/**\r\n * Calls action for each child of this tree node.\r\n *\r\n * @param action - Action to be called for each child.\r\n */\n\n\nfunction treeForEachChild(tree, action) {\n  each(tree.node.children, function (child, childTree) {\n    action(new Tree(child, tree, childTree));\n  });\n}\n/**\r\n * Does a depth-first traversal of this node's descendants, calling action for each one.\r\n *\r\n * @param action - Action to be called for each child.\r\n * @param includeSelf - Whether to call action on this node as well. Defaults to\r\n *   false.\r\n * @param childrenFirst - Whether to call action on children before calling it on\r\n *   parent.\r\n */\n\n\nfunction treeForEachDescendant(tree, action, includeSelf, childrenFirst) {\n  if (includeSelf && !childrenFirst) {\n    action(tree);\n  }\n\n  treeForEachChild(tree, function (child) {\n    treeForEachDescendant(child, action, true, childrenFirst);\n  });\n\n  if (includeSelf && childrenFirst) {\n    action(tree);\n  }\n}\n/**\r\n * Calls action on each ancestor node.\r\n *\r\n * @param action - Action to be called on each parent; return\r\n *   true to abort.\r\n * @param includeSelf - Whether to call action on this node as well.\r\n * @returns true if the action callback returned true.\r\n */\n\n\nfunction treeForEachAncestor(tree, action, includeSelf) {\n  var node = includeSelf ? tree : tree.parent;\n\n  while (node !== null) {\n    if (action(node)) {\n      return true;\n    }\n\n    node = node.parent;\n  }\n\n  return false;\n}\n/**\r\n * @returns The path of this tree node, as a Path.\r\n */\n\n\nfunction treeGetPath(tree) {\n  return new Path(tree.parent === null ? tree.name : treeGetPath(tree.parent) + '/' + tree.name);\n}\n/**\r\n * Adds or removes this child from its parent based on whether it's empty or not.\r\n */\n\n\nfunction treeUpdateParents(tree) {\n  if (tree.parent !== null) {\n    treeUpdateChild(tree.parent, tree.name, tree);\n  }\n}\n/**\r\n * Adds or removes the passed child to this tree node, depending on whether it's empty.\r\n *\r\n * @param childName - The name of the child to update.\r\n * @param child - The child to update.\r\n */\n\n\nfunction treeUpdateChild(tree, childName, child) {\n  var childEmpty = treeIsEmpty(child);\n  var childExists = contains(tree.node.children, childName);\n\n  if (childEmpty && childExists) {\n    delete tree.node.children[childName];\n    tree.node.childCount--;\n    treeUpdateParents(tree);\n  } else if (!childEmpty && !childExists) {\n    tree.node.children[childName] = child.node;\n    tree.node.childCount++;\n    treeUpdateParents(tree);\n  }\n}\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\n/**\r\n * True for invalid Firebase keys\r\n */\n\n\nvar INVALID_KEY_REGEX_ = /[\\[\\].#$\\/\\u0000-\\u001F\\u007F]/;\n/**\r\n * True for invalid Firebase paths.\r\n * Allows '/' in paths.\r\n */\n\nvar INVALID_PATH_REGEX_ = /[\\[\\].#$\\u0000-\\u001F\\u007F]/;\n/**\r\n * Maximum number of characters to allow in leaf value\r\n */\n\nvar MAX_LEAF_SIZE_ = 10 * 1024 * 1024;\n\nvar isValidKey = function (key) {\n  return typeof key === 'string' && key.length !== 0 && !INVALID_KEY_REGEX_.test(key);\n};\n\nvar isValidPathString = function (pathString) {\n  return typeof pathString === 'string' && pathString.length !== 0 && !INVALID_PATH_REGEX_.test(pathString);\n};\n\nvar isValidRootPathString = function (pathString) {\n  if (pathString) {\n    // Allow '/.info/' at the beginning.\n    pathString = pathString.replace(/^\\/*\\.info(\\/|$)/, '/');\n  }\n\n  return isValidPathString(pathString);\n};\n\nvar isValidPriority = function (priority) {\n  return priority === null || typeof priority === 'string' || typeof priority === 'number' && !isInvalidJSONNumber(priority) || priority && typeof priority === 'object' && // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  contains(priority, '.sv');\n};\n/**\r\n * Pre-validate a datum passed as an argument to Firebase function.\r\n */\n\n\nvar validateFirebaseDataArg = function (fnName, value, path, optional) {\n  if (optional && value === undefined) {\n    return;\n  }\n\n  validateFirebaseData(errorPrefix(fnName, 'value'), value, path);\n};\n/**\r\n * Validate a data object client-side before sending to server.\r\n */\n\n\nvar validateFirebaseData = function (errorPrefix, data, path_) {\n  var path = path_ instanceof Path ? new ValidationPath(path_, errorPrefix) : path_;\n\n  if (data === undefined) {\n    throw new Error(errorPrefix + 'contains undefined ' + validationPathToErrorString(path));\n  }\n\n  if (typeof data === 'function') {\n    throw new Error(errorPrefix + 'contains a function ' + validationPathToErrorString(path) + ' with contents = ' + data.toString());\n  }\n\n  if (isInvalidJSONNumber(data)) {\n    throw new Error(errorPrefix + 'contains ' + data.toString() + ' ' + validationPathToErrorString(path));\n  } // Check max leaf size, but try to avoid the utf8 conversion if we can.\n\n\n  if (typeof data === 'string' && data.length > MAX_LEAF_SIZE_ / 3 && stringLength(data) > MAX_LEAF_SIZE_) {\n    throw new Error(errorPrefix + 'contains a string greater than ' + MAX_LEAF_SIZE_ + ' utf8 bytes ' + validationPathToErrorString(path) + \" ('\" + data.substring(0, 50) + \"...')\");\n  } // TODO = Perf = Consider combining the recursive validation of keys into NodeFromJSON\n  // to save extra walking of large objects.\n\n\n  if (data && typeof data === 'object') {\n    var hasDotValue_1 = false;\n    var hasActualChild_1 = false;\n    each(data, function (key, value) {\n      if (key === '.value') {\n        hasDotValue_1 = true;\n      } else if (key !== '.priority' && key !== '.sv') {\n        hasActualChild_1 = true;\n\n        if (!isValidKey(key)) {\n          throw new Error(errorPrefix + ' contains an invalid key (' + key + ') ' + validationPathToErrorString(path) + '.  Keys must be non-empty strings ' + 'and can\\'t contain \".\", \"#\", \"$\", \"/\", \"[\", or \"]\"');\n        }\n      }\n\n      validationPathPush(path, key);\n      validateFirebaseData(errorPrefix, value, path);\n      validationPathPop(path);\n    });\n\n    if (hasDotValue_1 && hasActualChild_1) {\n      throw new Error(errorPrefix + ' contains \".value\" child ' + validationPathToErrorString(path) + ' in addition to actual children.');\n    }\n  }\n};\n/**\r\n * Pre-validate paths passed in the firebase function.\r\n */\n\n\nvar validateFirebaseMergePaths = function (errorPrefix, mergePaths) {\n  var i, curPath;\n\n  for (i = 0; i < mergePaths.length; i++) {\n    curPath = mergePaths[i];\n    var keys = pathSlice(curPath);\n\n    for (var j = 0; j < keys.length; j++) {\n      if (keys[j] === '.priority' && j === keys.length - 1) ;else if (!isValidKey(keys[j])) {\n        throw new Error(errorPrefix + 'contains an invalid key (' + keys[j] + ') in path ' + curPath.toString() + '. Keys must be non-empty strings ' + 'and can\\'t contain \".\", \"#\", \"$\", \"/\", \"[\", or \"]\"');\n      }\n    }\n  } // Check that update keys are not descendants of each other.\n  // We rely on the property that sorting guarantees that ancestors come\n  // right before descendants.\n\n\n  mergePaths.sort(pathCompare);\n  var prevPath = null;\n\n  for (i = 0; i < mergePaths.length; i++) {\n    curPath = mergePaths[i];\n\n    if (prevPath !== null && pathContains(prevPath, curPath)) {\n      throw new Error(errorPrefix + 'contains a path ' + prevPath.toString() + ' that is ancestor of another path ' + curPath.toString());\n    }\n\n    prevPath = curPath;\n  }\n};\n/**\r\n * pre-validate an object passed as an argument to firebase function (\r\n * must be an object - e.g. for firebase.update()).\r\n */\n\n\nvar validateFirebaseMergeDataArg = function (fnName, data, path, optional) {\n  if (optional && data === undefined) {\n    return;\n  }\n\n  var errorPrefix$1 = errorPrefix(fnName, 'values');\n\n  if (!(data && typeof data === 'object') || Array.isArray(data)) {\n    throw new Error(errorPrefix$1 + ' must be an object containing the children to replace.');\n  }\n\n  var mergePaths = [];\n  each(data, function (key, value) {\n    var curPath = new Path(key);\n    validateFirebaseData(errorPrefix$1, value, pathChild(path, curPath));\n\n    if (pathGetBack(curPath) === '.priority') {\n      if (!isValidPriority(value)) {\n        throw new Error(errorPrefix$1 + \"contains an invalid value for '\" + curPath.toString() + \"', which must be a valid \" + 'Firebase priority (a string, finite number, server value, or null).');\n      }\n    }\n\n    mergePaths.push(curPath);\n  });\n  validateFirebaseMergePaths(errorPrefix$1, mergePaths);\n};\n\nvar validatePriority = function (fnName, priority, optional) {\n  if (optional && priority === undefined) {\n    return;\n  }\n\n  if (isInvalidJSONNumber(priority)) {\n    throw new Error(errorPrefix(fnName, 'priority') + 'is ' + priority.toString() + ', but must be a valid Firebase priority (a string, finite number, ' + 'server value, or null).');\n  } // Special case to allow importing data with a .sv.\n\n\n  if (!isValidPriority(priority)) {\n    throw new Error(errorPrefix(fnName, 'priority') + 'must be a valid Firebase priority ' + '(a string, finite number, server value, or null).');\n  }\n};\n\nvar validateEventType = function (fnName, eventType, optional) {\n  if (optional && eventType === undefined) {\n    return;\n  }\n\n  switch (eventType) {\n    case 'value':\n    case 'child_added':\n    case 'child_removed':\n    case 'child_changed':\n    case 'child_moved':\n      break;\n\n    default:\n      throw new Error(errorPrefix(fnName, 'eventType') + 'must be a valid event type = \"value\", \"child_added\", \"child_removed\", ' + '\"child_changed\", or \"child_moved\".');\n  }\n};\n\nvar validateKey = function (fnName, argumentName, key, optional) {\n  if (optional && key === undefined) {\n    return;\n  }\n\n  if (!isValidKey(key)) {\n    throw new Error(errorPrefix(fnName, argumentName) + 'was an invalid key = \"' + key + '\".  Firebase keys must be non-empty strings and ' + 'can\\'t contain \".\", \"#\", \"$\", \"/\", \"[\", or \"]\").');\n  }\n};\n\nvar validatePathString = function (fnName, argumentName, pathString, optional) {\n  if (optional && pathString === undefined) {\n    return;\n  }\n\n  if (!isValidPathString(pathString)) {\n    throw new Error(errorPrefix(fnName, argumentName) + 'was an invalid path = \"' + pathString + '\". Paths must be non-empty strings and ' + 'can\\'t contain \".\", \"#\", \"$\", \"[\", or \"]\"');\n  }\n};\n\nvar validateRootPathString = function (fnName, argumentName, pathString, optional) {\n  if (pathString) {\n    // Allow '/.info/' at the beginning.\n    pathString = pathString.replace(/^\\/*\\.info(\\/|$)/, '/');\n  }\n\n  validatePathString(fnName, argumentName, pathString, optional);\n};\n\nvar validateWritablePath = function (fnName, path) {\n  if (pathGetFront(path) === '.info') {\n    throw new Error(fnName + \" failed = Can't modify data under /.info/\");\n  }\n};\n\nvar validateUrl = function (fnName, parsedUrl) {\n  // TODO = Validate server better.\n  var pathString = parsedUrl.path.toString();\n\n  if (!(typeof parsedUrl.repoInfo.host === 'string') || parsedUrl.repoInfo.host.length === 0 || !isValidKey(parsedUrl.repoInfo.namespace) && parsedUrl.repoInfo.host.split(':')[0] !== 'localhost' || pathString.length !== 0 && !isValidRootPathString(pathString)) {\n    throw new Error(errorPrefix(fnName, 'url') + 'must be a valid firebase URL and ' + 'the path can\\'t contain \".\", \"#\", \"$\", \"[\", or \"]\".');\n  }\n};\n\nvar validateBoolean = function (fnName, argumentName, bool, optional) {\n  if (optional && bool === undefined) {\n    return;\n  }\n\n  if (typeof bool !== 'boolean') {\n    throw new Error(errorPrefix(fnName, argumentName) + 'must be a boolean.');\n  }\n};\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\n/**\r\n * The event queue serves a few purposes:\r\n * 1. It ensures we maintain event order in the face of event callbacks doing operations that result in more\r\n *    events being queued.\r\n * 2. raiseQueuedEvents() handles being called reentrantly nicely.  That is, if in the course of raising events,\r\n *    raiseQueuedEvents() is called again, the \"inner\" call will pick up raising events where the \"outer\" call\r\n *    left off, ensuring that the events are still raised synchronously and in order.\r\n * 3. You can use raiseEventsAtPath and raiseEventsForChangedPath to ensure only relevant previously-queued\r\n *    events are raised synchronously.\r\n *\r\n * NOTE: This can all go away if/when we move to async events.\r\n *\r\n */\n\n\nvar EventQueue =\n/** @class */\nfunction () {\n  function EventQueue() {\n    this.eventLists_ = [];\n    /**\r\n     * Tracks recursion depth of raiseQueuedEvents_, for debugging purposes.\r\n     */\n\n    this.recursionDepth_ = 0;\n  }\n\n  return EventQueue;\n}();\n/**\r\n * @param eventDataList - The new events to queue.\r\n */\n\n\nfunction eventQueueQueueEvents(eventQueue, eventDataList) {\n  // We group events by path, storing them in a single EventList, to make it easier to skip over them quickly.\n  var currList = null;\n\n  for (var i = 0; i < eventDataList.length; i++) {\n    var data = eventDataList[i];\n    var path = data.getPath();\n\n    if (currList !== null && !pathEquals(path, currList.path)) {\n      eventQueue.eventLists_.push(currList);\n      currList = null;\n    }\n\n    if (currList === null) {\n      currList = {\n        events: [],\n        path: path\n      };\n    }\n\n    currList.events.push(data);\n  }\n\n  if (currList) {\n    eventQueue.eventLists_.push(currList);\n  }\n}\n/**\r\n * Queues the specified events and synchronously raises all events (including previously queued ones)\r\n * for the specified path.\r\n *\r\n * It is assumed that the new events are all for the specified path.\r\n *\r\n * @param path - The path to raise events for.\r\n * @param eventDataList - The new events to raise.\r\n */\n\n\nfunction eventQueueRaiseEventsAtPath(eventQueue, path, eventDataList) {\n  eventQueueQueueEvents(eventQueue, eventDataList);\n  eventQueueRaiseQueuedEventsMatchingPredicate(eventQueue, function (eventPath) {\n    return pathEquals(eventPath, path);\n  });\n}\n/**\r\n * Queues the specified events and synchronously raises all events (including previously queued ones) for\r\n * locations related to the specified change path (i.e. all ancestors and descendants).\r\n *\r\n * It is assumed that the new events are all related (ancestor or descendant) to the specified path.\r\n *\r\n * @param changedPath - The path to raise events for.\r\n * @param eventDataList - The events to raise\r\n */\n\n\nfunction eventQueueRaiseEventsForChangedPath(eventQueue, changedPath, eventDataList) {\n  eventQueueQueueEvents(eventQueue, eventDataList);\n  eventQueueRaiseQueuedEventsMatchingPredicate(eventQueue, function (eventPath) {\n    return pathContains(eventPath, changedPath) || pathContains(changedPath, eventPath);\n  });\n}\n\nfunction eventQueueRaiseQueuedEventsMatchingPredicate(eventQueue, predicate) {\n  eventQueue.recursionDepth_++;\n  var sentAll = true;\n\n  for (var i = 0; i < eventQueue.eventLists_.length; i++) {\n    var eventList = eventQueue.eventLists_[i];\n\n    if (eventList) {\n      var eventPath = eventList.path;\n\n      if (predicate(eventPath)) {\n        eventListRaise(eventQueue.eventLists_[i]);\n        eventQueue.eventLists_[i] = null;\n      } else {\n        sentAll = false;\n      }\n    }\n  }\n\n  if (sentAll) {\n    eventQueue.eventLists_ = [];\n  }\n\n  eventQueue.recursionDepth_--;\n}\n/**\r\n * Iterates through the list and raises each event\r\n */\n\n\nfunction eventListRaise(eventList) {\n  for (var i = 0; i < eventList.events.length; i++) {\n    var eventData = eventList.events[i];\n\n    if (eventData !== null) {\n      eventList.events[i] = null;\n      var eventFn = eventData.getEventRunner();\n\n      if (logger) {\n        log('event: ' + eventData.toString());\n      }\n\n      exceptionGuard(eventFn);\n    }\n  }\n}\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\n\nvar INTERRUPT_REASON = 'repo_interrupt';\n/**\r\n * If a transaction does not succeed after 25 retries, we abort it. Among other\r\n * things this ensure that if there's ever a bug causing a mismatch between\r\n * client / server hashes for some data, we won't retry indefinitely.\r\n */\n\nvar MAX_TRANSACTION_RETRIES = 25;\n/**\r\n * A connection to a single data repository.\r\n */\n\nvar Repo =\n/** @class */\nfunction () {\n  function Repo(repoInfo_, forceRestClient_, authTokenProvider_, appCheckProvider_) {\n    this.repoInfo_ = repoInfo_;\n    this.forceRestClient_ = forceRestClient_;\n    this.authTokenProvider_ = authTokenProvider_;\n    this.appCheckProvider_ = appCheckProvider_;\n    this.dataUpdateCount = 0;\n    this.statsListener_ = null;\n    this.eventQueue_ = new EventQueue();\n    this.nextWriteId_ = 1;\n    this.interceptServerDataCallback_ = null;\n    /** A list of data pieces and paths to be set when this client disconnects. */\n\n    this.onDisconnect_ = newSparseSnapshotTree();\n    /** Stores queues of outstanding transactions for Firebase locations. */\n\n    this.transactionQueueTree_ = new Tree(); // TODO: This should be @private but it's used by test_access.js and internal.js\n\n    this.persistentConnection_ = null; // This key is intentionally not updated if RepoInfo is later changed or replaced\n\n    this.key = this.repoInfo_.toURLString();\n  }\n  /**\r\n   * @returns The URL corresponding to the root of this Firebase.\r\n   */\n\n\n  Repo.prototype.toString = function () {\n    return (this.repoInfo_.secure ? 'https://' : 'http://') + this.repoInfo_.host;\n  };\n\n  return Repo;\n}();\n\nfunction repoStart(repo, appId, authOverride) {\n  repo.stats_ = statsManagerGetCollection(repo.repoInfo_);\n\n  if (repo.forceRestClient_ || beingCrawled()) {\n    repo.server_ = new ReadonlyRestClient(repo.repoInfo_, function (pathString, data, isMerge, tag) {\n      repoOnDataUpdate(repo, pathString, data, isMerge, tag);\n    }, repo.authTokenProvider_, repo.appCheckProvider_); // Minor hack: Fire onConnect immediately, since there's no actual connection.\n\n    setTimeout(function () {\n      return repoOnConnectStatus(repo,\n      /* connectStatus= */\n      true);\n    }, 0);\n  } else {\n    // Validate authOverride\n    if (typeof authOverride !== 'undefined' && authOverride !== null) {\n      if (typeof authOverride !== 'object') {\n        throw new Error('Only objects are supported for option databaseAuthVariableOverride');\n      }\n\n      try {\n        stringify(authOverride);\n      } catch (e) {\n        throw new Error('Invalid authOverride provided: ' + e);\n      }\n    }\n\n    repo.persistentConnection_ = new PersistentConnection(repo.repoInfo_, appId, function (pathString, data, isMerge, tag) {\n      repoOnDataUpdate(repo, pathString, data, isMerge, tag);\n    }, function (connectStatus) {\n      repoOnConnectStatus(repo, connectStatus);\n    }, function (updates) {\n      repoOnServerInfoUpdate(repo, updates);\n    }, repo.authTokenProvider_, repo.appCheckProvider_, authOverride);\n    repo.server_ = repo.persistentConnection_;\n  }\n\n  repo.authTokenProvider_.addTokenChangeListener(function (token) {\n    repo.server_.refreshAuthToken(token);\n  });\n  repo.appCheckProvider_.addTokenChangeListener(function (result) {\n    repo.server_.refreshAppCheckToken(result.token);\n  }); // In the case of multiple Repos for the same repoInfo (i.e. there are multiple Firebase.Contexts being used),\n  // we only want to create one StatsReporter.  As such, we'll report stats over the first Repo created.\n\n  repo.statsReporter_ = statsManagerGetOrCreateReporter(repo.repoInfo_, function () {\n    return new StatsReporter(repo.stats_, repo.server_);\n  }); // Used for .info.\n\n  repo.infoData_ = new SnapshotHolder();\n  repo.infoSyncTree_ = new SyncTree({\n    startListening: function (query, tag, currentHashFn, onComplete) {\n      var infoEvents = [];\n      var node = repo.infoData_.getNode(query._path); // This is possibly a hack, but we have different semantics for .info endpoints. We don't raise null events\n      // on initial data...\n\n      if (!node.isEmpty()) {\n        infoEvents = syncTreeApplyServerOverwrite(repo.infoSyncTree_, query._path, node);\n        setTimeout(function () {\n          onComplete('ok');\n        }, 0);\n      }\n\n      return infoEvents;\n    },\n    stopListening: function () {}\n  });\n  repoUpdateInfo(repo, 'connected', false);\n  repo.serverSyncTree_ = new SyncTree({\n    startListening: function (query, tag, currentHashFn, onComplete) {\n      repo.server_.listen(query, currentHashFn, tag, function (status, data) {\n        var events = onComplete(status, data);\n        eventQueueRaiseEventsForChangedPath(repo.eventQueue_, query._path, events);\n      }); // No synchronous events for network-backed sync trees\n\n      return [];\n    },\n    stopListening: function (query, tag) {\n      repo.server_.unlisten(query, tag);\n    }\n  });\n}\n/**\r\n * @returns The time in milliseconds, taking the server offset into account if we have one.\r\n */\n\n\nfunction repoServerTime(repo) {\n  var offsetNode = repo.infoData_.getNode(new Path('.info/serverTimeOffset'));\n  var offset = offsetNode.val() || 0;\n  return new Date().getTime() + offset;\n}\n/**\r\n * Generate ServerValues using some variables from the repo object.\r\n */\n\n\nfunction repoGenerateServerValues(repo) {\n  return generateWithValues({\n    timestamp: repoServerTime(repo)\n  });\n}\n/**\r\n * Called by realtime when we get new messages from the server.\r\n */\n\n\nfunction repoOnDataUpdate(repo, pathString, data, isMerge, tag) {\n  // For testing.\n  repo.dataUpdateCount++;\n  var path = new Path(pathString);\n  data = repo.interceptServerDataCallback_ ? repo.interceptServerDataCallback_(pathString, data) : data;\n  var events = [];\n\n  if (tag) {\n    if (isMerge) {\n      var taggedChildren = map(data, function (raw) {\n        return nodeFromJSON(raw);\n      });\n      events = syncTreeApplyTaggedQueryMerge(repo.serverSyncTree_, path, taggedChildren, tag);\n    } else {\n      var taggedSnap = nodeFromJSON(data);\n      events = syncTreeApplyTaggedQueryOverwrite(repo.serverSyncTree_, path, taggedSnap, tag);\n    }\n  } else if (isMerge) {\n    var changedChildren = map(data, function (raw) {\n      return nodeFromJSON(raw);\n    });\n    events = syncTreeApplyServerMerge(repo.serverSyncTree_, path, changedChildren);\n  } else {\n    var snap = nodeFromJSON(data);\n    events = syncTreeApplyServerOverwrite(repo.serverSyncTree_, path, snap);\n  }\n\n  var affectedPath = path;\n\n  if (events.length > 0) {\n    // Since we have a listener outstanding for each transaction, receiving any events\n    // is a proxy for some change having occurred.\n    affectedPath = repoRerunTransactions(repo, path);\n  }\n\n  eventQueueRaiseEventsForChangedPath(repo.eventQueue_, affectedPath, events);\n} // TODO: This should be @private but it's used by test_access.js and internal.js\n\n\nfunction repoInterceptServerData(repo, callback) {\n  repo.interceptServerDataCallback_ = callback;\n}\n\nfunction repoOnConnectStatus(repo, connectStatus) {\n  repoUpdateInfo(repo, 'connected', connectStatus);\n\n  if (connectStatus === false) {\n    repoRunOnDisconnectEvents(repo);\n  }\n}\n\nfunction repoOnServerInfoUpdate(repo, updates) {\n  each(updates, function (key, value) {\n    repoUpdateInfo(repo, key, value);\n  });\n}\n\nfunction repoUpdateInfo(repo, pathString, value) {\n  var path = new Path('/.info/' + pathString);\n  var newNode = nodeFromJSON(value);\n  repo.infoData_.updateSnapshot(path, newNode);\n  var events = syncTreeApplyServerOverwrite(repo.infoSyncTree_, path, newNode);\n  eventQueueRaiseEventsForChangedPath(repo.eventQueue_, path, events);\n}\n\nfunction repoGetNextWriteId(repo) {\n  return repo.nextWriteId_++;\n}\n/**\r\n * The purpose of `getValue` is to return the latest known value\r\n * satisfying `query`.\r\n *\r\n * This method will first check for in-memory cached values\r\n * belonging to active listeners. If they are found, such values\r\n * are considered to be the most up-to-date.\r\n *\r\n * If the client is not connected, this method will try to\r\n * establish a connection and request the value for `query`. If\r\n * the client is not able to retrieve the query result, it reports\r\n * an error.\r\n *\r\n * @param query - The query to surface a value for.\r\n */\n\n\nfunction repoGetValue(repo, query) {\n  // Only active queries are cached. There is no persisted cache.\n  var cached = syncTreeGetServerValue(repo.serverSyncTree_, query);\n\n  if (cached != null) {\n    return Promise.resolve(cached);\n  }\n\n  return repo.server_.get(query).then(function (payload) {\n    var node = nodeFromJSON(payload).withIndex(query._queryParams.getIndex());\n    var events = syncTreeApplyServerOverwrite(repo.serverSyncTree_, query._path, node);\n    eventQueueRaiseEventsAtPath(repo.eventQueue_, query._path, events);\n    return Promise.resolve(node);\n  }, function (err) {\n    repoLog(repo, 'get for query ' + stringify(query) + ' failed: ' + err);\n    return Promise.reject(new Error(err));\n  });\n}\n\nfunction repoSetWithPriority(repo, path, newVal, newPriority, onComplete) {\n  repoLog(repo, 'set', {\n    path: path.toString(),\n    value: newVal,\n    priority: newPriority\n  }); // TODO: Optimize this behavior to either (a) store flag to skip resolving where possible and / or\n  // (b) store unresolved paths on JSON parse\n\n  var serverValues = repoGenerateServerValues(repo);\n  var newNodeUnresolved = nodeFromJSON(newVal, newPriority);\n  var existing = syncTreeCalcCompleteEventCache(repo.serverSyncTree_, path);\n  var newNode = resolveDeferredValueSnapshot(newNodeUnresolved, existing, serverValues);\n  var writeId = repoGetNextWriteId(repo);\n  var events = syncTreeApplyUserOverwrite(repo.serverSyncTree_, path, newNode, writeId, true);\n  eventQueueQueueEvents(repo.eventQueue_, events);\n  repo.server_.put(path.toString(), newNodeUnresolved.val(\n  /*export=*/\n  true), function (status, errorReason) {\n    var success = status === 'ok';\n\n    if (!success) {\n      warn('set at ' + path + ' failed: ' + status);\n    }\n\n    var clearEvents = syncTreeAckUserWrite(repo.serverSyncTree_, writeId, !success);\n    eventQueueRaiseEventsForChangedPath(repo.eventQueue_, path, clearEvents);\n    repoCallOnCompleteCallback(repo, onComplete, status, errorReason);\n  });\n  var affectedPath = repoAbortTransactions(repo, path);\n  repoRerunTransactions(repo, affectedPath); // We queued the events above, so just flush the queue here\n\n  eventQueueRaiseEventsForChangedPath(repo.eventQueue_, affectedPath, []);\n}\n\nfunction repoUpdate(repo, path, childrenToMerge, onComplete) {\n  repoLog(repo, 'update', {\n    path: path.toString(),\n    value: childrenToMerge\n  }); // Start with our existing data and merge each child into it.\n\n  var empty = true;\n  var serverValues = repoGenerateServerValues(repo);\n  var changedChildren = {};\n  each(childrenToMerge, function (changedKey, changedValue) {\n    empty = false;\n    changedChildren[changedKey] = resolveDeferredValueTree(pathChild(path, changedKey), nodeFromJSON(changedValue), repo.serverSyncTree_, serverValues);\n  });\n\n  if (!empty) {\n    var writeId_1 = repoGetNextWriteId(repo);\n    var events = syncTreeApplyUserMerge(repo.serverSyncTree_, path, changedChildren, writeId_1);\n    eventQueueQueueEvents(repo.eventQueue_, events);\n    repo.server_.merge(path.toString(), childrenToMerge, function (status, errorReason) {\n      var success = status === 'ok';\n\n      if (!success) {\n        warn('update at ' + path + ' failed: ' + status);\n      }\n\n      var clearEvents = syncTreeAckUserWrite(repo.serverSyncTree_, writeId_1, !success);\n      var affectedPath = clearEvents.length > 0 ? repoRerunTransactions(repo, path) : path;\n      eventQueueRaiseEventsForChangedPath(repo.eventQueue_, affectedPath, clearEvents);\n      repoCallOnCompleteCallback(repo, onComplete, status, errorReason);\n    });\n    each(childrenToMerge, function (changedPath) {\n      var affectedPath = repoAbortTransactions(repo, pathChild(path, changedPath));\n      repoRerunTransactions(repo, affectedPath);\n    }); // We queued the events above, so just flush the queue here\n\n    eventQueueRaiseEventsForChangedPath(repo.eventQueue_, path, []);\n  } else {\n    log(\"update() called with empty data.  Don't do anything.\");\n    repoCallOnCompleteCallback(repo, onComplete, 'ok', undefined);\n  }\n}\n/**\r\n * Applies all of the changes stored up in the onDisconnect_ tree.\r\n */\n\n\nfunction repoRunOnDisconnectEvents(repo) {\n  repoLog(repo, 'onDisconnectEvents');\n  var serverValues = repoGenerateServerValues(repo);\n  var resolvedOnDisconnectTree = newSparseSnapshotTree();\n  sparseSnapshotTreeForEachTree(repo.onDisconnect_, newEmptyPath(), function (path, node) {\n    var resolved = resolveDeferredValueTree(path, node, repo.serverSyncTree_, serverValues);\n    sparseSnapshotTreeRemember(resolvedOnDisconnectTree, path, resolved);\n  });\n  var events = [];\n  sparseSnapshotTreeForEachTree(resolvedOnDisconnectTree, newEmptyPath(), function (path, snap) {\n    events = events.concat(syncTreeApplyServerOverwrite(repo.serverSyncTree_, path, snap));\n    var affectedPath = repoAbortTransactions(repo, path);\n    repoRerunTransactions(repo, affectedPath);\n  });\n  repo.onDisconnect_ = newSparseSnapshotTree();\n  eventQueueRaiseEventsForChangedPath(repo.eventQueue_, newEmptyPath(), events);\n}\n\nfunction repoOnDisconnectCancel(repo, path, onComplete) {\n  repo.server_.onDisconnectCancel(path.toString(), function (status, errorReason) {\n    if (status === 'ok') {\n      sparseSnapshotTreeForget(repo.onDisconnect_, path);\n    }\n\n    repoCallOnCompleteCallback(repo, onComplete, status, errorReason);\n  });\n}\n\nfunction repoOnDisconnectSet(repo, path, value, onComplete) {\n  var newNode = nodeFromJSON(value);\n  repo.server_.onDisconnectPut(path.toString(), newNode.val(\n  /*export=*/\n  true), function (status, errorReason) {\n    if (status === 'ok') {\n      sparseSnapshotTreeRemember(repo.onDisconnect_, path, newNode);\n    }\n\n    repoCallOnCompleteCallback(repo, onComplete, status, errorReason);\n  });\n}\n\nfunction repoOnDisconnectSetWithPriority(repo, path, value, priority, onComplete) {\n  var newNode = nodeFromJSON(value, priority);\n  repo.server_.onDisconnectPut(path.toString(), newNode.val(\n  /*export=*/\n  true), function (status, errorReason) {\n    if (status === 'ok') {\n      sparseSnapshotTreeRemember(repo.onDisconnect_, path, newNode);\n    }\n\n    repoCallOnCompleteCallback(repo, onComplete, status, errorReason);\n  });\n}\n\nfunction repoOnDisconnectUpdate(repo, path, childrenToMerge, onComplete) {\n  if (isEmpty(childrenToMerge)) {\n    log(\"onDisconnect().update() called with empty data.  Don't do anything.\");\n    repoCallOnCompleteCallback(repo, onComplete, 'ok', undefined);\n    return;\n  }\n\n  repo.server_.onDisconnectMerge(path.toString(), childrenToMerge, function (status, errorReason) {\n    if (status === 'ok') {\n      each(childrenToMerge, function (childName, childNode) {\n        var newChildNode = nodeFromJSON(childNode);\n        sparseSnapshotTreeRemember(repo.onDisconnect_, pathChild(path, childName), newChildNode);\n      });\n    }\n\n    repoCallOnCompleteCallback(repo, onComplete, status, errorReason);\n  });\n}\n\nfunction repoAddEventCallbackForQuery(repo, query, eventRegistration) {\n  var events;\n\n  if (pathGetFront(query._path) === '.info') {\n    events = syncTreeAddEventRegistration(repo.infoSyncTree_, query, eventRegistration);\n  } else {\n    events = syncTreeAddEventRegistration(repo.serverSyncTree_, query, eventRegistration);\n  }\n\n  eventQueueRaiseEventsAtPath(repo.eventQueue_, query._path, events);\n}\n\nfunction repoRemoveEventCallbackForQuery(repo, query, eventRegistration) {\n  // These are guaranteed not to raise events, since we're not passing in a cancelError. However, we can future-proof\n  // a little bit by handling the return values anyways.\n  var events;\n\n  if (pathGetFront(query._path) === '.info') {\n    events = syncTreeRemoveEventRegistration(repo.infoSyncTree_, query, eventRegistration);\n  } else {\n    events = syncTreeRemoveEventRegistration(repo.serverSyncTree_, query, eventRegistration);\n  }\n\n  eventQueueRaiseEventsAtPath(repo.eventQueue_, query._path, events);\n}\n\nfunction repoInterrupt(repo) {\n  if (repo.persistentConnection_) {\n    repo.persistentConnection_.interrupt(INTERRUPT_REASON);\n  }\n}\n\nfunction repoResume(repo) {\n  if (repo.persistentConnection_) {\n    repo.persistentConnection_.resume(INTERRUPT_REASON);\n  }\n}\n\nfunction repoStats(repo, showDelta) {\n  if (showDelta === void 0) {\n    showDelta = false;\n  }\n\n  if (typeof console === 'undefined') {\n    return;\n  }\n\n  var stats;\n\n  if (showDelta) {\n    if (!repo.statsListener_) {\n      repo.statsListener_ = new StatsListener(repo.stats_);\n    }\n\n    stats = repo.statsListener_.get();\n  } else {\n    stats = repo.stats_.get();\n  }\n\n  var longestName = Object.keys(stats).reduce(function (previousValue, currentValue) {\n    return Math.max(currentValue.length, previousValue);\n  }, 0);\n  each(stats, function (stat, value) {\n    var paddedStat = stat; // pad stat names to be the same length (plus 2 extra spaces).\n\n    for (var i = stat.length; i < longestName + 2; i++) {\n      paddedStat += ' ';\n    }\n\n    console.log(paddedStat + value);\n  });\n}\n\nfunction repoStatsIncrementCounter(repo, metric) {\n  repo.stats_.incrementCounter(metric);\n  statsReporterIncludeStat(repo.statsReporter_, metric);\n}\n\nfunction repoLog(repo) {\n  var varArgs = [];\n\n  for (var _i = 1; _i < arguments.length; _i++) {\n    varArgs[_i - 1] = arguments[_i];\n  }\n\n  var prefix = '';\n\n  if (repo.persistentConnection_) {\n    prefix = repo.persistentConnection_.id + ':';\n  }\n\n  log.apply(void 0, __spreadArray([prefix], __read(varArgs)));\n}\n\nfunction repoCallOnCompleteCallback(repo, callback, status, errorReason) {\n  if (callback) {\n    exceptionGuard(function () {\n      if (status === 'ok') {\n        callback(null);\n      } else {\n        var code = (status || 'error').toUpperCase();\n        var message = code;\n\n        if (errorReason) {\n          message += ': ' + errorReason;\n        }\n\n        var error = new Error(message); // eslint-disable-next-line @typescript-eslint/no-explicit-any\n\n        error.code = code;\n        callback(error);\n      }\n    });\n  }\n}\n/**\r\n * Creates a new transaction, adds it to the transactions we're tracking, and\r\n * sends it to the server if possible.\r\n *\r\n * @param path - Path at which to do transaction.\r\n * @param transactionUpdate - Update callback.\r\n * @param onComplete - Completion callback.\r\n * @param unwatcher - Function that will be called when the transaction no longer\r\n * need data updates for `path`.\r\n * @param applyLocally - Whether or not to make intermediate results visible\r\n */\n\n\nfunction repoStartTransaction(repo, path, transactionUpdate, onComplete, unwatcher, applyLocally) {\n  repoLog(repo, 'transaction on ' + path); // Initialize transaction.\n\n  var transaction = {\n    path: path,\n    update: transactionUpdate,\n    onComplete: onComplete,\n    // One of TransactionStatus enums.\n    status: null,\n    // Used when combining transactions at different locations to figure out\n    // which one goes first.\n    order: LUIDGenerator(),\n    // Whether to raise local events for this transaction.\n    applyLocally: applyLocally,\n    // Count of how many times we've retried the transaction.\n    retryCount: 0,\n    // Function to call to clean up our .on() listener.\n    unwatcher: unwatcher,\n    // Stores why a transaction was aborted.\n    abortReason: null,\n    currentWriteId: null,\n    currentInputSnapshot: null,\n    currentOutputSnapshotRaw: null,\n    currentOutputSnapshotResolved: null\n  }; // Run transaction initially.\n\n  var currentState = repoGetLatestState(repo, path, undefined);\n  transaction.currentInputSnapshot = currentState;\n  var newVal = transaction.update(currentState.val());\n\n  if (newVal === undefined) {\n    // Abort transaction.\n    transaction.unwatcher();\n    transaction.currentOutputSnapshotRaw = null;\n    transaction.currentOutputSnapshotResolved = null;\n\n    if (transaction.onComplete) {\n      transaction.onComplete(null, false, transaction.currentInputSnapshot);\n    }\n  } else {\n    validateFirebaseData('transaction failed: Data returned ', newVal, transaction.path); // Mark as run and add to our queue.\n\n    transaction.status = 0\n    /* RUN */\n    ;\n    var queueNode = treeSubTree(repo.transactionQueueTree_, path);\n    var nodeQueue = treeGetValue(queueNode) || [];\n    nodeQueue.push(transaction);\n    treeSetValue(queueNode, nodeQueue); // Update visibleData and raise events\n    // Note: We intentionally raise events after updating all of our\n    // transaction state, since the user could start new transactions from the\n    // event callbacks.\n\n    var priorityForNode = void 0;\n\n    if (typeof newVal === 'object' && newVal !== null && contains(newVal, '.priority')) {\n      // eslint-disable-next-line @typescript-eslint/no-explicit-any\n      priorityForNode = safeGet(newVal, '.priority');\n      assert(isValidPriority(priorityForNode), 'Invalid priority returned by transaction. ' + 'Priority must be a valid string, finite number, server value, or null.');\n    } else {\n      var currentNode = syncTreeCalcCompleteEventCache(repo.serverSyncTree_, path) || ChildrenNode.EMPTY_NODE;\n      priorityForNode = currentNode.getPriority().val();\n    }\n\n    var serverValues = repoGenerateServerValues(repo);\n    var newNodeUnresolved = nodeFromJSON(newVal, priorityForNode);\n    var newNode = resolveDeferredValueSnapshot(newNodeUnresolved, currentState, serverValues);\n    transaction.currentOutputSnapshotRaw = newNodeUnresolved;\n    transaction.currentOutputSnapshotResolved = newNode;\n    transaction.currentWriteId = repoGetNextWriteId(repo);\n    var events = syncTreeApplyUserOverwrite(repo.serverSyncTree_, path, newNode, transaction.currentWriteId, transaction.applyLocally);\n    eventQueueRaiseEventsForChangedPath(repo.eventQueue_, path, events);\n    repoSendReadyTransactions(repo, repo.transactionQueueTree_);\n  }\n}\n/**\r\n * @param excludeSets - A specific set to exclude\r\n */\n\n\nfunction repoGetLatestState(repo, path, excludeSets) {\n  return syncTreeCalcCompleteEventCache(repo.serverSyncTree_, path, excludeSets) || ChildrenNode.EMPTY_NODE;\n}\n/**\r\n * Sends any already-run transactions that aren't waiting for outstanding\r\n * transactions to complete.\r\n *\r\n * Externally it's called with no arguments, but it calls itself recursively\r\n * with a particular transactionQueueTree node to recurse through the tree.\r\n *\r\n * @param node - transactionQueueTree node to start at.\r\n */\n\n\nfunction repoSendReadyTransactions(repo, node) {\n  if (node === void 0) {\n    node = repo.transactionQueueTree_;\n  } // Before recursing, make sure any completed transactions are removed.\n\n\n  if (!node) {\n    repoPruneCompletedTransactionsBelowNode(repo, node);\n  }\n\n  if (treeGetValue(node)) {\n    var queue = repoBuildTransactionQueue(repo, node);\n    assert(queue.length > 0, 'Sending zero length transaction queue');\n    var allRun = queue.every(function (transaction) {\n      return transaction.status === 0\n      /* RUN */\n      ;\n    }); // If they're all run (and not sent), we can send them.  Else, we must wait.\n\n    if (allRun) {\n      repoSendTransactionQueue(repo, treeGetPath(node), queue);\n    }\n  } else if (treeHasChildren(node)) {\n    treeForEachChild(node, function (childNode) {\n      repoSendReadyTransactions(repo, childNode);\n    });\n  }\n}\n/**\r\n * Given a list of run transactions, send them to the server and then handle\r\n * the result (success or failure).\r\n *\r\n * @param path - The location of the queue.\r\n * @param queue - Queue of transactions under the specified location.\r\n */\n\n\nfunction repoSendTransactionQueue(repo, path, queue) {\n  // Mark transactions as sent and increment retry count!\n  var setsToIgnore = queue.map(function (txn) {\n    return txn.currentWriteId;\n  });\n  var latestState = repoGetLatestState(repo, path, setsToIgnore);\n  var snapToSend = latestState;\n  var latestHash = latestState.hash();\n\n  for (var i = 0; i < queue.length; i++) {\n    var txn = queue[i];\n    assert(txn.status === 0\n    /* RUN */\n    , 'tryToSendTransactionQueue_: items in queue should all be run.');\n    txn.status = 1\n    /* SENT */\n    ;\n    txn.retryCount++;\n    var relativePath = newRelativePath(path, txn.path); // If we've gotten to this point, the output snapshot must be defined.\n\n    snapToSend = snapToSend.updateChild(relativePath\n    /** @type {!Node} */\n    , txn.currentOutputSnapshotRaw);\n  }\n\n  var dataToSend = snapToSend.val(true);\n  var pathToSend = path; // Send the put.\n\n  repo.server_.put(pathToSend.toString(), dataToSend, function (status) {\n    repoLog(repo, 'transaction put response', {\n      path: pathToSend.toString(),\n      status: status\n    });\n    var events = [];\n\n    if (status === 'ok') {\n      // Queue up the callbacks and fire them after cleaning up all of our\n      // transaction state, since the callback could trigger more\n      // transactions or sets.\n      var callbacks = [];\n\n      var _loop_1 = function (i) {\n        queue[i].status = 2\n        /* COMPLETED */\n        ;\n        events = events.concat(syncTreeAckUserWrite(repo.serverSyncTree_, queue[i].currentWriteId));\n\n        if (queue[i].onComplete) {\n          // We never unset the output snapshot, and given that this\n          // transaction is complete, it should be set\n          callbacks.push(function () {\n            return queue[i].onComplete(null, true, queue[i].currentOutputSnapshotResolved);\n          });\n        }\n\n        queue[i].unwatcher();\n      };\n\n      for (var i = 0; i < queue.length; i++) {\n        _loop_1(i);\n      } // Now remove the completed transactions.\n\n\n      repoPruneCompletedTransactionsBelowNode(repo, treeSubTree(repo.transactionQueueTree_, path)); // There may be pending transactions that we can now send.\n\n      repoSendReadyTransactions(repo, repo.transactionQueueTree_);\n      eventQueueRaiseEventsForChangedPath(repo.eventQueue_, path, events); // Finally, trigger onComplete callbacks.\n\n      for (var i = 0; i < callbacks.length; i++) {\n        exceptionGuard(callbacks[i]);\n      }\n    } else {\n      // transactions are no longer sent.  Update their status appropriately.\n      if (status === 'datastale') {\n        for (var i = 0; i < queue.length; i++) {\n          if (queue[i].status === 3\n          /* SENT_NEEDS_ABORT */\n          ) {\n            queue[i].status = 4\n            /* NEEDS_ABORT */\n            ;\n          } else {\n            queue[i].status = 0\n            /* RUN */\n            ;\n          }\n        }\n      } else {\n        warn('transaction at ' + pathToSend.toString() + ' failed: ' + status);\n\n        for (var i = 0; i < queue.length; i++) {\n          queue[i].status = 4\n          /* NEEDS_ABORT */\n          ;\n          queue[i].abortReason = status;\n        }\n      }\n\n      repoRerunTransactions(repo, path);\n    }\n  }, latestHash);\n}\n/**\r\n * Finds all transactions dependent on the data at changedPath and reruns them.\r\n *\r\n * Should be called any time cached data changes.\r\n *\r\n * Return the highest path that was affected by rerunning transactions. This\r\n * is the path at which events need to be raised for.\r\n *\r\n * @param changedPath - The path in mergedData that changed.\r\n * @returns The rootmost path that was affected by rerunning transactions.\r\n */\n\n\nfunction repoRerunTransactions(repo, changedPath) {\n  var rootMostTransactionNode = repoGetAncestorTransactionNode(repo, changedPath);\n  var path = treeGetPath(rootMostTransactionNode);\n  var queue = repoBuildTransactionQueue(repo, rootMostTransactionNode);\n  repoRerunTransactionQueue(repo, queue, path);\n  return path;\n}\n/**\r\n * Does all the work of rerunning transactions (as well as cleans up aborted\r\n * transactions and whatnot).\r\n *\r\n * @param queue - The queue of transactions to run.\r\n * @param path - The path the queue is for.\r\n */\n\n\nfunction repoRerunTransactionQueue(repo, queue, path) {\n  if (queue.length === 0) {\n    return; // Nothing to do!\n  } // Queue up the callbacks and fire them after cleaning up all of our\n  // transaction state, since the callback could trigger more transactions or\n  // sets.\n\n\n  var callbacks = [];\n  var events = []; // Ignore all of the sets we're going to re-run.\n\n  var txnsToRerun = queue.filter(function (q) {\n    return q.status === 0\n    /* RUN */\n    ;\n  });\n  var setsToIgnore = txnsToRerun.map(function (q) {\n    return q.currentWriteId;\n  });\n\n  var _loop_2 = function (i) {\n    var transaction = queue[i];\n    var relativePath = newRelativePath(path, transaction.path);\n    var abortTransaction = false,\n        abortReason;\n    assert(relativePath !== null, 'rerunTransactionsUnderNode_: relativePath should not be null.');\n\n    if (transaction.status === 4\n    /* NEEDS_ABORT */\n    ) {\n      abortTransaction = true;\n      abortReason = transaction.abortReason;\n      events = events.concat(syncTreeAckUserWrite(repo.serverSyncTree_, transaction.currentWriteId, true));\n    } else if (transaction.status === 0\n    /* RUN */\n    ) {\n      if (transaction.retryCount >= MAX_TRANSACTION_RETRIES) {\n        abortTransaction = true;\n        abortReason = 'maxretry';\n        events = events.concat(syncTreeAckUserWrite(repo.serverSyncTree_, transaction.currentWriteId, true));\n      } else {\n        // This code reruns a transaction\n        var currentNode = repoGetLatestState(repo, transaction.path, setsToIgnore);\n        transaction.currentInputSnapshot = currentNode;\n        var newData = queue[i].update(currentNode.val());\n\n        if (newData !== undefined) {\n          validateFirebaseData('transaction failed: Data returned ', newData, transaction.path);\n          var newDataNode = nodeFromJSON(newData);\n          var hasExplicitPriority = typeof newData === 'object' && newData != null && contains(newData, '.priority');\n\n          if (!hasExplicitPriority) {\n            // Keep the old priority if there wasn't a priority explicitly specified.\n            newDataNode = newDataNode.updatePriority(currentNode.getPriority());\n          }\n\n          var oldWriteId = transaction.currentWriteId;\n          var serverValues = repoGenerateServerValues(repo);\n          var newNodeResolved = resolveDeferredValueSnapshot(newDataNode, currentNode, serverValues);\n          transaction.currentOutputSnapshotRaw = newDataNode;\n          transaction.currentOutputSnapshotResolved = newNodeResolved;\n          transaction.currentWriteId = repoGetNextWriteId(repo); // Mutates setsToIgnore in place\n\n          setsToIgnore.splice(setsToIgnore.indexOf(oldWriteId), 1);\n          events = events.concat(syncTreeApplyUserOverwrite(repo.serverSyncTree_, transaction.path, newNodeResolved, transaction.currentWriteId, transaction.applyLocally));\n          events = events.concat(syncTreeAckUserWrite(repo.serverSyncTree_, oldWriteId, true));\n        } else {\n          abortTransaction = true;\n          abortReason = 'nodata';\n          events = events.concat(syncTreeAckUserWrite(repo.serverSyncTree_, transaction.currentWriteId, true));\n        }\n      }\n    }\n\n    eventQueueRaiseEventsForChangedPath(repo.eventQueue_, path, events);\n    events = [];\n\n    if (abortTransaction) {\n      // Abort.\n      queue[i].status = 2\n      /* COMPLETED */\n      ; // Removing a listener can trigger pruning which can muck with\n      // mergedData/visibleData (as it prunes data). So defer the unwatcher\n      // until we're done.\n\n      (function (unwatcher) {\n        setTimeout(unwatcher, Math.floor(0));\n      })(queue[i].unwatcher);\n\n      if (queue[i].onComplete) {\n        if (abortReason === 'nodata') {\n          callbacks.push(function () {\n            return queue[i].onComplete(null, false, queue[i].currentInputSnapshot);\n          });\n        } else {\n          callbacks.push(function () {\n            return queue[i].onComplete(new Error(abortReason), false, null);\n          });\n        }\n      }\n    }\n  };\n\n  for (var i = 0; i < queue.length; i++) {\n    _loop_2(i);\n  } // Clean up completed transactions.\n\n\n  repoPruneCompletedTransactionsBelowNode(repo, repo.transactionQueueTree_); // Now fire callbacks, now that we're in a good, known state.\n\n  for (var i = 0; i < callbacks.length; i++) {\n    exceptionGuard(callbacks[i]);\n  } // Try to send the transaction result to the server.\n\n\n  repoSendReadyTransactions(repo, repo.transactionQueueTree_);\n}\n/**\r\n * Returns the rootmost ancestor node of the specified path that has a pending\r\n * transaction on it, or just returns the node for the given path if there are\r\n * no pending transactions on any ancestor.\r\n *\r\n * @param path - The location to start at.\r\n * @returns The rootmost node with a transaction.\r\n */\n\n\nfunction repoGetAncestorTransactionNode(repo, path) {\n  var front; // Start at the root and walk deeper into the tree towards path until we\n  // find a node with pending transactions.\n\n  var transactionNode = repo.transactionQueueTree_;\n  front = pathGetFront(path);\n\n  while (front !== null && treeGetValue(transactionNode) === undefined) {\n    transactionNode = treeSubTree(transactionNode, front);\n    path = pathPopFront(path);\n    front = pathGetFront(path);\n  }\n\n  return transactionNode;\n}\n/**\r\n * Builds the queue of all transactions at or below the specified\r\n * transactionNode.\r\n *\r\n * @param transactionNode\r\n * @returns The generated queue.\r\n */\n\n\nfunction repoBuildTransactionQueue(repo, transactionNode) {\n  // Walk any child transaction queues and aggregate them into a single queue.\n  var transactionQueue = [];\n  repoAggregateTransactionQueuesForNode(repo, transactionNode, transactionQueue); // Sort them by the order the transactions were created.\n\n  transactionQueue.sort(function (a, b) {\n    return a.order - b.order;\n  });\n  return transactionQueue;\n}\n\nfunction repoAggregateTransactionQueuesForNode(repo, node, queue) {\n  var nodeQueue = treeGetValue(node);\n\n  if (nodeQueue) {\n    for (var i = 0; i < nodeQueue.length; i++) {\n      queue.push(nodeQueue[i]);\n    }\n  }\n\n  treeForEachChild(node, function (child) {\n    repoAggregateTransactionQueuesForNode(repo, child, queue);\n  });\n}\n/**\r\n * Remove COMPLETED transactions at or below this node in the transactionQueueTree_.\r\n */\n\n\nfunction repoPruneCompletedTransactionsBelowNode(repo, node) {\n  var queue = treeGetValue(node);\n\n  if (queue) {\n    var to = 0;\n\n    for (var from = 0; from < queue.length; from++) {\n      if (queue[from].status !== 2\n      /* COMPLETED */\n      ) {\n        queue[to] = queue[from];\n        to++;\n      }\n    }\n\n    queue.length = to;\n    treeSetValue(node, queue.length > 0 ? queue : undefined);\n  }\n\n  treeForEachChild(node, function (childNode) {\n    repoPruneCompletedTransactionsBelowNode(repo, childNode);\n  });\n}\n/**\r\n * Aborts all transactions on ancestors or descendants of the specified path.\r\n * Called when doing a set() or update() since we consider them incompatible\r\n * with transactions.\r\n *\r\n * @param path - Path for which we want to abort related transactions.\r\n */\n\n\nfunction repoAbortTransactions(repo, path) {\n  var affectedPath = treeGetPath(repoGetAncestorTransactionNode(repo, path));\n  var transactionNode = treeSubTree(repo.transactionQueueTree_, path);\n  treeForEachAncestor(transactionNode, function (node) {\n    repoAbortTransactionsOnNode(repo, node);\n  });\n  repoAbortTransactionsOnNode(repo, transactionNode);\n  treeForEachDescendant(transactionNode, function (node) {\n    repoAbortTransactionsOnNode(repo, node);\n  });\n  return affectedPath;\n}\n/**\r\n * Abort transactions stored in this transaction queue node.\r\n *\r\n * @param node - Node to abort transactions for.\r\n */\n\n\nfunction repoAbortTransactionsOnNode(repo, node) {\n  var queue = treeGetValue(node);\n\n  if (queue) {\n    // Queue up the callbacks and fire them after cleaning up all of our\n    // transaction state, since the callback could trigger more transactions\n    // or sets.\n    var callbacks = []; // Go through queue.  Any already-sent transactions must be marked for\n    // abort, while the unsent ones can be immediately aborted and removed.\n\n    var events = [];\n    var lastSent = -1;\n\n    for (var i = 0; i < queue.length; i++) {\n      if (queue[i].status === 3\n      /* SENT_NEEDS_ABORT */\n      ) ;else if (queue[i].status === 1\n      /* SENT */\n      ) {\n        assert(lastSent === i - 1, 'All SENT items should be at beginning of queue.');\n        lastSent = i; // Mark transaction for abort when it comes back.\n\n        queue[i].status = 3\n        /* SENT_NEEDS_ABORT */\n        ;\n        queue[i].abortReason = 'set';\n      } else {\n        assert(queue[i].status === 0\n        /* RUN */\n        , 'Unexpected transaction status in abort'); // We can abort it immediately.\n\n        queue[i].unwatcher();\n        events = events.concat(syncTreeAckUserWrite(repo.serverSyncTree_, queue[i].currentWriteId, true));\n\n        if (queue[i].onComplete) {\n          callbacks.push(queue[i].onComplete.bind(null, new Error('set'), false, null));\n        }\n      }\n    }\n\n    if (lastSent === -1) {\n      // We're not waiting for any sent transactions.  We can clear the queue.\n      treeSetValue(node, undefined);\n    } else {\n      // Remove the transactions we aborted.\n      queue.length = lastSent + 1;\n    } // Now fire the callbacks.\n\n\n    eventQueueRaiseEventsForChangedPath(repo.eventQueue_, treeGetPath(node), events);\n\n    for (var i = 0; i < callbacks.length; i++) {\n      exceptionGuard(callbacks[i]);\n    }\n  }\n}\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\n\nfunction decodePath(pathString) {\n  var pathStringDecoded = '';\n  var pieces = pathString.split('/');\n\n  for (var i = 0; i < pieces.length; i++) {\n    if (pieces[i].length > 0) {\n      var piece = pieces[i];\n\n      try {\n        piece = decodeURIComponent(piece.replace(/\\+/g, ' '));\n      } catch (e) {}\n\n      pathStringDecoded += '/' + piece;\n    }\n  }\n\n  return pathStringDecoded;\n}\n/**\r\n * @returns key value hash\r\n */\n\n\nfunction decodeQuery(queryString) {\n  var e_1, _a;\n\n  var results = {};\n\n  if (queryString.charAt(0) === '?') {\n    queryString = queryString.substring(1);\n  }\n\n  try {\n    for (var _b = __values(queryString.split('&')), _c = _b.next(); !_c.done; _c = _b.next()) {\n      var segment = _c.value;\n\n      if (segment.length === 0) {\n        continue;\n      }\n\n      var kv = segment.split('=');\n\n      if (kv.length === 2) {\n        results[decodeURIComponent(kv[0])] = decodeURIComponent(kv[1]);\n      } else {\n        warn(\"Invalid query segment '\" + segment + \"' in query '\" + queryString + \"'\");\n      }\n    }\n  } catch (e_1_1) {\n    e_1 = {\n      error: e_1_1\n    };\n  } finally {\n    try {\n      if (_c && !_c.done && (_a = _b.return)) _a.call(_b);\n    } finally {\n      if (e_1) throw e_1.error;\n    }\n  }\n\n  return results;\n}\n\nvar parseRepoInfo = function (dataURL, nodeAdmin) {\n  var parsedUrl = parseDatabaseURL(dataURL),\n      namespace = parsedUrl.namespace;\n\n  if (parsedUrl.domain === 'firebase.com') {\n    fatal(parsedUrl.host + ' is no longer supported. ' + 'Please use <YOUR FIREBASE>.firebaseio.com instead');\n  } // Catch common error of uninitialized namespace value.\n\n\n  if ((!namespace || namespace === 'undefined') && parsedUrl.domain !== 'localhost') {\n    fatal('Cannot parse Firebase url. Please use https://<YOUR FIREBASE>.firebaseio.com');\n  }\n\n  if (!parsedUrl.secure) {\n    warnIfPageIsSecure();\n  }\n\n  var webSocketOnly = parsedUrl.scheme === 'ws' || parsedUrl.scheme === 'wss';\n  return {\n    repoInfo: new RepoInfo(parsedUrl.host, parsedUrl.secure, namespace, nodeAdmin, webSocketOnly,\n    /*persistenceKey=*/\n    '',\n    /*includeNamespaceInQueryParams=*/\n    namespace !== parsedUrl.subdomain),\n    path: new Path(parsedUrl.pathString)\n  };\n};\n\nvar parseDatabaseURL = function (dataURL) {\n  // Default to empty strings in the event of a malformed string.\n  var host = '',\n      domain = '',\n      subdomain = '',\n      pathString = '',\n      namespace = ''; // Always default to SSL, unless otherwise specified.\n\n  var secure = true,\n      scheme = 'https',\n      port = 443; // Don't do any validation here. The caller is responsible for validating the result of parsing.\n\n  if (typeof dataURL === 'string') {\n    // Parse scheme.\n    var colonInd = dataURL.indexOf('//');\n\n    if (colonInd >= 0) {\n      scheme = dataURL.substring(0, colonInd - 1);\n      dataURL = dataURL.substring(colonInd + 2);\n    } // Parse host, path, and query string.\n\n\n    var slashInd = dataURL.indexOf('/');\n\n    if (slashInd === -1) {\n      slashInd = dataURL.length;\n    }\n\n    var questionMarkInd = dataURL.indexOf('?');\n\n    if (questionMarkInd === -1) {\n      questionMarkInd = dataURL.length;\n    }\n\n    host = dataURL.substring(0, Math.min(slashInd, questionMarkInd));\n\n    if (slashInd < questionMarkInd) {\n      // For pathString, questionMarkInd will always come after slashInd\n      pathString = decodePath(dataURL.substring(slashInd, questionMarkInd));\n    }\n\n    var queryParams = decodeQuery(dataURL.substring(Math.min(dataURL.length, questionMarkInd))); // If we have a port, use scheme for determining if it's secure.\n\n    colonInd = host.indexOf(':');\n\n    if (colonInd >= 0) {\n      secure = scheme === 'https' || scheme === 'wss';\n      port = parseInt(host.substring(colonInd + 1), 10);\n    } else {\n      colonInd = host.length;\n    }\n\n    var hostWithoutPort = host.slice(0, colonInd);\n\n    if (hostWithoutPort.toLowerCase() === 'localhost') {\n      domain = 'localhost';\n    } else if (hostWithoutPort.split('.').length <= 2) {\n      domain = hostWithoutPort;\n    } else {\n      // Interpret the subdomain of a 3 or more component URL as the namespace name.\n      var dotInd = host.indexOf('.');\n      subdomain = host.substring(0, dotInd).toLowerCase();\n      domain = host.substring(dotInd + 1); // Normalize namespaces to lowercase to share storage / connection.\n\n      namespace = subdomain;\n    } // Always treat the value of the `ns` as the namespace name if it is present.\n\n\n    if ('ns' in queryParams) {\n      namespace = queryParams['ns'];\n    }\n  }\n\n  return {\n    host: host,\n    port: port,\n    domain: domain,\n    subdomain: subdomain,\n    secure: secure,\n    scheme: scheme,\n    pathString: pathString,\n    namespace: namespace\n  };\n};\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\n/**\r\n * Encapsulates the data needed to raise an event\r\n */\n\n\nvar DataEvent =\n/** @class */\nfunction () {\n  /**\r\n   * @param eventType - One of: value, child_added, child_changed, child_moved, child_removed\r\n   * @param eventRegistration - The function to call to with the event data. User provided\r\n   * @param snapshot - The data backing the event\r\n   * @param prevName - Optional, the name of the previous child for child_* events.\r\n   */\n  function DataEvent(eventType, eventRegistration, snapshot, prevName) {\n    this.eventType = eventType;\n    this.eventRegistration = eventRegistration;\n    this.snapshot = snapshot;\n    this.prevName = prevName;\n  }\n\n  DataEvent.prototype.getPath = function () {\n    var ref = this.snapshot.ref;\n\n    if (this.eventType === 'value') {\n      return ref._path;\n    } else {\n      return ref.parent._path;\n    }\n  };\n\n  DataEvent.prototype.getEventType = function () {\n    return this.eventType;\n  };\n\n  DataEvent.prototype.getEventRunner = function () {\n    return this.eventRegistration.getEventRunner(this);\n  };\n\n  DataEvent.prototype.toString = function () {\n    return this.getPath().toString() + ':' + this.eventType + ':' + stringify(this.snapshot.exportVal());\n  };\n\n  return DataEvent;\n}();\n\nvar CancelEvent =\n/** @class */\nfunction () {\n  function CancelEvent(eventRegistration, error, path) {\n    this.eventRegistration = eventRegistration;\n    this.error = error;\n    this.path = path;\n  }\n\n  CancelEvent.prototype.getPath = function () {\n    return this.path;\n  };\n\n  CancelEvent.prototype.getEventType = function () {\n    return 'cancel';\n  };\n\n  CancelEvent.prototype.getEventRunner = function () {\n    return this.eventRegistration.getEventRunner(this);\n  };\n\n  CancelEvent.prototype.toString = function () {\n    return this.path.toString() + ':cancel';\n  };\n\n  return CancelEvent;\n}();\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\n/**\r\n * A wrapper class that converts events from the database@exp SDK to the legacy\r\n * Database SDK. Events are not converted directly as event registration relies\r\n * on reference comparison of the original user callback (see `matches()`) and\r\n * relies on equality of the legacy SDK's `context` object.\r\n */\n\n\nvar CallbackContext =\n/** @class */\nfunction () {\n  function CallbackContext(snapshotCallback, cancelCallback) {\n    this.snapshotCallback = snapshotCallback;\n    this.cancelCallback = cancelCallback;\n  }\n\n  CallbackContext.prototype.onValue = function (expDataSnapshot, previousChildName) {\n    this.snapshotCallback.call(null, expDataSnapshot, previousChildName);\n  };\n\n  CallbackContext.prototype.onCancel = function (error) {\n    assert(this.hasCancelCallback, 'Raising a cancel event on a listener with no cancel callback');\n    return this.cancelCallback.call(null, error);\n  };\n\n  Object.defineProperty(CallbackContext.prototype, \"hasCancelCallback\", {\n    get: function () {\n      return !!this.cancelCallback;\n    },\n    enumerable: false,\n    configurable: true\n  });\n\n  CallbackContext.prototype.matches = function (other) {\n    return this.snapshotCallback === other.snapshotCallback || this.snapshotCallback.userCallback === other.snapshotCallback.userCallback && this.snapshotCallback.context === other.snapshotCallback.context;\n  };\n\n  return CallbackContext;\n}();\n/**\r\n * @license\r\n * Copyright 2021 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\n/**\r\n * The `onDisconnect` class allows you to write or clear data when your client\r\n * disconnects from the Database server. These updates occur whether your\r\n * client disconnects cleanly or not, so you can rely on them to clean up data\r\n * even if a connection is dropped or a client crashes.\r\n *\r\n * The `onDisconnect` class is most commonly used to manage presence in\r\n * applications where it is useful to detect how many clients are connected and\r\n * when other clients disconnect. See\r\n * {@link https://firebase.google.com/docs/database/web/offline-capabilities | Enabling Offline Capabilities in JavaScript}\r\n * for more information.\r\n *\r\n * To avoid problems when a connection is dropped before the requests can be\r\n * transferred to the Database server, these functions should be called before\r\n * writing any data.\r\n *\r\n * Note that `onDisconnect` operations are only triggered once. If you want an\r\n * operation to occur each time a disconnect occurs, you'll need to re-establish\r\n * the `onDisconnect` operations each time you reconnect.\r\n */\n\n\nvar OnDisconnect$1 =\n/** @class */\nfunction () {\n  /** @hideconstructor */\n  function OnDisconnect(_repo, _path) {\n    this._repo = _repo;\n    this._path = _path;\n  }\n  /**\r\n   * Cancels all previously queued `onDisconnect()` set or update events for this\r\n   * location and all children.\r\n   *\r\n   * If a write has been queued for this location via a `set()` or `update()` at a\r\n   * parent location, the write at this location will be canceled, though writes\r\n   * to sibling locations will still occur.\r\n   *\r\n   * @returns Resolves when synchronization to the server is complete.\r\n   */\n\n\n  OnDisconnect.prototype.cancel = function () {\n    var deferred = new Deferred();\n    repoOnDisconnectCancel(this._repo, this._path, deferred.wrapCallback(function () {}));\n    return deferred.promise;\n  };\n  /**\r\n   * Ensures the data at this location is deleted when the client is disconnected\r\n   * (due to closing the browser, navigating to a new page, or network issues).\r\n   *\r\n   * @returns Resolves when synchronization to the server is complete.\r\n   */\n\n\n  OnDisconnect.prototype.remove = function () {\n    validateWritablePath('OnDisconnect.remove', this._path);\n    var deferred = new Deferred();\n    repoOnDisconnectSet(this._repo, this._path, null, deferred.wrapCallback(function () {}));\n    return deferred.promise;\n  };\n  /**\r\n   * Ensures the data at this location is set to the specified value when the\r\n   * client is disconnected (due to closing the browser, navigating to a new page,\r\n   * or network issues).\r\n   *\r\n   * `set()` is especially useful for implementing \"presence\" systems, where a\r\n   * value should be changed or cleared when a user disconnects so that they\r\n   * appear \"offline\" to other users. See\r\n   * {@link https://firebase.google.com/docs/database/web/offline-capabilities | Enabling Offline Capabilities in JavaScript}\r\n   * for more information.\r\n   *\r\n   * Note that `onDisconnect` operations are only triggered once. If you want an\r\n   * operation to occur each time a disconnect occurs, you'll need to re-establish\r\n   * the `onDisconnect` operations each time.\r\n   *\r\n   * @param value - The value to be written to this location on disconnect (can\r\n   * be an object, array, string, number, boolean, or null).\r\n   * @returns Resolves when synchronization to the Database is complete.\r\n   */\n\n\n  OnDisconnect.prototype.set = function (value) {\n    validateWritablePath('OnDisconnect.set', this._path);\n    validateFirebaseDataArg('OnDisconnect.set', value, this._path, false);\n    var deferred = new Deferred();\n    repoOnDisconnectSet(this._repo, this._path, value, deferred.wrapCallback(function () {}));\n    return deferred.promise;\n  };\n  /**\r\n   * Ensures the data at this location is set to the specified value and priority\r\n   * when the client is disconnected (due to closing the browser, navigating to a\r\n   * new page, or network issues).\r\n   *\r\n   * @param value - The value to be written to this location on disconnect (can\r\n   * be an object, array, string, number, boolean, or null).\r\n   * @param priority - The priority to be written (string, number, or null).\r\n   * @returns Resolves when synchronization to the Database is complete.\r\n   */\n\n\n  OnDisconnect.prototype.setWithPriority = function (value, priority) {\n    validateWritablePath('OnDisconnect.setWithPriority', this._path);\n    validateFirebaseDataArg('OnDisconnect.setWithPriority', value, this._path, false);\n    validatePriority('OnDisconnect.setWithPriority', priority, false);\n    var deferred = new Deferred();\n    repoOnDisconnectSetWithPriority(this._repo, this._path, value, priority, deferred.wrapCallback(function () {}));\n    return deferred.promise;\n  };\n  /**\r\n   * Writes multiple values at this location when the client is disconnected (due\r\n   * to closing the browser, navigating to a new page, or network issues).\r\n   *\r\n   * The `values` argument contains multiple property-value pairs that will be\r\n   * written to the Database together. Each child property can either be a simple\r\n   * property (for example, \"name\") or a relative path (for example, \"name/first\")\r\n   * from the current location to the data to update.\r\n   *\r\n   * As opposed to the `set()` method, `update()` can be use to selectively update\r\n   * only the referenced properties at the current location (instead of replacing\r\n   * all the child properties at the current location).\r\n   *\r\n   * @param values - Object containing multiple values.\r\n   * @returns Resolves when synchronization to the Database is complete.\r\n   */\n\n\n  OnDisconnect.prototype.update = function (values) {\n    validateWritablePath('OnDisconnect.update', this._path);\n    validateFirebaseMergeDataArg('OnDisconnect.update', values, this._path, false);\n    var deferred = new Deferred();\n    repoOnDisconnectUpdate(this._repo, this._path, values, deferred.wrapCallback(function () {}));\n    return deferred.promise;\n  };\n\n  return OnDisconnect;\n}();\n/**\r\n * @license\r\n * Copyright 2020 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\n/**\r\n * @internal\r\n */\n\n\nvar QueryImpl =\n/** @class */\nfunction () {\n  /**\r\n   * @hideconstructor\r\n   */\n  function QueryImpl(_repo, _path, _queryParams, _orderByCalled) {\n    this._repo = _repo;\n    this._path = _path;\n    this._queryParams = _queryParams;\n    this._orderByCalled = _orderByCalled;\n  }\n\n  Object.defineProperty(QueryImpl.prototype, \"key\", {\n    get: function () {\n      if (pathIsEmpty(this._path)) {\n        return null;\n      } else {\n        return pathGetBack(this._path);\n      }\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(QueryImpl.prototype, \"ref\", {\n    get: function () {\n      return new ReferenceImpl(this._repo, this._path);\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(QueryImpl.prototype, \"_queryIdentifier\", {\n    get: function () {\n      var obj = queryParamsGetQueryObject(this._queryParams);\n      var id = ObjectToUniqueKey(obj);\n      return id === '{}' ? 'default' : id;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(QueryImpl.prototype, \"_queryObject\", {\n    /**\r\n     * An object representation of the query parameters used by this Query.\r\n     */\n    get: function () {\n      return queryParamsGetQueryObject(this._queryParams);\n    },\n    enumerable: false,\n    configurable: true\n  });\n\n  QueryImpl.prototype.isEqual = function (other) {\n    other = getModularInstance(other);\n\n    if (!(other instanceof QueryImpl)) {\n      return false;\n    }\n\n    var sameRepo = this._repo === other._repo;\n    var samePath = pathEquals(this._path, other._path);\n    var sameQueryIdentifier = this._queryIdentifier === other._queryIdentifier;\n    return sameRepo && samePath && sameQueryIdentifier;\n  };\n\n  QueryImpl.prototype.toJSON = function () {\n    return this.toString();\n  };\n\n  QueryImpl.prototype.toString = function () {\n    return this._repo.toString() + pathToUrlEncodedString(this._path);\n  };\n\n  return QueryImpl;\n}();\n/**\r\n * Validates that no other order by call has been made\r\n */\n\n\nfunction validateNoPreviousOrderByCall(query, fnName) {\n  if (query._orderByCalled === true) {\n    throw new Error(fnName + \": You can't combine multiple orderBy calls.\");\n  }\n}\n/**\r\n * Validates start/end values for queries.\r\n */\n\n\nfunction validateQueryEndpoints(params) {\n  var startNode = null;\n  var endNode = null;\n\n  if (params.hasStart()) {\n    startNode = params.getIndexStartValue();\n  }\n\n  if (params.hasEnd()) {\n    endNode = params.getIndexEndValue();\n  }\n\n  if (params.getIndex() === KEY_INDEX) {\n    var tooManyArgsError = 'Query: When ordering by key, you may only pass one argument to ' + 'startAt(), endAt(), or equalTo().';\n    var wrongArgTypeError = 'Query: When ordering by key, the argument passed to startAt(), startAfter(), ' + 'endAt(), endBefore(), or equalTo() must be a string.';\n\n    if (params.hasStart()) {\n      var startName = params.getIndexStartName();\n\n      if (startName !== MIN_NAME) {\n        throw new Error(tooManyArgsError);\n      } else if (typeof startNode !== 'string') {\n        throw new Error(wrongArgTypeError);\n      }\n    }\n\n    if (params.hasEnd()) {\n      var endName = params.getIndexEndName();\n\n      if (endName !== MAX_NAME) {\n        throw new Error(tooManyArgsError);\n      } else if (typeof endNode !== 'string') {\n        throw new Error(wrongArgTypeError);\n      }\n    }\n  } else if (params.getIndex() === PRIORITY_INDEX) {\n    if (startNode != null && !isValidPriority(startNode) || endNode != null && !isValidPriority(endNode)) {\n      throw new Error('Query: When ordering by priority, the first argument passed to startAt(), ' + 'startAfter() endAt(), endBefore(), or equalTo() must be a valid priority value ' + '(null, a number, or a string).');\n    }\n  } else {\n    assert(params.getIndex() instanceof PathIndex || params.getIndex() === VALUE_INDEX, 'unknown index type.');\n\n    if (startNode != null && typeof startNode === 'object' || endNode != null && typeof endNode === 'object') {\n      throw new Error('Query: First argument passed to startAt(), startAfter(), endAt(), endBefore(), or ' + 'equalTo() cannot be an object.');\n    }\n  }\n}\n/**\r\n * Validates that limit* has been called with the correct combination of parameters\r\n */\n\n\nfunction validateLimit(params) {\n  if (params.hasStart() && params.hasEnd() && params.hasLimit() && !params.hasAnchoredLimit()) {\n    throw new Error(\"Query: Can't combine startAt(), startAfter(), endAt(), endBefore(), and limit(). Use \" + 'limitToFirst() or limitToLast() instead.');\n  }\n}\n/**\r\n * @internal\r\n */\n\n\nvar ReferenceImpl =\n/** @class */\nfunction (_super) {\n  __extends(ReferenceImpl, _super);\n  /** @hideconstructor */\n\n\n  function ReferenceImpl(repo, path) {\n    return _super.call(this, repo, path, new QueryParams(), false) || this;\n  }\n\n  Object.defineProperty(ReferenceImpl.prototype, \"parent\", {\n    get: function () {\n      var parentPath = pathParent(this._path);\n      return parentPath === null ? null : new ReferenceImpl(this._repo, parentPath);\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(ReferenceImpl.prototype, \"root\", {\n    get: function () {\n      var ref = this;\n\n      while (ref.parent !== null) {\n        ref = ref.parent;\n      }\n\n      return ref;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  return ReferenceImpl;\n}(QueryImpl);\n/**\r\n * A `DataSnapshot` contains data from a Database location.\r\n *\r\n * Any time you read data from the Database, you receive the data as a\r\n * `DataSnapshot`. A `DataSnapshot` is passed to the event callbacks you attach\r\n * with `on()` or `once()`. You can extract the contents of the snapshot as a\r\n * JavaScript object by calling the `val()` method. Alternatively, you can\r\n * traverse into the snapshot by calling `child()` to return child snapshots\r\n * (which you could then call `val()` on).\r\n *\r\n * A `DataSnapshot` is an efficiently generated, immutable copy of the data at\r\n * a Database location. It cannot be modified and will never change (to modify\r\n * data, you always call the `set()` method on a `Reference` directly).\r\n */\n\n\nvar DataSnapshot$1 =\n/** @class */\nfunction () {\n  /**\r\n   * @param _node - A SnapshotNode to wrap.\r\n   * @param ref - The location this snapshot came from.\r\n   * @param _index - The iteration order for this snapshot\r\n   * @hideconstructor\r\n   */\n  function DataSnapshot(_node,\n  /**\r\n   * The location of this DataSnapshot.\r\n   */\n  ref, _index) {\n    this._node = _node;\n    this.ref = ref;\n    this._index = _index;\n  }\n\n  Object.defineProperty(DataSnapshot.prototype, \"priority\", {\n    /**\r\n     * Gets the priority value of the data in this `DataSnapshot`.\r\n     *\r\n     * Applications need not use priority but can order collections by\r\n     * ordinary properties (see\r\n     * {@link https://firebase.google.com/docs/database/web/lists-of-data#sorting_and_filtering_data |Sorting and filtering data}\r\n     * ).\r\n     */\n    get: function () {\n      // typecast here because we never return deferred values or internal priorities (MAX_PRIORITY)\n      return this._node.getPriority().val();\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(DataSnapshot.prototype, \"key\", {\n    /**\r\n     * The key (last part of the path) of the location of this `DataSnapshot`.\r\n     *\r\n     * The last token in a Database location is considered its key. For example,\r\n     * \"ada\" is the key for the /users/ada/ node. Accessing the key on any\r\n     * `DataSnapshot` will return the key for the location that generated it.\r\n     * However, accessing the key on the root URL of a Database will return\r\n     * `null`.\r\n     */\n    get: function () {\n      return this.ref.key;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(DataSnapshot.prototype, \"size\", {\n    /** Returns the number of child properties of this `DataSnapshot`. */\n    get: function () {\n      return this._node.numChildren();\n    },\n    enumerable: false,\n    configurable: true\n  });\n  /**\r\n   * Gets another `DataSnapshot` for the location at the specified relative path.\r\n   *\r\n   * Passing a relative path to the `child()` method of a DataSnapshot returns\r\n   * another `DataSnapshot` for the location at the specified relative path. The\r\n   * relative path can either be a simple child name (for example, \"ada\") or a\r\n   * deeper, slash-separated path (for example, \"ada/name/first\"). If the child\r\n   * location has no data, an empty `DataSnapshot` (that is, a `DataSnapshot`\r\n   * whose value is `null`) is returned.\r\n   *\r\n   * @param path - A relative path to the location of child data.\r\n   */\n\n  DataSnapshot.prototype.child = function (path) {\n    var childPath = new Path(path);\n    var childRef = child(this.ref, path);\n    return new DataSnapshot(this._node.getChild(childPath), childRef, PRIORITY_INDEX);\n  };\n  /**\r\n   * Returns true if this `DataSnapshot` contains any data. It is slightly more\r\n   * efficient than using `snapshot.val() !== null`.\r\n   */\n\n\n  DataSnapshot.prototype.exists = function () {\n    return !this._node.isEmpty();\n  };\n  /**\r\n   * Exports the entire contents of the DataSnapshot as a JavaScript object.\r\n   *\r\n   * The `exportVal()` method is similar to `val()`, except priority information\r\n   * is included (if available), making it suitable for backing up your data.\r\n   *\r\n   * @returns The DataSnapshot's contents as a JavaScript value (Object,\r\n   *   Array, string, number, boolean, or `null`).\r\n   */\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n\n\n  DataSnapshot.prototype.exportVal = function () {\n    return this._node.val(true);\n  };\n  /**\r\n   * Enumerates the top-level children in the `DataSnapshot`.\r\n   *\r\n   * Because of the way JavaScript objects work, the ordering of data in the\r\n   * JavaScript object returned by `val()` is not guaranteed to match the\r\n   * ordering on the server nor the ordering of `onChildAdded()` events. That is\r\n   * where `forEach()` comes in handy. It guarantees the children of a\r\n   * `DataSnapshot` will be iterated in their query order.\r\n   *\r\n   * If no explicit `orderBy*()` method is used, results are returned\r\n   * ordered by key (unless priorities are used, in which case, results are\r\n   * returned by priority).\r\n   *\r\n   * @param action - A function that will be called for each child DataSnapshot.\r\n   * The callback can return true to cancel further enumeration.\r\n   * @returns true if enumeration was canceled due to your callback returning\r\n   * true.\r\n   */\n\n\n  DataSnapshot.prototype.forEach = function (action) {\n    var _this = this;\n\n    if (this._node.isLeafNode()) {\n      return false;\n    }\n\n    var childrenNode = this._node; // Sanitize the return value to a boolean. ChildrenNode.forEachChild has a weird return type...\n\n    return !!childrenNode.forEachChild(this._index, function (key, node) {\n      return action(new DataSnapshot(node, child(_this.ref, key), PRIORITY_INDEX));\n    });\n  };\n  /**\r\n   * Returns true if the specified child path has (non-null) data.\r\n   *\r\n   * @param path - A relative path to the location of a potential child.\r\n   * @returns `true` if data exists at the specified child path; else\r\n   *  `false`.\r\n   */\n\n\n  DataSnapshot.prototype.hasChild = function (path) {\n    var childPath = new Path(path);\n    return !this._node.getChild(childPath).isEmpty();\n  };\n  /**\r\n   * Returns whether or not the `DataSnapshot` has any non-`null` child\r\n   * properties.\r\n   *\r\n   * You can use `hasChildren()` to determine if a `DataSnapshot` has any\r\n   * children. If it does, you can enumerate them using `forEach()`. If it\r\n   * doesn't, then either this snapshot contains a primitive value (which can be\r\n   * retrieved with `val()`) or it is empty (in which case, `val()` will return\r\n   * `null`).\r\n   *\r\n   * @returns true if this snapshot has any children; else false.\r\n   */\n\n\n  DataSnapshot.prototype.hasChildren = function () {\n    if (this._node.isLeafNode()) {\n      return false;\n    } else {\n      return !this._node.isEmpty();\n    }\n  };\n  /**\r\n   * Returns a JSON-serializable representation of this object.\r\n   */\n\n\n  DataSnapshot.prototype.toJSON = function () {\n    return this.exportVal();\n  };\n  /**\r\n   * Extracts a JavaScript value from a `DataSnapshot`.\r\n   *\r\n   * Depending on the data in a `DataSnapshot`, the `val()` method may return a\r\n   * scalar type (string, number, or boolean), an array, or an object. It may\r\n   * also return null, indicating that the `DataSnapshot` is empty (contains no\r\n   * data).\r\n   *\r\n   * @returns The DataSnapshot's contents as a JavaScript value (Object,\r\n   *   Array, string, number, boolean, or `null`).\r\n   */\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n\n\n  DataSnapshot.prototype.val = function () {\n    return this._node.val();\n  };\n\n  return DataSnapshot;\n}();\n/**\r\n *\r\n * Returns a `Reference` representing the location in the Database\r\n * corresponding to the provided path. If no path is provided, the `Reference`\r\n * will point to the root of the Database.\r\n *\r\n * @param db - The database instance to obtain a reference for.\r\n * @param path - Optional path representing the location the returned\r\n *   `Reference` will point. If not provided, the returned `Reference` will\r\n *   point to the root of the Database.\r\n * @returns If a path is provided, a `Reference`\r\n *   pointing to the provided path. Otherwise, a `Reference` pointing to the\r\n *   root of the Database.\r\n */\n\n\nfunction ref(db, path) {\n  db = getModularInstance(db);\n\n  db._checkNotDeleted('ref');\n\n  return path !== undefined ? child(db._root, path) : db._root;\n}\n/**\r\n * Returns a `Reference` representing the location in the Database\r\n * corresponding to the provided Firebase URL.\r\n *\r\n * An exception is thrown if the URL is not a valid Firebase Database URL or it\r\n * has a different domain than the current `Database` instance.\r\n *\r\n * Note that all query parameters (`orderBy`, `limitToLast`, etc.) are ignored\r\n * and are not applied to the returned `Reference`.\r\n *\r\n * @param db - The database instance to obtain a reference for.\r\n * @param url - The Firebase URL at which the returned `Reference` will\r\n *   point.\r\n * @returns A `Reference` pointing to the provided\r\n *   Firebase URL.\r\n */\n\n\nfunction refFromURL(db, url) {\n  db = getModularInstance(db);\n\n  db._checkNotDeleted('refFromURL');\n\n  var parsedURL = parseRepoInfo(url, db._repo.repoInfo_.nodeAdmin);\n  validateUrl('refFromURL', parsedURL);\n  var repoInfo = parsedURL.repoInfo;\n\n  if (!db._repo.repoInfo_.isCustomHost() && repoInfo.host !== db._repo.repoInfo_.host) {\n    fatal('refFromURL' + ': Host name does not match the current database: ' + '(found ' + repoInfo.host + ' but expected ' + db._repo.repoInfo_.host + ')');\n  }\n\n  return ref(db, parsedURL.path.toString());\n}\n/**\r\n * Gets a `Reference` for the location at the specified relative path.\r\n *\r\n * The relative path can either be a simple child name (for example, \"ada\") or\r\n * a deeper slash-separated path (for example, \"ada/name/first\").\r\n *\r\n * @param parent - The parent location.\r\n * @param path - A relative path from this location to the desired child\r\n *   location.\r\n * @returns The specified child location.\r\n */\n\n\nfunction child(parent, path) {\n  parent = getModularInstance(parent);\n\n  if (pathGetFront(parent._path) === null) {\n    validateRootPathString('child', 'path', path, false);\n  } else {\n    validatePathString('child', 'path', path, false);\n  }\n\n  return new ReferenceImpl(parent._repo, pathChild(parent._path, path));\n}\n/**\r\n * Generates a new child location using a unique key and returns its\r\n * `Reference`.\r\n *\r\n * This is the most common pattern for adding data to a collection of items.\r\n *\r\n * If you provide a value to `push()`, the value is written to the\r\n * generated location. If you don't pass a value, nothing is written to the\r\n * database and the child remains empty (but you can use the `Reference`\r\n * elsewhere).\r\n *\r\n * The unique keys generated by `push()` are ordered by the current time, so the\r\n * resulting list of items is chronologically sorted. The keys are also\r\n * designed to be unguessable (they contain 72 random bits of entropy).\r\n *\r\n * See {@link https://firebase.google.com/docs/database/web/lists-of-data#append_to_a_list_of_data | Append to a list of data}\r\n * </br>See {@link ttps://firebase.googleblog.com/2015/02/the-2120-ways-to-ensure-unique_68.html | The 2^120 Ways to Ensure Unique Identifiers}\r\n *\r\n * @param parent - The parent location.\r\n * @param value - Optional value to be written at the generated location.\r\n * @returns Combined `Promise` and `Reference`; resolves when write is complete,\r\n * but can be used immediately as the `Reference` to the child location.\r\n */\n\n\nfunction push(parent, value) {\n  parent = getModularInstance(parent);\n  validateWritablePath('push', parent._path);\n  validateFirebaseDataArg('push', value, parent._path, true);\n  var now = repoServerTime(parent._repo);\n  var name = nextPushId(now); // push() returns a ThennableReference whose promise is fulfilled with a\n  // regular Reference. We use child() to create handles to two different\n  // references. The first is turned into a ThennableReference below by adding\n  // then() and catch() methods and is used as the return value of push(). The\n  // second remains a regular Reference and is used as the fulfilled value of\n  // the first ThennableReference.\n\n  var thennablePushRef = child(parent, name);\n  var pushRef = child(parent, name);\n  var promise;\n\n  if (value != null) {\n    promise = set(pushRef, value).then(function () {\n      return pushRef;\n    });\n  } else {\n    promise = Promise.resolve(pushRef);\n  }\n\n  thennablePushRef.then = promise.then.bind(promise);\n  thennablePushRef.catch = promise.then.bind(promise, undefined);\n  return thennablePushRef;\n}\n/**\r\n * Removes the data at this Database location.\r\n *\r\n * Any data at child locations will also be deleted.\r\n *\r\n * The effect of the remove will be visible immediately and the corresponding\r\n * event 'value' will be triggered. Synchronization of the remove to the\r\n * Firebase servers will also be started, and the returned Promise will resolve\r\n * when complete. If provided, the onComplete callback will be called\r\n * asynchronously after synchronization has finished.\r\n *\r\n * @param ref - The location to remove.\r\n * @returns Resolves when remove on server is complete.\r\n */\n\n\nfunction remove(ref) {\n  validateWritablePath('remove', ref._path);\n  return set(ref, null);\n}\n/**\r\n * Writes data to this Database location.\r\n *\r\n * This will overwrite any data at this location and all child locations.\r\n *\r\n * The effect of the write will be visible immediately, and the corresponding\r\n * events (\"value\", \"child_added\", etc.) will be triggered. Synchronization of\r\n * the data to the Firebase servers will also be started, and the returned\r\n * Promise will resolve when complete. If provided, the `onComplete` callback\r\n * will be called asynchronously after synchronization has finished.\r\n *\r\n * Passing `null` for the new value is equivalent to calling `remove()`; namely,\r\n * all data at this location and all child locations will be deleted.\r\n *\r\n * `set()` will remove any priority stored at this location, so if priority is\r\n * meant to be preserved, you need to use `setWithPriority()` instead.\r\n *\r\n * Note that modifying data with `set()` will cancel any pending transactions\r\n * at that location, so extreme care should be taken if mixing `set()` and\r\n * `transaction()` to modify the same data.\r\n *\r\n * A single `set()` will generate a single \"value\" event at the location where\r\n * the `set()` was performed.\r\n *\r\n * @param ref - The location to write to.\r\n * @param value - The value to be written (string, number, boolean, object,\r\n *   array, or null).\r\n * @returns Resolves when write to server is complete.\r\n */\n\n\nfunction set(ref, value) {\n  ref = getModularInstance(ref);\n  validateWritablePath('set', ref._path);\n  validateFirebaseDataArg('set', value, ref._path, false);\n  var deferred = new Deferred();\n  repoSetWithPriority(ref._repo, ref._path, value,\n  /*priority=*/\n  null, deferred.wrapCallback(function () {}));\n  return deferred.promise;\n}\n/**\r\n * Sets a priority for the data at this Database location.\r\n *\r\n * Applications need not use priority but can order collections by\r\n * ordinary properties (see\r\n * {@link https://firebase.google.com/docs/database/web/lists-of-data#sorting_and_filtering_data | Sorting and filtering data}\r\n * ).\r\n *\r\n * @param ref - The location to write to.\r\n * @param priority - The priority to be written (string, number, or null).\r\n * @returns Resolves when write to server is complete.\r\n */\n\n\nfunction setPriority(ref, priority) {\n  ref = getModularInstance(ref);\n  validateWritablePath('setPriority', ref._path);\n  validatePriority('setPriority', priority, false);\n  var deferred = new Deferred();\n  repoSetWithPriority(ref._repo, pathChild(ref._path, '.priority'), priority, null, deferred.wrapCallback(function () {}));\n  return deferred.promise;\n}\n/**\r\n * Writes data the Database location. Like `set()` but also specifies the\r\n * priority for that data.\r\n *\r\n * Applications need not use priority but can order collections by\r\n * ordinary properties (see\r\n * {@link https://firebase.google.com/docs/database/web/lists-of-data#sorting_and_filtering_data | Sorting and filtering data}\r\n * ).\r\n *\r\n * @param ref - The location to write to.\r\n * @param value - The value to be written (string, number, boolean, object,\r\n *   array, or null).\r\n * @param priority - The priority to be written (string, number, or null).\r\n * @returns Resolves when write to server is complete.\r\n */\n\n\nfunction setWithPriority(ref, value, priority) {\n  validateWritablePath('setWithPriority', ref._path);\n  validateFirebaseDataArg('setWithPriority', value, ref._path, false);\n  validatePriority('setWithPriority', priority, false);\n\n  if (ref.key === '.length' || ref.key === '.keys') {\n    throw 'setWithPriority failed: ' + ref.key + ' is a read-only object.';\n  }\n\n  var deferred = new Deferred();\n  repoSetWithPriority(ref._repo, ref._path, value, priority, deferred.wrapCallback(function () {}));\n  return deferred.promise;\n}\n/**\r\n * Writes multiple values to the Database at once.\r\n *\r\n * The `values` argument contains multiple property-value pairs that will be\r\n * written to the Database together. Each child property can either be a simple\r\n * property (for example, \"name\") or a relative path (for example,\r\n * \"name/first\") from the current location to the data to update.\r\n *\r\n * As opposed to the `set()` method, `update()` can be use to selectively update\r\n * only the referenced properties at the current location (instead of replacing\r\n * all the child properties at the current location).\r\n *\r\n * The effect of the write will be visible immediately, and the corresponding\r\n * events ('value', 'child_added', etc.) will be triggered. Synchronization of\r\n * the data to the Firebase servers will also be started, and the returned\r\n * Promise will resolve when complete. If provided, the `onComplete` callback\r\n * will be called asynchronously after synchronization has finished.\r\n *\r\n * A single `update()` will generate a single \"value\" event at the location\r\n * where the `update()` was performed, regardless of how many children were\r\n * modified.\r\n *\r\n * Note that modifying data with `update()` will cancel any pending\r\n * transactions at that location, so extreme care should be taken if mixing\r\n * `update()` and `transaction()` to modify the same data.\r\n *\r\n * Passing `null` to `update()` will remove the data at this location.\r\n *\r\n * See\r\n * {@link https://firebase.googleblog.com/2015/09/introducing-multi-location-updates-and_86.html | Introducing multi-location updates and more}.\r\n *\r\n * @param ref - The location to write to.\r\n * @param values - Object containing multiple values.\r\n * @returns Resolves when update on server is complete.\r\n */\n\n\nfunction update(ref, values) {\n  validateFirebaseMergeDataArg('update', values, ref._path, false);\n  var deferred = new Deferred();\n  repoUpdate(ref._repo, ref._path, values, deferred.wrapCallback(function () {}));\n  return deferred.promise;\n}\n/**\r\n * Gets the most up-to-date result for this query.\r\n *\r\n * @param query - The query to run.\r\n * @returns A promise which resolves to the resulting DataSnapshot if a value is\r\n * available, or rejects if the client is unable to return a value (e.g., if the\r\n * server is unreachable and there is nothing cached).\r\n */\n\n\nfunction get(query) {\n  query = getModularInstance(query);\n  return repoGetValue(query._repo, query).then(function (node) {\n    return new DataSnapshot$1(node, new ReferenceImpl(query._repo, query._path), query._queryParams.getIndex());\n  });\n}\n/**\r\n * Represents registration for 'value' events.\r\n */\n\n\nvar ValueEventRegistration =\n/** @class */\nfunction () {\n  function ValueEventRegistration(callbackContext) {\n    this.callbackContext = callbackContext;\n  }\n\n  ValueEventRegistration.prototype.respondsTo = function (eventType) {\n    return eventType === 'value';\n  };\n\n  ValueEventRegistration.prototype.createEvent = function (change, query) {\n    var index = query._queryParams.getIndex();\n\n    return new DataEvent('value', this, new DataSnapshot$1(change.snapshotNode, new ReferenceImpl(query._repo, query._path), index));\n  };\n\n  ValueEventRegistration.prototype.getEventRunner = function (eventData) {\n    var _this = this;\n\n    if (eventData.getEventType() === 'cancel') {\n      return function () {\n        return _this.callbackContext.onCancel(eventData.error);\n      };\n    } else {\n      return function () {\n        return _this.callbackContext.onValue(eventData.snapshot, null);\n      };\n    }\n  };\n\n  ValueEventRegistration.prototype.createCancelEvent = function (error, path) {\n    if (this.callbackContext.hasCancelCallback) {\n      return new CancelEvent(this, error, path);\n    } else {\n      return null;\n    }\n  };\n\n  ValueEventRegistration.prototype.matches = function (other) {\n    if (!(other instanceof ValueEventRegistration)) {\n      return false;\n    } else if (!other.callbackContext || !this.callbackContext) {\n      // If no callback specified, we consider it to match any callback.\n      return true;\n    } else {\n      return other.callbackContext.matches(this.callbackContext);\n    }\n  };\n\n  ValueEventRegistration.prototype.hasAnyCallback = function () {\n    return this.callbackContext !== null;\n  };\n\n  return ValueEventRegistration;\n}();\n/**\r\n * Represents the registration of a child_x event.\r\n */\n\n\nvar ChildEventRegistration =\n/** @class */\nfunction () {\n  function ChildEventRegistration(eventType, callbackContext) {\n    this.eventType = eventType;\n    this.callbackContext = callbackContext;\n  }\n\n  ChildEventRegistration.prototype.respondsTo = function (eventType) {\n    var eventToCheck = eventType === 'children_added' ? 'child_added' : eventType;\n    eventToCheck = eventToCheck === 'children_removed' ? 'child_removed' : eventToCheck;\n    return this.eventType === eventToCheck;\n  };\n\n  ChildEventRegistration.prototype.createCancelEvent = function (error, path) {\n    if (this.callbackContext.hasCancelCallback) {\n      return new CancelEvent(this, error, path);\n    } else {\n      return null;\n    }\n  };\n\n  ChildEventRegistration.prototype.createEvent = function (change, query) {\n    assert(change.childName != null, 'Child events should have a childName.');\n    var childRef = child(new ReferenceImpl(query._repo, query._path), change.childName);\n\n    var index = query._queryParams.getIndex();\n\n    return new DataEvent(change.type, this, new DataSnapshot$1(change.snapshotNode, childRef, index), change.prevName);\n  };\n\n  ChildEventRegistration.prototype.getEventRunner = function (eventData) {\n    var _this = this;\n\n    if (eventData.getEventType() === 'cancel') {\n      return function () {\n        return _this.callbackContext.onCancel(eventData.error);\n      };\n    } else {\n      return function () {\n        return _this.callbackContext.onValue(eventData.snapshot, eventData.prevName);\n      };\n    }\n  };\n\n  ChildEventRegistration.prototype.matches = function (other) {\n    if (other instanceof ChildEventRegistration) {\n      return this.eventType === other.eventType && (!this.callbackContext || !other.callbackContext || this.callbackContext.matches(other.callbackContext));\n    }\n\n    return false;\n  };\n\n  ChildEventRegistration.prototype.hasAnyCallback = function () {\n    return !!this.callbackContext;\n  };\n\n  return ChildEventRegistration;\n}();\n\nfunction addEventListener(query, eventType, callback, cancelCallbackOrListenOptions, options) {\n  var cancelCallback;\n\n  if (typeof cancelCallbackOrListenOptions === 'object') {\n    cancelCallback = undefined;\n    options = cancelCallbackOrListenOptions;\n  }\n\n  if (typeof cancelCallbackOrListenOptions === 'function') {\n    cancelCallback = cancelCallbackOrListenOptions;\n  }\n\n  if (options && options.onlyOnce) {\n    var userCallback_1 = callback;\n\n    var onceCallback = function (dataSnapshot, previousChildName) {\n      repoRemoveEventCallbackForQuery(query._repo, query, container);\n      userCallback_1(dataSnapshot, previousChildName);\n    };\n\n    onceCallback.userCallback = callback.userCallback;\n    onceCallback.context = callback.context;\n    callback = onceCallback;\n  }\n\n  var callbackContext = new CallbackContext(callback, cancelCallback || undefined);\n  var container = eventType === 'value' ? new ValueEventRegistration(callbackContext) : new ChildEventRegistration(eventType, callbackContext);\n  repoAddEventCallbackForQuery(query._repo, query, container);\n  return function () {\n    return repoRemoveEventCallbackForQuery(query._repo, query, container);\n  };\n}\n\nfunction onValue(query, callback, cancelCallbackOrListenOptions, options) {\n  return addEventListener(query, 'value', callback, cancelCallbackOrListenOptions, options);\n}\n\nfunction onChildAdded(query, callback, cancelCallbackOrListenOptions, options) {\n  return addEventListener(query, 'child_added', callback, cancelCallbackOrListenOptions, options);\n}\n\nfunction onChildChanged(query, callback, cancelCallbackOrListenOptions, options) {\n  return addEventListener(query, 'child_changed', callback, cancelCallbackOrListenOptions, options);\n}\n\nfunction onChildMoved(query, callback, cancelCallbackOrListenOptions, options) {\n  return addEventListener(query, 'child_moved', callback, cancelCallbackOrListenOptions, options);\n}\n\nfunction onChildRemoved(query, callback, cancelCallbackOrListenOptions, options) {\n  return addEventListener(query, 'child_removed', callback, cancelCallbackOrListenOptions, options);\n}\n/**\r\n * Detaches a callback previously attached with `on()`.\r\n *\r\n * Detach a callback previously attached with `on()`. Note that if `on()` was\r\n * called multiple times with the same eventType and callback, the callback\r\n * will be called multiple times for each event, and `off()` must be called\r\n * multiple times to remove the callback. Calling `off()` on a parent listener\r\n * will not automatically remove listeners registered on child nodes, `off()`\r\n * must also be called on any child listeners to remove the callback.\r\n *\r\n * If a callback is not specified, all callbacks for the specified eventType\r\n * will be removed. Similarly, if no eventType is specified, all callbacks\r\n * for the `Reference` will be removed.\r\n *\r\n * Individual listeners can also be removed by invoking their unsubscribe\r\n * callbacks.\r\n *\r\n * @param query - The query that the listener was registered with.\r\n * @param eventType - One of the following strings: \"value\", \"child_added\",\r\n * \"child_changed\", \"child_removed\", or \"child_moved.\" If omitted, all callbacks\r\n * for the `Reference` will be removed.\r\n * @param callback - The callback function that was passed to `on()` or\r\n * `undefined` to remove all callbacks.\r\n */\n\n\nfunction off(query, eventType, callback) {\n  var container = null;\n  var expCallback = callback ? new CallbackContext(callback) : null;\n\n  if (eventType === 'value') {\n    container = new ValueEventRegistration(expCallback);\n  } else if (eventType) {\n    container = new ChildEventRegistration(eventType, expCallback);\n  }\n\n  repoRemoveEventCallbackForQuery(query._repo, query, container);\n}\n/**\r\n * A `QueryConstraint` is used to narrow the set of documents returned by a\r\n * Database query. `QueryConstraint`s are created by invoking {@link endAt},\r\n * {@link endBefore}, {@link startAt}, {@link startAfter}, {@link\r\n * limitToFirst}, {@link limitToLast}, {@link orderByChild},\r\n * {@link orderByChild}, {@link orderByKey} , {@link orderByPriority} ,\r\n * {@link orderByValue}  or {@link equalTo} and\r\n * can then be passed to {@link query} to create a new query instance that\r\n * also contains this `QueryConstraint`.\r\n */\n\n\nvar QueryConstraint =\n/** @class */\nfunction () {\n  function QueryConstraint() {}\n\n  return QueryConstraint;\n}();\n\nvar QueryEndAtConstraint =\n/** @class */\nfunction (_super) {\n  __extends(QueryEndAtConstraint, _super);\n\n  function QueryEndAtConstraint(_value, _key) {\n    var _this = _super.call(this) || this;\n\n    _this._value = _value;\n    _this._key = _key;\n    return _this;\n  }\n\n  QueryEndAtConstraint.prototype._apply = function (query) {\n    validateFirebaseDataArg('endAt', this._value, query._path, true);\n    var newParams = queryParamsEndAt(query._queryParams, this._value, this._key);\n    validateLimit(newParams);\n    validateQueryEndpoints(newParams);\n\n    if (query._queryParams.hasEnd()) {\n      throw new Error('endAt: Starting point was already set (by another call to endAt, ' + 'endBefore or equalTo).');\n    }\n\n    return new QueryImpl(query._repo, query._path, newParams, query._orderByCalled);\n  };\n\n  return QueryEndAtConstraint;\n}(QueryConstraint);\n/**\r\n * Creates a `QueryConstraint` with the specified ending point.\r\n *\r\n * Using `startAt()`, `startAfter()`, `endBefore()`, `endAt()` and `equalTo()`\r\n * allows you to choose arbitrary starting and ending points for your queries.\r\n *\r\n * The ending point is inclusive, so children with exactly the specified value\r\n * will be included in the query. The optional key argument can be used to\r\n * further limit the range of the query. If it is specified, then children that\r\n * have exactly the specified value must also have a key name less than or equal\r\n * to the specified key.\r\n *\r\n * You can read more about `endAt()` in\r\n * {@link https://firebase.google.com/docs/database/web/lists-of-data#filtering_data | Filtering data}.\r\n *\r\n * @param value - The value to end at. The argument type depends on which\r\n * `orderBy*()` function was used in this query. Specify a value that matches\r\n * the `orderBy*()` type. When used in combination with `orderByKey()`, the\r\n * value must be a string.\r\n * @param key - The child key to end at, among the children with the previously\r\n * specified priority. This argument is only allowed if ordering by child,\r\n * value, or priority.\r\n */\n\n\nfunction endAt(value, key) {\n  validateKey('endAt', 'key', key, true);\n  return new QueryEndAtConstraint(value, key);\n}\n\nvar QueryEndBeforeConstraint =\n/** @class */\nfunction (_super) {\n  __extends(QueryEndBeforeConstraint, _super);\n\n  function QueryEndBeforeConstraint(_value, _key) {\n    var _this = _super.call(this) || this;\n\n    _this._value = _value;\n    _this._key = _key;\n    return _this;\n  }\n\n  QueryEndBeforeConstraint.prototype._apply = function (query) {\n    validateFirebaseDataArg('endBefore', this._value, query._path, false);\n    var newParams = queryParamsEndBefore(query._queryParams, this._value, this._key);\n    validateLimit(newParams);\n    validateQueryEndpoints(newParams);\n\n    if (query._queryParams.hasEnd()) {\n      throw new Error('endBefore: Starting point was already set (by another call to endAt, ' + 'endBefore or equalTo).');\n    }\n\n    return new QueryImpl(query._repo, query._path, newParams, query._orderByCalled);\n  };\n\n  return QueryEndBeforeConstraint;\n}(QueryConstraint);\n/**\r\n * Creates a `QueryConstraint` with the specified ending point (exclusive).\r\n *\r\n * Using `startAt()`, `startAfter()`, `endBefore()`, `endAt()` and `equalTo()`\r\n * allows you to choose arbitrary starting and ending points for your queries.\r\n *\r\n * The ending point is exclusive. If only a value is provided, children\r\n * with a value less than the specified value will be included in the query.\r\n * If a key is specified, then children must have a value lesss than or equal\r\n * to the specified value and a a key name less than the specified key.\r\n *\r\n * @param value - The value to end before. The argument type depends on which\r\n * `orderBy*()` function was used in this query. Specify a value that matches\r\n * the `orderBy*()` type. When used in combination with `orderByKey()`, the\r\n * value must be a string.\r\n * @param key - The child key to end before, among the children with the\r\n * previously specified priority. This argument is only allowed if ordering by\r\n * child, value, or priority.\r\n */\n\n\nfunction endBefore(value, key) {\n  validateKey('endBefore', 'key', key, true);\n  return new QueryEndBeforeConstraint(value, key);\n}\n\nvar QueryStartAtConstraint =\n/** @class */\nfunction (_super) {\n  __extends(QueryStartAtConstraint, _super);\n\n  function QueryStartAtConstraint(_value, _key) {\n    var _this = _super.call(this) || this;\n\n    _this._value = _value;\n    _this._key = _key;\n    return _this;\n  }\n\n  QueryStartAtConstraint.prototype._apply = function (query) {\n    validateFirebaseDataArg('startAt', this._value, query._path, true);\n    var newParams = queryParamsStartAt(query._queryParams, this._value, this._key);\n    validateLimit(newParams);\n    validateQueryEndpoints(newParams);\n\n    if (query._queryParams.hasStart()) {\n      throw new Error('startAt: Starting point was already set (by another call to startAt, ' + 'startBefore or equalTo).');\n    }\n\n    return new QueryImpl(query._repo, query._path, newParams, query._orderByCalled);\n  };\n\n  return QueryStartAtConstraint;\n}(QueryConstraint);\n/**\r\n * Creates a `QueryConstraint` with the specified starting point.\r\n *\r\n * Using `startAt()`, `startAfter()`, `endBefore()`, `endAt()` and `equalTo()`\r\n * allows you to choose arbitrary starting and ending points for your queries.\r\n *\r\n * The starting point is inclusive, so children with exactly the specified value\r\n * will be included in the query. The optional key argument can be used to\r\n * further limit the range of the query. If it is specified, then children that\r\n * have exactly the specified value must also have a key name greater than or\r\n * equal to the specified key.\r\n *\r\n * You can read more about `startAt()` in\r\n * {@link https://firebase.google.com/docs/database/web/lists-of-data#filtering_data | Filtering data}.\r\n *\r\n * @param value - The value to start at. The argument type depends on which\r\n * `orderBy*()` function was used in this query. Specify a value that matches\r\n * the `orderBy*()` type. When used in combination with `orderByKey()`, the\r\n * value must be a string.\r\n * @param key - The child key to start at. This argument is only allowed if\r\n * ordering by child, value, or priority.\r\n */\n\n\nfunction startAt(value, key) {\n  if (value === void 0) {\n    value = null;\n  }\n\n  validateKey('startAt', 'key', key, true);\n  return new QueryStartAtConstraint(value, key);\n}\n\nvar QueryStartAfterConstraint =\n/** @class */\nfunction (_super) {\n  __extends(QueryStartAfterConstraint, _super);\n\n  function QueryStartAfterConstraint(_value, _key) {\n    var _this = _super.call(this) || this;\n\n    _this._value = _value;\n    _this._key = _key;\n    return _this;\n  }\n\n  QueryStartAfterConstraint.prototype._apply = function (query) {\n    validateFirebaseDataArg('startAfter', this._value, query._path, false);\n    var newParams = queryParamsStartAfter(query._queryParams, this._value, this._key);\n    validateLimit(newParams);\n    validateQueryEndpoints(newParams);\n\n    if (query._queryParams.hasStart()) {\n      throw new Error('startAfter: Starting point was already set (by another call to startAt, ' + 'startAfter, or equalTo).');\n    }\n\n    return new QueryImpl(query._repo, query._path, newParams, query._orderByCalled);\n  };\n\n  return QueryStartAfterConstraint;\n}(QueryConstraint);\n/**\r\n * Creates a `QueryConstraint` with the specified starting point (exclusive).\r\n *\r\n * Using `startAt()`, `startAfter()`, `endBefore()`, `endAt()` and `equalTo()`\r\n * allows you to choose arbitrary starting and ending points for your queries.\r\n *\r\n * The starting point is exclusive. If only a value is provided, children\r\n * with a value greater than the specified value will be included in the query.\r\n * If a key is specified, then children must have a value greater than or equal\r\n * to the specified value and a a key name greater than the specified key.\r\n *\r\n * @param value - The value to start after. The argument type depends on which\r\n * `orderBy*()` function was used in this query. Specify a value that matches\r\n * the `orderBy*()` type. When used in combination with `orderByKey()`, the\r\n * value must be a string.\r\n * @param key - The child key to start after. This argument is only allowed if\r\n * ordering by child, value, or priority.\r\n */\n\n\nfunction startAfter(value, key) {\n  validateKey('startAfter', 'key', key, true);\n  return new QueryStartAfterConstraint(value, key);\n}\n\nvar QueryLimitToFirstConstraint =\n/** @class */\nfunction (_super) {\n  __extends(QueryLimitToFirstConstraint, _super);\n\n  function QueryLimitToFirstConstraint(_limit) {\n    var _this = _super.call(this) || this;\n\n    _this._limit = _limit;\n    return _this;\n  }\n\n  QueryLimitToFirstConstraint.prototype._apply = function (query) {\n    if (query._queryParams.hasLimit()) {\n      throw new Error('limitToFirst: Limit was already set (by another call to limitToFirst ' + 'or limitToLast).');\n    }\n\n    return new QueryImpl(query._repo, query._path, queryParamsLimitToFirst(query._queryParams, this._limit), query._orderByCalled);\n  };\n\n  return QueryLimitToFirstConstraint;\n}(QueryConstraint);\n/**\r\n * Creates a new `QueryConstraint` that if limited to the first specific number\r\n * of children.\r\n *\r\n * The `limitToFirst()` method is used to set a maximum number of children to be\r\n * synced for a given callback. If we set a limit of 100, we will initially only\r\n * receive up to 100 `child_added` events. If we have fewer than 100 messages\r\n * stored in our Database, a `child_added` event will fire for each message.\r\n * However, if we have over 100 messages, we will only receive a `child_added`\r\n * event for the first 100 ordered messages. As items change, we will receive\r\n * `child_removed` events for each item that drops out of the active list so\r\n * that the total number stays at 100.\r\n *\r\n * You can read more about `limitToFirst()` in\r\n * {@link https://firebase.google.com/docs/database/web/lists-of-data#filtering_data | Filtering data}.\r\n *\r\n * @param limit - The maximum number of nodes to include in this query.\r\n */\n\n\nfunction limitToFirst(limit) {\n  if (typeof limit !== 'number' || Math.floor(limit) !== limit || limit <= 0) {\n    throw new Error('limitToFirst: First argument must be a positive integer.');\n  }\n\n  return new QueryLimitToFirstConstraint(limit);\n}\n\nvar QueryLimitToLastConstraint =\n/** @class */\nfunction (_super) {\n  __extends(QueryLimitToLastConstraint, _super);\n\n  function QueryLimitToLastConstraint(_limit) {\n    var _this = _super.call(this) || this;\n\n    _this._limit = _limit;\n    return _this;\n  }\n\n  QueryLimitToLastConstraint.prototype._apply = function (query) {\n    if (query._queryParams.hasLimit()) {\n      throw new Error('limitToLast: Limit was already set (by another call to limitToFirst ' + 'or limitToLast).');\n    }\n\n    return new QueryImpl(query._repo, query._path, queryParamsLimitToLast(query._queryParams, this._limit), query._orderByCalled);\n  };\n\n  return QueryLimitToLastConstraint;\n}(QueryConstraint);\n/**\r\n * Creates a new `QueryConstraint` that is limited to return only the last\r\n * specified number of children.\r\n *\r\n * The `limitToLast()` method is used to set a maximum number of children to be\r\n * synced for a given callback. If we set a limit of 100, we will initially only\r\n * receive up to 100 `child_added` events. If we have fewer than 100 messages\r\n * stored in our Database, a `child_added` event will fire for each message.\r\n * However, if we have over 100 messages, we will only receive a `child_added`\r\n * event for the last 100 ordered messages. As items change, we will receive\r\n * `child_removed` events for each item that drops out of the active list so\r\n * that the total number stays at 100.\r\n *\r\n * You can read more about `limitToLast()` in\r\n * {@link https://firebase.google.com/docs/database/web/lists-of-data#filtering_data | Filtering data}.\r\n *\r\n * @param limit - The maximum number of nodes to include in this query.\r\n */\n\n\nfunction limitToLast(limit) {\n  if (typeof limit !== 'number' || Math.floor(limit) !== limit || limit <= 0) {\n    throw new Error('limitToLast: First argument must be a positive integer.');\n  }\n\n  return new QueryLimitToLastConstraint(limit);\n}\n\nvar QueryOrderByChildConstraint =\n/** @class */\nfunction (_super) {\n  __extends(QueryOrderByChildConstraint, _super);\n\n  function QueryOrderByChildConstraint(_path) {\n    var _this = _super.call(this) || this;\n\n    _this._path = _path;\n    return _this;\n  }\n\n  QueryOrderByChildConstraint.prototype._apply = function (query) {\n    validateNoPreviousOrderByCall(query, 'orderByChild');\n    var parsedPath = new Path(this._path);\n\n    if (pathIsEmpty(parsedPath)) {\n      throw new Error('orderByChild: cannot pass in empty path. Use orderByValue() instead.');\n    }\n\n    var index = new PathIndex(parsedPath);\n    var newParams = queryParamsOrderBy(query._queryParams, index);\n    validateQueryEndpoints(newParams);\n    return new QueryImpl(query._repo, query._path, newParams,\n    /*orderByCalled=*/\n    true);\n  };\n\n  return QueryOrderByChildConstraint;\n}(QueryConstraint);\n/**\r\n * Creates a new `QueryConstraint` that orders by the specified child key.\r\n *\r\n * Queries can only order by one key at a time. Calling `orderByChild()`\r\n * multiple times on the same query is an error.\r\n *\r\n * Firebase queries allow you to order your data by any child key on the fly.\r\n * However, if you know in advance what your indexes will be, you can define\r\n * them via the .indexOn rule in your Security Rules for better performance. See\r\n * the{@link https://firebase.google.com/docs/database/security/indexing-data}\r\n * rule for more information.\r\n *\r\n * You can read more about `orderByChild()` in\r\n * {@link https://firebase.google.com/docs/database/web/lists-of-data#sort_data | Sort data}.\r\n *\r\n * @param path - The path to order by.\r\n */\n\n\nfunction orderByChild(path) {\n  if (path === '$key') {\n    throw new Error('orderByChild: \"$key\" is invalid.  Use orderByKey() instead.');\n  } else if (path === '$priority') {\n    throw new Error('orderByChild: \"$priority\" is invalid.  Use orderByPriority() instead.');\n  } else if (path === '$value') {\n    throw new Error('orderByChild: \"$value\" is invalid.  Use orderByValue() instead.');\n  }\n\n  validatePathString('orderByChild', 'path', path, false);\n  return new QueryOrderByChildConstraint(path);\n}\n\nvar QueryOrderByKeyConstraint =\n/** @class */\nfunction (_super) {\n  __extends(QueryOrderByKeyConstraint, _super);\n\n  function QueryOrderByKeyConstraint() {\n    return _super !== null && _super.apply(this, arguments) || this;\n  }\n\n  QueryOrderByKeyConstraint.prototype._apply = function (query) {\n    validateNoPreviousOrderByCall(query, 'orderByKey');\n    var newParams = queryParamsOrderBy(query._queryParams, KEY_INDEX);\n    validateQueryEndpoints(newParams);\n    return new QueryImpl(query._repo, query._path, newParams,\n    /*orderByCalled=*/\n    true);\n  };\n\n  return QueryOrderByKeyConstraint;\n}(QueryConstraint);\n/**\r\n * Creates a new `QueryConstraint` that orders by the key.\r\n *\r\n * Sorts the results of a query by their (ascending) key values.\r\n *\r\n * You can read more about `orderByKey()` in\r\n * {@link https://firebase.google.com/docs/database/web/lists-of-data#sort_data | Sort data}.\r\n */\n\n\nfunction orderByKey() {\n  return new QueryOrderByKeyConstraint();\n}\n\nvar QueryOrderByPriorityConstraint =\n/** @class */\nfunction (_super) {\n  __extends(QueryOrderByPriorityConstraint, _super);\n\n  function QueryOrderByPriorityConstraint() {\n    return _super !== null && _super.apply(this, arguments) || this;\n  }\n\n  QueryOrderByPriorityConstraint.prototype._apply = function (query) {\n    validateNoPreviousOrderByCall(query, 'orderByPriority');\n    var newParams = queryParamsOrderBy(query._queryParams, PRIORITY_INDEX);\n    validateQueryEndpoints(newParams);\n    return new QueryImpl(query._repo, query._path, newParams,\n    /*orderByCalled=*/\n    true);\n  };\n\n  return QueryOrderByPriorityConstraint;\n}(QueryConstraint);\n/**\r\n * Creates a new `QueryConstraint` that orders by priority.\r\n *\r\n * Applications need not use priority but can order collections by\r\n * ordinary properties (see\r\n * {@link https://firebase.google.com/docs/database/web/lists-of-data#sort_data | Sort data}\r\n * for alternatives to priority.\r\n */\n\n\nfunction orderByPriority() {\n  return new QueryOrderByPriorityConstraint();\n}\n\nvar QueryOrderByValueConstraint =\n/** @class */\nfunction (_super) {\n  __extends(QueryOrderByValueConstraint, _super);\n\n  function QueryOrderByValueConstraint() {\n    return _super !== null && _super.apply(this, arguments) || this;\n  }\n\n  QueryOrderByValueConstraint.prototype._apply = function (query) {\n    validateNoPreviousOrderByCall(query, 'orderByValue');\n    var newParams = queryParamsOrderBy(query._queryParams, VALUE_INDEX);\n    validateQueryEndpoints(newParams);\n    return new QueryImpl(query._repo, query._path, newParams,\n    /*orderByCalled=*/\n    true);\n  };\n\n  return QueryOrderByValueConstraint;\n}(QueryConstraint);\n/**\r\n * Creates a new `QueryConstraint` that orders by value.\r\n *\r\n * If the children of a query are all scalar values (string, number, or\r\n * boolean), you can order the results by their (ascending) values.\r\n *\r\n * You can read more about `orderByValue()` in\r\n * {@link https://firebase.google.com/docs/database/web/lists-of-data#sort_data | Sort data}.\r\n */\n\n\nfunction orderByValue() {\n  return new QueryOrderByValueConstraint();\n}\n\nvar QueryEqualToValueConstraint =\n/** @class */\nfunction (_super) {\n  __extends(QueryEqualToValueConstraint, _super);\n\n  function QueryEqualToValueConstraint(_value, _key) {\n    var _this = _super.call(this) || this;\n\n    _this._value = _value;\n    _this._key = _key;\n    return _this;\n  }\n\n  QueryEqualToValueConstraint.prototype._apply = function (query) {\n    validateFirebaseDataArg('equalTo', this._value, query._path, false);\n\n    if (query._queryParams.hasStart()) {\n      throw new Error('equalTo: Starting point was already set (by another call to startAt/startAfter or ' + 'equalTo).');\n    }\n\n    if (query._queryParams.hasEnd()) {\n      throw new Error('equalTo: Ending point was already set (by another call to endAt/endBefore or ' + 'equalTo).');\n    }\n\n    return new QueryEndAtConstraint(this._value, this._key)._apply(new QueryStartAtConstraint(this._value, this._key)._apply(query));\n  };\n\n  return QueryEqualToValueConstraint;\n}(QueryConstraint);\n/**\r\n * Creates a `QueryConstraint` that includes children that match the specified\r\n * value.\r\n *\r\n * Using `startAt()`, `startAfter()`, `endBefore()`, `endAt()` and `equalTo()`\r\n * allows you to choose arbitrary starting and ending points for your queries.\r\n *\r\n * The optional key argument can be used to further limit the range of the\r\n * query. If it is specified, then children that have exactly the specified\r\n * value must also have exactly the specified key as their key name. This can be\r\n * used to filter result sets with many matches for the same value.\r\n *\r\n * You can read more about `equalTo()` in\r\n * {@link https://firebase.google.com/docs/database/web/lists-of-data#filtering_data | Filtering data}.\r\n *\r\n * @param value - The value to match for. The argument type depends on which\r\n * `orderBy*()` function was used in this query. Specify a value that matches\r\n * the `orderBy*()` type. When used in combination with `orderByKey()`, the\r\n * value must be a string.\r\n * @param key - The child key to start at, among the children with the\r\n * previously specified priority. This argument is only allowed if ordering by\r\n * child, value, or priority.\r\n */\n\n\nfunction equalTo(value, key) {\n  validateKey('equalTo', 'key', key, true);\n  return new QueryEqualToValueConstraint(value, key);\n}\n/**\r\n * Creates a new immutable instance of `Query` that is extended to also include\r\n * additional query constraints.\r\n *\r\n * @param query - The Query instance to use as a base for the new constraints.\r\n * @param queryConstraints - The list of `QueryConstraint`s to apply.\r\n * @throws if any of the provided query constraints cannot be combined with the\r\n * existing or new constraints.\r\n */\n\n\nfunction query(query) {\n  var e_1, _a;\n\n  var queryConstraints = [];\n\n  for (var _i = 1; _i < arguments.length; _i++) {\n    queryConstraints[_i - 1] = arguments[_i];\n  }\n\n  var queryImpl = getModularInstance(query);\n\n  try {\n    for (var queryConstraints_1 = __values(queryConstraints), queryConstraints_1_1 = queryConstraints_1.next(); !queryConstraints_1_1.done; queryConstraints_1_1 = queryConstraints_1.next()) {\n      var constraint = queryConstraints_1_1.value;\n      queryImpl = constraint._apply(queryImpl);\n    }\n  } catch (e_1_1) {\n    e_1 = {\n      error: e_1_1\n    };\n  } finally {\n    try {\n      if (queryConstraints_1_1 && !queryConstraints_1_1.done && (_a = queryConstraints_1.return)) _a.call(queryConstraints_1);\n    } finally {\n      if (e_1) throw e_1.error;\n    }\n  }\n\n  return queryImpl;\n}\n/**\r\n * Define reference constructor in various modules\r\n *\r\n * We are doing this here to avoid several circular\r\n * dependency issues\r\n */\n\n\nsyncPointSetReferenceConstructor(ReferenceImpl);\nsyncTreeSetReferenceConstructor(ReferenceImpl);\n/**\r\n * @license\r\n * Copyright 2020 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\n/**\r\n * This variable is also defined in the firebase node.js admin SDK. Before\r\n * modifying this definition, consult the definition in:\r\n *\r\n * https://github.com/firebase/firebase-admin-node\r\n *\r\n * and make sure the two are consistent.\r\n */\n\nvar FIREBASE_DATABASE_EMULATOR_HOST_VAR = 'FIREBASE_DATABASE_EMULATOR_HOST';\n/**\r\n * Creates and caches Repo instances.\r\n */\n\nvar repos = {};\n/**\r\n * If true, new Repos will be created to use ReadonlyRestClient (for testing purposes).\r\n */\n\nvar useRestClient = false;\n/**\r\n * Update an existing repo in place to point to a new host/port.\r\n */\n\nfunction repoManagerApplyEmulatorSettings(repo, host, port, tokenProvider) {\n  repo.repoInfo_ = new RepoInfo(host + \":\" + port,\n  /* secure= */\n  false, repo.repoInfo_.namespace, repo.repoInfo_.webSocketOnly, repo.repoInfo_.nodeAdmin, repo.repoInfo_.persistenceKey, repo.repoInfo_.includeNamespaceInQueryParams);\n\n  if (tokenProvider) {\n    repo.authTokenProvider_ = tokenProvider;\n  }\n}\n/**\r\n * This function should only ever be called to CREATE a new database instance.\r\n * @internal\r\n */\n\n\nfunction repoManagerDatabaseFromApp(app, authProvider, appCheckProvider, url, nodeAdmin) {\n  var dbUrl = url || app.options.databaseURL;\n\n  if (dbUrl === undefined) {\n    if (!app.options.projectId) {\n      fatal(\"Can't determine Firebase Database URL. Be sure to include \" + ' a Project ID when calling firebase.initializeApp().');\n    }\n\n    log('Using default host for project ', app.options.projectId);\n    dbUrl = app.options.projectId + \"-default-rtdb.firebaseio.com\";\n  }\n\n  var parsedUrl = parseRepoInfo(dbUrl, nodeAdmin);\n  var repoInfo = parsedUrl.repoInfo;\n  var isEmulator;\n  var dbEmulatorHost = undefined;\n\n  if (typeof process !== 'undefined') {\n    dbEmulatorHost = process.env[FIREBASE_DATABASE_EMULATOR_HOST_VAR];\n  }\n\n  if (dbEmulatorHost) {\n    isEmulator = true;\n    dbUrl = \"http://\" + dbEmulatorHost + \"?ns=\" + repoInfo.namespace;\n    parsedUrl = parseRepoInfo(dbUrl, nodeAdmin);\n    repoInfo = parsedUrl.repoInfo;\n  } else {\n    isEmulator = !parsedUrl.repoInfo.secure;\n  }\n\n  var authTokenProvider = nodeAdmin && isEmulator ? new EmulatorTokenProvider(EmulatorTokenProvider.OWNER) : new FirebaseAuthTokenProvider(app.name, app.options, authProvider);\n  validateUrl('Invalid Firebase Database URL', parsedUrl);\n\n  if (!pathIsEmpty(parsedUrl.path)) {\n    fatal('Database URL must point to the root of a Firebase Database ' + '(not including a child path).');\n  }\n\n  var repo = repoManagerCreateRepo(repoInfo, app, authTokenProvider, new AppCheckTokenProvider(app.name, appCheckProvider));\n  return new Database$1(repo, app);\n}\n/**\r\n * Remove the repo and make sure it is disconnected.\r\n *\r\n */\n\n\nfunction repoManagerDeleteRepo(repo, appName) {\n  var appRepos = repos[appName]; // This should never happen...\n\n  if (!appRepos || appRepos[repo.key] !== repo) {\n    fatal(\"Database \" + appName + \"(\" + repo.repoInfo_ + \") has already been deleted.\");\n  }\n\n  repoInterrupt(repo);\n  delete appRepos[repo.key];\n}\n/**\r\n * Ensures a repo doesn't already exist and then creates one using the\r\n * provided app.\r\n *\r\n * @param repoInfo - The metadata about the Repo\r\n * @returns The Repo object for the specified server / repoName.\r\n */\n\n\nfunction repoManagerCreateRepo(repoInfo, app, authTokenProvider, appCheckProvider) {\n  var appRepos = repos[app.name];\n\n  if (!appRepos) {\n    appRepos = {};\n    repos[app.name] = appRepos;\n  }\n\n  var repo = appRepos[repoInfo.toURLString()];\n\n  if (repo) {\n    fatal('Database initialized multiple times. Please make sure the format of the database URL matches with each database() call.');\n  }\n\n  repo = new Repo(repoInfo, useRestClient, authTokenProvider, appCheckProvider);\n  appRepos[repoInfo.toURLString()] = repo;\n  return repo;\n}\n/**\r\n * Forces us to use ReadonlyRestClient instead of PersistentConnection for new Repos.\r\n */\n\n\nfunction repoManagerForceRestClient(forceRestClient) {\n  useRestClient = forceRestClient;\n}\n/**\r\n * Class representing a Firebase Realtime Database.\r\n */\n\n\nvar Database$1 =\n/** @class */\nfunction () {\n  /** @hideconstructor */\n  function Database(_repoInternal,\n  /** The FirebaseApp associated with this Realtime Database instance. */\n  app) {\n    this._repoInternal = _repoInternal;\n    this.app = app;\n    /** Represents a database instance. */\n\n    this['type'] = 'database';\n    /** Track if the instance has been used (root or repo accessed) */\n\n    this._instanceStarted = false;\n  }\n\n  Object.defineProperty(Database.prototype, \"_repo\", {\n    get: function () {\n      if (!this._instanceStarted) {\n        repoStart(this._repoInternal, this.app.options.appId, this.app.options['databaseAuthVariableOverride']);\n        this._instanceStarted = true;\n      }\n\n      return this._repoInternal;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(Database.prototype, \"_root\", {\n    get: function () {\n      if (!this._rootInternal) {\n        this._rootInternal = new ReferenceImpl(this._repo, newEmptyPath());\n      }\n\n      return this._rootInternal;\n    },\n    enumerable: false,\n    configurable: true\n  });\n\n  Database.prototype._delete = function () {\n    if (this._rootInternal !== null) {\n      repoManagerDeleteRepo(this._repo, this.app.name);\n      this._repoInternal = null;\n      this._rootInternal = null;\n    }\n\n    return Promise.resolve();\n  };\n\n  Database.prototype._checkNotDeleted = function (apiName) {\n    if (this._rootInternal === null) {\n      fatal('Cannot call ' + apiName + ' on a deleted database.');\n    }\n  };\n\n  return Database;\n}();\n/**\r\n * Modify the provided instance to communicate with the Realtime Database\r\n * emulator.\r\n *\r\n * <p>Note: This method must be called before performing any other operation.\r\n *\r\n * @param db - The instance to modify.\r\n * @param host - The emulator host (ex: localhost)\r\n * @param port - The emulator port (ex: 8080)\r\n * @param options.mockUserToken - the mock auth token to use for unit testing Security Rules\r\n */\n\n\nfunction connectDatabaseEmulator(db, host, port, options) {\n  if (options === void 0) {\n    options = {};\n  }\n\n  db = getModularInstance(db);\n\n  db._checkNotDeleted('useEmulator');\n\n  if (db._instanceStarted) {\n    fatal('Cannot call useEmulator() after instance has already been initialized.');\n  }\n\n  var repo = db._repoInternal;\n  var tokenProvider = undefined;\n\n  if (repo.repoInfo_.nodeAdmin) {\n    if (options.mockUserToken) {\n      fatal('mockUserToken is not supported by the Admin SDK. For client access with mock users, please use the \"firebase\" package instead of \"firebase-admin\".');\n    }\n\n    tokenProvider = new EmulatorTokenProvider(EmulatorTokenProvider.OWNER);\n  } else if (options.mockUserToken) {\n    var token = createMockUserToken(options.mockUserToken, db.app.options.projectId);\n    tokenProvider = new EmulatorTokenProvider(token);\n  } // Modify the repo to apply emulator settings\n\n\n  repoManagerApplyEmulatorSettings(repo, host, port, tokenProvider);\n}\n/**\r\n * Disconnects from the server (all Database operations will be completed\r\n * offline).\r\n *\r\n * The client automatically maintains a persistent connection to the Database\r\n * server, which will remain active indefinitely and reconnect when\r\n * disconnected. However, the `goOffline()` and `goOnline()` methods may be used\r\n * to control the client connection in cases where a persistent connection is\r\n * undesirable.\r\n *\r\n * While offline, the client will no longer receive data updates from the\r\n * Database. However, all Database operations performed locally will continue to\r\n * immediately fire events, allowing your application to continue behaving\r\n * normally. Additionally, each operation performed locally will automatically\r\n * be queued and retried upon reconnection to the Database server.\r\n *\r\n * To reconnect to the Database and begin receiving remote events, see\r\n * `goOnline()`.\r\n *\r\n * @param db - The instance to disconnect.\r\n */\n\n\nfunction goOffline(db) {\n  db = getModularInstance(db);\n\n  db._checkNotDeleted('goOffline');\n\n  repoInterrupt(db._repo);\n}\n/**\r\n * Reconnects to the server and synchronizes the offline Database state\r\n * with the server state.\r\n *\r\n * This method should be used after disabling the active connection with\r\n * `goOffline()`. Once reconnected, the client will transmit the proper data\r\n * and fire the appropriate events so that your client \"catches up\"\r\n * automatically.\r\n *\r\n * @param db - The instance to reconnect.\r\n */\n\n\nfunction goOnline(db) {\n  db = getModularInstance(db);\n\n  db._checkNotDeleted('goOnline');\n\n  repoResume(db._repo);\n}\n/**\r\n * @license\r\n * Copyright 2020 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\n\nvar SERVER_TIMESTAMP = {\n  '.sv': 'timestamp'\n};\n/**\r\n * Returns a placeholder value for auto-populating the current timestamp (time\r\n * since the Unix epoch, in milliseconds) as determined by the Firebase\r\n * servers.\r\n */\n\nfunction serverTimestamp() {\n  return SERVER_TIMESTAMP;\n}\n/**\r\n * Returns a placeholder value that can be used to atomically increment the\r\n * current database value by the provided delta.\r\n *\r\n * @param delta - the amount to modify the current value atomically.\r\n * @returns A placeholder value for modifying data atomically server-side.\r\n */\n\n\nfunction increment(delta) {\n  return {\n    '.sv': {\n      'increment': delta\n    }\n  };\n}\n/**\r\n * @license\r\n * Copyright 2020 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\n/**\r\n * A type for the resolve value of Firebase.transaction.\r\n */\n\n\nvar TransactionResult$1 =\n/** @class */\nfunction () {\n  /** @hideconstructor */\n  function TransactionResult(\n  /** Whether the transaction was successfully committed. */\n  committed,\n  /** The resulting data snapshot. */\n  snapshot) {\n    this.committed = committed;\n    this.snapshot = snapshot;\n  }\n  /** Returns a JSON-serializable representation of this object. */\n\n\n  TransactionResult.prototype.toJSON = function () {\n    return {\n      committed: this.committed,\n      snapshot: this.snapshot.toJSON()\n    };\n  };\n\n  return TransactionResult;\n}();\n/**\r\n * Atomically modifies the data at this location.\r\n *\r\n * Atomically modify the data at this location. Unlike a normal `set()`, which\r\n * just overwrites the data regardless of its previous value, `transaction()` is\r\n * used to modify the existing value to a new value, ensuring there are no\r\n * conflicts with other clients writing to the same location at the same time.\r\n *\r\n * To accomplish this, you pass `runTransaction()` an update function which is\r\n * used to transform the current value into a new value. If another client\r\n * writes to the location before your new value is successfully written, your\r\n * update function will be called again with the new current value, and the\r\n * write will be retried. This will happen repeatedly until your write succeeds\r\n * without conflict or you abort the transaction by not returning a value from\r\n * your update function.\r\n *\r\n * Note: Modifying data with `set()` will cancel any pending transactions at\r\n * that location, so extreme care should be taken if mixing `set()` and\r\n * `transaction()` to update the same data.\r\n *\r\n * Note: When using transactions with Security and Firebase Rules in place, be\r\n * aware that a client needs `.read` access in addition to `.write` access in\r\n * order to perform a transaction. This is because the client-side nature of\r\n * transactions requires the client to read the data in order to transactionally\r\n * update it.\r\n *\r\n * @param ref - The location to atomically modify.\r\n * @param transactionUpdate - A developer-supplied function which will be passed\r\n * the current data stored at this location (as a JavaScript object). The\r\n * function should return the new value it would like written (as a JavaScript\r\n * object). If `undefined` is returned (i.e. you return with no arguments) the\r\n * transaction will be aborted and the data at this location will not be\r\n * modified.\r\n * @param options - An options object to configure transactions.\r\n * @returns A Promise that can optionally be used instead of the onComplete\r\n * callback to handle success and failure.\r\n */\n\n\nfunction runTransaction(ref, // eslint-disable-next-line @typescript-eslint/no-explicit-any\ntransactionUpdate, options) {\n  var _a;\n\n  ref = getModularInstance(ref);\n  validateWritablePath('Reference.transaction', ref._path);\n\n  if (ref.key === '.length' || ref.key === '.keys') {\n    throw 'Reference.transaction failed: ' + ref.key + ' is a read-only object.';\n  }\n\n  var applyLocally = (_a = options === null || options === void 0 ? void 0 : options.applyLocally) !== null && _a !== void 0 ? _a : true;\n  var deferred = new Deferred();\n\n  var promiseComplete = function (error, committed, node) {\n    var dataSnapshot = null;\n\n    if (error) {\n      deferred.reject(error);\n    } else {\n      dataSnapshot = new DataSnapshot$1(node, new ReferenceImpl(ref._repo, ref._path), PRIORITY_INDEX);\n      deferred.resolve(new TransactionResult$1(committed, dataSnapshot));\n    }\n  }; // Add a watch to make sure we get server updates.\n\n\n  var unwatcher = onValue(ref, function () {});\n  repoStartTransaction(ref._repo, ref._path, transactionUpdate, promiseComplete, unwatcher, applyLocally);\n  return deferred.promise;\n}\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\n\nvar OnDisconnect =\n/** @class */\nfunction () {\n  function OnDisconnect(_delegate) {\n    this._delegate = _delegate;\n  }\n\n  OnDisconnect.prototype.cancel = function (onComplete) {\n    validateArgCount('OnDisconnect.cancel', 0, 1, arguments.length);\n    validateCallback('OnDisconnect.cancel', 'onComplete', onComplete, true);\n\n    var result = this._delegate.cancel();\n\n    if (onComplete) {\n      result.then(function () {\n        return onComplete(null);\n      }, function (error) {\n        return onComplete(error);\n      });\n    }\n\n    return result;\n  };\n\n  OnDisconnect.prototype.remove = function (onComplete) {\n    validateArgCount('OnDisconnect.remove', 0, 1, arguments.length);\n    validateCallback('OnDisconnect.remove', 'onComplete', onComplete, true);\n\n    var result = this._delegate.remove();\n\n    if (onComplete) {\n      result.then(function () {\n        return onComplete(null);\n      }, function (error) {\n        return onComplete(error);\n      });\n    }\n\n    return result;\n  };\n\n  OnDisconnect.prototype.set = function (value, onComplete) {\n    validateArgCount('OnDisconnect.set', 1, 2, arguments.length);\n    validateCallback('OnDisconnect.set', 'onComplete', onComplete, true);\n\n    var result = this._delegate.set(value);\n\n    if (onComplete) {\n      result.then(function () {\n        return onComplete(null);\n      }, function (error) {\n        return onComplete(error);\n      });\n    }\n\n    return result;\n  };\n\n  OnDisconnect.prototype.setWithPriority = function (value, priority, onComplete) {\n    validateArgCount('OnDisconnect.setWithPriority', 2, 3, arguments.length);\n    validateCallback('OnDisconnect.setWithPriority', 'onComplete', onComplete, true);\n\n    var result = this._delegate.setWithPriority(value, priority);\n\n    if (onComplete) {\n      result.then(function () {\n        return onComplete(null);\n      }, function (error) {\n        return onComplete(error);\n      });\n    }\n\n    return result;\n  };\n\n  OnDisconnect.prototype.update = function (objectToMerge, onComplete) {\n    validateArgCount('OnDisconnect.update', 1, 2, arguments.length);\n\n    if (Array.isArray(objectToMerge)) {\n      var newObjectToMerge = {};\n\n      for (var i = 0; i < objectToMerge.length; ++i) {\n        newObjectToMerge['' + i] = objectToMerge[i];\n      }\n\n      objectToMerge = newObjectToMerge;\n      warn('Passing an Array to firebase.database.onDisconnect().update() is deprecated. Use set() if you want to overwrite the ' + 'existing data, or an Object with integer keys if you really do want to only update some of the children.');\n    }\n\n    validateCallback('OnDisconnect.update', 'onComplete', onComplete, true);\n\n    var result = this._delegate.update(objectToMerge);\n\n    if (onComplete) {\n      result.then(function () {\n        return onComplete(null);\n      }, function (error) {\n        return onComplete(error);\n      });\n    }\n\n    return result;\n  };\n\n  return OnDisconnect;\n}();\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\n\nvar TransactionResult =\n/** @class */\nfunction () {\n  /**\r\n   * A type for the resolve value of Firebase.transaction.\r\n   */\n  function TransactionResult(committed, snapshot) {\n    this.committed = committed;\n    this.snapshot = snapshot;\n  } // Do not create public documentation. This is intended to make JSON serialization work but is otherwise unnecessary\n  // for end-users\n\n\n  TransactionResult.prototype.toJSON = function () {\n    validateArgCount('TransactionResult.toJSON', 0, 1, arguments.length);\n    return {\n      committed: this.committed,\n      snapshot: this.snapshot.toJSON()\n    };\n  };\n\n  return TransactionResult;\n}();\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\n/* eslint-enable @typescript-eslint/no-explicit-any */\n\n/**\r\n * Class representing a firebase data snapshot.  It wraps a SnapshotNode and\r\n * surfaces the public methods (val, forEach, etc.) we want to expose.\r\n */\n\n\nvar DataSnapshot =\n/** @class */\nfunction () {\n  function DataSnapshot(_database, _delegate) {\n    this._database = _database;\n    this._delegate = _delegate;\n  }\n  /**\r\n   * Retrieves the snapshot contents as JSON.  Returns null if the snapshot is\r\n   * empty.\r\n   *\r\n   * @returns JSON representation of the DataSnapshot contents, or null if empty.\r\n   */\n\n\n  DataSnapshot.prototype.val = function () {\n    validateArgCount('DataSnapshot.val', 0, 0, arguments.length);\n    return this._delegate.val();\n  };\n  /**\r\n   * Returns the snapshot contents as JSON, including priorities of node.  Suitable for exporting\r\n   * the entire node contents.\r\n   * @returns JSON representation of the DataSnapshot contents, or null if empty.\r\n   */\n\n\n  DataSnapshot.prototype.exportVal = function () {\n    validateArgCount('DataSnapshot.exportVal', 0, 0, arguments.length);\n    return this._delegate.exportVal();\n  }; // Do not create public documentation. This is intended to make JSON serialization work but is otherwise unnecessary\n  // for end-users\n\n\n  DataSnapshot.prototype.toJSON = function () {\n    // Optional spacer argument is unnecessary because we're depending on recursion rather than stringifying the content\n    validateArgCount('DataSnapshot.toJSON', 0, 1, arguments.length);\n    return this._delegate.toJSON();\n  };\n  /**\r\n   * Returns whether the snapshot contains a non-null value.\r\n   *\r\n   * @returns Whether the snapshot contains a non-null value, or is empty.\r\n   */\n\n\n  DataSnapshot.prototype.exists = function () {\n    validateArgCount('DataSnapshot.exists', 0, 0, arguments.length);\n    return this._delegate.exists();\n  };\n  /**\r\n   * Returns a DataSnapshot of the specified child node's contents.\r\n   *\r\n   * @param path - Path to a child.\r\n   * @returns DataSnapshot for child node.\r\n   */\n\n\n  DataSnapshot.prototype.child = function (path) {\n    validateArgCount('DataSnapshot.child', 0, 1, arguments.length); // Ensure the childPath is a string (can be a number)\n\n    path = String(path);\n    validatePathString('DataSnapshot.child', 'path', path, false);\n    return new DataSnapshot(this._database, this._delegate.child(path));\n  };\n  /**\r\n   * Returns whether the snapshot contains a child at the specified path.\r\n   *\r\n   * @param path - Path to a child.\r\n   * @returns Whether the child exists.\r\n   */\n\n\n  DataSnapshot.prototype.hasChild = function (path) {\n    validateArgCount('DataSnapshot.hasChild', 1, 1, arguments.length);\n    validatePathString('DataSnapshot.hasChild', 'path', path, false);\n    return this._delegate.hasChild(path);\n  };\n  /**\r\n   * Returns the priority of the object, or null if no priority was set.\r\n   *\r\n   * @returns The priority.\r\n   */\n\n\n  DataSnapshot.prototype.getPriority = function () {\n    validateArgCount('DataSnapshot.getPriority', 0, 0, arguments.length);\n    return this._delegate.priority;\n  };\n  /**\r\n   * Iterates through child nodes and calls the specified action for each one.\r\n   *\r\n   * @param action - Callback function to be called\r\n   * for each child.\r\n   * @returns True if forEach was canceled by action returning true for\r\n   * one of the child nodes.\r\n   */\n\n\n  DataSnapshot.prototype.forEach = function (action) {\n    var _this = this;\n\n    validateArgCount('DataSnapshot.forEach', 1, 1, arguments.length);\n    validateCallback('DataSnapshot.forEach', 'action', action, false);\n    return this._delegate.forEach(function (expDataSnapshot) {\n      return action(new DataSnapshot(_this._database, expDataSnapshot));\n    });\n  };\n  /**\r\n   * Returns whether this DataSnapshot has children.\r\n   * @returns True if the DataSnapshot contains 1 or more child nodes.\r\n   */\n\n\n  DataSnapshot.prototype.hasChildren = function () {\n    validateArgCount('DataSnapshot.hasChildren', 0, 0, arguments.length);\n    return this._delegate.hasChildren();\n  };\n\n  Object.defineProperty(DataSnapshot.prototype, \"key\", {\n    get: function () {\n      return this._delegate.key;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  /**\r\n   * Returns the number of children for this DataSnapshot.\r\n   * @returns The number of children that this DataSnapshot contains.\r\n   */\n\n  DataSnapshot.prototype.numChildren = function () {\n    validateArgCount('DataSnapshot.numChildren', 0, 0, arguments.length);\n    return this._delegate.size;\n  };\n  /**\r\n   * @returns The Firebase reference for the location this snapshot's data came\r\n   * from.\r\n   */\n\n\n  DataSnapshot.prototype.getRef = function () {\n    validateArgCount('DataSnapshot.ref', 0, 0, arguments.length);\n    return new Reference(this._database, this._delegate.ref);\n  };\n\n  Object.defineProperty(DataSnapshot.prototype, \"ref\", {\n    get: function () {\n      return this.getRef();\n    },\n    enumerable: false,\n    configurable: true\n  });\n  return DataSnapshot;\n}();\n/**\r\n * A Query represents a filter to be applied to a firebase location.  This object purely represents the\r\n * query expression (and exposes our public API to build the query).  The actual query logic is in ViewBase.js.\r\n *\r\n * Since every Firebase reference is a query, Firebase inherits from this object.\r\n */\n\n\nvar Query =\n/** @class */\nfunction () {\n  function Query(database, _delegate) {\n    this.database = database;\n    this._delegate = _delegate;\n  }\n\n  Query.prototype.on = function (eventType, callback, cancelCallbackOrContext, context) {\n    var _this = this;\n\n    var _a;\n\n    validateArgCount('Query.on', 2, 4, arguments.length);\n    validateCallback('Query.on', 'callback', callback, false);\n    var ret = Query.getCancelAndContextArgs_('Query.on', cancelCallbackOrContext, context);\n\n    var valueCallback = function (expSnapshot, previousChildName) {\n      callback.call(ret.context, new DataSnapshot(_this.database, expSnapshot), previousChildName);\n    };\n\n    valueCallback.userCallback = callback;\n    valueCallback.context = ret.context;\n    var cancelCallback = (_a = ret.cancel) === null || _a === void 0 ? void 0 : _a.bind(ret.context);\n\n    switch (eventType) {\n      case 'value':\n        onValue(this._delegate, valueCallback, cancelCallback);\n        return callback;\n\n      case 'child_added':\n        onChildAdded(this._delegate, valueCallback, cancelCallback);\n        return callback;\n\n      case 'child_removed':\n        onChildRemoved(this._delegate, valueCallback, cancelCallback);\n        return callback;\n\n      case 'child_changed':\n        onChildChanged(this._delegate, valueCallback, cancelCallback);\n        return callback;\n\n      case 'child_moved':\n        onChildMoved(this._delegate, valueCallback, cancelCallback);\n        return callback;\n\n      default:\n        throw new Error(errorPrefix('Query.on', 'eventType') + 'must be a valid event type = \"value\", \"child_added\", \"child_removed\", ' + '\"child_changed\", or \"child_moved\".');\n    }\n  };\n\n  Query.prototype.off = function (eventType, callback, context) {\n    validateArgCount('Query.off', 0, 3, arguments.length);\n    validateEventType('Query.off', eventType, true);\n    validateCallback('Query.off', 'callback', callback, true);\n    validateContextObject('Query.off', 'context', context, true);\n\n    if (callback) {\n      var valueCallback = function () {};\n\n      valueCallback.userCallback = callback;\n      valueCallback.context = context;\n      off(this._delegate, eventType, valueCallback);\n    } else {\n      off(this._delegate, eventType);\n    }\n  };\n  /**\r\n   * Get the server-value for this query, or return a cached value if not connected.\r\n   */\n\n\n  Query.prototype.get = function () {\n    var _this = this;\n\n    return get(this._delegate).then(function (expSnapshot) {\n      return new DataSnapshot(_this.database, expSnapshot);\n    });\n  };\n  /**\r\n   * Attaches a listener, waits for the first event, and then removes the listener\r\n   */\n\n\n  Query.prototype.once = function (eventType, callback, failureCallbackOrContext, context) {\n    var _this = this;\n\n    validateArgCount('Query.once', 1, 4, arguments.length);\n    validateCallback('Query.once', 'callback', callback, true);\n    var ret = Query.getCancelAndContextArgs_('Query.once', failureCallbackOrContext, context);\n    var deferred = new Deferred();\n\n    var valueCallback = function (expSnapshot, previousChildName) {\n      var result = new DataSnapshot(_this.database, expSnapshot);\n\n      if (callback) {\n        callback.call(ret.context, result, previousChildName);\n      }\n\n      deferred.resolve(result);\n    };\n\n    valueCallback.userCallback = callback;\n    valueCallback.context = ret.context;\n\n    var cancelCallback = function (error) {\n      if (ret.cancel) {\n        ret.cancel.call(ret.context, error);\n      }\n\n      deferred.reject(error);\n    };\n\n    switch (eventType) {\n      case 'value':\n        onValue(this._delegate, valueCallback, cancelCallback, {\n          onlyOnce: true\n        });\n        break;\n\n      case 'child_added':\n        onChildAdded(this._delegate, valueCallback, cancelCallback, {\n          onlyOnce: true\n        });\n        break;\n\n      case 'child_removed':\n        onChildRemoved(this._delegate, valueCallback, cancelCallback, {\n          onlyOnce: true\n        });\n        break;\n\n      case 'child_changed':\n        onChildChanged(this._delegate, valueCallback, cancelCallback, {\n          onlyOnce: true\n        });\n        break;\n\n      case 'child_moved':\n        onChildMoved(this._delegate, valueCallback, cancelCallback, {\n          onlyOnce: true\n        });\n        break;\n\n      default:\n        throw new Error(errorPrefix('Query.once', 'eventType') + 'must be a valid event type = \"value\", \"child_added\", \"child_removed\", ' + '\"child_changed\", or \"child_moved\".');\n    }\n\n    return deferred.promise;\n  };\n  /**\r\n   * Set a limit and anchor it to the start of the window.\r\n   */\n\n\n  Query.prototype.limitToFirst = function (limit) {\n    validateArgCount('Query.limitToFirst', 1, 1, arguments.length);\n    return new Query(this.database, query(this._delegate, limitToFirst(limit)));\n  };\n  /**\r\n   * Set a limit and anchor it to the end of the window.\r\n   */\n\n\n  Query.prototype.limitToLast = function (limit) {\n    validateArgCount('Query.limitToLast', 1, 1, arguments.length);\n    return new Query(this.database, query(this._delegate, limitToLast(limit)));\n  };\n  /**\r\n   * Given a child path, return a new query ordered by the specified grandchild path.\r\n   */\n\n\n  Query.prototype.orderByChild = function (path) {\n    validateArgCount('Query.orderByChild', 1, 1, arguments.length);\n    return new Query(this.database, query(this._delegate, orderByChild(path)));\n  };\n  /**\r\n   * Return a new query ordered by the KeyIndex\r\n   */\n\n\n  Query.prototype.orderByKey = function () {\n    validateArgCount('Query.orderByKey', 0, 0, arguments.length);\n    return new Query(this.database, query(this._delegate, orderByKey()));\n  };\n  /**\r\n   * Return a new query ordered by the PriorityIndex\r\n   */\n\n\n  Query.prototype.orderByPriority = function () {\n    validateArgCount('Query.orderByPriority', 0, 0, arguments.length);\n    return new Query(this.database, query(this._delegate, orderByPriority()));\n  };\n  /**\r\n   * Return a new query ordered by the ValueIndex\r\n   */\n\n\n  Query.prototype.orderByValue = function () {\n    validateArgCount('Query.orderByValue', 0, 0, arguments.length);\n    return new Query(this.database, query(this._delegate, orderByValue()));\n  };\n\n  Query.prototype.startAt = function (value, name) {\n    if (value === void 0) {\n      value = null;\n    }\n\n    validateArgCount('Query.startAt', 0, 2, arguments.length);\n    return new Query(this.database, query(this._delegate, startAt(value, name)));\n  };\n\n  Query.prototype.startAfter = function (value, name) {\n    if (value === void 0) {\n      value = null;\n    }\n\n    validateArgCount('Query.startAfter', 0, 2, arguments.length);\n    return new Query(this.database, query(this._delegate, startAfter(value, name)));\n  };\n\n  Query.prototype.endAt = function (value, name) {\n    if (value === void 0) {\n      value = null;\n    }\n\n    validateArgCount('Query.endAt', 0, 2, arguments.length);\n    return new Query(this.database, query(this._delegate, endAt(value, name)));\n  };\n\n  Query.prototype.endBefore = function (value, name) {\n    if (value === void 0) {\n      value = null;\n    }\n\n    validateArgCount('Query.endBefore', 0, 2, arguments.length);\n    return new Query(this.database, query(this._delegate, endBefore(value, name)));\n  };\n  /**\r\n   * Load the selection of children with exactly the specified value, and, optionally,\r\n   * the specified name.\r\n   */\n\n\n  Query.prototype.equalTo = function (value, name) {\n    validateArgCount('Query.equalTo', 1, 2, arguments.length);\n    return new Query(this.database, query(this._delegate, equalTo(value, name)));\n  };\n  /**\r\n   * @returns URL for this location.\r\n   */\n\n\n  Query.prototype.toString = function () {\n    validateArgCount('Query.toString', 0, 0, arguments.length);\n    return this._delegate.toString();\n  }; // Do not create public documentation. This is intended to make JSON serialization work but is otherwise unnecessary\n  // for end-users.\n\n\n  Query.prototype.toJSON = function () {\n    // An optional spacer argument is unnecessary for a string.\n    validateArgCount('Query.toJSON', 0, 1, arguments.length);\n    return this._delegate.toJSON();\n  };\n  /**\r\n   * Return true if this query and the provided query are equivalent; otherwise, return false.\r\n   */\n\n\n  Query.prototype.isEqual = function (other) {\n    validateArgCount('Query.isEqual', 1, 1, arguments.length);\n\n    if (!(other instanceof Query)) {\n      var error = 'Query.isEqual failed: First argument must be an instance of firebase.database.Query.';\n      throw new Error(error);\n    }\n\n    return this._delegate.isEqual(other._delegate);\n  };\n  /**\r\n   * Helper used by .on and .once to extract the context and or cancel arguments.\r\n   * @param fnName - The function name (on or once)\r\n   *\r\n   */\n\n\n  Query.getCancelAndContextArgs_ = function (fnName, cancelOrContext, context) {\n    var ret = {\n      cancel: undefined,\n      context: undefined\n    };\n\n    if (cancelOrContext && context) {\n      ret.cancel = cancelOrContext;\n      validateCallback(fnName, 'cancel', ret.cancel, true);\n      ret.context = context;\n      validateContextObject(fnName, 'context', ret.context, true);\n    } else if (cancelOrContext) {\n      // we have either a cancel callback or a context.\n      if (typeof cancelOrContext === 'object' && cancelOrContext !== null) {\n        // it's a context!\n        ret.context = cancelOrContext;\n      } else if (typeof cancelOrContext === 'function') {\n        ret.cancel = cancelOrContext;\n      } else {\n        throw new Error(errorPrefix(fnName, 'cancelOrContext') + ' must either be a cancel callback or a context object.');\n      }\n    }\n\n    return ret;\n  };\n\n  Object.defineProperty(Query.prototype, \"ref\", {\n    get: function () {\n      return new Reference(this.database, new ReferenceImpl(this._delegate._repo, this._delegate._path));\n    },\n    enumerable: false,\n    configurable: true\n  });\n  return Query;\n}();\n\nvar Reference =\n/** @class */\nfunction (_super) {\n  __extends(Reference, _super);\n  /**\r\n   * Call options:\r\n   *   new Reference(Repo, Path) or\r\n   *   new Reference(url: string, string|RepoManager)\r\n   *\r\n   * Externally - this is the firebase.database.Reference type.\r\n   */\n\n\n  function Reference(database, _delegate) {\n    var _this = _super.call(this, database, new QueryImpl(_delegate._repo, _delegate._path, new QueryParams(), false)) || this;\n\n    _this.database = database;\n    _this._delegate = _delegate;\n    return _this;\n  }\n  /** @returns {?string} */\n\n\n  Reference.prototype.getKey = function () {\n    validateArgCount('Reference.key', 0, 0, arguments.length);\n    return this._delegate.key;\n  };\n\n  Reference.prototype.child = function (pathString) {\n    validateArgCount('Reference.child', 1, 1, arguments.length);\n\n    if (typeof pathString === 'number') {\n      pathString = String(pathString);\n    }\n\n    return new Reference(this.database, child(this._delegate, pathString));\n  };\n  /** @returns {?Reference} */\n\n\n  Reference.prototype.getParent = function () {\n    validateArgCount('Reference.parent', 0, 0, arguments.length);\n    var parent = this._delegate.parent;\n    return parent ? new Reference(this.database, parent) : null;\n  };\n  /** @returns {!Reference} */\n\n\n  Reference.prototype.getRoot = function () {\n    validateArgCount('Reference.root', 0, 0, arguments.length);\n    return new Reference(this.database, this._delegate.root);\n  };\n\n  Reference.prototype.set = function (newVal, onComplete) {\n    validateArgCount('Reference.set', 1, 2, arguments.length);\n    validateCallback('Reference.set', 'onComplete', onComplete, true);\n    var result = set(this._delegate, newVal);\n\n    if (onComplete) {\n      result.then(function () {\n        return onComplete(null);\n      }, function (error) {\n        return onComplete(error);\n      });\n    }\n\n    return result;\n  };\n\n  Reference.prototype.update = function (values, onComplete) {\n    validateArgCount('Reference.update', 1, 2, arguments.length);\n\n    if (Array.isArray(values)) {\n      var newObjectToMerge = {};\n\n      for (var i = 0; i < values.length; ++i) {\n        newObjectToMerge['' + i] = values[i];\n      }\n\n      values = newObjectToMerge;\n      warn('Passing an Array to Firebase.update() is deprecated. ' + 'Use set() if you want to overwrite the existing data, or ' + 'an Object with integer keys if you really do want to ' + 'only update some of the children.');\n    }\n\n    validateWritablePath('Reference.update', this._delegate._path);\n    validateCallback('Reference.update', 'onComplete', onComplete, true);\n    var result = update(this._delegate, values);\n\n    if (onComplete) {\n      result.then(function () {\n        return onComplete(null);\n      }, function (error) {\n        return onComplete(error);\n      });\n    }\n\n    return result;\n  };\n\n  Reference.prototype.setWithPriority = function (newVal, newPriority, onComplete) {\n    validateArgCount('Reference.setWithPriority', 2, 3, arguments.length);\n    validateCallback('Reference.setWithPriority', 'onComplete', onComplete, true);\n    var result = setWithPriority(this._delegate, newVal, newPriority);\n\n    if (onComplete) {\n      result.then(function () {\n        return onComplete(null);\n      }, function (error) {\n        return onComplete(error);\n      });\n    }\n\n    return result;\n  };\n\n  Reference.prototype.remove = function (onComplete) {\n    validateArgCount('Reference.remove', 0, 1, arguments.length);\n    validateCallback('Reference.remove', 'onComplete', onComplete, true);\n    var result = remove(this._delegate);\n\n    if (onComplete) {\n      result.then(function () {\n        return onComplete(null);\n      }, function (error) {\n        return onComplete(error);\n      });\n    }\n\n    return result;\n  };\n\n  Reference.prototype.transaction = function (transactionUpdate, onComplete, applyLocally) {\n    var _this = this;\n\n    validateArgCount('Reference.transaction', 1, 3, arguments.length);\n    validateCallback('Reference.transaction', 'transactionUpdate', transactionUpdate, false);\n    validateCallback('Reference.transaction', 'onComplete', onComplete, true);\n    validateBoolean('Reference.transaction', 'applyLocally', applyLocally, true);\n    var result = runTransaction(this._delegate, transactionUpdate, {\n      applyLocally: applyLocally\n    }).then(function (transactionResult) {\n      return new TransactionResult(transactionResult.committed, new DataSnapshot(_this.database, transactionResult.snapshot));\n    });\n\n    if (onComplete) {\n      result.then(function (transactionResult) {\n        return onComplete(null, transactionResult.committed, transactionResult.snapshot);\n      }, function (error) {\n        return onComplete(error, false, null);\n      });\n    }\n\n    return result;\n  };\n\n  Reference.prototype.setPriority = function (priority, onComplete) {\n    validateArgCount('Reference.setPriority', 1, 2, arguments.length);\n    validateCallback('Reference.setPriority', 'onComplete', onComplete, true);\n    var result = setPriority(this._delegate, priority);\n\n    if (onComplete) {\n      result.then(function () {\n        return onComplete(null);\n      }, function (error) {\n        return onComplete(error);\n      });\n    }\n\n    return result;\n  };\n\n  Reference.prototype.push = function (value, onComplete) {\n    var _this = this;\n\n    validateArgCount('Reference.push', 0, 2, arguments.length);\n    validateCallback('Reference.push', 'onComplete', onComplete, true);\n    var expPromise = push(this._delegate, value);\n    var promise = expPromise.then(function (expRef) {\n      return new Reference(_this.database, expRef);\n    });\n\n    if (onComplete) {\n      promise.then(function () {\n        return onComplete(null);\n      }, function (error) {\n        return onComplete(error);\n      });\n    }\n\n    var result = new Reference(this.database, expPromise);\n    result.then = promise.then.bind(promise);\n    result.catch = promise.catch.bind(promise, undefined);\n    return result;\n  };\n\n  Reference.prototype.onDisconnect = function () {\n    validateWritablePath('Reference.onDisconnect', this._delegate._path);\n    return new OnDisconnect(new OnDisconnect$1(this._delegate._repo, this._delegate._path));\n  };\n\n  Object.defineProperty(Reference.prototype, \"key\", {\n    get: function () {\n      return this.getKey();\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(Reference.prototype, \"parent\", {\n    get: function () {\n      return this.getParent();\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(Reference.prototype, \"root\", {\n    get: function () {\n      return this.getRoot();\n    },\n    enumerable: false,\n    configurable: true\n  });\n  return Reference;\n}(Query);\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\n/**\r\n * Class representing a firebase database.\r\n */\n\n\nvar Database =\n/** @class */\nfunction () {\n  /**\r\n   * The constructor should not be called by users of our public API.\r\n   */\n  function Database(_delegate, app) {\n    var _this = this;\n\n    this._delegate = _delegate;\n    this.app = app;\n    this.INTERNAL = {\n      delete: function () {\n        return _this._delegate._delete();\n      }\n    };\n  }\n  /**\r\n   * Modify this instance to communicate with the Realtime Database emulator.\r\n   *\r\n   * <p>Note: This method must be called before performing any other operation.\r\n   *\r\n   * @param host - the emulator host (ex: localhost)\r\n   * @param port - the emulator port (ex: 8080)\r\n   * @param options.mockUserToken - the mock auth token to use for unit testing Security Rules\r\n   */\n\n\n  Database.prototype.useEmulator = function (host, port, options) {\n    if (options === void 0) {\n      options = {};\n    }\n\n    connectDatabaseEmulator(this._delegate, host, port, options);\n  };\n\n  Database.prototype.ref = function (path) {\n    validateArgCount('database.ref', 0, 1, arguments.length);\n\n    if (path instanceof Reference) {\n      var childRef = refFromURL(this._delegate, path.toString());\n      return new Reference(this, childRef);\n    } else {\n      var childRef = ref(this._delegate, path);\n      return new Reference(this, childRef);\n    }\n  };\n  /**\r\n   * Returns a reference to the root or the path specified in url.\r\n   * We throw a exception if the url is not in the same domain as the\r\n   * current repo.\r\n   * @returns Firebase reference.\r\n   */\n\n\n  Database.prototype.refFromURL = function (url) {\n    var apiName = 'database.refFromURL';\n    validateArgCount(apiName, 1, 1, arguments.length);\n    var childRef = refFromURL(this._delegate, url);\n    return new Reference(this, childRef);\n  }; // Make individual repo go offline.\n\n\n  Database.prototype.goOffline = function () {\n    validateArgCount('database.goOffline', 0, 0, arguments.length);\n    return goOffline(this._delegate);\n  };\n\n  Database.prototype.goOnline = function () {\n    validateArgCount('database.goOnline', 0, 0, arguments.length);\n    return goOnline(this._delegate);\n  };\n\n  Database.ServerValue = {\n    TIMESTAMP: serverTimestamp(),\n    increment: function (delta) {\n      return increment(delta);\n    }\n  };\n  return Database;\n}();\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\n/**\r\n * INTERNAL methods for internal-use only (tests, etc.).\r\n *\r\n * Customers shouldn't use these or else should be aware that they could break at any time.\r\n */\n\n\nvar forceLongPolling = function () {\n  WebSocketConnection.forceDisallow();\n  BrowserPollConnection.forceAllow();\n};\n\nvar forceWebSockets = function () {\n  BrowserPollConnection.forceDisallow();\n};\n/* Used by App Manager */\n\n\nvar isWebSocketsAvailable = function () {\n  return WebSocketConnection['isAvailable']();\n};\n\nvar setSecurityDebugCallback = function (ref, callback) {\n  var connection = ref._delegate._repo.persistentConnection_; // eslint-disable-next-line @typescript-eslint/no-explicit-any\n\n  connection.securityDebugCallback_ = callback;\n};\n\nvar stats = function (ref, showDelta) {\n  repoStats(ref._delegate._repo, showDelta);\n};\n\nvar statsIncrementCounter = function (ref, metric) {\n  repoStatsIncrementCounter(ref._delegate._repo, metric);\n};\n\nvar dataUpdateCount = function (ref) {\n  return ref._delegate._repo.dataUpdateCount;\n};\n\nvar interceptServerData = function (ref, callback) {\n  return repoInterceptServerData(ref._delegate._repo, callback);\n};\n/**\r\n * Used by console to create a database based on the app,\r\n * passed database URL and a custom auth implementation.\r\n *\r\n * @param app - A valid FirebaseApp-like object\r\n * @param url - A valid Firebase databaseURL\r\n * @param version - custom version e.g. firebase-admin version\r\n * @param customAuthImpl - custom auth implementation\r\n */\n\n\nfunction initStandalone(_a) {\n  var app = _a.app,\n      url = _a.url,\n      version = _a.version,\n      customAuthImpl = _a.customAuthImpl,\n      namespace = _a.namespace,\n      _b = _a.nodeAdmin,\n      nodeAdmin = _b === void 0 ? false : _b;\n  setSDKVersion(version);\n  /**\r\n   * ComponentContainer('database-standalone') is just a placeholder that doesn't perform\r\n   * any actual function.\r\n   */\n\n  var authProvider = new Provider('auth-internal', new ComponentContainer('database-standalone'));\n  authProvider.setComponent(new Component('auth-internal', function () {\n    return customAuthImpl;\n  }, \"PRIVATE\"\n  /* PRIVATE */\n  ));\n  return {\n    instance: new Database(repoManagerDatabaseFromApp(app, authProvider,\n    /* appCheckProvider= */\n    undefined, url, nodeAdmin), app),\n    namespace: namespace\n  };\n}\n\nvar INTERNAL = /*#__PURE__*/Object.freeze({\n  __proto__: null,\n  forceLongPolling: forceLongPolling,\n  forceWebSockets: forceWebSockets,\n  isWebSocketsAvailable: isWebSocketsAvailable,\n  setSecurityDebugCallback: setSecurityDebugCallback,\n  stats: stats,\n  statsIncrementCounter: statsIncrementCounter,\n  dataUpdateCount: dataUpdateCount,\n  interceptServerData: interceptServerData,\n  initStandalone: initStandalone\n});\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\nvar DataConnection = PersistentConnection; // eslint-disable-next-line @typescript-eslint/no-explicit-any\n\nPersistentConnection.prototype.simpleListen = function (pathString, onComplete) {\n  this.sendRequest('q', {\n    p: pathString\n  }, onComplete);\n}; // eslint-disable-next-line @typescript-eslint/no-explicit-any\n\n\nPersistentConnection.prototype.echo = function (data, onEcho) {\n  this.sendRequest('echo', {\n    d: data\n  }, onEcho);\n}; // RealTimeConnection properties that we use in tests.\n\n\nvar RealTimeConnection = Connection;\n\nvar hijackHash = function (newHash) {\n  var oldPut = PersistentConnection.prototype.put;\n\n  PersistentConnection.prototype.put = function (pathString, data, onComplete, hash) {\n    if (hash !== undefined) {\n      hash = newHash();\n    }\n\n    oldPut.call(this, pathString, data, onComplete, hash);\n  };\n\n  return function () {\n    PersistentConnection.prototype.put = oldPut;\n  };\n};\n\nvar ConnectionTarget = RepoInfo;\n\nvar queryIdentifier = function (query) {\n  return query._delegate._queryIdentifier;\n};\n/**\r\n * Forces the RepoManager to create Repos that use ReadonlyRestClient instead of PersistentConnection.\r\n */\n\n\nvar forceRestClient = function (forceRestClient) {\n  repoManagerForceRestClient(forceRestClient);\n};\n\nvar TEST_ACCESS = /*#__PURE__*/Object.freeze({\n  __proto__: null,\n  DataConnection: DataConnection,\n  RealTimeConnection: RealTimeConnection,\n  hijackHash: hijackHash,\n  ConnectionTarget: ConnectionTarget,\n  queryIdentifier: queryIdentifier,\n  forceRestClient: forceRestClient\n});\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\nvar ServerValue = Database.ServerValue;\n\nfunction registerDatabase(instance) {\n  // set SDK_VERSION\n  setSDKVersion(instance.SDK_VERSION); // Register the Database Service with the 'firebase' namespace.\n\n  var namespace = instance.INTERNAL.registerComponent(new Component('database', function (container, _a) {\n    var url = _a.instanceIdentifier;\n    /* Dependencies */\n    // getImmediate for FirebaseApp will always succeed\n\n    var app = container.getProvider('app').getImmediate();\n    var authProvider = container.getProvider('auth-internal');\n    var appCheckProvider = container.getProvider('app-check-internal');\n    return new Database(repoManagerDatabaseFromApp(app, authProvider, appCheckProvider, url), app);\n  }, \"PUBLIC\"\n  /* PUBLIC */\n  ).setServiceProps( // firebase.database namespace properties\n  {\n    Reference: Reference,\n    Query: Query,\n    Database: Database,\n    DataSnapshot: DataSnapshot,\n    enableLogging: enableLogging,\n    INTERNAL: INTERNAL,\n    ServerValue: ServerValue,\n    TEST_ACCESS: TEST_ACCESS\n  }).setMultipleInstances(true));\n  instance.registerVersion(name, version);\n\n  if (isNodeSdk()) {\n    module.exports = namespace;\n  }\n}\n\nregisterDatabase(firebase);\nexport { DataSnapshot, Database, OnDisconnect, Query, Reference, ServerValue, enableLogging, registerDatabase };","map":{"version":3,"mappings":"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","names":["SDK_VERSION","setSDKVersion","version","domStorage_","DOMStorageWrapper","key","value","removeItem","prefixedName_","setItem","stringify","storedVal","getItem","jsonEval","name","prefix_","toString","MemoryStorage","cache_","contains","createStoragefor","domStorageName","window","domStorage","e","PersistentStorage","SessionStorage","logClient","Logger","LUIDGenerator","id","sha1","str","utf8Bytes","stringToByteArray","Sha1","update","sha1Bytes","digest","base64","encodeByteArray","buildLogMessage_","varArgs","message","i","length","arg","Array","isArray","apply","logger","firstLog_","enableLogging","logger_","persistent","assert","logLevel","LogLevel","VERBOSE","log","bind","set","remove","get","logWrapper","prefix","__spreadArray","__read","error","fatal","Error","warn","warnIfPageIsSecure","location","protocol","indexOf","isInvalidJSONNumber","data","Number","POSITIVE_INFINITY","NEGATIVE_INFINITY","executeWhenDOMReady","fn","isNodeSdk","document","readyState","called_1","wrappedFn_1","body","setTimeout","Math","floor","addEventListener","attachEvent","MIN_NAME","MAX_NAME","nameCompare","a","b","aAsInt","tryParseInt","bAsInt","stringCompare","requireKey","obj","ObjectToUniqueKey","keys","k","push","sort","splitStringBySize","segsize","len","dataSegs","c","substring","each","hasOwnProperty","doubleToIEEE754String","v","ebits","fbits","bias","s","f","ln","Infinity","abs","pow","min","LN2","round","bits","reverse","join","hexByteString","hexByte","parseInt","substr","toLowerCase","isChromeExtensionContentScript","test","href","isWindowsStoreApp","Windows","UI","errorForServerCode","code","query","reason","_path","toUpperCase","INTEGER_REGEXP_","RegExp","INTEGER_32_MIN","INTEGER_32_MAX","intVal","exceptionGuard","stack","beingCrawled","userAgent","search","setTimeoutNonBlocking","time","timeout","appName_","appCheckProvider","appCheck","getImmediate","optional","then","_this","AppCheckTokenProvider","forceRefresh","Promise","resolve","reject","getToken","listener","_a","addTokenListener","firebaseOptions_","authProvider_","auth_","onInit","auth","FirebaseAuthTokenProvider","catch","addAuthTokenListener","removeAuthTokenListener","errorMessage","accessToken","EmulatorTokenProvider","PROTOCOL_VERSION","VERSION_PARAM","TRANSPORT_SESSION_PARAM","REFERER_PARAM","FORGE_REF","FORGE_DOMAIN_RE","LAST_SESSION_PARAM","APPLICATION_ID_PARAM","APP_CHECK_TOKEN_PARAM","WEBSOCKET","LONG_POLLING","host","secure","namespace","webSocketOnly","nodeAdmin","persistenceKey","includeNamespaceInQueryParams","_host","_domain","internalHost","RepoInfo","Object","newHost","isCacheableHost","toURLString","repoInfoNeedsQueryParam","repoInfo","isCustomHost","repoInfoConnectionURL","type","params","connURL","pairs","StatsCollection","amount","counters_","deepCopy","collections","reporters","statsManagerGetCollection","hashString","statsManagerGetOrCreateReporter","creatorFunction","onMessage_","PacketReceiver","responseNum","callback","closeAfterResponse","onClose","currentResponseNum","requestNum","pendingResponses","toProcess","this_1","FIREBASE_LONGPOLL_START_PARAM","FIREBASE_LONGPOLL_CLOSE_COMMAND","FIREBASE_LONGPOLL_COMMAND_CB_NAME","FIREBASE_LONGPOLL_DATA_CB_NAME","FIREBASE_LONGPOLL_ID_PARAM","FIREBASE_LONGPOLL_PW_PARAM","FIREBASE_LONGPOLL_SERIAL_PARAM","FIREBASE_LONGPOLL_CALLBACK_ID_PARAM","FIREBASE_LONGPOLL_SEGMENT_NUM_PARAM","FIREBASE_LONGPOLL_SEGMENTS_IN_PACKET","FIREBASE_LONGPOLL_DATA_PARAM","FIREBASE_LONGPOLL_DISCONN_FRAME_REQUEST_PARAM","MAX_URL_DATA_SIZE","SEG_HEADER_SIZE","MAX_PAYLOAD_SIZE","KEEPALIVE_REQUEST_INTERVAL","LP_CONNECT_TIMEOUT","connId","applicationId","appCheckToken","authToken","transportSessionId","lastSessionId","log_","stats_","urlFn","BrowserPollConnection","onMessage","onDisconnect","curSegmentNum","onDisconnect_","myPacketOrderer","isClosed_","connectTimeoutTimer_","onClosed_","scriptTagHolder","FirebaseIFrameScriptHolder","args","command","arg1","arg2","incrementIncomingBytes_","clearTimeout","everConnected_","password","sendNewPolls","closeAfter","pN","handleResponse","urlParams","random","uniqueCallbackIdentifier","hostname","connectURL","addTag","startLongPoll","addDisconnectPingFrame","forceAllow_","forceDisallow_","createElement","close","myDisconnFrame","removeChild","shutdown_","dataStr","bytesSent","incrementCounter","base64data","base64Encode","enqueueSegment","pw","src","style","display","appendChild","bytesReceived","commandCB","onMessageCB","Set","myIFrame","createIFrame_","script","currentDomain","domain","iframeContents","doc","open","write","iframe","contentWindow","contentDocument","alive","innerHTML","myID","myPW","newRequest_","outstandingRequests","size","pendingSegs","currentSerial","theURL","curDataString","nextSeg","d","theSeg","shift","seg","ts","addLongPollTag_","segnum","totalsegs","url","serial","add","doNewRequest","delete","keepaliveTimeout","readyStateCB","loadCB","doNodeLongPoll","newScript_1","async","onload","onreadystatechange","rstate","parentNode","onerror","WEBSOCKET_MAX_FRAME_SIZE","WEBSOCKET_KEEPALIVE_INTERVAL","WebSocketImpl","MozWebSocket","WebSocket","WebSocketConnection","connectionURL_","device","options","headers","process","platform","env","proxy","origin","mySock","onopen","onclose","onmessage","handleIncomingFrame","m","isOldAndroid","navigator","oldAndroidRegex","oldAndroidMatch","match","parseFloat","isInMemoryStorage","frames","totalFrames","fullMess","jsonMess","frameCount","isNaN","handleNewFrameCount_","mess","resetKeepAlive","appendFrame_","remainingData","extractFrameCount_","sendString_","String","keepaliveTimer","clearInterval","setInterval","send","initTransports_","TransportManager","isWebSocketsAvailable","isSkipPollConnection","previouslyFailed","transports_","transports","ALL_TRANSPORTS","_c","transport","UPGRADE_TIMEOUT","DELAY_BEFORE_SENDING_EXTRA_REQUESTS","BYTES_SENT_HEALTHY_OVERRIDE","BYTES_RECEIVED_HEALTHY_OVERRIDE","MESSAGE_TYPE","MESSAGE_DATA","CONTROL_SHUTDOWN","CONTROL_RESET","CONTROL_ERROR","CONTROL_PONG","SWITCH_ACK","END_TRANSMISSION","PING","SERVER_HELLO","repoInfo_","applicationId_","appCheckToken_","authToken_","onReady_","onKill_","transportManager_","start_","Connection","conn","initialTransport","conn_","nextTransportId_","primaryResponsesRequired_","onMessageReceived","connReceiver_","onConnectionLost","disconnReceiver_","tx_","rx_","secondaryConn_","isHealthy_","healthyTimeoutMS","healthyTimeout_","markConnectionHealthy","connectionCount","onConnectionLost_","everConnected","onSecondaryConnectionLost_","state_","onPrimaryMessageReceived_","onSecondaryMessageReceived_","dataMsg","msg","t","sendData_","controlData","cmd","upgradeIfSecondaryHealthy_","secondaryResponsesRequired_","parsedData","layer","onSecondaryControl_","pendingDataMessages","proceedWithUpgrade_","start","tryCleanupConnection","onControl_","onDataMessage_","onPrimaryResponse_","payload","onHandshake_","onConnectionShutdown_","onReset_","sendPingOnPrimaryIfNecessary_","handshake","timestamp","h","sessionId","onConnectionEstablished_","tryStartUpgrade_","upgradeTransport","startUpgrade_","closeConnections_","ServerActions","pathString","onComplete","hash","token","stats","allowedEvents_","EventEmitter","eventType","listeners_","listeners","context","validateEventType_","eventData","getInitialEvent","splice","find","et","__extends","_super","isMobileCordova","online_","trigger","OnlineMonitor","MAX_PATH_DEPTH","MAX_PATH_LENGTH_BYTES","pathOrString","pieceNum","pieces_","split","copyTo","pieceNum_","Path","newEmptyPath","pathGetFront","path","pathGetLength","pathPopFront","pathGetBack","pathToUrlEncodedString","encodeURIComponent","pathSlice","begin","slice","pathParent","pieces","pathChild","childPathObj","childPieces","pathIsEmpty","newRelativePath","outerPath","innerPath","outer","inner","pathCompare","left","right","leftKeys","rightKeys","cmp","pathEquals","other","j","pathContains","errorPrefix_","parts_","byteLength_","max","stringLength","validationPathCheckValid","validationPathPush","validationPath","child","validationPathPop","last","pop","validationPathToErrorString","hidden","visibilityChange","visible_","visible","VisibilityMonitor","RECONNECT_MIN_DELAY","RECONNECT_MAX_DELAY_DEFAULT","GET_CONNECT_TIMEOUT","RECONNECT_MAX_DELAY_FOR_ADMINS","RECONNECT_DELAY_MULTIPLIER","RECONNECT_DELAY_RESET_TIMEOUT","SERVER_KILL_INTERRUPT_REASON","INVALID_TOKEN_THRESHOLD","onDataUpdate_","onConnectStatus_","onServerInfoUpdate_","authTokenProvider_","appCheckTokenProvider_","authOverride_","PersistentConnection","nextPersistentConnectionId_","Map","getInstance","on","onVisible_","onOnline_","action","onResponse","curReqNum","requestNumber_","r","connected_","realtime_","sendRequest","requestCBHash_","initConnection_","deferred","Deferred","request","p","q","_queryObject","outstandingGet","outstandingGets_","outstandingGetCount_","index","undefined","sendGet_","promise","currentHashFn","tag","queryId","_queryIdentifier","listens","has","_queryParams","isDefault","loadsAllData","listenSpec","hashFn","sendListen_","req","status","warnOnListenWarnings_","currentListenSpec","removeListen_","warnings","safeGet","indexSpec","getIndex","indexPath","tryAuth","reduceReconnectDelayIfAdminCredential_","credential","isFirebaseSecret","isAdmin","maxReconnectDelay_","tryAppCheck","token_1","authMethod","isValidFormat","requestData","cred","res","invalidAuthTokenCount_","onAuthRevoked_","invalidAppCheckTokenCount_","onAppCheckRevoked_","listen","sendUnlisten_","queryObj","sendOnDisconnect_","onDisconnectRequestQueue_","response","putInternal","outstandingPuts_","outstandingPutCount_","sendPut_","queued","result","errorReason","reqNum","onDataPush_","onListenRevoked_","onSecurityDebugPacket_","lastConnectionEstablishedTime_","Date","getTime","handleTimestamp_","firstConnection_","sendConnectStats_","restoreState_","establishConnectionTimer_","establishConnection_","scheduleConnect_","reconnectDelay_","online","cancelSentTransactions_","shouldReconnect_","lastConnectionAttemptTime_","timeSinceLastConnectSucceeded","timeSinceLastConnectAttempt","reconnectDelay","onDataMessage","onReady","onDisconnect_1","onRealtimeDisconnect_","nextConnectionId_","canceled_1","connection_1","closeFn","sendRequestFn","forceTokenRefresh_","all","_b","interrupt","error_1","interruptReasons_","isEmpty","delta","serverTimeOffset","put","map","normalizedPathString","statusCode","explanation","notifyForInvalidToken","securityDebugCallback_","console","replace","values","_d","queries","_f","clientName","isReactNative","reportStats","currentlyOnline","node","NamedNode","Index","compare","oldNode","newNode","oldWrapped","newWrapped","MIN","__EMPTY_NODE","KeyIndex","val","assertionError","indexValue","KEY_INDEX","startKey","comparator","isReverse_","resultGenerator_","nodeStack_","SortedMapIterator","color","LLRBNode","RED","SortedMap","EMPTY_NODE","count","inorderTraversal","reverseTraversal","min_","maxKey","n","copy","insert","fixUp_","isRed_","moveRedLeft_","removeMin_","smallest","rotateRight_","moveRedRight_","rotateLeft_","colorFlip_","nl","nr","blackDepth","check_","LLRBEmptyNode","comparator_","root_","BLACK","rightParent","minKey","resultGenerator","NAME_ONLY_COMPARATOR","NAME_COMPARATOR","MAX_NODE","setMaxNode","priorityHashText","priority","validatePriorityNode","priorityNode","isLeafNode","getPriority","__childrenNodeConstructor","value_","priorityNode_","LeafNode","newPriorityNode","childName","childNode","newChildNode","updatePriority","updateImmediateChild","front","updateChild","exportFormat","getValue","lazyHash_","toHash","compareToLeafNode_","otherLeaf","otherLeafType","thisLeafType","otherIndex","VALUE_TYPE_ORDER","thisIndex","equals","nodeFromJSON","setNodeFromJSON","PriorityIndex","aPriority","bPriority","indexCmp","compareTo","PRIORITY_INDEX","LOG_2","logBase2","num","bitMask","current_","mask","bits_","Base12Num","buildChildSet","childList","keyFn","mapSortFn","buildBalancedTree","low","high","namedNode","middle","buildFrom12Array","base12","root","buildPennant","chunkSize","childTree","attachPennant","pennant","isOne","nextBitIsOne","_defaultIndexMap","fallbackObject","indexes_","indexSet_","IndexMap","indexKey","sortedMap","indexDefinition","existingChildren","sawIndexedValue","iter","getIterator","Wrap","next","getNext","isDefinedOn","newIndex","getCompare","indexName","newIndexSet","newIndexes","indexedChildren","existingSnap","newChildren","children_","indexMap_","ChildrenNode","Default","getImmediateChild","getChild","newIndexMap","removeFromIndexes","addToIndexes","newPriority","newImmediateChild","numKeys","allIntegerKeys","forEachChild","array","toHash_1","childHash","idx","resolveIndex_","predecessor","getPredecessorKey","getFirstChildName","getLastChildName","wrappedNode","getIteratorFrom","minPost","startPost","iterator","peek","getReverseIteratorFrom","maxPost","endPost","hasIndex","addIndex","otherChildrenNode","thisIter","otherIter","thisCurrent","otherCurrent","MaxNode","defineProperties","MAX","setPriorityMaxNode","USE_HINZE","json","jsonLeaf","children_1","childrenHavePriority_1","hinzeJsonObj","childSet","sortedChildSet","node_1","childData","indexPath_","PathIndex","snap","aChild","extractChild","bChild","valueNode","ValueIndex","VALUE_INDEX","PUSH_CHARS","MIN_PUSH_CHAR","MAX_PUSH_CHAR","MAX_KEY_LEN","nextPushId","lastPushTime","lastRandChars","now","duplicateTime","timeStampChars","charAt","successor","keyAsInt","i_1","source","sourcePlusOne","repeat","changeValue","snapshotNode","changeChildAdded","changeChildRemoved","changeChildChanged","oldSnap","changeChildMoved","index_","IndexedFilter","newChild","affectedPath","optChangeAccumulator","isIndexed","oldChild","hasChild","trackChildChange","withIndex","newSnap","indexedFilter_","startPost_","RangedFilter","getStartPost_","endPost_","getEndPost_","getStartPost","getEndPost","matches","filtered","self","updateFullNode","hasStart","startName","getIndexStartName","makePost","getIndexStartValue","hasEnd","endName","getIndexEndName","getIndexEndValue","rangedFilter_","limit_","getLimit","reverse_","isViewFromLeft","LimitedFilter","numChildren","getIndexedFilter","fullLimitUpdateChild_","hasNext","inRange","getReverseIterator","indexCompare_1","foundStartPost","childKey","childSnap","changeAccumulator","indexCmp_1","oldEventCache","newChildNamedNode","windowBoundary","getFirstChild","getLastChild","oldChildSnap","nextChild","getChildAfterChild","compareNext","remainsInWindow","newEventCache","nextChildInRange","QueryParams","startSet_","startAfterSet_","endBeforeSet_","viewFrom_","indexStartValue_","startNameSet_","indexStartName_","endSet_","indexEndValue_","endNameSet_","indexEndName_","limitSet_","queryParamsGetNodeFilter","queryParams","hasLimit","queryParamsLimitToFirst","newLimit","newParams","queryParamsLimitToLast","queryParamsStartAt","queryParamsStartAfter","queryParamsEndAt","queryParamsEndBefore","queryParamsOrderBy","queryParamsToRestQueryStringParameters","qs","orderBy","queryParamsGetQueryObject","viewFrom","ReadonlyRestClient","listenId","getListenId_","thisListen","listens_","queryStringParameters","restRequest_","status_1","querystring","xhr","XMLHttpRequest","responseText","SnapshotHolder","rootNode_","newSnapshotNode","newSparseSnapshotTree","children","sparseSnapshotTreeRemember","sparseSnapshotTree","clear","sparseSnapshotTreeForget","tree","safeToRemove","sparseSnapshotTreeForEachTree","prefixPath","func","sparseSnapshotTreeForEachChild","forEach","collection_","StatsListener","newStats","last_","stat","FIRST_STATS_MIN_TIME","FIRST_STATS_MAX_TIME","REPORT_STATS_INTERVAL","collection","server_","statsListener_","reportStats_","StatsReporter","reportedStats","haveStatsToReport","statsToReport_","statsReporterIncludeStat","reporter","OperationType","newOperationSourceUser","fromUser","fromServer","tagged","newOperationSourceServer","newOperationSourceServerTaggedQuery","affectedTree","revert","ACK_USER_WRITE","AckUserWrite","subtree","LISTEN_COMPLETE","ListenComplete","OVERWRITE","Overwrite","MERGE","Merge","node_","fullyInitialized_","filtered_","CacheNode","isFullyInitialized","isCompleteForChild","query_","eventGeneratorGenerateEventsForChanges","eventGenerator","changes","eventCache","eventRegistrations","events","moves","change","indexedValueChanged","eventGeneratorGenerateEventsForType","registrations","filteredChanges","filter","materializedChange","eventGeneratorMaterializeSingleChange","registration","respondsTo","createEvent","prevName","getPredecessorChildName","eventGeneratorCompareChanges","aWrapped","bWrapped","newViewCache","serverCache","viewCacheUpdateEventSnap","viewCache","eventSnap","complete","viewCacheUpdateServerSnap","serverSnap","viewCacheGetCompleteEventSnap","getNode","viewCacheGetCompleteServerSnap","emptyChildrenSingleton","EmptyChildren","ImmutableTree","childPath","relativePath","predicate","childExistingPathAndValue","findRootMostMatchingPathAndValue","fullPath","toSet","newTree","setTree","fold_","pathSoFar","accum","findOnPath_","pathToFollow","foreachOnPath_","currentRelativePath","foreach_","writeTree_","CompoundWrite","compoundWriteAddWrite","compoundWrite","rootmost","findRootMostValueAndPath","rootMostPath","newWriteTree","compoundWriteAddWrites","updates","newWrite","compoundWriteRemoveWrite","empty","compoundWriteHasCompleteWrite","compoundWriteGetCompleteNode","compoundWriteGetCompleteChildren","compoundWriteChildCompoundWrite","shadowingNode","compoundWriteIsEmpty","compoundWriteApply","applySubtreeWrite","writeTree","priorityWrite_1","writeTreeChildWrites","newWriteTreeRef","writeTreeAddOverwrite","writeId","lastWriteId","allWrites","visibleWrites","writeTreeAddMerge","changedChildren","writeTreeGetWrite","record","writeTreeRemoveWrite","findIndex","writeToRemove","removedWriteWasVisible","removedWriteOverlapsWithOtherWrites","currentWrite","writeTreeRecordContainsPath_","writeTreeResetTree_","writeRecord","writeTreeLayerTree_","writeTreeDefaultFilter_","writes","treeRoot","writePath","deepNode","writeTreeCalcCompleteEventCache","treePath","completeServerCache","writeIdsToExclude","includeHiddenWrites","subMerge","layeredCache","merge","mergeAtPath","writeTreeCalcCompleteEventChildren","completeServerChildren","completeChildren","topLevelSet","merge_1","writeTreeCalcEventCacheAfterServerOverwrite","existingEventSnap","existingServerSnap","childMerge","writeTreeCalcCompleteChild","writeTreeShadowingWrite","writeTreeCalcIndexedSlice","completeServerData","toIterate","nodes","writeTreeRefCalcCompleteEventCache","writeTreeRef","writeTreeRefCalcCompleteEventChildren","writeTreeRefCalcEventCacheAfterServerOverwrite","writeTreeRefShadowingWrite","writeTreeRefCalcIndexedSlice","writeTreeRefCalcCompleteChild","existingServerCache","writeTreeRefChild","ChildChangeAccumulator","oldChange","changeMap","oldType","from","NoCompleteChildSource_","NO_COMPLETE_CHILD_SOURCE","writes_","viewCache_","optCompleteServerCache_","WriteTreeCompleteChildSource","serverNode","newViewProcessor","viewProcessorAssertIndexed","viewProcessor","viewProcessorApplyOperation","oldViewCache","operation","writesCache","completeCache","accumulator","filterServerNode","overwrite","viewProcessorApplyUserOverwrite","isFiltered","viewProcessorApplyServerOverwrite","viewProcessorApplyUserMerge","viewProcessorApplyServerMerge","ackUserWrite","viewProcessorAckUserWrite","viewProcessorRevertUserWrite","viewProcessorListenComplete","getChanges","viewProcessorMaybeAddValueEvent","isLeafOrEmpty","oldCompleteSnap","viewProcessorGenerateEventCacheAfterServerEvent","changePath","oldEventSnap","completeEventChildren","completeNode","oldEventNode","updatedPriority","childChangePath","newEventChild","eventChildUpdate","filtersNodes","changedSnap","oldServerSnap","newServerCache","serverFilter","newServerNode","isCompleteForPath","getCompleteChild","newEventSnap","viewProcessorCacheHasChild","curViewCache","foreach","viewProcessorApplyMerge","viewMergeTree","serverChild","childMergeTree","isUnknownDeepMerge","ackPath","changedChildren_1","changedChildren_2","mergePath","serverCachePath","oldServerNode","serverChildren","initialViewCache","indexFilter","processor_","initialServerCache","initialEventCache","eventGenerator_","EventGenerator","View","viewGetServerCache","view","viewGetCompleteNode","viewGetCompleteServerCache","cache","viewIsEmpty","eventRegistrations_","viewAddEventRegistration","eventRegistration","viewRemoveEventRegistration","cancelError","cancelEvents","path_1","maybeEvent","createCancelEvent","remaining","existing","hasAnyCallback","concat","viewApplyOperation","viewGenerateEventsForChanges_","viewGetInitialEvents","initialChanges","eventNode","referenceConstructor","syncPointSetReferenceConstructor","syncPointGetReferenceConstructor","syncPointIsEmpty","syncPoint","views","syncPointApplyOperation","optCompleteServerCache","syncPointGetView","serverCacheComplete","eventCacheComplete","syncPointAddEventRegistration","syncPointRemoveEventRegistration","removed","hadCompleteView","syncPointHasCompleteView","entries","viewQueryId","_repo","syncPointGetQueryViews","syncPointGetCompleteServerCache","syncPointViewForQuery","syncPointGetCompleteView","syncPointViewExistsForQuery","syncTreeSetReferenceConstructor","syncTreeGetReferenceConstructor","syncTreeNextQueryTag_","listenProvider_","syncTreeApplyUserOverwrite","syncTree","newData","pendingWriteTree_","syncTreeApplyOperationToSyncPoints_","syncTreeApplyUserMerge","changeTree","fromObject","syncTreeAckUserWrite","needToReevaluate","affectedTree_1","syncTreeApplyServerOverwrite","syncTreeApplyServerMerge","syncTreeApplyListenComplete","syncTreeApplyTaggedListenComplete","queryKey","syncTreeQueryKeyForTag_","syncTreeParseQueryKey_","queryPath","op","syncTreeApplyTaggedOperation_","syncTreeRemoveEventRegistration","maybeSyncPoint","syncPointTree_","removedAndEvents","removingDefault","covered","findOnPath","parentSyncPoint","newViews","syncTreeCollectDistinctViewsForSubTree_","newQuery","syncTreeCreateListenerForView_","startListening","syncTreeQueryForListening_","syncTreeTagForQuery_","defaultTag","stopListening","queryToRemove","tagToRemove","queryToTagMap","syncTreeMakeQueryKey_","syncTreeRemoveTags_","syncTreeApplyTaggedQueryOverwrite","syncTreeApplyTaggedQueryMerge","syncTreeAddEventRegistration","foundAncestorDefaultView","foreachOnPath","pathToSyncPoint","sp","SyncPoint","foreachChild","childSyncPoint","viewAlreadyExists","syncTreeGetNextQueryTag_","tagToQueryMap","syncTreeSetupListener_","syncTreeCalcCompleteEventCache","includeHiddenSets","syncTreeGetServerValue","serverCacheNode","syncTreeApplyOperationHelper_","syncPointTree","syncTreeApplyOperationDescendantsHelper_","childOperation","operationForChild","childServerCache","childWritesCache","splitIndex","fold","maybeChildSyncPoint","childMap","completeView","views_1","_key","childViews","removedQuery","removedQueryKey","removedQueryTag","queriesToStop","queries_1","childQueries","queryToStop","ExistingValueProvider","syncTree_","path_","DeferredValueProvider","generateWithValues","resolveDeferredLeafValue","existingVal","serverValues","resolveScalarDeferredValue","resolveComplexDeferredValue","JSON","unused","existingNode","leaf","resolveDeferredValueTree","resolveDeferredValue","resolveDeferredValueSnapshot","rawPri","leafNode","childrenNode","parent","childCount","treeSubTree","pathObj","Tree","treeGetValue","treeSetValue","treeUpdateParents","treeHasChildren","treeIsEmpty","treeForEachChild","treeForEachDescendant","includeSelf","childrenFirst","treeForEachAncestor","treeGetPath","treeUpdateChild","childEmpty","childExists","INVALID_KEY_REGEX_","INVALID_PATH_REGEX_","MAX_LEAF_SIZE_","isValidKey","isValidPathString","isValidRootPathString","isValidPriority","validateFirebaseDataArg","fnName","validateFirebaseData","errorPrefixFxn","errorPrefix","ValidationPath","hasDotValue_1","hasActualChild_1","validateFirebaseMergePaths","mergePaths","curPath","prevPath","validateFirebaseMergeDataArg","validatePriority","validateEventType","validateKey","argumentName","validatePathString","validateRootPathString","validateWritablePath","validateUrl","parsedUrl","validateBoolean","bool","eventQueueQueueEvents","eventQueue","eventDataList","currList","getPath","eventLists_","eventQueueRaiseEventsAtPath","eventQueueRaiseQueuedEventsMatchingPredicate","eventPath","eventQueueRaiseEventsForChangedPath","changedPath","recursionDepth_","sentAll","eventList","eventListRaise","eventFn","getEventRunner","INTERRUPT_REASON","MAX_TRANSACTION_RETRIES","forceRestClient_","appCheckProvider_","EventQueue","Repo","repoStart","repo","appId","authOverride","isMerge","repoOnDataUpdate","persistentConnection_","connectStatus","repoOnConnectStatus","repoOnServerInfoUpdate","addTokenChangeListener","refreshAuthToken","refreshAppCheckToken","statsReporter_","infoData_","infoSyncTree_","SyncTree","infoEvents","repoUpdateInfo","serverSyncTree_","eventQueue_","unlisten","repoServerTime","offsetNode","offset","repoGenerateServerValues","dataUpdateCount","interceptServerDataCallback_","taggedChildren","raw","taggedSnap","repoRerunTransactions","repoInterceptServerData","repoRunOnDisconnectEvents","updateSnapshot","repoGetNextWriteId","nextWriteId_","repoGetValue","cached","repoLog","err","repoSetWithPriority","newVal","newNodeUnresolved","success","clearEvents","repoCallOnCompleteCallback","repoAbortTransactions","repoUpdate","childrenToMerge","changedKey","changedValue","writeId_1","resolvedOnDisconnectTree","resolved","repoOnDisconnectCancel","onDisconnectCancel","repoOnDisconnectSet","onDisconnectPut","repoOnDisconnectSetWithPriority","repoOnDisconnectUpdate","onDisconnectMerge","repoAddEventCallbackForQuery","repoRemoveEventCallbackForQuery","repoInterrupt","repoResume","resume","repoStats","showDelta","longestName","reduce","previousValue","currentValue","paddedStat","repoStatsIncrementCounter","metric","repoStartTransaction","transactionUpdate","unwatcher","applyLocally","transaction","order","retryCount","abortReason","currentWriteId","currentInputSnapshot","currentOutputSnapshotRaw","currentOutputSnapshotResolved","currentState","repoGetLatestState","queueNode","transactionQueueTree_","nodeQueue","priorityForNode","currentNode","repoSendReadyTransactions","excludeSets","repoPruneCompletedTransactionsBelowNode","queue","repoBuildTransactionQueue","allRun","every","repoSendTransactionQueue","setsToIgnore","txn","latestState","snapToSend","latestHash","dataToSend","pathToSend","callbacks","rootMostTransactionNode","repoGetAncestorTransactionNode","repoRerunTransactionQueue","txnsToRerun","abortTransaction","newDataNode","hasExplicitPriority","oldWriteId","newNodeResolved","transactionNode","transactionQueue","repoAggregateTransactionQueuesForNode","to","repoAbortTransactionsOnNode","lastSent","decodePath","pathStringDecoded","piece","decodeURIComponent","decodeQuery","queryString","results","segment","kv","parseRepoInfo","dataURL","parseDatabaseURL","scheme","subdomain","port","colonInd","slashInd","questionMarkInd","hostWithoutPort","dotInd","snapshot","DataEvent","ref","exportVal","CancelEvent","snapshotCallback","cancelCallback","CallbackContext","expDataSnapshot","previousChildName","call","hasCancelCallback","userCallback","OnDisconnect","wrapCallback","_orderByCalled","QueryImpl","ReferenceImpl","getModularInstance","sameRepo","samePath","sameQueryIdentifier","validateNoPreviousOrderByCall","validateQueryEndpoints","startNode","endNode","tooManyArgsError","wrongArgTypeError","validateLimit","hasAnchoredLimit","parentPath","_node","_index","DataSnapshot","childRef","db","_checkNotDeleted","_root","refFromURL","parsedURL","thennablePushRef","pushRef","setPriority","setWithPriority","callbackContext","ValueEventRegistration","getEventType","onCancel","onValue","ChildEventRegistration","eventToCheck","cancelCallbackOrListenOptions","onlyOnce","userCallback_1","onceCallback","dataSnapshot","container","onChildAdded","onChildChanged","onChildMoved","onChildRemoved","off","expCallback","_value","QueryEndAtConstraint","QueryConstraint","endAt","QueryEndBeforeConstraint","endBefore","QueryStartAtConstraint","startAt","QueryStartAfterConstraint","startAfter","_limit","QueryLimitToFirstConstraint","limitToFirst","limit","QueryLimitToLastConstraint","limitToLast","QueryOrderByChildConstraint","parsedPath","orderByChild","QueryOrderByKeyConstraint","orderByKey","QueryOrderByPriorityConstraint","orderByPriority","QueryOrderByValueConstraint","orderByValue","QueryEqualToValueConstraint","_apply","equalTo","queryConstraints","queryImpl","queryConstraints_1_1","constraint","FIREBASE_DATABASE_EMULATOR_HOST_VAR","repos","useRestClient","repoManagerApplyEmulatorSettings","tokenProvider","repoManagerDatabaseFromApp","app","authProvider","dbUrl","databaseURL","projectId","isEmulator","dbEmulatorHost","authTokenProvider","OWNER","repoManagerCreateRepo","Database","repoManagerDeleteRepo","appName","appRepos","repoManagerForceRestClient","forceRestClient","_repoInternal","_instanceStarted","_rootInternal","apiName","connectDatabaseEmulator","mockUserToken","createMockUserToken","goOffline","goOnline","SERVER_TIMESTAMP","serverTimestamp","increment","committed","TransactionResult","toJSON","runTransaction","promiseComplete","_delegate","validateArgCount","arguments","validateCallback","cancel","objectToMerge","newObjectToMerge","_database","exists","hasChildren","Reference","getRef","database","Query","cancelCallbackOrContext","ret","getCancelAndContextArgs_","valueCallback","expSnapshot","validateContextObject","failureCallbackOrContext","isEqual","cancelOrContext","_ReferenceImpl","_QueryImpl","transactionResult","expPromise","expRef","ExpOnDisconnect","getKey","getParent","getRoot","_delete","TIMESTAMP","forceLongPolling","forceDisallow","forceAllow","forceWebSockets","setSecurityDebugCallback","connection","statsIncrementCounter","interceptServerData","initStandalone","customAuthImpl","Provider","ComponentContainer","setComponent","Component","instance","_repoManagerDatabaseFromApp","DataConnection","prototype","simpleListen","echo","onEcho","RealTimeConnection","hijackHash","newHash","oldPut","ConnectionTarget","queryIdentifier","ServerValue","registerDatabase","INTERNAL","registerComponent","getProvider","setServiceProps","TEST_ACCESS","setMultipleInstances","registerVersion","module","exports","firebase"],"sources":["E:\\FYP\\HospitalAid\\Implementation\\Web App\\Website\\node_modules\\@firebase\\database\\src\\core\\version.ts","E:\\FYP\\HospitalAid\\Implementation\\Web App\\Website\\node_modules\\@firebase\\database\\src\\core\\storage\\DOMStorageWrapper.ts","E:\\FYP\\HospitalAid\\Implementation\\Web App\\Website\\node_modules\\@firebase\\database\\src\\core\\storage\\MemoryStorage.ts","E:\\FYP\\HospitalAid\\Implementation\\Web App\\Website\\node_modules\\@firebase\\database\\src\\core\\storage\\storage.ts","E:\\FYP\\HospitalAid\\Implementation\\Web App\\Website\\node_modules\\@firebase\\database\\src\\core\\util\\util.ts","E:\\FYP\\HospitalAid\\Implementation\\Web App\\Website\\node_modules\\@firebase\\database\\src\\core\\AppCheckTokenProvider.ts","E:\\FYP\\HospitalAid\\Implementation\\Web App\\Website\\node_modules\\@firebase\\database\\src\\core\\AuthTokenProvider.ts","E:\\FYP\\HospitalAid\\Implementation\\Web App\\Website\\node_modules\\@firebase\\database\\src\\realtime\\Constants.ts","E:\\FYP\\HospitalAid\\Implementation\\Web App\\Website\\node_modules\\@firebase\\database\\src\\core\\RepoInfo.ts","E:\\FYP\\HospitalAid\\Implementation\\Web App\\Website\\node_modules\\@firebase\\database\\src\\core\\stats\\StatsCollection.ts","E:\\FYP\\HospitalAid\\Implementation\\Web App\\Website\\node_modules\\@firebase\\database\\src\\core\\stats\\StatsManager.ts","E:\\FYP\\HospitalAid\\Implementation\\Web App\\Website\\node_modules\\@firebase\\database\\src\\realtime\\polling\\PacketReceiver.ts","E:\\FYP\\HospitalAid\\Implementation\\Web App\\Website\\node_modules\\@firebase\\database\\src\\realtime\\BrowserPollConnection.ts","E:\\FYP\\HospitalAid\\Implementation\\Web App\\Website\\node_modules\\@firebase\\database\\src\\realtime\\WebSocketConnection.ts","E:\\FYP\\HospitalAid\\Implementation\\Web App\\Website\\node_modules\\@firebase\\database\\src\\realtime\\TransportManager.ts","E:\\FYP\\HospitalAid\\Implementation\\Web App\\Website\\node_modules\\@firebase\\database\\src\\realtime\\Connection.ts","E:\\FYP\\HospitalAid\\Implementation\\Web App\\Website\\node_modules\\@firebase\\database\\src\\core\\ServerActions.ts","E:\\FYP\\HospitalAid\\Implementation\\Web App\\Website\\node_modules\\@firebase\\database\\src\\core\\util\\EventEmitter.ts","E:\\FYP\\HospitalAid\\Implementation\\Web App\\Website\\node_modules\\@firebase\\database\\src\\core\\util\\OnlineMonitor.ts","E:\\FYP\\HospitalAid\\Implementation\\Web App\\Website\\node_modules\\@firebase\\database\\src\\core\\util\\Path.ts","E:\\FYP\\HospitalAid\\Implementation\\Web App\\Website\\node_modules\\@firebase\\database\\src\\core\\util\\VisibilityMonitor.ts","E:\\FYP\\HospitalAid\\Implementation\\Web App\\Website\\node_modules\\@firebase\\database\\src\\core\\PersistentConnection.ts","E:\\FYP\\HospitalAid\\Implementation\\Web App\\Website\\node_modules\\@firebase\\database\\src\\core\\snap\\Node.ts","E:\\FYP\\HospitalAid\\Implementation\\Web App\\Website\\node_modules\\@firebase\\database\\src\\core\\snap\\indexes\\Index.ts","E:\\FYP\\HospitalAid\\Implementation\\Web App\\Website\\node_modules\\@firebase\\database\\src\\core\\snap\\indexes\\KeyIndex.ts","E:\\FYP\\HospitalAid\\Implementation\\Web App\\Website\\node_modules\\@firebase\\database\\src\\core\\util\\SortedMap.ts","E:\\FYP\\HospitalAid\\Implementation\\Web App\\Website\\node_modules\\@firebase\\database\\src\\core\\snap\\comparators.ts","E:\\FYP\\HospitalAid\\Implementation\\Web App\\Website\\node_modules\\@firebase\\database\\src\\core\\snap\\snap.ts","E:\\FYP\\HospitalAid\\Implementation\\Web App\\Website\\node_modules\\@firebase\\database\\src\\core\\snap\\LeafNode.ts","E:\\FYP\\HospitalAid\\Implementation\\Web App\\Website\\node_modules\\@firebase\\database\\src\\core\\snap\\indexes\\PriorityIndex.ts","E:\\FYP\\HospitalAid\\Implementation\\Web App\\Website\\node_modules\\@firebase\\database\\src\\core\\snap\\childSet.ts","E:\\FYP\\HospitalAid\\Implementation\\Web App\\Website\\node_modules\\@firebase\\database\\src\\core\\snap\\IndexMap.ts","E:\\FYP\\HospitalAid\\Implementation\\Web App\\Website\\node_modules\\@firebase\\database\\src\\core\\snap\\ChildrenNode.ts","E:\\FYP\\HospitalAid\\Implementation\\Web App\\Website\\node_modules\\@firebase\\database\\src\\core\\snap\\nodeFromJSON.ts","E:\\FYP\\HospitalAid\\Implementation\\Web App\\Website\\node_modules\\@firebase\\database\\src\\core\\snap\\indexes\\PathIndex.ts","E:\\FYP\\HospitalAid\\Implementation\\Web App\\Website\\node_modules\\@firebase\\database\\src\\core\\snap\\indexes\\ValueIndex.ts","E:\\FYP\\HospitalAid\\Implementation\\Web App\\Website\\node_modules\\@firebase\\database\\src\\core\\util\\NextPushId.ts","E:\\FYP\\HospitalAid\\Implementation\\Web App\\Website\\node_modules\\@firebase\\database\\src\\core\\view\\Change.ts","E:\\FYP\\HospitalAid\\Implementation\\Web App\\Website\\node_modules\\@firebase\\database\\src\\core\\view\\filter\\IndexedFilter.ts","E:\\FYP\\HospitalAid\\Implementation\\Web App\\Website\\node_modules\\@firebase\\database\\src\\core\\view\\filter\\RangedFilter.ts","E:\\FYP\\HospitalAid\\Implementation\\Web App\\Website\\node_modules\\@firebase\\database\\src\\core\\view\\filter\\LimitedFilter.ts","E:\\FYP\\HospitalAid\\Implementation\\Web App\\Website\\node_modules\\@firebase\\database\\src\\core\\view\\QueryParams.ts","E:\\FYP\\HospitalAid\\Implementation\\Web App\\Website\\node_modules\\@firebase\\database\\src\\core\\ReadonlyRestClient.ts","E:\\FYP\\HospitalAid\\Implementation\\Web App\\Website\\node_modules\\@firebase\\database\\src\\core\\SnapshotHolder.ts","E:\\FYP\\HospitalAid\\Implementation\\Web App\\Website\\node_modules\\@firebase\\database\\src\\core\\SparseSnapshotTree.ts","E:\\FYP\\HospitalAid\\Implementation\\Web App\\Website\\node_modules\\@firebase\\database\\src\\core\\stats\\StatsListener.ts","E:\\FYP\\HospitalAid\\Implementation\\Web App\\Website\\node_modules\\@firebase\\database\\src\\core\\stats\\StatsReporter.ts","E:\\FYP\\HospitalAid\\Implementation\\Web App\\Website\\node_modules\\@firebase\\database\\src\\core\\operation\\Operation.ts","E:\\FYP\\HospitalAid\\Implementation\\Web App\\Website\\node_modules\\@firebase\\database\\src\\core\\operation\\AckUserWrite.ts","E:\\FYP\\HospitalAid\\Implementation\\Web App\\Website\\node_modules\\@firebase\\database\\src\\core\\operation\\ListenComplete.ts","E:\\FYP\\HospitalAid\\Implementation\\Web App\\Website\\node_modules\\@firebase\\database\\src\\core\\operation\\Overwrite.ts","E:\\FYP\\HospitalAid\\Implementation\\Web App\\Website\\node_modules\\@firebase\\database\\src\\core\\operation\\Merge.ts","E:\\FYP\\HospitalAid\\Implementation\\Web App\\Website\\node_modules\\@firebase\\database\\src\\core\\view\\CacheNode.ts","E:\\FYP\\HospitalAid\\Implementation\\Web App\\Website\\node_modules\\@firebase\\database\\src\\core\\view\\EventGenerator.ts","E:\\FYP\\HospitalAid\\Implementation\\Web App\\Website\\node_modules\\@firebase\\database\\src\\core\\view\\ViewCache.ts","E:\\FYP\\HospitalAid\\Implementation\\Web App\\Website\\node_modules\\@firebase\\database\\src\\core\\util\\ImmutableTree.ts","E:\\FYP\\HospitalAid\\Implementation\\Web App\\Website\\node_modules\\@firebase\\database\\src\\core\\CompoundWrite.ts","E:\\FYP\\HospitalAid\\Implementation\\Web App\\Website\\node_modules\\@firebase\\database\\src\\core\\WriteTree.ts","E:\\FYP\\HospitalAid\\Implementation\\Web App\\Website\\node_modules\\@firebase\\database\\src\\core\\view\\ChildChangeAccumulator.ts","E:\\FYP\\HospitalAid\\Implementation\\Web App\\Website\\node_modules\\@firebase\\database\\src\\core\\view\\CompleteChildSource.ts","E:\\FYP\\HospitalAid\\Implementation\\Web App\\Website\\node_modules\\@firebase\\database\\src\\core\\view\\ViewProcessor.ts","E:\\FYP\\HospitalAid\\Implementation\\Web App\\Website\\node_modules\\@firebase\\database\\src\\core\\view\\View.ts","E:\\FYP\\HospitalAid\\Implementation\\Web App\\Website\\node_modules\\@firebase\\database\\src\\core\\SyncPoint.ts","E:\\FYP\\HospitalAid\\Implementation\\Web App\\Website\\node_modules\\@firebase\\database\\src\\core\\SyncTree.ts","E:\\FYP\\HospitalAid\\Implementation\\Web App\\Website\\node_modules\\@firebase\\database\\src\\core\\util\\ServerValues.ts","E:\\FYP\\HospitalAid\\Implementation\\Web App\\Website\\node_modules\\@firebase\\database\\src\\core\\util\\Tree.ts","E:\\FYP\\HospitalAid\\Implementation\\Web App\\Website\\node_modules\\@firebase\\database\\src\\core\\util\\validation.ts","E:\\FYP\\HospitalAid\\Implementation\\Web App\\Website\\node_modules\\@firebase\\database\\src\\core\\view\\EventQueue.ts","E:\\FYP\\HospitalAid\\Implementation\\Web App\\Website\\node_modules\\@firebase\\database\\src\\core\\Repo.ts","E:\\FYP\\HospitalAid\\Implementation\\Web App\\Website\\node_modules\\@firebase\\database\\src\\core\\util\\libs\\parser.ts","E:\\FYP\\HospitalAid\\Implementation\\Web App\\Website\\node_modules\\@firebase\\database\\src\\core\\view\\Event.ts","E:\\FYP\\HospitalAid\\Implementation\\Web App\\Website\\node_modules\\@firebase\\database\\src\\core\\view\\EventRegistration.ts","E:\\FYP\\HospitalAid\\Implementation\\Web App\\Website\\node_modules\\@firebase\\database\\src\\exp\\OnDisconnect.ts","E:\\FYP\\HospitalAid\\Implementation\\Web App\\Website\\node_modules\\@firebase\\database\\src\\exp\\Reference_impl.ts","E:\\FYP\\HospitalAid\\Implementation\\Web App\\Website\\node_modules\\@firebase\\database\\src\\exp\\Database.ts","E:\\FYP\\HospitalAid\\Implementation\\Web App\\Website\\node_modules\\@firebase\\database\\src\\exp\\ServerValue.ts","E:\\FYP\\HospitalAid\\Implementation\\Web App\\Website\\node_modules\\@firebase\\database\\src\\exp\\Transaction.ts","E:\\FYP\\HospitalAid\\Implementation\\Web App\\Website\\node_modules\\@firebase\\database\\src\\api\\onDisconnect.ts","E:\\FYP\\HospitalAid\\Implementation\\Web App\\Website\\node_modules\\@firebase\\database\\src\\api\\TransactionResult.ts","E:\\FYP\\HospitalAid\\Implementation\\Web App\\Website\\node_modules\\@firebase\\database\\src\\api\\Reference.ts","E:\\FYP\\HospitalAid\\Implementation\\Web App\\Website\\node_modules\\@firebase\\database\\src\\api\\Database.ts","E:\\FYP\\HospitalAid\\Implementation\\Web App\\Website\\node_modules\\@firebase\\database\\src\\api\\internal.ts","E:\\FYP\\HospitalAid\\Implementation\\Web App\\Website\\node_modules\\@firebase\\database\\src\\api\\test_access.ts","E:\\FYP\\HospitalAid\\Implementation\\Web App\\Website\\node_modules\\@firebase\\database\\index.ts"],"sourcesContent":["/**\n * @license\n * Copyright 2019 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/** The semver (www.semver.org) version of the SDK. */\nexport let SDK_VERSION = '';\n\n// SDK_VERSION should be set before any database instance is created\nexport function setSDKVersion(version: string): void {\n  SDK_VERSION = version;\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { jsonEval, stringify } from '@firebase/util';\n\n/**\n * Wraps a DOM Storage object and:\n * - automatically encode objects as JSON strings before storing them to allow us to store arbitrary types.\n * - prefixes names with \"firebase:\" to avoid collisions with app data.\n *\n * We automatically (see storage.js) create two such wrappers, one for sessionStorage,\n * and one for localStorage.\n *\n */\nexport class DOMStorageWrapper {\n  // Use a prefix to avoid collisions with other stuff saved by the app.\n  private prefix_ = 'firebase:';\n\n  /**\n   * @param domStorage_ - The underlying storage object (e.g. localStorage or sessionStorage)\n   */\n  constructor(private domStorage_: Storage) {}\n\n  /**\n   * @param key - The key to save the value under\n   * @param value - The value being stored, or null to remove the key.\n   */\n  set(key: string, value: unknown | null) {\n    if (value == null) {\n      this.domStorage_.removeItem(this.prefixedName_(key));\n    } else {\n      this.domStorage_.setItem(this.prefixedName_(key), stringify(value));\n    }\n  }\n\n  /**\n   * @returns The value that was stored under this key, or null\n   */\n  get(key: string): unknown {\n    const storedVal = this.domStorage_.getItem(this.prefixedName_(key));\n    if (storedVal == null) {\n      return null;\n    } else {\n      return jsonEval(storedVal);\n    }\n  }\n\n  remove(key: string) {\n    this.domStorage_.removeItem(this.prefixedName_(key));\n  }\n\n  isInMemoryStorage: boolean;\n\n  prefixedName_(name: string): string {\n    return this.prefix_ + name;\n  }\n\n  toString(): string {\n    return this.domStorage_.toString();\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { contains } from '@firebase/util';\n\n/**\n * An in-memory storage implementation that matches the API of DOMStorageWrapper\n * (TODO: create interface for both to implement).\n */\nexport class MemoryStorage {\n  private cache_: { [k: string]: unknown } = {};\n\n  set(key: string, value: unknown | null) {\n    if (value == null) {\n      delete this.cache_[key];\n    } else {\n      this.cache_[key] = value;\n    }\n  }\n\n  get(key: string): unknown {\n    if (contains(this.cache_, key)) {\n      return this.cache_[key];\n    }\n    return null;\n  }\n\n  remove(key: string) {\n    delete this.cache_[key];\n  }\n\n  isInMemoryStorage = true;\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { DOMStorageWrapper } from './DOMStorageWrapper';\nimport { MemoryStorage } from './MemoryStorage';\n\ndeclare const window: Window;\n\n/**\n * Helper to create a DOMStorageWrapper or else fall back to MemoryStorage.\n * TODO: Once MemoryStorage and DOMStorageWrapper have a shared interface this method annotation should change\n * to reflect this type\n *\n * @param domStorageName - Name of the underlying storage object\n *   (e.g. 'localStorage' or 'sessionStorage').\n * @returns Turning off type information until a common interface is defined.\n */\nconst createStoragefor = function (\n  domStorageName: string\n): DOMStorageWrapper | MemoryStorage {\n  try {\n    // NOTE: just accessing \"localStorage\" or \"window['localStorage']\" may throw a security exception,\n    // so it must be inside the try/catch.\n    if (\n      typeof window !== 'undefined' &&\n      typeof window[domStorageName] !== 'undefined'\n    ) {\n      // Need to test cache. Just because it's here doesn't mean it works\n      const domStorage = window[domStorageName];\n      domStorage.setItem('firebase:sentinel', 'cache');\n      domStorage.removeItem('firebase:sentinel');\n      return new DOMStorageWrapper(domStorage);\n    }\n  } catch (e) {}\n\n  // Failed to create wrapper.  Just return in-memory storage.\n  // TODO: log?\n  return new MemoryStorage();\n};\n\n/** A storage object that lasts across sessions */\nexport const PersistentStorage = createStoragefor('localStorage');\n\n/** A storage object that only lasts one session */\nexport const SessionStorage = createStoragefor('sessionStorage');\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Logger, LogLevel } from '@firebase/logger';\nimport {\n  assert,\n  base64,\n  Sha1,\n  stringToByteArray,\n  stringify,\n  isNodeSdk\n} from '@firebase/util';\n\nimport { SessionStorage } from '../storage/storage';\n\n// TODO: revert to import { QueryContext } from '../view/EventRegistration'; once the modular SDK goes GA\n/**\n * This is part of a workaround for an issue in the no-modular '@firebase/database' where its typings\n * reference types from `@firebase/app-exp`.\n */\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\ntype QueryContext = any;\ndeclare const window: Window;\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\ndeclare const Windows: any;\n\nconst logClient = new Logger('@firebase/database');\n\n/**\n * Returns a locally-unique ID (generated by just incrementing up from 0 each time its called).\n */\nexport const LUIDGenerator: () => number = (function () {\n  let id = 1;\n  return function () {\n    return id++;\n  };\n})();\n\n/**\n * Sha1 hash of the input string\n * @param str - The string to hash\n * @returns {!string} The resulting hash\n */\nexport const sha1 = function (str: string): string {\n  const utf8Bytes = stringToByteArray(str);\n  const sha1 = new Sha1();\n  sha1.update(utf8Bytes);\n  const sha1Bytes = sha1.digest();\n  return base64.encodeByteArray(sha1Bytes);\n};\n\nconst buildLogMessage_ = function (...varArgs: unknown[]): string {\n  let message = '';\n  for (let i = 0; i < varArgs.length; i++) {\n    const arg = varArgs[i];\n    if (\n      Array.isArray(arg) ||\n      (arg &&\n        typeof arg === 'object' &&\n        // eslint-disable-next-line @typescript-eslint/no-explicit-any\n        typeof (arg as any).length === 'number')\n    ) {\n      message += buildLogMessage_.apply(null, arg);\n    } else if (typeof arg === 'object') {\n      message += stringify(arg);\n    } else {\n      message += arg;\n    }\n    message += ' ';\n  }\n\n  return message;\n};\n\n/**\n * Use this for all debug messages in Firebase.\n */\nexport let logger: ((a: string) => void) | null = null;\n\n/**\n * Flag to check for log availability on first log message\n */\nlet firstLog_ = true;\n\n/**\n * The implementation of Firebase.enableLogging (defined here to break dependencies)\n * @param logger_ - A flag to turn on logging, or a custom logger\n * @param persistent - Whether or not to persist logging settings across refreshes\n */\nexport const enableLogging = function (\n  logger_?: boolean | ((a: string) => void) | null,\n  persistent?: boolean\n) {\n  assert(\n    !persistent || logger_ === true || logger_ === false,\n    \"Can't turn on custom loggers persistently.\"\n  );\n  if (logger_ === true) {\n    logClient.logLevel = LogLevel.VERBOSE;\n    logger = logClient.log.bind(logClient);\n    if (persistent) {\n      SessionStorage.set('logging_enabled', true);\n    }\n  } else if (typeof logger_ === 'function') {\n    logger = logger_;\n  } else {\n    logger = null;\n    SessionStorage.remove('logging_enabled');\n  }\n};\n\nexport const log = function (...varArgs: unknown[]) {\n  if (firstLog_ === true) {\n    firstLog_ = false;\n    if (logger === null && SessionStorage.get('logging_enabled') === true) {\n      enableLogging(true);\n    }\n  }\n\n  if (logger) {\n    const message = buildLogMessage_.apply(null, varArgs);\n    logger(message);\n  }\n};\n\nexport const logWrapper = function (\n  prefix: string\n): (...varArgs: unknown[]) => void {\n  return function (...varArgs: unknown[]) {\n    log(prefix, ...varArgs);\n  };\n};\n\nexport const error = function (...varArgs: string[]) {\n  const message = 'FIREBASE INTERNAL ERROR: ' + buildLogMessage_(...varArgs);\n  logClient.error(message);\n};\n\nexport const fatal = function (...varArgs: string[]) {\n  const message = `FIREBASE FATAL ERROR: ${buildLogMessage_(...varArgs)}`;\n  logClient.error(message);\n  throw new Error(message);\n};\n\nexport const warn = function (...varArgs: unknown[]) {\n  const message = 'FIREBASE WARNING: ' + buildLogMessage_(...varArgs);\n  logClient.warn(message);\n};\n\n/**\n * Logs a warning if the containing page uses https. Called when a call to new Firebase\n * does not use https.\n */\nexport const warnIfPageIsSecure = function () {\n  // Be very careful accessing browser globals. Who knows what may or may not exist.\n  if (\n    typeof window !== 'undefined' &&\n    window.location &&\n    window.location.protocol &&\n    window.location.protocol.indexOf('https:') !== -1\n  ) {\n    warn(\n      'Insecure Firebase access from a secure page. ' +\n        'Please use https in calls to new Firebase().'\n    );\n  }\n};\n\nexport const warnAboutUnsupportedMethod = function (methodName: string) {\n  warn(\n    methodName +\n      ' is unsupported and will likely change soon.  ' +\n      'Please do not use.'\n  );\n};\n\n/**\n * Returns true if data is NaN, or +/- Infinity.\n */\nexport const isInvalidJSONNumber = function (data: unknown): boolean {\n  return (\n    typeof data === 'number' &&\n    (data !== data || // NaN\n      data === Number.POSITIVE_INFINITY ||\n      data === Number.NEGATIVE_INFINITY)\n  );\n};\n\nexport const executeWhenDOMReady = function (fn: () => void) {\n  if (isNodeSdk() || document.readyState === 'complete') {\n    fn();\n  } else {\n    // Modeled after jQuery. Try DOMContentLoaded and onreadystatechange (which\n    // fire before onload), but fall back to onload.\n\n    let called = false;\n    const wrappedFn = function () {\n      if (!document.body) {\n        setTimeout(wrappedFn, Math.floor(10));\n        return;\n      }\n\n      if (!called) {\n        called = true;\n        fn();\n      }\n    };\n\n    if (document.addEventListener) {\n      document.addEventListener('DOMContentLoaded', wrappedFn, false);\n      // fallback to onload.\n      window.addEventListener('load', wrappedFn, false);\n      // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    } else if ((document as any).attachEvent) {\n      // IE.\n      // eslint-disable-next-line @typescript-eslint/no-explicit-any\n      (document as any).attachEvent('onreadystatechange', () => {\n        if (document.readyState === 'complete') {\n          wrappedFn();\n        }\n      });\n      // fallback to onload.\n      // eslint-disable-next-line @typescript-eslint/no-explicit-any\n      (window as any).attachEvent('onload', wrappedFn);\n\n      // jQuery has an extra hack for IE that we could employ (based on\n      // http://javascript.nwbox.com/IEContentLoaded/) But it looks really old.\n      // I'm hoping we don't need it.\n    }\n  }\n};\n\n/**\n * Minimum key name. Invalid for actual data, used as a marker to sort before any valid names\n */\nexport const MIN_NAME = '[MIN_NAME]';\n\n/**\n * Maximum key name. Invalid for actual data, used as a marker to sort above any valid names\n */\nexport const MAX_NAME = '[MAX_NAME]';\n\n/**\n * Compares valid Firebase key names, plus min and max name\n */\nexport const nameCompare = function (a: string, b: string): number {\n  if (a === b) {\n    return 0;\n  } else if (a === MIN_NAME || b === MAX_NAME) {\n    return -1;\n  } else if (b === MIN_NAME || a === MAX_NAME) {\n    return 1;\n  } else {\n    const aAsInt = tryParseInt(a),\n      bAsInt = tryParseInt(b);\n\n    if (aAsInt !== null) {\n      if (bAsInt !== null) {\n        return aAsInt - bAsInt === 0 ? a.length - b.length : aAsInt - bAsInt;\n      } else {\n        return -1;\n      }\n    } else if (bAsInt !== null) {\n      return 1;\n    } else {\n      return a < b ? -1 : 1;\n    }\n  }\n};\n\n/**\n * @returns {!number} comparison result.\n */\nexport const stringCompare = function (a: string, b: string): number {\n  if (a === b) {\n    return 0;\n  } else if (a < b) {\n    return -1;\n  } else {\n    return 1;\n  }\n};\n\nexport const requireKey = function (\n  key: string,\n  obj: { [k: string]: unknown }\n): unknown {\n  if (obj && key in obj) {\n    return obj[key];\n  } else {\n    throw new Error(\n      'Missing required key (' + key + ') in object: ' + stringify(obj)\n    );\n  }\n};\n\nexport const ObjectToUniqueKey = function (obj: unknown): string {\n  if (typeof obj !== 'object' || obj === null) {\n    return stringify(obj);\n  }\n\n  const keys = [];\n  // eslint-disable-next-line guard-for-in\n  for (const k in obj) {\n    keys.push(k);\n  }\n\n  // Export as json, but with the keys sorted.\n  keys.sort();\n  let key = '{';\n  for (let i = 0; i < keys.length; i++) {\n    if (i !== 0) {\n      key += ',';\n    }\n    key += stringify(keys[i]);\n    key += ':';\n    key += ObjectToUniqueKey(obj[keys[i]]);\n  }\n\n  key += '}';\n  return key;\n};\n\n/**\n * Splits a string into a number of smaller segments of maximum size\n * @param str - The string\n * @param segsize - The maximum number of chars in the string.\n * @returns The string, split into appropriately-sized chunks\n */\nexport const splitStringBySize = function (\n  str: string,\n  segsize: number\n): string[] {\n  const len = str.length;\n\n  if (len <= segsize) {\n    return [str];\n  }\n\n  const dataSegs = [];\n  for (let c = 0; c < len; c += segsize) {\n    if (c + segsize > len) {\n      dataSegs.push(str.substring(c, len));\n    } else {\n      dataSegs.push(str.substring(c, c + segsize));\n    }\n  }\n  return dataSegs;\n};\n\n/**\n * Apply a function to each (key, value) pair in an object or\n * apply a function to each (index, value) pair in an array\n * @param obj - The object or array to iterate over\n * @param fn - The function to apply\n */\nexport function each(obj: object, fn: (k: string, v: unknown) => void) {\n  for (const key in obj) {\n    if (obj.hasOwnProperty(key)) {\n      fn(key, obj[key]);\n    }\n  }\n}\n\n/**\n * Like goog.bind, but doesn't bother to create a closure if opt_context is null/undefined.\n * @param callback - Callback function.\n * @param context - Optional context to bind to.\n *\n */\nexport const bindCallback = function (\n  callback: (a: unknown) => void,\n  context?: object | null\n): (a: unknown) => void {\n  return context ? callback.bind(context) : callback;\n};\n\n/**\n * Borrowed from http://hg.secondlife.com/llsd/src/tip/js/typedarray.js (MIT License)\n * I made one modification at the end and removed the NaN / Infinity\n * handling (since it seemed broken [caused an overflow] and we don't need it).  See MJL comments.\n * @param v - A double\n *\n */\nexport const doubleToIEEE754String = function (v: number): string {\n  assert(!isInvalidJSONNumber(v), 'Invalid JSON number'); // MJL\n\n  const ebits = 11,\n    fbits = 52;\n  const bias = (1 << (ebits - 1)) - 1;\n  let s, e, f, ln, i;\n\n  // Compute sign, exponent, fraction\n  // Skip NaN / Infinity handling --MJL.\n  if (v === 0) {\n    e = 0;\n    f = 0;\n    s = 1 / v === -Infinity ? 1 : 0;\n  } else {\n    s = v < 0;\n    v = Math.abs(v);\n\n    if (v >= Math.pow(2, 1 - bias)) {\n      // Normalized\n      ln = Math.min(Math.floor(Math.log(v) / Math.LN2), bias);\n      e = ln + bias;\n      f = Math.round(v * Math.pow(2, fbits - ln) - Math.pow(2, fbits));\n    } else {\n      // Denormalized\n      e = 0;\n      f = Math.round(v / Math.pow(2, 1 - bias - fbits));\n    }\n  }\n\n  // Pack sign, exponent, fraction\n  const bits = [];\n  for (i = fbits; i; i -= 1) {\n    bits.push(f % 2 ? 1 : 0);\n    f = Math.floor(f / 2);\n  }\n  for (i = ebits; i; i -= 1) {\n    bits.push(e % 2 ? 1 : 0);\n    e = Math.floor(e / 2);\n  }\n  bits.push(s ? 1 : 0);\n  bits.reverse();\n  const str = bits.join('');\n\n  // Return the data as a hex string. --MJL\n  let hexByteString = '';\n  for (i = 0; i < 64; i += 8) {\n    let hexByte = parseInt(str.substr(i, 8), 2).toString(16);\n    if (hexByte.length === 1) {\n      hexByte = '0' + hexByte;\n    }\n    hexByteString = hexByteString + hexByte;\n  }\n  return hexByteString.toLowerCase();\n};\n\n/**\n * Used to detect if we're in a Chrome content script (which executes in an\n * isolated environment where long-polling doesn't work).\n */\nexport const isChromeExtensionContentScript = function (): boolean {\n  return !!(\n    typeof window === 'object' &&\n    window['chrome'] &&\n    window['chrome']['extension'] &&\n    !/^chrome/.test(window.location.href)\n  );\n};\n\n/**\n * Used to detect if we're in a Windows 8 Store app.\n */\nexport const isWindowsStoreApp = function (): boolean {\n  // Check for the presence of a couple WinRT globals\n  return typeof Windows === 'object' && typeof Windows.UI === 'object';\n};\n\n/**\n * Converts a server error code to a Javascript Error\n */\nexport function errorForServerCode(code: string, query: QueryContext): Error {\n  let reason = 'Unknown Error';\n  if (code === 'too_big') {\n    reason =\n      'The data requested exceeds the maximum size ' +\n      'that can be accessed with a single request.';\n  } else if (code === 'permission_denied') {\n    reason = \"Client doesn't have permission to access the desired data.\";\n  } else if (code === 'unavailable') {\n    reason = 'The service is unavailable';\n  }\n\n  const error = new Error(\n    code + ' at ' + query._path.toString() + ': ' + reason\n  );\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  (error as any).code = code.toUpperCase();\n  return error;\n}\n\n/**\n * Used to test for integer-looking strings\n */\nexport const INTEGER_REGEXP_ = new RegExp('^-?(0*)\\\\d{1,10}$');\n\n/**\n * For use in keys, the minimum possible 32-bit integer.\n */\nexport const INTEGER_32_MIN = -2147483648;\n\n/**\n * For use in kyes, the maximum possible 32-bit integer.\n */\nexport const INTEGER_32_MAX = 2147483647;\n\n/**\n * If the string contains a 32-bit integer, return it.  Else return null.\n */\nexport const tryParseInt = function (str: string): number | null {\n  if (INTEGER_REGEXP_.test(str)) {\n    const intVal = Number(str);\n    if (intVal >= INTEGER_32_MIN && intVal <= INTEGER_32_MAX) {\n      return intVal;\n    }\n  }\n  return null;\n};\n\n/**\n * Helper to run some code but catch any exceptions and re-throw them later.\n * Useful for preventing user callbacks from breaking internal code.\n *\n * Re-throwing the exception from a setTimeout is a little evil, but it's very\n * convenient (we don't have to try to figure out when is a safe point to\n * re-throw it), and the behavior seems reasonable:\n *\n * * If you aren't pausing on exceptions, you get an error in the console with\n *   the correct stack trace.\n * * If you're pausing on all exceptions, the debugger will pause on your\n *   exception and then again when we rethrow it.\n * * If you're only pausing on uncaught exceptions, the debugger will only pause\n *   on us re-throwing it.\n *\n * @param fn - The code to guard.\n */\nexport const exceptionGuard = function (fn: () => void) {\n  try {\n    fn();\n  } catch (e) {\n    // Re-throw exception when it's safe.\n    setTimeout(() => {\n      // It used to be that \"throw e\" would result in a good console error with\n      // relevant context, but as of Chrome 39, you just get the firebase.js\n      // file/line number where we re-throw it, which is useless. So we log\n      // e.stack explicitly.\n      const stack = e.stack || '';\n      warn('Exception was thrown by user callback.', stack);\n      throw e;\n    }, Math.floor(0));\n  }\n};\n\n/**\n * Helper function to safely call opt_callback with the specified arguments.  It:\n * 1. Turns into a no-op if opt_callback is null or undefined.\n * 2. Wraps the call inside exceptionGuard to prevent exceptions from breaking our state.\n *\n * @param callback - Optional onComplete callback.\n * @param varArgs - Arbitrary args to be passed to opt_onComplete\n */\nexport const callUserCallback = function (\n  // eslint-disable-next-line @typescript-eslint/ban-types\n  callback?: Function | null,\n  ...varArgs: unknown[]\n) {\n  if (typeof callback === 'function') {\n    exceptionGuard(() => {\n      callback(...varArgs);\n    });\n  }\n};\n\n/**\n * @returns {boolean} true if we think we're currently being crawled.\n */\nexport const beingCrawled = function (): boolean {\n  const userAgent =\n    (typeof window === 'object' &&\n      window['navigator'] &&\n      window['navigator']['userAgent']) ||\n    '';\n\n  // For now we whitelist the most popular crawlers.  We should refine this to be the set of crawlers we\n  // believe to support JavaScript/AJAX rendering.\n  // NOTE: Google Webmaster Tools doesn't really belong, but their \"This is how a visitor to your website\n  // would have seen the page\" is flaky if we don't treat it as a crawler.\n  return (\n    userAgent.search(\n      /googlebot|google webmaster tools|bingbot|yahoo! slurp|baiduspider|yandexbot|duckduckbot/i\n    ) >= 0\n  );\n};\n\n/**\n * Export a property of an object using a getter function.\n */\nexport const exportPropGetter = function (\n  object: object,\n  name: string,\n  fnGet: () => unknown\n) {\n  Object.defineProperty(object, name, { get: fnGet });\n};\n\n/**\n * Same as setTimeout() except on Node.JS it will /not/ prevent the process from exiting.\n *\n * It is removed with clearTimeout() as normal.\n *\n * @param fn - Function to run.\n * @param time - Milliseconds to wait before running.\n * @returns The setTimeout() return value.\n */\nexport const setTimeoutNonBlocking = function (\n  fn: () => void,\n  time: number\n): number | object {\n  const timeout: number | object = setTimeout(fn, time);\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  if (typeof timeout === 'object' && (timeout as any)['unref']) {\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    (timeout as any)['unref']();\n  }\n  return timeout;\n};\n","/**\n * @license\n * Copyright 2021 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {\n  AppCheckInternalComponentName,\n  AppCheckTokenListener,\n  AppCheckTokenResult,\n  FirebaseAppCheckInternal\n} from '@firebase/app-check-interop-types';\nimport { Provider } from '@firebase/component';\n\nimport { warn } from './util/util';\n\n/**\n * Abstraction around AppCheck's token fetching capabilities.\n */\nexport class AppCheckTokenProvider {\n  private appCheck?: FirebaseAppCheckInternal;\n  constructor(\n    private appName_: string,\n    private appCheckProvider?: Provider<AppCheckInternalComponentName>\n  ) {\n    this.appCheck = appCheckProvider?.getImmediate({ optional: true });\n    if (!this.appCheck) {\n      appCheckProvider?.get().then(appCheck => (this.appCheck = appCheck));\n    }\n  }\n\n  getToken(forceRefresh?: boolean): Promise<AppCheckTokenResult> {\n    if (!this.appCheck) {\n      return new Promise<AppCheckTokenResult>((resolve, reject) => {\n        // Support delayed initialization of FirebaseAppCheck. This allows our\n        // customers to initialize the RTDB SDK before initializing Firebase\n        // AppCheck and ensures that all requests are authenticated if a token\n        // becomes available before the timoeout below expires.\n        setTimeout(() => {\n          if (this.appCheck) {\n            this.getToken(forceRefresh).then(resolve, reject);\n          } else {\n            resolve(null);\n          }\n        }, 0);\n      });\n    }\n    return this.appCheck.getToken(forceRefresh);\n  }\n\n  addTokenChangeListener(listener: AppCheckTokenListener) {\n    this.appCheckProvider\n      ?.get()\n      .then(appCheck => appCheck.addTokenListener(listener));\n  }\n\n  notifyForInvalidToken(): void {\n    warn(\n      `Provided AppCheck credentials for the app named \"${this.appName_}\" ` +\n        'are invalid. This usually indicates your app was not initialized correctly.'\n    );\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { FirebaseAuthTokenData } from '@firebase/app-types/private';\nimport {\n  FirebaseAuthInternal,\n  FirebaseAuthInternalName\n} from '@firebase/auth-interop-types';\nimport { Provider } from '@firebase/component';\n\nimport { log, warn } from './util/util';\n\nexport interface AuthTokenProvider {\n  getToken(forceRefresh: boolean): Promise<FirebaseAuthTokenData>;\n  addTokenChangeListener(listener: (token: string | null) => void): void;\n  removeTokenChangeListener(listener: (token: string | null) => void): void;\n  notifyForInvalidToken(): void;\n}\n\n/**\n * Abstraction around FirebaseApp's token fetching capabilities.\n */\nexport class FirebaseAuthTokenProvider implements AuthTokenProvider {\n  private auth_: FirebaseAuthInternal | null = null;\n\n  constructor(\n    private appName_: string,\n    private firebaseOptions_: object,\n    private authProvider_: Provider<FirebaseAuthInternalName>\n  ) {\n    this.auth_ = authProvider_.getImmediate({ optional: true });\n    if (!this.auth_) {\n      authProvider_.onInit(auth => (this.auth_ = auth));\n    }\n  }\n\n  getToken(forceRefresh: boolean): Promise<FirebaseAuthTokenData> {\n    if (!this.auth_) {\n      return new Promise<FirebaseAuthTokenData>((resolve, reject) => {\n        // Support delayed initialization of FirebaseAuth. This allows our\n        // customers to initialize the RTDB SDK before initializing Firebase\n        // Auth and ensures that all requests are authenticated if a token\n        // becomes available before the timoeout below expires.\n        setTimeout(() => {\n          if (this.auth_) {\n            this.getToken(forceRefresh).then(resolve, reject);\n          } else {\n            resolve(null);\n          }\n        }, 0);\n      });\n    }\n\n    return this.auth_.getToken(forceRefresh).catch(error => {\n      // TODO: Need to figure out all the cases this is raised and whether\n      // this makes sense.\n      if (error && error.code === 'auth/token-not-initialized') {\n        log('Got auth/token-not-initialized error.  Treating as null token.');\n        return null;\n      } else {\n        return Promise.reject(error);\n      }\n    });\n  }\n\n  addTokenChangeListener(listener: (token: string | null) => void): void {\n    // TODO: We might want to wrap the listener and call it with no args to\n    // avoid a leaky abstraction, but that makes removing the listener harder.\n    if (this.auth_) {\n      this.auth_.addAuthTokenListener(listener);\n    } else {\n      this.authProvider_\n        .get()\n        .then(auth => auth.addAuthTokenListener(listener));\n    }\n  }\n\n  removeTokenChangeListener(listener: (token: string | null) => void): void {\n    this.authProvider_\n      .get()\n      .then(auth => auth.removeAuthTokenListener(listener));\n  }\n\n  notifyForInvalidToken(): void {\n    let errorMessage =\n      'Provided authentication credentials for the app named \"' +\n      this.appName_ +\n      '\" are invalid. This usually indicates your app was not ' +\n      'initialized correctly. ';\n    if ('credential' in this.firebaseOptions_) {\n      errorMessage +=\n        'Make sure the \"credential\" property provided to initializeApp() ' +\n        'is authorized to access the specified \"databaseURL\" and is from the correct ' +\n        'project.';\n    } else if ('serviceAccount' in this.firebaseOptions_) {\n      errorMessage +=\n        'Make sure the \"serviceAccount\" property provided to initializeApp() ' +\n        'is authorized to access the specified \"databaseURL\" and is from the correct ' +\n        'project.';\n    } else {\n      errorMessage +=\n        'Make sure the \"apiKey\" and \"databaseURL\" properties provided to ' +\n        'initializeApp() match the values provided for your app at ' +\n        'https://console.firebase.google.com/.';\n    }\n    warn(errorMessage);\n  }\n}\n\n/* AuthTokenProvider that supplies a constant token. Used by Admin SDK or mockUserToken with emulators. */\nexport class EmulatorTokenProvider implements AuthTokenProvider {\n  /** A string that is treated as an admin access token by the RTDB emulator. Used by Admin SDK. */\n  static OWNER = 'owner';\n\n  constructor(private accessToken: string) {}\n\n  getToken(forceRefresh: boolean): Promise<FirebaseAuthTokenData> {\n    return Promise.resolve({\n      accessToken: this.accessToken\n    });\n  }\n\n  addTokenChangeListener(listener: (token: string | null) => void): void {\n    // Invoke the listener immediately to match the behavior in Firebase Auth\n    // (see packages/auth/src/auth.js#L1807)\n    listener(this.accessToken);\n  }\n\n  removeTokenChangeListener(listener: (token: string | null) => void): void {}\n\n  notifyForInvalidToken(): void {}\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nexport const PROTOCOL_VERSION = '5';\n\nexport const VERSION_PARAM = 'v';\n\nexport const TRANSPORT_SESSION_PARAM = 's';\n\nexport const REFERER_PARAM = 'r';\n\nexport const FORGE_REF = 'f';\n\n// Matches console.firebase.google.com, firebase-console-*.corp.google.com and\n// firebase.corp.google.com\nexport const FORGE_DOMAIN_RE = /(console\\.firebase|firebase-console-\\w+\\.corp|firebase\\.corp)\\.google\\.com/;\n\nexport const LAST_SESSION_PARAM = 'ls';\n\nexport const APPLICATION_ID_PARAM = 'p';\n\nexport const APP_CHECK_TOKEN_PARAM = 'ac';\n\nexport const WEBSOCKET = 'websocket';\n\nexport const LONG_POLLING = 'long_polling';\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { assert } from '@firebase/util';\n\nimport { LONG_POLLING, WEBSOCKET } from '../realtime/Constants';\n\nimport { PersistentStorage } from './storage/storage';\nimport { each } from './util/util';\n\n/**\n * A class that holds metadata about a Repo object\n */\nexport class RepoInfo {\n  private _host: string;\n  private _domain: string;\n  internalHost: string;\n\n  /**\n   * @param host - Hostname portion of the url for the repo\n   * @param secure - Whether or not this repo is accessed over ssl\n   * @param namespace - The namespace represented by the repo\n   * @param webSocketOnly - Whether to prefer websockets over all other transports (used by Nest).\n   * @param nodeAdmin - Whether this instance uses Admin SDK credentials\n   * @param persistenceKey - Override the default session persistence storage key\n   */\n  constructor(\n    host: string,\n    public readonly secure: boolean,\n    public readonly namespace: string,\n    public readonly webSocketOnly: boolean,\n    public readonly nodeAdmin: boolean = false,\n    public readonly persistenceKey: string = '',\n    public readonly includeNamespaceInQueryParams: boolean = false\n  ) {\n    this._host = host.toLowerCase();\n    this._domain = this._host.substr(this._host.indexOf('.') + 1);\n    this.internalHost =\n      (PersistentStorage.get('host:' + host) as string) || this._host;\n  }\n\n  isCacheableHost(): boolean {\n    return this.internalHost.substr(0, 2) === 's-';\n  }\n\n  isCustomHost() {\n    return (\n      this._domain !== 'firebaseio.com' &&\n      this._domain !== 'firebaseio-demo.com'\n    );\n  }\n\n  get host() {\n    return this._host;\n  }\n\n  set host(newHost: string) {\n    if (newHost !== this.internalHost) {\n      this.internalHost = newHost;\n      if (this.isCacheableHost()) {\n        PersistentStorage.set('host:' + this._host, this.internalHost);\n      }\n    }\n  }\n\n  toString(): string {\n    let str = this.toURLString();\n    if (this.persistenceKey) {\n      str += '<' + this.persistenceKey + '>';\n    }\n    return str;\n  }\n\n  toURLString(): string {\n    const protocol = this.secure ? 'https://' : 'http://';\n    const query = this.includeNamespaceInQueryParams\n      ? `?ns=${this.namespace}`\n      : '';\n    return `${protocol}${this.host}/${query}`;\n  }\n}\n\nfunction repoInfoNeedsQueryParam(repoInfo: RepoInfo): boolean {\n  return (\n    repoInfo.host !== repoInfo.internalHost ||\n    repoInfo.isCustomHost() ||\n    repoInfo.includeNamespaceInQueryParams\n  );\n}\n\n/**\n * Returns the websocket URL for this repo\n * @param repoInfo - RepoInfo object\n * @param type - of connection\n * @param params - list\n * @returns The URL for this repo\n */\nexport function repoInfoConnectionURL(\n  repoInfo: RepoInfo,\n  type: string,\n  params: { [k: string]: string }\n): string {\n  assert(typeof type === 'string', 'typeof type must == string');\n  assert(typeof params === 'object', 'typeof params must == object');\n\n  let connURL: string;\n  if (type === WEBSOCKET) {\n    connURL =\n      (repoInfo.secure ? 'wss://' : 'ws://') + repoInfo.internalHost + '/.ws?';\n  } else if (type === LONG_POLLING) {\n    connURL =\n      (repoInfo.secure ? 'https://' : 'http://') +\n      repoInfo.internalHost +\n      '/.lp?';\n  } else {\n    throw new Error('Unknown connection type: ' + type);\n  }\n  if (repoInfoNeedsQueryParam(repoInfo)) {\n    params['ns'] = repoInfo.namespace;\n  }\n\n  const pairs: string[] = [];\n\n  each(params, (key: string, value: string) => {\n    pairs.push(key + '=' + value);\n  });\n\n  return connURL + pairs.join('&');\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { deepCopy, contains } from '@firebase/util';\n\n/**\n * Tracks a collection of stats.\n */\nexport class StatsCollection {\n  private counters_: { [k: string]: number } = {};\n\n  incrementCounter(name: string, amount: number = 1) {\n    if (!contains(this.counters_, name)) {\n      this.counters_[name] = 0;\n    }\n\n    this.counters_[name] += amount;\n  }\n\n  get() {\n    return deepCopy(this.counters_);\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { RepoInfo } from '../RepoInfo';\n\nimport { StatsCollection } from './StatsCollection';\n\nconst collections: { [k: string]: StatsCollection } = {};\nconst reporters: { [k: string]: unknown } = {};\n\nexport function statsManagerGetCollection(repoInfo: RepoInfo): StatsCollection {\n  const hashString = repoInfo.toString();\n\n  if (!collections[hashString]) {\n    collections[hashString] = new StatsCollection();\n  }\n\n  return collections[hashString];\n}\n\nexport function statsManagerGetOrCreateReporter<T>(\n  repoInfo: RepoInfo,\n  creatorFunction: () => T\n): T {\n  const hashString = repoInfo.toString();\n\n  if (!reporters[hashString]) {\n    reporters[hashString] = creatorFunction();\n  }\n\n  return reporters[hashString] as T;\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { exceptionGuard } from '../../core/util/util';\n\n/**\n * This class ensures the packets from the server arrive in order\n * This class takes data from the server and ensures it gets passed into the callbacks in order.\n */\nexport class PacketReceiver {\n  pendingResponses: unknown[] = [];\n  currentResponseNum = 0;\n  closeAfterResponse = -1;\n  onClose: (() => void) | null = null;\n\n  /**\n   * @param onMessage_\n   */\n  constructor(private onMessage_: (a: {}) => void) {}\n\n  closeAfter(responseNum: number, callback: () => void) {\n    this.closeAfterResponse = responseNum;\n    this.onClose = callback;\n    if (this.closeAfterResponse < this.currentResponseNum) {\n      this.onClose();\n      this.onClose = null;\n    }\n  }\n\n  /**\n   * Each message from the server comes with a response number, and an array of data. The responseNumber\n   * allows us to ensure that we process them in the right order, since we can't be guaranteed that all\n   * browsers will respond in the same order as the requests we sent\n   */\n  handleResponse(requestNum: number, data: unknown[]) {\n    this.pendingResponses[requestNum] = data;\n    while (this.pendingResponses[this.currentResponseNum]) {\n      const toProcess = this.pendingResponses[\n        this.currentResponseNum\n      ] as unknown[];\n      delete this.pendingResponses[this.currentResponseNum];\n      for (let i = 0; i < toProcess.length; ++i) {\n        if (toProcess[i]) {\n          exceptionGuard(() => {\n            this.onMessage_(toProcess[i]);\n          });\n        }\n      }\n      if (this.currentResponseNum === this.closeAfterResponse) {\n        if (this.onClose) {\n          this.onClose();\n          this.onClose = null;\n        }\n        break;\n      }\n      this.currentResponseNum++;\n    }\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { base64Encode, isNodeSdk, stringify } from '@firebase/util';\n\nimport { RepoInfo, repoInfoConnectionURL } from '../core/RepoInfo';\nimport { StatsCollection } from '../core/stats/StatsCollection';\nimport { statsManagerGetCollection } from '../core/stats/StatsManager';\nimport {\n  executeWhenDOMReady,\n  isChromeExtensionContentScript,\n  isWindowsStoreApp,\n  log,\n  logWrapper,\n  LUIDGenerator,\n  splitStringBySize\n} from '../core/util/util';\n\nimport {\n  APP_CHECK_TOKEN_PARAM,\n  APPLICATION_ID_PARAM,\n  FORGE_DOMAIN_RE,\n  FORGE_REF,\n  LAST_SESSION_PARAM,\n  LONG_POLLING,\n  PROTOCOL_VERSION,\n  REFERER_PARAM,\n  TRANSPORT_SESSION_PARAM,\n  VERSION_PARAM\n} from './Constants';\nimport { PacketReceiver } from './polling/PacketReceiver';\nimport { Transport } from './Transport';\n\n// URL query parameters associated with longpolling\nexport const FIREBASE_LONGPOLL_START_PARAM = 'start';\nexport const FIREBASE_LONGPOLL_CLOSE_COMMAND = 'close';\nexport const FIREBASE_LONGPOLL_COMMAND_CB_NAME = 'pLPCommand';\nexport const FIREBASE_LONGPOLL_DATA_CB_NAME = 'pRTLPCB';\nexport const FIREBASE_LONGPOLL_ID_PARAM = 'id';\nexport const FIREBASE_LONGPOLL_PW_PARAM = 'pw';\nexport const FIREBASE_LONGPOLL_SERIAL_PARAM = 'ser';\nexport const FIREBASE_LONGPOLL_CALLBACK_ID_PARAM = 'cb';\nexport const FIREBASE_LONGPOLL_SEGMENT_NUM_PARAM = 'seg';\nexport const FIREBASE_LONGPOLL_SEGMENTS_IN_PACKET = 'ts';\nexport const FIREBASE_LONGPOLL_DATA_PARAM = 'd';\nexport const FIREBASE_LONGPOLL_DISCONN_FRAME_PARAM = 'disconn';\nexport const FIREBASE_LONGPOLL_DISCONN_FRAME_REQUEST_PARAM = 'dframe';\n\n//Data size constants.\n//TODO: Perf: the maximum length actually differs from browser to browser.\n// We should check what browser we're on and set accordingly.\nconst MAX_URL_DATA_SIZE = 1870;\nconst SEG_HEADER_SIZE = 30; //ie: &seg=8299234&ts=982389123&d=\nconst MAX_PAYLOAD_SIZE = MAX_URL_DATA_SIZE - SEG_HEADER_SIZE;\n\n/**\n * Keepalive period\n * send a fresh request at minimum every 25 seconds. Opera has a maximum request\n * length of 30 seconds that we can't exceed.\n */\nconst KEEPALIVE_REQUEST_INTERVAL = 25000;\n\n/**\n * How long to wait before aborting a long-polling connection attempt.\n */\nconst LP_CONNECT_TIMEOUT = 30000;\n\n/**\n * This class manages a single long-polling connection.\n */\nexport class BrowserPollConnection implements Transport {\n  bytesSent = 0;\n  bytesReceived = 0;\n  urlFn: (params: object) => string;\n  scriptTagHolder: FirebaseIFrameScriptHolder;\n  myDisconnFrame: HTMLIFrameElement;\n  curSegmentNum: number;\n  myPacketOrderer: PacketReceiver;\n  id: string;\n  password: string;\n  private log_: (...a: unknown[]) => void;\n  private stats_: StatsCollection;\n  private everConnected_ = false;\n  private isClosed_: boolean;\n  private connectTimeoutTimer_: number | null;\n  private onDisconnect_: ((a?: boolean) => void) | null;\n\n  /**\n   * @param connId An identifier for this connection, used for logging\n   * @param repoInfo The info for the endpoint to send data to.\n   * @param applicationId The Firebase App ID for this project.\n   * @param appCheckToken The AppCheck token for this client.\n   * @param authToken The AuthToken to use for this connection.\n   * @param transportSessionId Optional transportSessionid if we are\n   * reconnecting for an existing transport session\n   * @param lastSessionId Optional lastSessionId if the PersistentConnection has\n   * already created a connection previously\n   */\n  constructor(\n    public connId: string,\n    public repoInfo: RepoInfo,\n    private applicationId?: string,\n    private appCheckToken?: string,\n    private authToken?: string,\n    public transportSessionId?: string,\n    public lastSessionId?: string\n  ) {\n    this.log_ = logWrapper(connId);\n    this.stats_ = statsManagerGetCollection(repoInfo);\n    this.urlFn = (params: { [k: string]: string }) => {\n      // Always add the token if we have one.\n      if (this.appCheckToken) {\n        params[APP_CHECK_TOKEN_PARAM] = this.appCheckToken;\n      }\n      return repoInfoConnectionURL(repoInfo, LONG_POLLING, params);\n    };\n  }\n\n  /**\n   * @param onMessage - Callback when messages arrive\n   * @param onDisconnect - Callback with connection lost.\n   */\n  open(onMessage: (msg: {}) => void, onDisconnect: (a?: boolean) => void) {\n    this.curSegmentNum = 0;\n    this.onDisconnect_ = onDisconnect;\n    this.myPacketOrderer = new PacketReceiver(onMessage);\n    this.isClosed_ = false;\n\n    this.connectTimeoutTimer_ = setTimeout(() => {\n      this.log_('Timed out trying to connect.');\n      // Make sure we clear the host cache\n      this.onClosed_();\n      this.connectTimeoutTimer_ = null;\n      // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    }, Math.floor(LP_CONNECT_TIMEOUT)) as any;\n\n    // Ensure we delay the creation of the iframe until the DOM is loaded.\n    executeWhenDOMReady(() => {\n      if (this.isClosed_) {\n        return;\n      }\n\n      //Set up a callback that gets triggered once a connection is set up.\n      this.scriptTagHolder = new FirebaseIFrameScriptHolder(\n        (...args) => {\n          const [command, arg1, arg2, arg3, arg4] = args;\n          this.incrementIncomingBytes_(args);\n          if (!this.scriptTagHolder) {\n            return; // we closed the connection.\n          }\n\n          if (this.connectTimeoutTimer_) {\n            clearTimeout(this.connectTimeoutTimer_);\n            this.connectTimeoutTimer_ = null;\n          }\n          this.everConnected_ = true;\n          if (command === FIREBASE_LONGPOLL_START_PARAM) {\n            this.id = arg1 as string;\n            this.password = arg2 as string;\n          } else if (command === FIREBASE_LONGPOLL_CLOSE_COMMAND) {\n            // Don't clear the host cache. We got a response from the server, so we know it's reachable\n            if (arg1) {\n              // We aren't expecting any more data (other than what the server's already in the process of sending us\n              // through our already open polls), so don't send any more.\n              this.scriptTagHolder.sendNewPolls = false;\n\n              // arg1 in this case is the last response number sent by the server. We should try to receive\n              // all of the responses up to this one before closing\n              this.myPacketOrderer.closeAfter(arg1 as number, () => {\n                this.onClosed_();\n              });\n            } else {\n              this.onClosed_();\n            }\n          } else {\n            throw new Error('Unrecognized command received: ' + command);\n          }\n        },\n        (...args) => {\n          const [pN, data] = args;\n          this.incrementIncomingBytes_(args);\n          this.myPacketOrderer.handleResponse(pN as number, data as unknown[]);\n        },\n        () => {\n          this.onClosed_();\n        },\n        this.urlFn\n      );\n\n      //Send the initial request to connect. The serial number is simply to keep the browser from pulling previous results\n      //from cache.\n      const urlParams: { [k: string]: string | number } = {};\n      urlParams[FIREBASE_LONGPOLL_START_PARAM] = 't';\n      urlParams[FIREBASE_LONGPOLL_SERIAL_PARAM] = Math.floor(\n        Math.random() * 100000000\n      );\n      if (this.scriptTagHolder.uniqueCallbackIdentifier) {\n        urlParams[\n          FIREBASE_LONGPOLL_CALLBACK_ID_PARAM\n        ] = this.scriptTagHolder.uniqueCallbackIdentifier;\n      }\n      urlParams[VERSION_PARAM] = PROTOCOL_VERSION;\n      if (this.transportSessionId) {\n        urlParams[TRANSPORT_SESSION_PARAM] = this.transportSessionId;\n      }\n      if (this.lastSessionId) {\n        urlParams[LAST_SESSION_PARAM] = this.lastSessionId;\n      }\n      if (this.applicationId) {\n        urlParams[APPLICATION_ID_PARAM] = this.applicationId;\n      }\n      if (this.appCheckToken) {\n        urlParams[APP_CHECK_TOKEN_PARAM] = this.appCheckToken;\n      }\n      if (\n        typeof location !== 'undefined' &&\n        location.hostname &&\n        FORGE_DOMAIN_RE.test(location.hostname)\n      ) {\n        urlParams[REFERER_PARAM] = FORGE_REF;\n      }\n      const connectURL = this.urlFn(urlParams);\n      this.log_('Connecting via long-poll to ' + connectURL);\n      this.scriptTagHolder.addTag(connectURL, () => {\n        /* do nothing */\n      });\n    });\n  }\n\n  /**\n   * Call this when a handshake has completed successfully and we want to consider the connection established\n   */\n  start() {\n    this.scriptTagHolder.startLongPoll(this.id, this.password);\n    this.addDisconnectPingFrame(this.id, this.password);\n  }\n\n  private static forceAllow_: boolean;\n\n  /**\n   * Forces long polling to be considered as a potential transport\n   */\n  static forceAllow() {\n    BrowserPollConnection.forceAllow_ = true;\n  }\n\n  private static forceDisallow_: boolean;\n\n  /**\n   * Forces longpolling to not be considered as a potential transport\n   */\n  static forceDisallow() {\n    BrowserPollConnection.forceDisallow_ = true;\n  }\n\n  // Static method, use string literal so it can be accessed in a generic way\n  static isAvailable() {\n    if (isNodeSdk()) {\n      return false;\n    } else if (BrowserPollConnection.forceAllow_) {\n      return true;\n    } else {\n      // NOTE: In React-Native there's normally no 'document', but if you debug a React-Native app in\n      // the Chrome debugger, 'document' is defined, but document.createElement is null (2015/06/08).\n      return (\n        !BrowserPollConnection.forceDisallow_ &&\n        typeof document !== 'undefined' &&\n        document.createElement != null &&\n        !isChromeExtensionContentScript() &&\n        !isWindowsStoreApp()\n      );\n    }\n  }\n\n  /**\n   * No-op for polling\n   */\n  markConnectionHealthy() {}\n\n  /**\n   * Stops polling and cleans up the iframe\n   */\n  private shutdown_() {\n    this.isClosed_ = true;\n\n    if (this.scriptTagHolder) {\n      this.scriptTagHolder.close();\n      this.scriptTagHolder = null;\n    }\n\n    //remove the disconnect frame, which will trigger an XHR call to the server to tell it we're leaving.\n    if (this.myDisconnFrame) {\n      document.body.removeChild(this.myDisconnFrame);\n      this.myDisconnFrame = null;\n    }\n\n    if (this.connectTimeoutTimer_) {\n      clearTimeout(this.connectTimeoutTimer_);\n      this.connectTimeoutTimer_ = null;\n    }\n  }\n\n  /**\n   * Triggered when this transport is closed\n   */\n  private onClosed_() {\n    if (!this.isClosed_) {\n      this.log_('Longpoll is closing itself');\n      this.shutdown_();\n\n      if (this.onDisconnect_) {\n        this.onDisconnect_(this.everConnected_);\n        this.onDisconnect_ = null;\n      }\n    }\n  }\n\n  /**\n   * External-facing close handler. RealTime has requested we shut down. Kill our connection and tell the server\n   * that we've left.\n   */\n  close() {\n    if (!this.isClosed_) {\n      this.log_('Longpoll is being closed.');\n      this.shutdown_();\n    }\n  }\n\n  /**\n   * Send the JSON object down to the server. It will need to be stringified, base64 encoded, and then\n   * broken into chunks (since URLs have a small maximum length).\n   * @param data - The JSON data to transmit.\n   */\n  send(data: {}) {\n    const dataStr = stringify(data);\n    this.bytesSent += dataStr.length;\n    this.stats_.incrementCounter('bytes_sent', dataStr.length);\n\n    //first, lets get the base64-encoded data\n    const base64data = base64Encode(dataStr);\n\n    //We can only fit a certain amount in each URL, so we need to split this request\n    //up into multiple pieces if it doesn't fit in one request.\n    const dataSegs = splitStringBySize(base64data, MAX_PAYLOAD_SIZE);\n\n    //Enqueue each segment for transmission. We assign each chunk a sequential ID and a total number\n    //of segments so that we can reassemble the packet on the server.\n    for (let i = 0; i < dataSegs.length; i++) {\n      this.scriptTagHolder.enqueueSegment(\n        this.curSegmentNum,\n        dataSegs.length,\n        dataSegs[i]\n      );\n      this.curSegmentNum++;\n    }\n  }\n\n  /**\n   * This is how we notify the server that we're leaving.\n   * We aren't able to send requests with DHTML on a window close event, but we can\n   * trigger XHR requests in some browsers (everything but Opera basically).\n   */\n  addDisconnectPingFrame(id: string, pw: string) {\n    if (isNodeSdk()) {\n      return;\n    }\n    this.myDisconnFrame = document.createElement('iframe');\n    const urlParams: { [k: string]: string } = {};\n    urlParams[FIREBASE_LONGPOLL_DISCONN_FRAME_REQUEST_PARAM] = 't';\n    urlParams[FIREBASE_LONGPOLL_ID_PARAM] = id;\n    urlParams[FIREBASE_LONGPOLL_PW_PARAM] = pw;\n    this.myDisconnFrame.src = this.urlFn(urlParams);\n    this.myDisconnFrame.style.display = 'none';\n\n    document.body.appendChild(this.myDisconnFrame);\n  }\n\n  /**\n   * Used to track the bytes received by this client\n   */\n  private incrementIncomingBytes_(args: unknown) {\n    // TODO: This is an annoying perf hit just to track the number of incoming bytes.  Maybe it should be opt-in.\n    const bytesReceived = stringify(args).length;\n    this.bytesReceived += bytesReceived;\n    this.stats_.incrementCounter('bytes_received', bytesReceived);\n  }\n}\n\n// eslint-disable-next-line @typescript-eslint/naming-convention\nexport interface IFrameElement extends HTMLIFrameElement {\n  doc: Document;\n}\n\n/*********************************************************************************************\n * A wrapper around an iframe that is used as a long-polling script holder.\n *********************************************************************************************/\nexport class FirebaseIFrameScriptHolder {\n  //We maintain a count of all of the outstanding requests, because if we have too many active at once it can cause\n  //problems in some browsers.\n  outstandingRequests = new Set<number>();\n\n  //A queue of the pending segments waiting for transmission to the server.\n  pendingSegs: Array<{ seg: number; ts: number; d: unknown }> = [];\n\n  //A serial number. We use this for two things:\n  // 1) A way to ensure the browser doesn't cache responses to polls\n  // 2) A way to make the server aware when long-polls arrive in a different order than we started them. The\n  //    server needs to release both polls in this case or it will cause problems in Opera since Opera can only execute\n  //    JSONP code in the order it was added to the iframe.\n  currentSerial = Math.floor(Math.random() * 100000000);\n\n  // This gets set to false when we're \"closing down\" the connection (e.g. we're switching transports but there's still\n  // incoming data from the server that we're waiting for).\n  sendNewPolls = true;\n\n  uniqueCallbackIdentifier: number;\n  myIFrame: IFrameElement;\n  alive: boolean;\n  myID: string;\n  myPW: string;\n  commandCB: (command: string, ...args: unknown[]) => void;\n  onMessageCB: (...args: unknown[]) => void;\n\n  /**\n   * @param commandCB - The callback to be called when control commands are recevied from the server.\n   * @param onMessageCB - The callback to be triggered when responses arrive from the server.\n   * @param onDisconnect - The callback to be triggered when this tag holder is closed\n   * @param urlFn - A function that provides the URL of the endpoint to send data to.\n   */\n  constructor(\n    commandCB: (command: string, ...args: unknown[]) => void,\n    onMessageCB: (...args: unknown[]) => void,\n    public onDisconnect: () => void,\n    public urlFn: (a: object) => string\n  ) {\n    if (!isNodeSdk()) {\n      //Each script holder registers a couple of uniquely named callbacks with the window. These are called from the\n      //iframes where we put the long-polling script tags. We have two callbacks:\n      //   1) Command Callback - Triggered for control issues, like starting a connection.\n      //   2) Message Callback - Triggered when new data arrives.\n      this.uniqueCallbackIdentifier = LUIDGenerator();\n      window[\n        FIREBASE_LONGPOLL_COMMAND_CB_NAME + this.uniqueCallbackIdentifier\n      ] = commandCB;\n      window[\n        FIREBASE_LONGPOLL_DATA_CB_NAME + this.uniqueCallbackIdentifier\n      ] = onMessageCB;\n\n      //Create an iframe for us to add script tags to.\n      this.myIFrame = FirebaseIFrameScriptHolder.createIFrame_();\n\n      // Set the iframe's contents.\n      let script = '';\n      // if we set a javascript url, it's IE and we need to set the document domain. The javascript url is sufficient\n      // for ie9, but ie8 needs to do it again in the document itself.\n      if (\n        this.myIFrame.src &&\n        this.myIFrame.src.substr(0, 'javascript:'.length) === 'javascript:'\n      ) {\n        const currentDomain = document.domain;\n        script = '<script>document.domain=\"' + currentDomain + '\";</script>';\n      }\n      const iframeContents = '<html><body>' + script + '</body></html>';\n      try {\n        this.myIFrame.doc.open();\n        this.myIFrame.doc.write(iframeContents);\n        this.myIFrame.doc.close();\n      } catch (e) {\n        log('frame writing exception');\n        if (e.stack) {\n          log(e.stack);\n        }\n        log(e);\n      }\n    } else {\n      this.commandCB = commandCB;\n      this.onMessageCB = onMessageCB;\n    }\n  }\n\n  /**\n   * Each browser has its own funny way to handle iframes. Here we mush them all together into one object that I can\n   * actually use.\n   */\n  private static createIFrame_(): IFrameElement {\n    const iframe = document.createElement('iframe') as IFrameElement;\n    iframe.style.display = 'none';\n\n    // This is necessary in order to initialize the document inside the iframe\n    if (document.body) {\n      document.body.appendChild(iframe);\n      try {\n        // If document.domain has been modified in IE, this will throw an error, and we need to set the\n        // domain of the iframe's document manually. We can do this via a javascript: url as the src attribute\n        // Also note that we must do this *after* the iframe has been appended to the page. Otherwise it doesn't work.\n        const a = iframe.contentWindow.document;\n        if (!a) {\n          // Apologies for the log-spam, I need to do something to keep closure from optimizing out the assignment above.\n          log('No IE domain setting required');\n        }\n      } catch (e) {\n        const domain = document.domain;\n        iframe.src =\n          \"javascript:void((function(){document.open();document.domain='\" +\n          domain +\n          \"';document.close();})())\";\n      }\n    } else {\n      // LongPollConnection attempts to delay initialization until the document is ready, so hopefully this\n      // never gets hit.\n      throw 'Document body has not initialized. Wait to initialize Firebase until after the document is ready.';\n    }\n\n    // Get the document of the iframe in a browser-specific way.\n    if (iframe.contentDocument) {\n      iframe.doc = iframe.contentDocument; // Firefox, Opera, Safari\n    } else if (iframe.contentWindow) {\n      iframe.doc = iframe.contentWindow.document; // Internet Explorer\n      // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    } else if ((iframe as any).document) {\n      // eslint-disable-next-line @typescript-eslint/no-explicit-any\n      iframe.doc = (iframe as any).document; //others?\n    }\n\n    return iframe;\n  }\n\n  /**\n   * Cancel all outstanding queries and remove the frame.\n   */\n  close() {\n    //Mark this iframe as dead, so no new requests are sent.\n    this.alive = false;\n\n    if (this.myIFrame) {\n      //We have to actually remove all of the html inside this iframe before removing it from the\n      //window, or IE will continue loading and executing the script tags we've already added, which\n      //can lead to some errors being thrown. Setting innerHTML seems to be the easiest way to do this.\n      this.myIFrame.doc.body.innerHTML = '';\n      setTimeout(() => {\n        if (this.myIFrame !== null) {\n          document.body.removeChild(this.myIFrame);\n          this.myIFrame = null;\n        }\n      }, Math.floor(0));\n    }\n\n    // Protect from being called recursively.\n    const onDisconnect = this.onDisconnect;\n    if (onDisconnect) {\n      this.onDisconnect = null;\n      onDisconnect();\n    }\n  }\n\n  /**\n   * Actually start the long-polling session by adding the first script tag(s) to the iframe.\n   * @param id - The ID of this connection\n   * @param pw - The password for this connection\n   */\n  startLongPoll(id: string, pw: string) {\n    this.myID = id;\n    this.myPW = pw;\n    this.alive = true;\n\n    //send the initial request. If there are requests queued, make sure that we transmit as many as we are currently able to.\n    while (this.newRequest_()) {}\n  }\n\n  /**\n   * This is called any time someone might want a script tag to be added. It adds a script tag when there aren't\n   * too many outstanding requests and we are still alive.\n   *\n   * If there are outstanding packet segments to send, it sends one. If there aren't, it sends a long-poll anyways if\n   * needed.\n   */\n  private newRequest_() {\n    // We keep one outstanding request open all the time to receive data, but if we need to send data\n    // (pendingSegs.length > 0) then we create a new request to send the data.  The server will automatically\n    // close the old request.\n    if (\n      this.alive &&\n      this.sendNewPolls &&\n      this.outstandingRequests.size < (this.pendingSegs.length > 0 ? 2 : 1)\n    ) {\n      //construct our url\n      this.currentSerial++;\n      const urlParams: { [k: string]: string | number } = {};\n      urlParams[FIREBASE_LONGPOLL_ID_PARAM] = this.myID;\n      urlParams[FIREBASE_LONGPOLL_PW_PARAM] = this.myPW;\n      urlParams[FIREBASE_LONGPOLL_SERIAL_PARAM] = this.currentSerial;\n      let theURL = this.urlFn(urlParams);\n      //Now add as much data as we can.\n      let curDataString = '';\n      let i = 0;\n\n      while (this.pendingSegs.length > 0) {\n        //first, lets see if the next segment will fit.\n        const nextSeg = this.pendingSegs[0];\n        if (\n          (nextSeg.d as unknown[]).length +\n            SEG_HEADER_SIZE +\n            curDataString.length <=\n          MAX_URL_DATA_SIZE\n        ) {\n          //great, the segment will fit. Lets append it.\n          const theSeg = this.pendingSegs.shift();\n          curDataString =\n            curDataString +\n            '&' +\n            FIREBASE_LONGPOLL_SEGMENT_NUM_PARAM +\n            i +\n            '=' +\n            theSeg.seg +\n            '&' +\n            FIREBASE_LONGPOLL_SEGMENTS_IN_PACKET +\n            i +\n            '=' +\n            theSeg.ts +\n            '&' +\n            FIREBASE_LONGPOLL_DATA_PARAM +\n            i +\n            '=' +\n            theSeg.d;\n          i++;\n        } else {\n          break;\n        }\n      }\n\n      theURL = theURL + curDataString;\n      this.addLongPollTag_(theURL, this.currentSerial);\n\n      return true;\n    } else {\n      return false;\n    }\n  }\n\n  /**\n   * Queue a packet for transmission to the server.\n   * @param segnum - A sequential id for this packet segment used for reassembly\n   * @param totalsegs - The total number of segments in this packet\n   * @param data - The data for this segment.\n   */\n  enqueueSegment(segnum: number, totalsegs: number, data: unknown) {\n    //add this to the queue of segments to send.\n    this.pendingSegs.push({ seg: segnum, ts: totalsegs, d: data });\n\n    //send the data immediately if there isn't already data being transmitted, unless\n    //startLongPoll hasn't been called yet.\n    if (this.alive) {\n      this.newRequest_();\n    }\n  }\n\n  /**\n   * Add a script tag for a regular long-poll request.\n   * @param url - The URL of the script tag.\n   * @param serial - The serial number of the request.\n   */\n  private addLongPollTag_(url: string, serial: number) {\n    //remember that we sent this request.\n    this.outstandingRequests.add(serial);\n\n    const doNewRequest = () => {\n      this.outstandingRequests.delete(serial);\n      this.newRequest_();\n    };\n\n    // If this request doesn't return on its own accord (by the server sending us some data), we'll\n    // create a new one after the KEEPALIVE interval to make sure we always keep a fresh request open.\n    const keepaliveTimeout = setTimeout(\n      doNewRequest,\n      Math.floor(KEEPALIVE_REQUEST_INTERVAL)\n    );\n\n    const readyStateCB = () => {\n      // Request completed.  Cancel the keepalive.\n      clearTimeout(keepaliveTimeout);\n\n      // Trigger a new request so we can continue receiving data.\n      doNewRequest();\n    };\n\n    this.addTag(url, readyStateCB);\n  }\n\n  /**\n   * Add an arbitrary script tag to the iframe.\n   * @param url - The URL for the script tag source.\n   * @param loadCB - A callback to be triggered once the script has loaded.\n   */\n  addTag(url: string, loadCB: () => void) {\n    if (isNodeSdk()) {\n      // eslint-disable-next-line @typescript-eslint/no-explicit-any\n      (this as any).doNodeLongPoll(url, loadCB);\n    } else {\n      setTimeout(() => {\n        try {\n          // if we're already closed, don't add this poll\n          if (!this.sendNewPolls) {\n            return;\n          }\n          const newScript = this.myIFrame.doc.createElement('script');\n          newScript.type = 'text/javascript';\n          newScript.async = true;\n          newScript.src = url;\n          // eslint-disable-next-line @typescript-eslint/no-explicit-any\n          newScript.onload = (newScript as any).onreadystatechange = function () {\n            // eslint-disable-next-line @typescript-eslint/no-explicit-any\n            const rstate = (newScript as any).readyState;\n            if (!rstate || rstate === 'loaded' || rstate === 'complete') {\n              // eslint-disable-next-line @typescript-eslint/no-explicit-any\n              newScript.onload = (newScript as any).onreadystatechange = null;\n              if (newScript.parentNode) {\n                newScript.parentNode.removeChild(newScript);\n              }\n              loadCB();\n            }\n          };\n          newScript.onerror = () => {\n            log('Long-poll script failed to load: ' + url);\n            this.sendNewPolls = false;\n            this.close();\n          };\n          this.myIFrame.doc.body.appendChild(newScript);\n        } catch (e) {\n          // TODO: we should make this error visible somehow\n        }\n      }, Math.floor(1));\n    }\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { assert, isNodeSdk, jsonEval, stringify } from '@firebase/util';\n\nimport { RepoInfo, repoInfoConnectionURL } from '../core/RepoInfo';\nimport { StatsCollection } from '../core/stats/StatsCollection';\nimport { statsManagerGetCollection } from '../core/stats/StatsManager';\nimport { PersistentStorage } from '../core/storage/storage';\nimport { logWrapper, splitStringBySize } from '../core/util/util';\nimport { SDK_VERSION } from '../core/version';\n\nimport {\n  APP_CHECK_TOKEN_PARAM,\n  FORGE_DOMAIN_RE,\n  FORGE_REF,\n  LAST_SESSION_PARAM,\n  PROTOCOL_VERSION,\n  REFERER_PARAM,\n  TRANSPORT_SESSION_PARAM,\n  VERSION_PARAM,\n  WEBSOCKET\n} from './Constants';\nimport { Transport } from './Transport';\n\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\ndeclare const MozWebSocket: any;\n\nconst WEBSOCKET_MAX_FRAME_SIZE = 16384;\nconst WEBSOCKET_KEEPALIVE_INTERVAL = 45000;\n\nlet WebSocketImpl = null;\nif (typeof MozWebSocket !== 'undefined') {\n  WebSocketImpl = MozWebSocket;\n} else if (typeof WebSocket !== 'undefined') {\n  WebSocketImpl = WebSocket;\n}\n\nexport function setWebSocketImpl(impl) {\n  WebSocketImpl = impl;\n}\n\n/**\n * Create a new websocket connection with the given callbacks.\n */\nexport class WebSocketConnection implements Transport {\n  keepaliveTimer: number | null = null;\n  frames: string[] | null = null;\n  totalFrames = 0;\n  bytesSent = 0;\n  bytesReceived = 0;\n  connURL: string;\n  onDisconnect: (a?: boolean) => void;\n  onMessage: (msg: {}) => void;\n  mySock: WebSocket | null;\n  private log_: (...a: unknown[]) => void;\n  private stats_: StatsCollection;\n  private everConnected_: boolean;\n  private isClosed_: boolean;\n  private nodeAdmin: boolean;\n\n  /**\n   * @param connId identifier for this transport\n   * @param repoInfo The info for the websocket endpoint.\n   * @param applicationId The Firebase App ID for this project.\n   * @param appCheckToken The App Check Token for this client.\n   * @param authToken The Auth Token for this client.\n   * @param transportSessionId Optional transportSessionId if this is connecting\n   * to an existing transport session\n   * @param lastSessionId Optional lastSessionId if there was a previous\n   * connection\n   */\n  constructor(\n    public connId: string,\n    repoInfo: RepoInfo,\n    private applicationId?: string,\n    private appCheckToken?: string,\n    private authToken?: string,\n    transportSessionId?: string,\n    lastSessionId?: string\n  ) {\n    this.log_ = logWrapper(this.connId);\n    this.stats_ = statsManagerGetCollection(repoInfo);\n    this.connURL = WebSocketConnection.connectionURL_(\n      repoInfo,\n      transportSessionId,\n      lastSessionId,\n      appCheckToken\n    );\n    this.nodeAdmin = repoInfo.nodeAdmin;\n  }\n\n  /**\n   * @param repoInfo - The info for the websocket endpoint.\n   * @param transportSessionId - Optional transportSessionId if this is connecting to an existing transport\n   *                                         session\n   * @param lastSessionId - Optional lastSessionId if there was a previous connection\n   * @returns connection url\n   */\n  private static connectionURL_(\n    repoInfo: RepoInfo,\n    transportSessionId?: string,\n    lastSessionId?: string,\n    appCheckToken?: string\n  ): string {\n    const urlParams: { [k: string]: string } = {};\n    urlParams[VERSION_PARAM] = PROTOCOL_VERSION;\n\n    if (\n      !isNodeSdk() &&\n      typeof location !== 'undefined' &&\n      location.hostname &&\n      FORGE_DOMAIN_RE.test(location.hostname)\n    ) {\n      urlParams[REFERER_PARAM] = FORGE_REF;\n    }\n    if (transportSessionId) {\n      urlParams[TRANSPORT_SESSION_PARAM] = transportSessionId;\n    }\n    if (lastSessionId) {\n      urlParams[LAST_SESSION_PARAM] = lastSessionId;\n    }\n    if (appCheckToken) {\n      urlParams[APP_CHECK_TOKEN_PARAM] = appCheckToken;\n    }\n\n    return repoInfoConnectionURL(repoInfo, WEBSOCKET, urlParams);\n  }\n\n  /**\n   * @param onMessage - Callback when messages arrive\n   * @param onDisconnect - Callback with connection lost.\n   */\n  open(onMessage: (msg: {}) => void, onDisconnect: (a?: boolean) => void) {\n    this.onDisconnect = onDisconnect;\n    this.onMessage = onMessage;\n\n    this.log_('Websocket connecting to ' + this.connURL);\n\n    this.everConnected_ = false;\n    // Assume failure until proven otherwise.\n    PersistentStorage.set('previous_websocket_failure', true);\n\n    try {\n      if (isNodeSdk()) {\n        const device = this.nodeAdmin ? 'AdminNode' : 'Node';\n        // UA Format: Firebase/<wire_protocol>/<sdk_version>/<platform>/<device>\n        const options: { [k: string]: object } = {\n          headers: {\n            'User-Agent': `Firebase/${PROTOCOL_VERSION}/${SDK_VERSION}/${process.platform}/${device}`,\n            'X-Firebase-GMPID': this.applicationId || ''\n          }\n        };\n\n        // If using Node with admin creds, AppCheck-related checks are unnecessary.\n        // Note that we send the credentials here even if they aren't admin credentials, which is\n        // not a problem.\n        // Note that this header is just used to bypass appcheck, and the token should still be sent\n        // through the websocket connection once it is established.\n        if (this.authToken) {\n          options.headers['Authorization'] = `Bearer ${this.authToken}`;\n        }\n        if (this.appCheckToken) {\n          options.headers['X-Firebase-AppCheck'] = this.appCheckToken;\n        }\n\n        // Plumb appropriate http_proxy environment variable into faye-websocket if it exists.\n        const env = process['env'];\n        const proxy =\n          this.connURL.indexOf('wss://') === 0\n            ? env['HTTPS_PROXY'] || env['https_proxy']\n            : env['HTTP_PROXY'] || env['http_proxy'];\n\n        if (proxy) {\n          options['proxy'] = { origin: proxy };\n        }\n\n        this.mySock = new WebSocketImpl(this.connURL, [], options);\n      } else {\n        const options: { [k: string]: object } = {\n          headers: {\n            'X-Firebase-GMPID': this.applicationId || '',\n            'X-Firebase-AppCheck': this.appCheckToken || ''\n          }\n        };\n        this.mySock = new WebSocketImpl(this.connURL, [], options);\n      }\n    } catch (e) {\n      this.log_('Error instantiating WebSocket.');\n      const error = e.message || e.data;\n      if (error) {\n        this.log_(error);\n      }\n      this.onClosed_();\n      return;\n    }\n\n    this.mySock.onopen = () => {\n      this.log_('Websocket connected.');\n      this.everConnected_ = true;\n    };\n\n    this.mySock.onclose = () => {\n      this.log_('Websocket connection was disconnected.');\n      this.mySock = null;\n      this.onClosed_();\n    };\n\n    this.mySock.onmessage = m => {\n      this.handleIncomingFrame(m as {});\n    };\n\n    this.mySock.onerror = e => {\n      this.log_('WebSocket error.  Closing connection.');\n      // eslint-disable-next-line @typescript-eslint/no-explicit-any\n      const error = (e as any).message || (e as any).data;\n      if (error) {\n        this.log_(error);\n      }\n      this.onClosed_();\n    };\n  }\n\n  /**\n   * No-op for websockets, we don't need to do anything once the connection is confirmed as open\n   */\n  start() {}\n\n  static forceDisallow_: boolean;\n\n  static forceDisallow() {\n    WebSocketConnection.forceDisallow_ = true;\n  }\n\n  static isAvailable(): boolean {\n    let isOldAndroid = false;\n    if (typeof navigator !== 'undefined' && navigator.userAgent) {\n      const oldAndroidRegex = /Android ([0-9]{0,}\\.[0-9]{0,})/;\n      const oldAndroidMatch = navigator.userAgent.match(oldAndroidRegex);\n      if (oldAndroidMatch && oldAndroidMatch.length > 1) {\n        if (parseFloat(oldAndroidMatch[1]) < 4.4) {\n          isOldAndroid = true;\n        }\n      }\n    }\n\n    return (\n      !isOldAndroid &&\n      WebSocketImpl !== null &&\n      !WebSocketConnection.forceDisallow_\n    );\n  }\n\n  /**\n   * Number of response before we consider the connection \"healthy.\"\n   */\n  static responsesRequiredToBeHealthy = 2;\n\n  /**\n   * Time to wait for the connection te become healthy before giving up.\n   */\n  static healthyTimeout = 30000;\n\n  /**\n   * Returns true if we previously failed to connect with this transport.\n   */\n  static previouslyFailed(): boolean {\n    // If our persistent storage is actually only in-memory storage,\n    // we default to assuming that it previously failed to be safe.\n    return (\n      PersistentStorage.isInMemoryStorage ||\n      PersistentStorage.get('previous_websocket_failure') === true\n    );\n  }\n\n  markConnectionHealthy() {\n    PersistentStorage.remove('previous_websocket_failure');\n  }\n\n  private appendFrame_(data: string) {\n    this.frames.push(data);\n    if (this.frames.length === this.totalFrames) {\n      const fullMess = this.frames.join('');\n      this.frames = null;\n      const jsonMess = jsonEval(fullMess) as object;\n\n      //handle the message\n      this.onMessage(jsonMess);\n    }\n  }\n\n  /**\n   * @param frameCount - The number of frames we are expecting from the server\n   */\n  private handleNewFrameCount_(frameCount: number) {\n    this.totalFrames = frameCount;\n    this.frames = [];\n  }\n\n  /**\n   * Attempts to parse a frame count out of some text. If it can't, assumes a value of 1\n   * @returns Any remaining data to be process, or null if there is none\n   */\n  private extractFrameCount_(data: string): string | null {\n    assert(this.frames === null, 'We already have a frame buffer');\n    // TODO: The server is only supposed to send up to 9999 frames (i.e. length <= 4), but that isn't being enforced\n    // currently.  So allowing larger frame counts (length <= 6).  See https://app.asana.com/0/search/8688598998380/8237608042508\n    if (data.length <= 6) {\n      const frameCount = Number(data);\n      if (!isNaN(frameCount)) {\n        this.handleNewFrameCount_(frameCount);\n        return null;\n      }\n    }\n    this.handleNewFrameCount_(1);\n    return data;\n  }\n\n  /**\n   * Process a websocket frame that has arrived from the server.\n   * @param mess - The frame data\n   */\n  handleIncomingFrame(mess: { [k: string]: unknown }) {\n    if (this.mySock === null) {\n      return; // Chrome apparently delivers incoming packets even after we .close() the connection sometimes.\n    }\n    const data = mess['data'] as string;\n    this.bytesReceived += data.length;\n    this.stats_.incrementCounter('bytes_received', data.length);\n\n    this.resetKeepAlive();\n\n    if (this.frames !== null) {\n      // we're buffering\n      this.appendFrame_(data);\n    } else {\n      // try to parse out a frame count, otherwise, assume 1 and process it\n      const remainingData = this.extractFrameCount_(data);\n      if (remainingData !== null) {\n        this.appendFrame_(remainingData);\n      }\n    }\n  }\n\n  /**\n   * Send a message to the server\n   * @param data - The JSON object to transmit\n   */\n  send(data: {}) {\n    this.resetKeepAlive();\n\n    const dataStr = stringify(data);\n    this.bytesSent += dataStr.length;\n    this.stats_.incrementCounter('bytes_sent', dataStr.length);\n\n    //We can only fit a certain amount in each websocket frame, so we need to split this request\n    //up into multiple pieces if it doesn't fit in one request.\n\n    const dataSegs = splitStringBySize(dataStr, WEBSOCKET_MAX_FRAME_SIZE);\n\n    //Send the length header\n    if (dataSegs.length > 1) {\n      this.sendString_(String(dataSegs.length));\n    }\n\n    //Send the actual data in segments.\n    for (let i = 0; i < dataSegs.length; i++) {\n      this.sendString_(dataSegs[i]);\n    }\n  }\n\n  private shutdown_() {\n    this.isClosed_ = true;\n    if (this.keepaliveTimer) {\n      clearInterval(this.keepaliveTimer);\n      this.keepaliveTimer = null;\n    }\n\n    if (this.mySock) {\n      this.mySock.close();\n      this.mySock = null;\n    }\n  }\n\n  private onClosed_() {\n    if (!this.isClosed_) {\n      this.log_('WebSocket is closing itself');\n      this.shutdown_();\n\n      // since this is an internal close, trigger the close listener\n      if (this.onDisconnect) {\n        this.onDisconnect(this.everConnected_);\n        this.onDisconnect = null;\n      }\n    }\n  }\n\n  /**\n   * External-facing close handler.\n   * Close the websocket and kill the connection.\n   */\n  close() {\n    if (!this.isClosed_) {\n      this.log_('WebSocket is being closed');\n      this.shutdown_();\n    }\n  }\n\n  /**\n   * Kill the current keepalive timer and start a new one, to ensure that it always fires N seconds after\n   * the last activity.\n   */\n  resetKeepAlive() {\n    clearInterval(this.keepaliveTimer);\n    this.keepaliveTimer = setInterval(() => {\n      //If there has been no websocket activity for a while, send a no-op\n      if (this.mySock) {\n        this.sendString_('0');\n      }\n      this.resetKeepAlive();\n      // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    }, Math.floor(WEBSOCKET_KEEPALIVE_INTERVAL)) as any;\n  }\n\n  /**\n   * Send a string over the websocket.\n   *\n   * @param str - String to send.\n   */\n  private sendString_(str: string) {\n    // Firefox seems to sometimes throw exceptions (NS_ERROR_UNEXPECTED) from websocket .send()\n    // calls for some unknown reason.  We treat these as an error and disconnect.\n    // See https://app.asana.com/0/58926111402292/68021340250410\n    try {\n      this.mySock.send(str);\n    } catch (e) {\n      this.log_(\n        'Exception thrown from WebSocket.send():',\n        e.message || e.data,\n        'Closing connection.'\n      );\n      setTimeout(this.onClosed_.bind(this), 0);\n    }\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { RepoInfo } from '../core/RepoInfo';\nimport { warn } from '../core/util/util';\n\nimport { BrowserPollConnection } from './BrowserPollConnection';\nimport { TransportConstructor } from './Transport';\nimport { WebSocketConnection } from './WebSocketConnection';\n\n/**\n * Currently simplistic, this class manages what transport a Connection should use at various stages of its\n * lifecycle.\n *\n * It starts with longpolling in a browser, and httppolling on node. It then upgrades to websockets if\n * they are available.\n */\nexport class TransportManager {\n  private transports_: TransportConstructor[];\n\n  static get ALL_TRANSPORTS() {\n    return [BrowserPollConnection, WebSocketConnection];\n  }\n\n  /**\n   * @param repoInfo - Metadata around the namespace we're connecting to\n   */\n  constructor(repoInfo: RepoInfo) {\n    this.initTransports_(repoInfo);\n  }\n\n  private initTransports_(repoInfo: RepoInfo) {\n    const isWebSocketsAvailable: boolean =\n      WebSocketConnection && WebSocketConnection['isAvailable']();\n    let isSkipPollConnection =\n      isWebSocketsAvailable && !WebSocketConnection.previouslyFailed();\n\n    if (repoInfo.webSocketOnly) {\n      if (!isWebSocketsAvailable) {\n        warn(\n          \"wss:// URL used, but browser isn't known to support websockets.  Trying anyway.\"\n        );\n      }\n\n      isSkipPollConnection = true;\n    }\n\n    if (isSkipPollConnection) {\n      this.transports_ = [WebSocketConnection];\n    } else {\n      const transports = (this.transports_ = [] as TransportConstructor[]);\n      for (const transport of TransportManager.ALL_TRANSPORTS) {\n        if (transport && transport['isAvailable']()) {\n          transports.push(transport);\n        }\n      }\n    }\n  }\n\n  /**\n   * @returns The constructor for the initial transport to use\n   */\n  initialTransport(): TransportConstructor {\n    if (this.transports_.length > 0) {\n      return this.transports_[0];\n    } else {\n      throw new Error('No transports available');\n    }\n  }\n\n  /**\n   * @returns The constructor for the next transport, or null\n   */\n  upgradeTransport(): TransportConstructor | null {\n    if (this.transports_.length > 1) {\n      return this.transports_[1];\n    } else {\n      return null;\n    }\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { RepoInfo } from '../core/RepoInfo';\nimport { PersistentStorage } from '../core/storage/storage';\nimport { Indexable } from '../core/util/misc';\nimport {\n  error,\n  logWrapper,\n  requireKey,\n  setTimeoutNonBlocking,\n  warn\n} from '../core/util/util';\n\nimport { PROTOCOL_VERSION } from './Constants';\nimport { Transport, TransportConstructor } from './Transport';\nimport { TransportManager } from './TransportManager';\n\n// Abort upgrade attempt if it takes longer than 60s.\nconst UPGRADE_TIMEOUT = 60000;\n\n// For some transports (WebSockets), we need to \"validate\" the transport by exchanging a few requests and responses.\n// If we haven't sent enough requests within 5s, we'll start sending noop ping requests.\nconst DELAY_BEFORE_SENDING_EXTRA_REQUESTS = 5000;\n\n// If the initial data sent triggers a lot of bandwidth (i.e. it's a large put or a listen for a large amount of data)\n// then we may not be able to exchange our ping/pong requests within the healthy timeout.  So if we reach the timeout\n// but we've sent/received enough bytes, we don't cancel the connection.\nconst BYTES_SENT_HEALTHY_OVERRIDE = 10 * 1024;\nconst BYTES_RECEIVED_HEALTHY_OVERRIDE = 100 * 1024;\n\nconst enum RealtimeState {\n  CONNECTING,\n  CONNECTED,\n  DISCONNECTED\n}\n\nconst MESSAGE_TYPE = 't';\nconst MESSAGE_DATA = 'd';\nconst CONTROL_SHUTDOWN = 's';\nconst CONTROL_RESET = 'r';\nconst CONTROL_ERROR = 'e';\nconst CONTROL_PONG = 'o';\nconst SWITCH_ACK = 'a';\nconst END_TRANSMISSION = 'n';\nconst PING = 'p';\n\nconst SERVER_HELLO = 'h';\n\n/**\n * Creates a new real-time connection to the server using whichever method works\n * best in the current browser.\n */\nexport class Connection {\n  connectionCount = 0;\n  pendingDataMessages: unknown[] = [];\n  sessionId: string;\n\n  private conn_: Transport;\n  private healthyTimeout_: number;\n  private isHealthy_: boolean;\n  private log_: (...args: unknown[]) => void;\n  private primaryResponsesRequired_: number;\n  private rx_: Transport;\n  private secondaryConn_: Transport;\n  private secondaryResponsesRequired_: number;\n  private state_ = RealtimeState.CONNECTING;\n  private transportManager_: TransportManager;\n  private tx_: Transport;\n\n  /**\n   * @param id - an id for this connection\n   * @param repoInfo_ - the info for the endpoint to connect to\n   * @param applicationId_ - the Firebase App ID for this project\n   * @param appCheckToken_ - The App Check Token for this device.\n   * @param authToken_ - The auth token for this session.\n   * @param onMessage_ - the callback to be triggered when a server-push message arrives\n   * @param onReady_ - the callback to be triggered when this connection is ready to send messages.\n   * @param onDisconnect_ - the callback to be triggered when a connection was lost\n   * @param onKill_ - the callback to be triggered when this connection has permanently shut down.\n   * @param lastSessionId - last session id in persistent connection. is used to clean up old session in real-time server\n   */\n  constructor(\n    public id: string,\n    private repoInfo_: RepoInfo,\n    private applicationId_: string | undefined,\n    private appCheckToken_: string | undefined,\n    private authToken_: string | undefined,\n    private onMessage_: (a: {}) => void,\n    private onReady_: (a: number, b: string) => void,\n    private onDisconnect_: () => void,\n    private onKill_: (a: string) => void,\n    public lastSessionId?: string\n  ) {\n    this.log_ = logWrapper('c:' + this.id + ':');\n    this.transportManager_ = new TransportManager(repoInfo_);\n    this.log_('Connection created');\n    this.start_();\n  }\n\n  /**\n   * Starts a connection attempt\n   */\n  private start_(): void {\n    const conn = this.transportManager_.initialTransport();\n    this.conn_ = new conn(\n      this.nextTransportId_(),\n      this.repoInfo_,\n      this.applicationId_,\n      this.appCheckToken_,\n      this.authToken_,\n      null,\n      this.lastSessionId\n    );\n\n    // For certain transports (WebSockets), we need to send and receive several messages back and forth before we\n    // can consider the transport healthy.\n    this.primaryResponsesRequired_ = conn['responsesRequiredToBeHealthy'] || 0;\n\n    const onMessageReceived = this.connReceiver_(this.conn_);\n    const onConnectionLost = this.disconnReceiver_(this.conn_);\n    this.tx_ = this.conn_;\n    this.rx_ = this.conn_;\n    this.secondaryConn_ = null;\n    this.isHealthy_ = false;\n\n    /*\n     * Firefox doesn't like when code from one iframe tries to create another iframe by way of the parent frame.\n     * This can occur in the case of a redirect, i.e. we guessed wrong on what server to connect to and received a reset.\n     * Somehow, setTimeout seems to make this ok. That doesn't make sense from a security perspective, since you should\n     * still have the context of your originating frame.\n     */\n    setTimeout(() => {\n      // this.conn_ gets set to null in some of the tests. Check to make sure it still exists before using it\n      this.conn_ && this.conn_.open(onMessageReceived, onConnectionLost);\n    }, Math.floor(0));\n\n    const healthyTimeoutMS = conn['healthyTimeout'] || 0;\n    if (healthyTimeoutMS > 0) {\n      this.healthyTimeout_ = setTimeoutNonBlocking(() => {\n        this.healthyTimeout_ = null;\n        if (!this.isHealthy_) {\n          if (\n            this.conn_ &&\n            this.conn_.bytesReceived > BYTES_RECEIVED_HEALTHY_OVERRIDE\n          ) {\n            this.log_(\n              'Connection exceeded healthy timeout but has received ' +\n                this.conn_.bytesReceived +\n                ' bytes.  Marking connection healthy.'\n            );\n            this.isHealthy_ = true;\n            this.conn_.markConnectionHealthy();\n          } else if (\n            this.conn_ &&\n            this.conn_.bytesSent > BYTES_SENT_HEALTHY_OVERRIDE\n          ) {\n            this.log_(\n              'Connection exceeded healthy timeout but has sent ' +\n                this.conn_.bytesSent +\n                ' bytes.  Leaving connection alive.'\n            );\n            // NOTE: We don't want to mark it healthy, since we have no guarantee that the bytes have made it to\n            // the server.\n          } else {\n            this.log_('Closing unhealthy connection after timeout.');\n            this.close();\n          }\n        }\n        // eslint-disable-next-line @typescript-eslint/no-explicit-any\n      }, Math.floor(healthyTimeoutMS)) as any;\n    }\n  }\n\n  private nextTransportId_(): string {\n    return 'c:' + this.id + ':' + this.connectionCount++;\n  }\n\n  private disconnReceiver_(conn) {\n    return everConnected => {\n      if (conn === this.conn_) {\n        this.onConnectionLost_(everConnected);\n      } else if (conn === this.secondaryConn_) {\n        this.log_('Secondary connection lost.');\n        this.onSecondaryConnectionLost_();\n      } else {\n        this.log_('closing an old connection');\n      }\n    };\n  }\n\n  private connReceiver_(conn: Transport) {\n    return (message: Indexable) => {\n      if (this.state_ !== RealtimeState.DISCONNECTED) {\n        if (conn === this.rx_) {\n          this.onPrimaryMessageReceived_(message);\n        } else if (conn === this.secondaryConn_) {\n          this.onSecondaryMessageReceived_(message);\n        } else {\n          this.log_('message on old connection');\n        }\n      }\n    };\n  }\n\n  /**\n   * @param dataMsg - An arbitrary data message to be sent to the server\n   */\n  sendRequest(dataMsg: object) {\n    // wrap in a data message envelope and send it on\n    const msg = { t: 'd', d: dataMsg };\n    this.sendData_(msg);\n  }\n\n  tryCleanupConnection() {\n    if (this.tx_ === this.secondaryConn_ && this.rx_ === this.secondaryConn_) {\n      this.log_(\n        'cleaning up and promoting a connection: ' + this.secondaryConn_.connId\n      );\n      this.conn_ = this.secondaryConn_;\n      this.secondaryConn_ = null;\n      // the server will shutdown the old connection\n    }\n  }\n\n  private onSecondaryControl_(controlData: { [k: string]: unknown }) {\n    if (MESSAGE_TYPE in controlData) {\n      const cmd = controlData[MESSAGE_TYPE] as string;\n      if (cmd === SWITCH_ACK) {\n        this.upgradeIfSecondaryHealthy_();\n      } else if (cmd === CONTROL_RESET) {\n        // Most likely the session wasn't valid. Abandon the switch attempt\n        this.log_('Got a reset on secondary, closing it');\n        this.secondaryConn_.close();\n        // If we were already using this connection for something, than we need to fully close\n        if (\n          this.tx_ === this.secondaryConn_ ||\n          this.rx_ === this.secondaryConn_\n        ) {\n          this.close();\n        }\n      } else if (cmd === CONTROL_PONG) {\n        this.log_('got pong on secondary.');\n        this.secondaryResponsesRequired_--;\n        this.upgradeIfSecondaryHealthy_();\n      }\n    }\n  }\n\n  private onSecondaryMessageReceived_(parsedData: Indexable) {\n    const layer: string = requireKey('t', parsedData) as string;\n    const data: unknown = requireKey('d', parsedData);\n    if (layer === 'c') {\n      this.onSecondaryControl_(data as Indexable);\n    } else if (layer === 'd') {\n      // got a data message, but we're still second connection. Need to buffer it up\n      this.pendingDataMessages.push(data);\n    } else {\n      throw new Error('Unknown protocol layer: ' + layer);\n    }\n  }\n\n  private upgradeIfSecondaryHealthy_() {\n    if (this.secondaryResponsesRequired_ <= 0) {\n      this.log_('Secondary connection is healthy.');\n      this.isHealthy_ = true;\n      this.secondaryConn_.markConnectionHealthy();\n      this.proceedWithUpgrade_();\n    } else {\n      // Send a ping to make sure the connection is healthy.\n      this.log_('sending ping on secondary.');\n      this.secondaryConn_.send({ t: 'c', d: { t: PING, d: {} } });\n    }\n  }\n\n  private proceedWithUpgrade_() {\n    // tell this connection to consider itself open\n    this.secondaryConn_.start();\n    // send ack\n    this.log_('sending client ack on secondary');\n    this.secondaryConn_.send({ t: 'c', d: { t: SWITCH_ACK, d: {} } });\n\n    // send end packet on primary transport, switch to sending on this one\n    // can receive on this one, buffer responses until end received on primary transport\n    this.log_('Ending transmission on primary');\n    this.conn_.send({ t: 'c', d: { t: END_TRANSMISSION, d: {} } });\n    this.tx_ = this.secondaryConn_;\n\n    this.tryCleanupConnection();\n  }\n\n  private onPrimaryMessageReceived_(parsedData: { [k: string]: unknown }) {\n    // Must refer to parsedData properties in quotes, so closure doesn't touch them.\n    const layer: string = requireKey('t', parsedData) as string;\n    const data: unknown = requireKey('d', parsedData);\n    if (layer === 'c') {\n      this.onControl_(data as { [k: string]: unknown });\n    } else if (layer === 'd') {\n      this.onDataMessage_(data);\n    }\n  }\n\n  private onDataMessage_(message: unknown) {\n    this.onPrimaryResponse_();\n\n    // We don't do anything with data messages, just kick them up a level\n    this.onMessage_(message);\n  }\n\n  private onPrimaryResponse_() {\n    if (!this.isHealthy_) {\n      this.primaryResponsesRequired_--;\n      if (this.primaryResponsesRequired_ <= 0) {\n        this.log_('Primary connection is healthy.');\n        this.isHealthy_ = true;\n        this.conn_.markConnectionHealthy();\n      }\n    }\n  }\n\n  private onControl_(controlData: { [k: string]: unknown }) {\n    const cmd: string = requireKey(MESSAGE_TYPE, controlData) as string;\n    if (MESSAGE_DATA in controlData) {\n      const payload = controlData[MESSAGE_DATA];\n      if (cmd === SERVER_HELLO) {\n        this.onHandshake_(\n          payload as {\n            ts: number;\n            v: string;\n            h: string;\n            s: string;\n          }\n        );\n      } else if (cmd === END_TRANSMISSION) {\n        this.log_('recvd end transmission on primary');\n        this.rx_ = this.secondaryConn_;\n        for (let i = 0; i < this.pendingDataMessages.length; ++i) {\n          this.onDataMessage_(this.pendingDataMessages[i]);\n        }\n        this.pendingDataMessages = [];\n        this.tryCleanupConnection();\n      } else if (cmd === CONTROL_SHUTDOWN) {\n        // This was previously the 'onKill' callback passed to the lower-level connection\n        // payload in this case is the reason for the shutdown. Generally a human-readable error\n        this.onConnectionShutdown_(payload as string);\n      } else if (cmd === CONTROL_RESET) {\n        // payload in this case is the host we should contact\n        this.onReset_(payload as string);\n      } else if (cmd === CONTROL_ERROR) {\n        error('Server Error: ' + payload);\n      } else if (cmd === CONTROL_PONG) {\n        this.log_('got pong on primary.');\n        this.onPrimaryResponse_();\n        this.sendPingOnPrimaryIfNecessary_();\n      } else {\n        error('Unknown control packet command: ' + cmd);\n      }\n    }\n  }\n\n  /**\n   * @param handshake - The handshake data returned from the server\n   */\n  private onHandshake_(handshake: {\n    ts: number;\n    v: string;\n    h: string;\n    s: string;\n  }): void {\n    const timestamp = handshake.ts;\n    const version = handshake.v;\n    const host = handshake.h;\n    this.sessionId = handshake.s;\n    this.repoInfo_.host = host;\n    // if we've already closed the connection, then don't bother trying to progress further\n    if (this.state_ === RealtimeState.CONNECTING) {\n      this.conn_.start();\n      this.onConnectionEstablished_(this.conn_, timestamp);\n      if (PROTOCOL_VERSION !== version) {\n        warn('Protocol version mismatch detected');\n      }\n      // TODO: do we want to upgrade? when? maybe a delay?\n      this.tryStartUpgrade_();\n    }\n  }\n\n  private tryStartUpgrade_() {\n    const conn = this.transportManager_.upgradeTransport();\n    if (conn) {\n      this.startUpgrade_(conn);\n    }\n  }\n\n  private startUpgrade_(conn: TransportConstructor) {\n    this.secondaryConn_ = new conn(\n      this.nextTransportId_(),\n      this.repoInfo_,\n      this.applicationId_,\n      this.appCheckToken_,\n      this.authToken_,\n      this.sessionId\n    );\n    // For certain transports (WebSockets), we need to send and receive several messages back and forth before we\n    // can consider the transport healthy.\n    this.secondaryResponsesRequired_ =\n      conn['responsesRequiredToBeHealthy'] || 0;\n\n    const onMessage = this.connReceiver_(this.secondaryConn_);\n    const onDisconnect = this.disconnReceiver_(this.secondaryConn_);\n    this.secondaryConn_.open(onMessage, onDisconnect);\n\n    // If we haven't successfully upgraded after UPGRADE_TIMEOUT, give up and kill the secondary.\n    setTimeoutNonBlocking(() => {\n      if (this.secondaryConn_) {\n        this.log_('Timed out trying to upgrade.');\n        this.secondaryConn_.close();\n      }\n    }, Math.floor(UPGRADE_TIMEOUT));\n  }\n\n  private onReset_(host: string) {\n    this.log_('Reset packet received.  New host: ' + host);\n    this.repoInfo_.host = host;\n    // TODO: if we're already \"connected\", we need to trigger a disconnect at the next layer up.\n    // We don't currently support resets after the connection has already been established\n    if (this.state_ === RealtimeState.CONNECTED) {\n      this.close();\n    } else {\n      // Close whatever connections we have open and start again.\n      this.closeConnections_();\n      this.start_();\n    }\n  }\n\n  private onConnectionEstablished_(conn: Transport, timestamp: number) {\n    this.log_('Realtime connection established.');\n    this.conn_ = conn;\n    this.state_ = RealtimeState.CONNECTED;\n\n    if (this.onReady_) {\n      this.onReady_(timestamp, this.sessionId);\n      this.onReady_ = null;\n    }\n\n    // If after 5 seconds we haven't sent enough requests to the server to get the connection healthy,\n    // send some pings.\n    if (this.primaryResponsesRequired_ === 0) {\n      this.log_('Primary connection is healthy.');\n      this.isHealthy_ = true;\n    } else {\n      setTimeoutNonBlocking(() => {\n        this.sendPingOnPrimaryIfNecessary_();\n      }, Math.floor(DELAY_BEFORE_SENDING_EXTRA_REQUESTS));\n    }\n  }\n\n  private sendPingOnPrimaryIfNecessary_() {\n    // If the connection isn't considered healthy yet, we'll send a noop ping packet request.\n    if (!this.isHealthy_ && this.state_ === RealtimeState.CONNECTED) {\n      this.log_('sending ping on primary.');\n      this.sendData_({ t: 'c', d: { t: PING, d: {} } });\n    }\n  }\n\n  private onSecondaryConnectionLost_() {\n    const conn = this.secondaryConn_;\n    this.secondaryConn_ = null;\n    if (this.tx_ === conn || this.rx_ === conn) {\n      // we are relying on this connection already in some capacity. Therefore, a failure is real\n      this.close();\n    }\n  }\n\n  /**\n   * @param everConnected - Whether or not the connection ever reached a server. Used to determine if\n   * we should flush the host cache\n   */\n  private onConnectionLost_(everConnected: boolean) {\n    this.conn_ = null;\n\n    // NOTE: IF you're seeing a Firefox error for this line, I think it might be because it's getting\n    // called on window close and RealtimeState.CONNECTING is no longer defined.  Just a guess.\n    if (!everConnected && this.state_ === RealtimeState.CONNECTING) {\n      this.log_('Realtime connection failed.');\n      // Since we failed to connect at all, clear any cached entry for this namespace in case the machine went away\n      if (this.repoInfo_.isCacheableHost()) {\n        PersistentStorage.remove('host:' + this.repoInfo_.host);\n        // reset the internal host to what we would show the user, i.e. <ns>.firebaseio.com\n        this.repoInfo_.internalHost = this.repoInfo_.host;\n      }\n    } else if (this.state_ === RealtimeState.CONNECTED) {\n      this.log_('Realtime connection lost.');\n    }\n\n    this.close();\n  }\n\n  private onConnectionShutdown_(reason: string) {\n    this.log_('Connection shutdown command received. Shutting down...');\n\n    if (this.onKill_) {\n      this.onKill_(reason);\n      this.onKill_ = null;\n    }\n\n    // We intentionally don't want to fire onDisconnect (kill is a different case),\n    // so clear the callback.\n    this.onDisconnect_ = null;\n\n    this.close();\n  }\n\n  private sendData_(data: object) {\n    if (this.state_ !== RealtimeState.CONNECTED) {\n      throw 'Connection is not connected';\n    } else {\n      this.tx_.send(data);\n    }\n  }\n\n  /**\n   * Cleans up this connection, calling the appropriate callbacks\n   */\n  close() {\n    if (this.state_ !== RealtimeState.DISCONNECTED) {\n      this.log_('Closing realtime connection.');\n      this.state_ = RealtimeState.DISCONNECTED;\n\n      this.closeConnections_();\n\n      if (this.onDisconnect_) {\n        this.onDisconnect_();\n        this.onDisconnect_ = null;\n      }\n    }\n  }\n\n  private closeConnections_() {\n    this.log_('Shutting down all connections');\n    if (this.conn_) {\n      this.conn_.close();\n      this.conn_ = null;\n    }\n\n    if (this.secondaryConn_) {\n      this.secondaryConn_.close();\n      this.secondaryConn_ = null;\n    }\n\n    if (this.healthyTimeout_) {\n      clearTimeout(this.healthyTimeout_);\n      this.healthyTimeout_ = null;\n    }\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { QueryContext } from './view/EventRegistration';\n\n/**\n * Interface defining the set of actions that can be performed against the Firebase server\n * (basically corresponds to our wire protocol).\n *\n * @interface\n */\nexport abstract class ServerActions {\n  abstract listen(\n    query: QueryContext,\n    currentHashFn: () => string,\n    tag: number | null,\n    onComplete: (a: string, b: unknown) => void\n  ): void;\n\n  /**\n   * Remove a listen.\n   */\n  abstract unlisten(query: QueryContext, tag: number | null): void;\n\n  /**\n   * Get the server value satisfying this query.\n   */\n  abstract get(query: QueryContext): Promise<string>;\n\n  put(\n    pathString: string,\n    data: unknown,\n    onComplete?: (a: string, b: string) => void,\n    hash?: string\n  ) {}\n\n  merge(\n    pathString: string,\n    data: unknown,\n    onComplete: (a: string, b: string | null) => void,\n    hash?: string\n  ) {}\n\n  /**\n   * Refreshes the auth token for the current connection.\n   * @param token - The authentication token\n   */\n  refreshAuthToken(token: string) {}\n\n  /**\n   * Refreshes the app check token for the current connection.\n   * @param token The app check token\n   */\n  refreshAppCheckToken(token: string) {}\n\n  onDisconnectPut(\n    pathString: string,\n    data: unknown,\n    onComplete?: (a: string, b: string) => void\n  ) {}\n\n  onDisconnectMerge(\n    pathString: string,\n    data: unknown,\n    onComplete?: (a: string, b: string) => void\n  ) {}\n\n  onDisconnectCancel(\n    pathString: string,\n    onComplete?: (a: string, b: string) => void\n  ) {}\n\n  reportStats(stats: { [k: string]: unknown }) {}\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { assert } from '@firebase/util';\n\n/**\n * Base class to be used if you want to emit events. Call the constructor with\n * the set of allowed event names.\n */\nexport abstract class EventEmitter {\n  private listeners_: {\n    [eventType: string]: Array<{\n      callback(...args: unknown[]): void;\n      context: unknown;\n    }>;\n  } = {};\n\n  constructor(private allowedEvents_: string[]) {\n    assert(\n      Array.isArray(allowedEvents_) && allowedEvents_.length > 0,\n      'Requires a non-empty array'\n    );\n  }\n\n  /**\n   * To be overridden by derived classes in order to fire an initial event when\n   * somebody subscribes for data.\n   *\n   * @returns {Array.<*>} Array of parameters to trigger initial event with.\n   */\n  abstract getInitialEvent(eventType: string): unknown[];\n\n  /**\n   * To be called by derived classes to trigger events.\n   */\n  protected trigger(eventType: string, ...varArgs: unknown[]) {\n    if (Array.isArray(this.listeners_[eventType])) {\n      // Clone the list, since callbacks could add/remove listeners.\n      const listeners = [...this.listeners_[eventType]];\n\n      for (let i = 0; i < listeners.length; i++) {\n        listeners[i].callback.apply(listeners[i].context, varArgs);\n      }\n    }\n  }\n\n  on(eventType: string, callback: (a: unknown) => void, context: unknown) {\n    this.validateEventType_(eventType);\n    this.listeners_[eventType] = this.listeners_[eventType] || [];\n    this.listeners_[eventType].push({ callback, context });\n\n    const eventData = this.getInitialEvent(eventType);\n    if (eventData) {\n      callback.apply(context, eventData);\n    }\n  }\n\n  off(eventType: string, callback: (a: unknown) => void, context: unknown) {\n    this.validateEventType_(eventType);\n    const listeners = this.listeners_[eventType] || [];\n    for (let i = 0; i < listeners.length; i++) {\n      if (\n        listeners[i].callback === callback &&\n        (!context || context === listeners[i].context)\n      ) {\n        listeners.splice(i, 1);\n        return;\n      }\n    }\n  }\n\n  private validateEventType_(eventType: string) {\n    assert(\n      this.allowedEvents_.find(et => {\n        return et === eventType;\n      }),\n      'Unknown event: ' + eventType\n    );\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { assert, isMobileCordova } from '@firebase/util';\n\nimport { EventEmitter } from './EventEmitter';\n\n/**\n * Monitors online state (as reported by window.online/offline events).\n *\n * The expectation is that this could have many false positives (thinks we are online\n * when we're not), but no false negatives.  So we can safely use it to determine when\n * we definitely cannot reach the internet.\n */\nexport class OnlineMonitor extends EventEmitter {\n  private online_ = true;\n\n  static getInstance() {\n    return new OnlineMonitor();\n  }\n\n  constructor() {\n    super(['online']);\n\n    // We've had repeated complaints that Cordova apps can get stuck \"offline\", e.g.\n    // https://forum.ionicframework.com/t/firebase-connection-is-lost-and-never-come-back/43810\n    // It would seem that the 'online' event does not always fire consistently. So we disable it\n    // for Cordova.\n    if (\n      typeof window !== 'undefined' &&\n      typeof window.addEventListener !== 'undefined' &&\n      !isMobileCordova()\n    ) {\n      window.addEventListener(\n        'online',\n        () => {\n          if (!this.online_) {\n            this.online_ = true;\n            this.trigger('online', true);\n          }\n        },\n        false\n      );\n\n      window.addEventListener(\n        'offline',\n        () => {\n          if (this.online_) {\n            this.online_ = false;\n            this.trigger('online', false);\n          }\n        },\n        false\n      );\n    }\n  }\n\n  getInitialEvent(eventType: string): boolean[] {\n    assert(eventType === 'online', 'Unknown event type: ' + eventType);\n    return [this.online_];\n  }\n\n  currentlyOnline(): boolean {\n    return this.online_;\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { stringLength } from '@firebase/util';\n\nimport { nameCompare } from './util';\n\n/** Maximum key depth. */\nconst MAX_PATH_DEPTH = 32;\n\n/** Maximum number of (UTF8) bytes in a Firebase path. */\nconst MAX_PATH_LENGTH_BYTES = 768;\n\n/**\n * An immutable object representing a parsed path.  It's immutable so that you\n * can pass them around to other functions without worrying about them changing\n * it.\n */\n\nexport class Path {\n  pieces_: string[];\n  pieceNum_: number;\n\n  /**\n   * @param pathOrString - Path string to parse, or another path, or the raw\n   * tokens array\n   */\n  constructor(pathOrString: string | string[], pieceNum?: number) {\n    if (pieceNum === void 0) {\n      this.pieces_ = (pathOrString as string).split('/');\n\n      // Remove empty pieces.\n      let copyTo = 0;\n      for (let i = 0; i < this.pieces_.length; i++) {\n        if (this.pieces_[i].length > 0) {\n          this.pieces_[copyTo] = this.pieces_[i];\n          copyTo++;\n        }\n      }\n      this.pieces_.length = copyTo;\n\n      this.pieceNum_ = 0;\n    } else {\n      this.pieces_ = pathOrString as string[];\n      this.pieceNum_ = pieceNum;\n    }\n  }\n\n  toString(): string {\n    let pathString = '';\n    for (let i = this.pieceNum_; i < this.pieces_.length; i++) {\n      if (this.pieces_[i] !== '') {\n        pathString += '/' + this.pieces_[i];\n      }\n    }\n\n    return pathString || '/';\n  }\n}\n\nexport function newEmptyPath(): Path {\n  return new Path('');\n}\n\nexport function pathGetFront(path: Path): string | null {\n  if (path.pieceNum_ >= path.pieces_.length) {\n    return null;\n  }\n\n  return path.pieces_[path.pieceNum_];\n}\n\n/**\n * @returns The number of segments in this path\n */\nexport function pathGetLength(path: Path): number {\n  return path.pieces_.length - path.pieceNum_;\n}\n\nexport function pathPopFront(path: Path): Path {\n  let pieceNum = path.pieceNum_;\n  if (pieceNum < path.pieces_.length) {\n    pieceNum++;\n  }\n  return new Path(path.pieces_, pieceNum);\n}\n\nexport function pathGetBack(path: Path): string | null {\n  if (path.pieceNum_ < path.pieces_.length) {\n    return path.pieces_[path.pieces_.length - 1];\n  }\n\n  return null;\n}\n\nexport function pathToUrlEncodedString(path: Path): string {\n  let pathString = '';\n  for (let i = path.pieceNum_; i < path.pieces_.length; i++) {\n    if (path.pieces_[i] !== '') {\n      pathString += '/' + encodeURIComponent(String(path.pieces_[i]));\n    }\n  }\n\n  return pathString || '/';\n}\n\n/**\n * Shallow copy of the parts of the path.\n *\n */\nexport function pathSlice(path: Path, begin: number = 0): string[] {\n  return path.pieces_.slice(path.pieceNum_ + begin);\n}\n\nexport function pathParent(path: Path): Path | null {\n  if (path.pieceNum_ >= path.pieces_.length) {\n    return null;\n  }\n\n  const pieces = [];\n  for (let i = path.pieceNum_; i < path.pieces_.length - 1; i++) {\n    pieces.push(path.pieces_[i]);\n  }\n\n  return new Path(pieces, 0);\n}\n\nexport function pathChild(path: Path, childPathObj: string | Path): Path {\n  const pieces = [];\n  for (let i = path.pieceNum_; i < path.pieces_.length; i++) {\n    pieces.push(path.pieces_[i]);\n  }\n\n  if (childPathObj instanceof Path) {\n    for (let i = childPathObj.pieceNum_; i < childPathObj.pieces_.length; i++) {\n      pieces.push(childPathObj.pieces_[i]);\n    }\n  } else {\n    const childPieces = childPathObj.split('/');\n    for (let i = 0; i < childPieces.length; i++) {\n      if (childPieces[i].length > 0) {\n        pieces.push(childPieces[i]);\n      }\n    }\n  }\n\n  return new Path(pieces, 0);\n}\n\n/**\n * @returns True if there are no segments in this path\n */\nexport function pathIsEmpty(path: Path): boolean {\n  return path.pieceNum_ >= path.pieces_.length;\n}\n\n/**\n * @returns The path from outerPath to innerPath\n */\nexport function newRelativePath(outerPath: Path, innerPath: Path): Path {\n  const outer = pathGetFront(outerPath),\n    inner = pathGetFront(innerPath);\n  if (outer === null) {\n    return innerPath;\n  } else if (outer === inner) {\n    return newRelativePath(pathPopFront(outerPath), pathPopFront(innerPath));\n  } else {\n    throw new Error(\n      'INTERNAL ERROR: innerPath (' +\n        innerPath +\n        ') is not within ' +\n        'outerPath (' +\n        outerPath +\n        ')'\n    );\n  }\n}\n\n/**\n * @returns -1, 0, 1 if left is less, equal, or greater than the right.\n */\nexport function pathCompare(left: Path, right: Path): number {\n  const leftKeys = pathSlice(left, 0);\n  const rightKeys = pathSlice(right, 0);\n  for (let i = 0; i < leftKeys.length && i < rightKeys.length; i++) {\n    const cmp = nameCompare(leftKeys[i], rightKeys[i]);\n    if (cmp !== 0) {\n      return cmp;\n    }\n  }\n  if (leftKeys.length === rightKeys.length) {\n    return 0;\n  }\n  return leftKeys.length < rightKeys.length ? -1 : 1;\n}\n\n/**\n * @returns true if paths are the same.\n */\nexport function pathEquals(path: Path, other: Path): boolean {\n  if (pathGetLength(path) !== pathGetLength(other)) {\n    return false;\n  }\n\n  for (\n    let i = path.pieceNum_, j = other.pieceNum_;\n    i <= path.pieces_.length;\n    i++, j++\n  ) {\n    if (path.pieces_[i] !== other.pieces_[j]) {\n      return false;\n    }\n  }\n\n  return true;\n}\n\n/**\n * @returns True if this path is a parent (or the same as) other\n */\nexport function pathContains(path: Path, other: Path): boolean {\n  let i = path.pieceNum_;\n  let j = other.pieceNum_;\n  if (pathGetLength(path) > pathGetLength(other)) {\n    return false;\n  }\n  while (i < path.pieces_.length) {\n    if (path.pieces_[i] !== other.pieces_[j]) {\n      return false;\n    }\n    ++i;\n    ++j;\n  }\n  return true;\n}\n\n/**\n * Dynamic (mutable) path used to count path lengths.\n *\n * This class is used to efficiently check paths for valid\n * length (in UTF8 bytes) and depth (used in path validation).\n *\n * Throws Error exception if path is ever invalid.\n *\n * The definition of a path always begins with '/'.\n */\nexport class ValidationPath {\n  parts_: string[];\n  /** Initialize to number of '/' chars needed in path. */\n  byteLength_: number;\n\n  /**\n   * @param path - Initial Path.\n   * @param errorPrefix_ - Prefix for any error messages.\n   */\n  constructor(path: Path, public errorPrefix_: string) {\n    this.parts_ = pathSlice(path, 0);\n    /** Initialize to number of '/' chars needed in path. */\n    this.byteLength_ = Math.max(1, this.parts_.length);\n\n    for (let i = 0; i < this.parts_.length; i++) {\n      this.byteLength_ += stringLength(this.parts_[i]);\n    }\n    validationPathCheckValid(this);\n  }\n}\n\nexport function validationPathPush(\n  validationPath: ValidationPath,\n  child: string\n): void {\n  // Count the needed '/'\n  if (validationPath.parts_.length > 0) {\n    validationPath.byteLength_ += 1;\n  }\n  validationPath.parts_.push(child);\n  validationPath.byteLength_ += stringLength(child);\n  validationPathCheckValid(validationPath);\n}\n\nexport function validationPathPop(validationPath: ValidationPath): void {\n  const last = validationPath.parts_.pop();\n  validationPath.byteLength_ -= stringLength(last);\n  // Un-count the previous '/'\n  if (validationPath.parts_.length > 0) {\n    validationPath.byteLength_ -= 1;\n  }\n}\n\nfunction validationPathCheckValid(validationPath: ValidationPath): void {\n  if (validationPath.byteLength_ > MAX_PATH_LENGTH_BYTES) {\n    throw new Error(\n      validationPath.errorPrefix_ +\n        'has a key path longer than ' +\n        MAX_PATH_LENGTH_BYTES +\n        ' bytes (' +\n        validationPath.byteLength_ +\n        ').'\n    );\n  }\n  if (validationPath.parts_.length > MAX_PATH_DEPTH) {\n    throw new Error(\n      validationPath.errorPrefix_ +\n        'path specified exceeds the maximum depth that can be written (' +\n        MAX_PATH_DEPTH +\n        ') or object contains a cycle ' +\n        validationPathToErrorString(validationPath)\n    );\n  }\n}\n\n/**\n * String for use in error messages - uses '.' notation for path.\n */\nexport function validationPathToErrorString(\n  validationPath: ValidationPath\n): string {\n  if (validationPath.parts_.length === 0) {\n    return '';\n  }\n  return \"in property '\" + validationPath.parts_.join('.') + \"'\";\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { assert } from '@firebase/util';\n\nimport { EventEmitter } from './EventEmitter';\n\ndeclare const document: Document;\n\nexport class VisibilityMonitor extends EventEmitter {\n  private visible_: boolean;\n\n  static getInstance() {\n    return new VisibilityMonitor();\n  }\n\n  constructor() {\n    super(['visible']);\n    let hidden: string;\n    let visibilityChange: string;\n    if (\n      typeof document !== 'undefined' &&\n      typeof document.addEventListener !== 'undefined'\n    ) {\n      if (typeof document['hidden'] !== 'undefined') {\n        // Opera 12.10 and Firefox 18 and later support\n        visibilityChange = 'visibilitychange';\n        hidden = 'hidden';\n      } else if (typeof document['mozHidden'] !== 'undefined') {\n        visibilityChange = 'mozvisibilitychange';\n        hidden = 'mozHidden';\n      } else if (typeof document['msHidden'] !== 'undefined') {\n        visibilityChange = 'msvisibilitychange';\n        hidden = 'msHidden';\n      } else if (typeof document['webkitHidden'] !== 'undefined') {\n        visibilityChange = 'webkitvisibilitychange';\n        hidden = 'webkitHidden';\n      }\n    }\n\n    // Initially, we always assume we are visible. This ensures that in browsers\n    // without page visibility support or in cases where we are never visible\n    // (e.g. chrome extension), we act as if we are visible, i.e. don't delay\n    // reconnects\n    this.visible_ = true;\n\n    if (visibilityChange) {\n      document.addEventListener(\n        visibilityChange,\n        () => {\n          const visible = !document[hidden];\n          if (visible !== this.visible_) {\n            this.visible_ = visible;\n            this.trigger('visible', visible);\n          }\n        },\n        false\n      );\n    }\n  }\n\n  getInitialEvent(eventType: string): boolean[] {\n    assert(eventType === 'visible', 'Unknown event type: ' + eventType);\n    return [this.visible_];\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {\n  assert,\n  contains,\n  Deferred,\n  isEmpty,\n  isMobileCordova,\n  isNodeSdk,\n  isReactNative,\n  isValidFormat,\n  safeGet,\n  stringify,\n  isAdmin\n} from '@firebase/util';\n\nimport { Connection } from '../realtime/Connection';\n\nimport { AppCheckTokenProvider } from './AppCheckTokenProvider';\nimport { AuthTokenProvider } from './AuthTokenProvider';\nimport { RepoInfo } from './RepoInfo';\nimport { ServerActions } from './ServerActions';\nimport { OnlineMonitor } from './util/OnlineMonitor';\nimport { Path } from './util/Path';\nimport { error, log, logWrapper, warn, ObjectToUniqueKey } from './util/util';\nimport { VisibilityMonitor } from './util/VisibilityMonitor';\nimport { SDK_VERSION } from './version';\nimport { QueryContext } from './view/EventRegistration';\n\nconst RECONNECT_MIN_DELAY = 1000;\nconst RECONNECT_MAX_DELAY_DEFAULT = 60 * 5 * 1000; // 5 minutes in milliseconds (Case: 1858)\nconst GET_CONNECT_TIMEOUT = 3 * 1000;\nconst RECONNECT_MAX_DELAY_FOR_ADMINS = 30 * 1000; // 30 seconds for admin clients (likely to be a backend server)\nconst RECONNECT_DELAY_MULTIPLIER = 1.3;\nconst RECONNECT_DELAY_RESET_TIMEOUT = 30000; // Reset delay back to MIN_DELAY after being connected for 30sec.\nconst SERVER_KILL_INTERRUPT_REASON = 'server_kill';\n\n// If auth fails repeatedly, we'll assume something is wrong and log a warning / back off.\nconst INVALID_TOKEN_THRESHOLD = 3;\n\ninterface ListenSpec {\n  onComplete(s: string, p?: unknown): void;\n\n  hashFn(): string;\n\n  query: QueryContext;\n  tag: number | null;\n}\n\ninterface OnDisconnectRequest {\n  pathString: string;\n  action: string;\n  data: unknown;\n  onComplete?: (a: string, b: string) => void;\n}\n\ninterface OutstandingPut {\n  action: string;\n  request: object;\n  queued?: boolean;\n  onComplete: (a: string, b?: string) => void;\n}\n\ninterface OutstandingGet {\n  request: object;\n  onComplete: (response: { [k: string]: unknown }) => void;\n}\n\n/**\n * Firebase connection.  Abstracts wire protocol and handles reconnecting.\n *\n * NOTE: All JSON objects sent to the realtime connection must have property names enclosed\n * in quotes to make sure the closure compiler does not minify them.\n */\nexport class PersistentConnection extends ServerActions {\n  // Used for diagnostic logging.\n  id = PersistentConnection.nextPersistentConnectionId_++;\n  private log_ = logWrapper('p:' + this.id + ':');\n\n  private interruptReasons_: { [reason: string]: boolean } = {};\n  private readonly listens: Map<\n    /* path */ string,\n    Map</* queryId */ string, ListenSpec>\n  > = new Map();\n  private outstandingPuts_: OutstandingPut[] = [];\n  private outstandingGets_: OutstandingGet[] = [];\n  private outstandingPutCount_ = 0;\n  private outstandingGetCount_ = 0;\n  private onDisconnectRequestQueue_: OnDisconnectRequest[] = [];\n  private connected_ = false;\n  private reconnectDelay_ = RECONNECT_MIN_DELAY;\n  private maxReconnectDelay_ = RECONNECT_MAX_DELAY_DEFAULT;\n  private securityDebugCallback_: ((a: object) => void) | null = null;\n  lastSessionId: string | null = null;\n\n  private establishConnectionTimer_: number | null = null;\n\n  private visible_: boolean = false;\n\n  // Before we get connected, we keep a queue of pending messages to send.\n  private requestCBHash_: { [k: number]: (a: unknown) => void } = {};\n  private requestNumber_ = 0;\n\n  private realtime_: {\n    sendRequest(a: object): void;\n    close(): void;\n  } | null = null;\n\n  private authToken_: string | null = null;\n  private appCheckToken_: string | null = null;\n  private forceTokenRefresh_ = false;\n  private invalidAuthTokenCount_ = 0;\n  private invalidAppCheckTokenCount_ = 0;\n\n  private firstConnection_ = true;\n  private lastConnectionAttemptTime_: number | null = null;\n  private lastConnectionEstablishedTime_: number | null = null;\n\n  private static nextPersistentConnectionId_ = 0;\n\n  /**\n   * Counter for number of connections created. Mainly used for tagging in the logs\n   */\n  private static nextConnectionId_ = 0;\n\n  /**\n   * @param repoInfo_ - Data about the namespace we are connecting to\n   * @param applicationId_ - The Firebase App ID for this project\n   * @param onDataUpdate_ - A callback for new data from the server\n   */\n  constructor(\n    private repoInfo_: RepoInfo,\n    private applicationId_: string,\n    private onDataUpdate_: (\n      a: string,\n      b: unknown,\n      c: boolean,\n      d: number | null\n    ) => void,\n    private onConnectStatus_: (a: boolean) => void,\n    private onServerInfoUpdate_: (a: unknown) => void,\n    private authTokenProvider_: AuthTokenProvider,\n    private appCheckTokenProvider_: AppCheckTokenProvider,\n    private authOverride_?: object | null\n  ) {\n    super();\n\n    if (authOverride_ && !isNodeSdk()) {\n      throw new Error(\n        'Auth override specified in options, but not supported on non Node.js platforms'\n      );\n    }\n\n    VisibilityMonitor.getInstance().on('visible', this.onVisible_, this);\n\n    if (repoInfo_.host.indexOf('fblocal') === -1) {\n      OnlineMonitor.getInstance().on('online', this.onOnline_, this);\n    }\n  }\n\n  protected sendRequest(\n    action: string,\n    body: unknown,\n    onResponse?: (a: unknown) => void\n  ) {\n    const curReqNum = ++this.requestNumber_;\n\n    const msg = { r: curReqNum, a: action, b: body };\n    this.log_(stringify(msg));\n    assert(\n      this.connected_,\n      \"sendRequest call when we're not connected not allowed.\"\n    );\n    this.realtime_.sendRequest(msg);\n    if (onResponse) {\n      this.requestCBHash_[curReqNum] = onResponse;\n    }\n  }\n\n  get(query: QueryContext): Promise<string> {\n    this.initConnection_();\n\n    const deferred = new Deferred<string>();\n    const request = {\n      p: query._path.toString(),\n      q: query._queryObject\n    };\n    const outstandingGet = {\n      action: 'g',\n      request,\n      onComplete: (message: { [k: string]: unknown }) => {\n        const payload = message['d'] as string;\n        if (message['s'] === 'ok') {\n          this.onDataUpdate_(\n            request['p'],\n            payload,\n            /*isMerge*/ false,\n            /*tag*/ null\n          );\n          deferred.resolve(payload);\n        } else {\n          deferred.reject(payload);\n        }\n      }\n    };\n    this.outstandingGets_.push(outstandingGet);\n    this.outstandingGetCount_++;\n    const index = this.outstandingGets_.length - 1;\n\n    if (!this.connected_) {\n      setTimeout(() => {\n        const get = this.outstandingGets_[index];\n        if (get === undefined || outstandingGet !== get) {\n          return;\n        }\n        delete this.outstandingGets_[index];\n        this.outstandingGetCount_--;\n        if (this.outstandingGetCount_ === 0) {\n          this.outstandingGets_ = [];\n        }\n        this.log_('get ' + index + ' timed out on connection');\n        deferred.reject(new Error('Client is offline.'));\n      }, GET_CONNECT_TIMEOUT);\n    }\n\n    if (this.connected_) {\n      this.sendGet_(index);\n    }\n\n    return deferred.promise;\n  }\n\n  listen(\n    query: QueryContext,\n    currentHashFn: () => string,\n    tag: number | null,\n    onComplete: (a: string, b: unknown) => void\n  ) {\n    this.initConnection_();\n\n    const queryId = query._queryIdentifier;\n    const pathString = query._path.toString();\n    this.log_('Listen called for ' + pathString + ' ' + queryId);\n    if (!this.listens.has(pathString)) {\n      this.listens.set(pathString, new Map());\n    }\n    assert(\n      query._queryParams.isDefault() || !query._queryParams.loadsAllData(),\n      'listen() called for non-default but complete query'\n    );\n    assert(\n      !this.listens.get(pathString)!.has(queryId),\n      'listen() called twice for same path/queryId.'\n    );\n    const listenSpec: ListenSpec = {\n      onComplete,\n      hashFn: currentHashFn,\n      query,\n      tag\n    };\n    this.listens.get(pathString)!.set(queryId, listenSpec);\n\n    if (this.connected_) {\n      this.sendListen_(listenSpec);\n    }\n  }\n\n  private sendGet_(index: number) {\n    const get = this.outstandingGets_[index];\n    this.sendRequest('g', get.request, (message: { [k: string]: unknown }) => {\n      delete this.outstandingGets_[index];\n      this.outstandingGetCount_--;\n      if (this.outstandingGetCount_ === 0) {\n        this.outstandingGets_ = [];\n      }\n      if (get.onComplete) {\n        get.onComplete(message);\n      }\n    });\n  }\n\n  private sendListen_(listenSpec: ListenSpec) {\n    const query = listenSpec.query;\n    const pathString = query._path.toString();\n    const queryId = query._queryIdentifier;\n    this.log_('Listen on ' + pathString + ' for ' + queryId);\n    const req: { [k: string]: unknown } = { /*path*/ p: pathString };\n\n    const action = 'q';\n\n    // Only bother to send query if it's non-default.\n    if (listenSpec.tag) {\n      req['q'] = query._queryObject;\n      req['t'] = listenSpec.tag;\n    }\n\n    req[/*hash*/ 'h'] = listenSpec.hashFn();\n\n    this.sendRequest(action, req, (message: { [k: string]: unknown }) => {\n      const payload: unknown = message[/*data*/ 'd'];\n      const status = message[/*status*/ 's'] as string;\n\n      // print warnings in any case...\n      PersistentConnection.warnOnListenWarnings_(payload, query);\n\n      const currentListenSpec =\n        this.listens.get(pathString) &&\n        this.listens.get(pathString)!.get(queryId);\n      // only trigger actions if the listen hasn't been removed and readded\n      if (currentListenSpec === listenSpec) {\n        this.log_('listen response', message);\n\n        if (status !== 'ok') {\n          this.removeListen_(pathString, queryId);\n        }\n\n        if (listenSpec.onComplete) {\n          listenSpec.onComplete(status, payload);\n        }\n      }\n    });\n  }\n\n  private static warnOnListenWarnings_(payload: unknown, query: QueryContext) {\n    if (payload && typeof payload === 'object' && contains(payload, 'w')) {\n      // eslint-disable-next-line @typescript-eslint/no-explicit-any\n      const warnings = safeGet(payload as any, 'w');\n      if (Array.isArray(warnings) && ~warnings.indexOf('no_index')) {\n        const indexSpec =\n          '\".indexOn\": \"' + query._queryParams.getIndex().toString() + '\"';\n        const indexPath = query._path.toString();\n        warn(\n          `Using an unspecified index. Your data will be downloaded and ` +\n            `filtered on the client. Consider adding ${indexSpec} at ` +\n            `${indexPath} to your security rules for better performance.`\n        );\n      }\n    }\n  }\n\n  refreshAuthToken(token: string) {\n    this.authToken_ = token;\n    this.log_('Auth token refreshed');\n    if (this.authToken_) {\n      this.tryAuth();\n    } else {\n      //If we're connected we want to let the server know to unauthenticate us. If we're not connected, simply delete\n      //the credential so we dont become authenticated next time we connect.\n      if (this.connected_) {\n        this.sendRequest('unauth', {}, () => {});\n      }\n    }\n\n    this.reduceReconnectDelayIfAdminCredential_(token);\n  }\n\n  private reduceReconnectDelayIfAdminCredential_(credential: string) {\n    // NOTE: This isn't intended to be bulletproof (a malicious developer can always just modify the client).\n    // Additionally, we don't bother resetting the max delay back to the default if auth fails / expires.\n    const isFirebaseSecret = credential && credential.length === 40;\n    if (isFirebaseSecret || isAdmin(credential)) {\n      this.log_(\n        'Admin auth credential detected.  Reducing max reconnect time.'\n      );\n      this.maxReconnectDelay_ = RECONNECT_MAX_DELAY_FOR_ADMINS;\n    }\n  }\n\n  refreshAppCheckToken(token: string | null) {\n    this.appCheckToken_ = token;\n    this.log_('App check token refreshed');\n    if (this.appCheckToken_) {\n      this.tryAppCheck();\n    } else {\n      //If we're connected we want to let the server know to unauthenticate us.\n      //If we're not connected, simply delete the credential so we dont become\n      // authenticated next time we connect.\n      if (this.connected_) {\n        this.sendRequest('unappeck', {}, () => {});\n      }\n    }\n  }\n\n  /**\n   * Attempts to authenticate with the given credentials. If the authentication attempt fails, it's triggered like\n   * a auth revoked (the connection is closed).\n   */\n  tryAuth() {\n    if (this.connected_ && this.authToken_) {\n      const token = this.authToken_;\n      const authMethod = isValidFormat(token) ? 'auth' : 'gauth';\n      const requestData: { [k: string]: unknown } = { cred: token };\n      if (this.authOverride_ === null) {\n        requestData['noauth'] = true;\n      } else if (typeof this.authOverride_ === 'object') {\n        requestData['authvar'] = this.authOverride_;\n      }\n      this.sendRequest(\n        authMethod,\n        requestData,\n        (res: { [k: string]: unknown }) => {\n          const status = res[/*status*/ 's'] as string;\n          const data = (res[/*data*/ 'd'] as string) || 'error';\n\n          if (this.authToken_ === token) {\n            if (status === 'ok') {\n              this.invalidAuthTokenCount_ = 0;\n            } else {\n              // Triggers reconnect and force refresh for auth token\n              this.onAuthRevoked_(status, data);\n            }\n          }\n        }\n      );\n    }\n  }\n\n  /**\n   * Attempts to authenticate with the given token. If the authentication\n   * attempt fails, it's triggered like the token was revoked (the connection is\n   * closed).\n   */\n  tryAppCheck() {\n    if (this.connected_ && this.appCheckToken_) {\n      this.sendRequest(\n        'appcheck',\n        { 'token': this.appCheckToken_ },\n        (res: { [k: string]: unknown }) => {\n          const status = res[/*status*/ 's'] as string;\n          const data = (res[/*data*/ 'd'] as string) || 'error';\n          if (status === 'ok') {\n            this.invalidAppCheckTokenCount_ = 0;\n          } else {\n            this.onAppCheckRevoked_(status, data);\n          }\n        }\n      );\n    }\n  }\n\n  /**\n   * @inheritDoc\n   */\n  unlisten(query: QueryContext, tag: number | null) {\n    const pathString = query._path.toString();\n    const queryId = query._queryIdentifier;\n\n    this.log_('Unlisten called for ' + pathString + ' ' + queryId);\n\n    assert(\n      query._queryParams.isDefault() || !query._queryParams.loadsAllData(),\n      'unlisten() called for non-default but complete query'\n    );\n    const listen = this.removeListen_(pathString, queryId);\n    if (listen && this.connected_) {\n      this.sendUnlisten_(pathString, queryId, query._queryObject, tag);\n    }\n  }\n\n  private sendUnlisten_(\n    pathString: string,\n    queryId: string,\n    queryObj: object,\n    tag: number | null\n  ) {\n    this.log_('Unlisten on ' + pathString + ' for ' + queryId);\n\n    const req: { [k: string]: unknown } = { /*path*/ p: pathString };\n    const action = 'n';\n    // Only bother sending queryId if it's non-default.\n    if (tag) {\n      req['q'] = queryObj;\n      req['t'] = tag;\n    }\n\n    this.sendRequest(action, req);\n  }\n\n  onDisconnectPut(\n    pathString: string,\n    data: unknown,\n    onComplete?: (a: string, b: string) => void\n  ) {\n    this.initConnection_();\n\n    if (this.connected_) {\n      this.sendOnDisconnect_('o', pathString, data, onComplete);\n    } else {\n      this.onDisconnectRequestQueue_.push({\n        pathString,\n        action: 'o',\n        data,\n        onComplete\n      });\n    }\n  }\n\n  onDisconnectMerge(\n    pathString: string,\n    data: unknown,\n    onComplete?: (a: string, b: string) => void\n  ) {\n    this.initConnection_();\n\n    if (this.connected_) {\n      this.sendOnDisconnect_('om', pathString, data, onComplete);\n    } else {\n      this.onDisconnectRequestQueue_.push({\n        pathString,\n        action: 'om',\n        data,\n        onComplete\n      });\n    }\n  }\n\n  onDisconnectCancel(\n    pathString: string,\n    onComplete?: (a: string, b: string) => void\n  ) {\n    this.initConnection_();\n\n    if (this.connected_) {\n      this.sendOnDisconnect_('oc', pathString, null, onComplete);\n    } else {\n      this.onDisconnectRequestQueue_.push({\n        pathString,\n        action: 'oc',\n        data: null,\n        onComplete\n      });\n    }\n  }\n\n  private sendOnDisconnect_(\n    action: string,\n    pathString: string,\n    data: unknown,\n    onComplete: (a: string, b: string) => void\n  ) {\n    const request = { /*path*/ p: pathString, /*data*/ d: data };\n    this.log_('onDisconnect ' + action, request);\n    this.sendRequest(action, request, (response: { [k: string]: unknown }) => {\n      if (onComplete) {\n        setTimeout(() => {\n          onComplete(\n            response[/*status*/ 's'] as string,\n            response[/* data */ 'd'] as string\n          );\n        }, Math.floor(0));\n      }\n    });\n  }\n\n  put(\n    pathString: string,\n    data: unknown,\n    onComplete?: (a: string, b: string) => void,\n    hash?: string\n  ) {\n    this.putInternal('p', pathString, data, onComplete, hash);\n  }\n\n  merge(\n    pathString: string,\n    data: unknown,\n    onComplete: (a: string, b: string | null) => void,\n    hash?: string\n  ) {\n    this.putInternal('m', pathString, data, onComplete, hash);\n  }\n\n  putInternal(\n    action: string,\n    pathString: string,\n    data: unknown,\n    onComplete: (a: string, b: string | null) => void,\n    hash?: string\n  ) {\n    this.initConnection_();\n\n    const request: { [k: string]: unknown } = {\n      /*path*/ p: pathString,\n      /*data*/ d: data\n    };\n\n    if (hash !== undefined) {\n      request[/*hash*/ 'h'] = hash;\n    }\n\n    // TODO: Only keep track of the most recent put for a given path?\n    this.outstandingPuts_.push({\n      action,\n      request,\n      onComplete\n    });\n\n    this.outstandingPutCount_++;\n    const index = this.outstandingPuts_.length - 1;\n\n    if (this.connected_) {\n      this.sendPut_(index);\n    } else {\n      this.log_('Buffering put: ' + pathString);\n    }\n  }\n\n  private sendPut_(index: number) {\n    const action = this.outstandingPuts_[index].action;\n    const request = this.outstandingPuts_[index].request;\n    const onComplete = this.outstandingPuts_[index].onComplete;\n    this.outstandingPuts_[index].queued = this.connected_;\n\n    this.sendRequest(action, request, (message: { [k: string]: unknown }) => {\n      this.log_(action + ' response', message);\n\n      delete this.outstandingPuts_[index];\n      this.outstandingPutCount_--;\n\n      // Clean up array occasionally.\n      if (this.outstandingPutCount_ === 0) {\n        this.outstandingPuts_ = [];\n      }\n\n      if (onComplete) {\n        onComplete(\n          message[/*status*/ 's'] as string,\n          message[/* data */ 'd'] as string\n        );\n      }\n    });\n  }\n\n  reportStats(stats: { [k: string]: unknown }) {\n    // If we're not connected, we just drop the stats.\n    if (this.connected_) {\n      const request = { /*counters*/ c: stats };\n      this.log_('reportStats', request);\n\n      this.sendRequest(/*stats*/ 's', request, result => {\n        const status = result[/*status*/ 's'];\n        if (status !== 'ok') {\n          const errorReason = result[/* data */ 'd'];\n          this.log_('reportStats', 'Error sending stats: ' + errorReason);\n        }\n      });\n    }\n  }\n\n  private onDataMessage_(message: { [k: string]: unknown }) {\n    if ('r' in message) {\n      // this is a response\n      this.log_('from server: ' + stringify(message));\n      const reqNum = message['r'] as string;\n      const onResponse = this.requestCBHash_[reqNum];\n      if (onResponse) {\n        delete this.requestCBHash_[reqNum];\n        onResponse(message[/*body*/ 'b']);\n      }\n    } else if ('error' in message) {\n      throw 'A server-side error has occurred: ' + message['error'];\n    } else if ('a' in message) {\n      // a and b are action and body, respectively\n      this.onDataPush_(message['a'] as string, message['b'] as {});\n    }\n  }\n\n  private onDataPush_(action: string, body: { [k: string]: unknown }) {\n    this.log_('handleServerMessage', action, body);\n    if (action === 'd') {\n      this.onDataUpdate_(\n        body[/*path*/ 'p'] as string,\n        body[/*data*/ 'd'],\n        /*isMerge*/ false,\n        body['t'] as number\n      );\n    } else if (action === 'm') {\n      this.onDataUpdate_(\n        body[/*path*/ 'p'] as string,\n        body[/*data*/ 'd'],\n        /*isMerge=*/ true,\n        body['t'] as number\n      );\n    } else if (action === 'c') {\n      this.onListenRevoked_(\n        body[/*path*/ 'p'] as string,\n        body[/*query*/ 'q'] as unknown[]\n      );\n    } else if (action === 'ac') {\n      this.onAuthRevoked_(\n        body[/*status code*/ 's'] as string,\n        body[/* explanation */ 'd'] as string\n      );\n    } else if (action === 'apc') {\n      this.onAppCheckRevoked_(\n        body[/*status code*/ 's'] as string,\n        body[/* explanation */ 'd'] as string\n      );\n    } else if (action === 'sd') {\n      this.onSecurityDebugPacket_(body);\n    } else {\n      error(\n        'Unrecognized action received from server: ' +\n          stringify(action) +\n          '\\nAre you using the latest client?'\n      );\n    }\n  }\n\n  private onReady_(timestamp: number, sessionId: string) {\n    this.log_('connection ready');\n    this.connected_ = true;\n    this.lastConnectionEstablishedTime_ = new Date().getTime();\n    this.handleTimestamp_(timestamp);\n    this.lastSessionId = sessionId;\n    if (this.firstConnection_) {\n      this.sendConnectStats_();\n    }\n    this.restoreState_();\n    this.firstConnection_ = false;\n    this.onConnectStatus_(true);\n  }\n\n  private scheduleConnect_(timeout: number) {\n    assert(\n      !this.realtime_,\n      \"Scheduling a connect when we're already connected/ing?\"\n    );\n\n    if (this.establishConnectionTimer_) {\n      clearTimeout(this.establishConnectionTimer_);\n    }\n\n    // NOTE: Even when timeout is 0, it's important to do a setTimeout to work around an infuriating \"Security Error\" in\n    // Firefox when trying to write to our long-polling iframe in some scenarios (e.g. Forge or our unit tests).\n\n    this.establishConnectionTimer_ = setTimeout(() => {\n      this.establishConnectionTimer_ = null;\n      this.establishConnection_();\n      // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    }, Math.floor(timeout)) as any;\n  }\n\n  private initConnection_() {\n    if (!this.realtime_ && this.firstConnection_) {\n      this.scheduleConnect_(0);\n    }\n  }\n\n  private onVisible_(visible: boolean) {\n    // NOTE: Tabbing away and back to a window will defeat our reconnect backoff, but I think that's fine.\n    if (\n      visible &&\n      !this.visible_ &&\n      this.reconnectDelay_ === this.maxReconnectDelay_\n    ) {\n      this.log_('Window became visible.  Reducing delay.');\n      this.reconnectDelay_ = RECONNECT_MIN_DELAY;\n\n      if (!this.realtime_) {\n        this.scheduleConnect_(0);\n      }\n    }\n    this.visible_ = visible;\n  }\n\n  private onOnline_(online: boolean) {\n    if (online) {\n      this.log_('Browser went online.');\n      this.reconnectDelay_ = RECONNECT_MIN_DELAY;\n      if (!this.realtime_) {\n        this.scheduleConnect_(0);\n      }\n    } else {\n      this.log_('Browser went offline.  Killing connection.');\n      if (this.realtime_) {\n        this.realtime_.close();\n      }\n    }\n  }\n\n  private onRealtimeDisconnect_() {\n    this.log_('data client disconnected');\n    this.connected_ = false;\n    this.realtime_ = null;\n\n    // Since we don't know if our sent transactions succeeded or not, we need to cancel them.\n    this.cancelSentTransactions_();\n\n    // Clear out the pending requests.\n    this.requestCBHash_ = {};\n\n    if (this.shouldReconnect_()) {\n      if (!this.visible_) {\n        this.log_(\"Window isn't visible.  Delaying reconnect.\");\n        this.reconnectDelay_ = this.maxReconnectDelay_;\n        this.lastConnectionAttemptTime_ = new Date().getTime();\n      } else if (this.lastConnectionEstablishedTime_) {\n        // If we've been connected long enough, reset reconnect delay to minimum.\n        const timeSinceLastConnectSucceeded =\n          new Date().getTime() - this.lastConnectionEstablishedTime_;\n        if (timeSinceLastConnectSucceeded > RECONNECT_DELAY_RESET_TIMEOUT) {\n          this.reconnectDelay_ = RECONNECT_MIN_DELAY;\n        }\n        this.lastConnectionEstablishedTime_ = null;\n      }\n\n      const timeSinceLastConnectAttempt =\n        new Date().getTime() - this.lastConnectionAttemptTime_;\n      let reconnectDelay = Math.max(\n        0,\n        this.reconnectDelay_ - timeSinceLastConnectAttempt\n      );\n      reconnectDelay = Math.random() * reconnectDelay;\n\n      this.log_('Trying to reconnect in ' + reconnectDelay + 'ms');\n      this.scheduleConnect_(reconnectDelay);\n\n      // Adjust reconnect delay for next time.\n      this.reconnectDelay_ = Math.min(\n        this.maxReconnectDelay_,\n        this.reconnectDelay_ * RECONNECT_DELAY_MULTIPLIER\n      );\n    }\n    this.onConnectStatus_(false);\n  }\n\n  private async establishConnection_() {\n    if (this.shouldReconnect_()) {\n      this.log_('Making a connection attempt');\n      this.lastConnectionAttemptTime_ = new Date().getTime();\n      this.lastConnectionEstablishedTime_ = null;\n      const onDataMessage = this.onDataMessage_.bind(this);\n      const onReady = this.onReady_.bind(this);\n      const onDisconnect = this.onRealtimeDisconnect_.bind(this);\n      const connId = this.id + ':' + PersistentConnection.nextConnectionId_++;\n      const lastSessionId = this.lastSessionId;\n      let canceled = false;\n      let connection: Connection | null = null;\n      const closeFn = function () {\n        if (connection) {\n          connection.close();\n        } else {\n          canceled = true;\n          onDisconnect();\n        }\n      };\n      const sendRequestFn = function (msg: object) {\n        assert(\n          connection,\n          \"sendRequest call when we're not connected not allowed.\"\n        );\n        connection.sendRequest(msg);\n      };\n\n      this.realtime_ = {\n        close: closeFn,\n        sendRequest: sendRequestFn\n      };\n\n      const forceRefresh = this.forceTokenRefresh_;\n      this.forceTokenRefresh_ = false;\n\n      try {\n        // First fetch auth and app check token, and establish connection after\n        // fetching the token was successful\n        const [authToken, appCheckToken] = await Promise.all([\n          this.authTokenProvider_.getToken(forceRefresh),\n          this.appCheckTokenProvider_.getToken(forceRefresh)\n        ]);\n\n        if (!canceled) {\n          log('getToken() completed. Creating connection.');\n          this.authToken_ = authToken && authToken.accessToken;\n          this.appCheckToken_ = appCheckToken && appCheckToken.token;\n          connection = new Connection(\n            connId,\n            this.repoInfo_,\n            this.applicationId_,\n            this.appCheckToken_,\n            this.authToken_,\n            onDataMessage,\n            onReady,\n            onDisconnect,\n            /* onKill= */ reason => {\n              warn(reason + ' (' + this.repoInfo_.toString() + ')');\n              this.interrupt(SERVER_KILL_INTERRUPT_REASON);\n            },\n            lastSessionId\n          );\n        } else {\n          log('getToken() completed but was canceled');\n        }\n      } catch (error) {\n        this.log_('Failed to get token: ' + error);\n        if (!canceled) {\n          if (this.repoInfo_.nodeAdmin) {\n            // This may be a critical error for the Admin Node.js SDK, so log a warning.\n            // But getToken() may also just have temporarily failed, so we still want to\n            // continue retrying.\n            warn(error);\n          }\n          closeFn();\n        }\n      }\n    }\n  }\n\n  interrupt(reason: string) {\n    log('Interrupting connection for reason: ' + reason);\n    this.interruptReasons_[reason] = true;\n    if (this.realtime_) {\n      this.realtime_.close();\n    } else {\n      if (this.establishConnectionTimer_) {\n        clearTimeout(this.establishConnectionTimer_);\n        this.establishConnectionTimer_ = null;\n      }\n      if (this.connected_) {\n        this.onRealtimeDisconnect_();\n      }\n    }\n  }\n\n  resume(reason: string) {\n    log('Resuming connection for reason: ' + reason);\n    delete this.interruptReasons_[reason];\n    if (isEmpty(this.interruptReasons_)) {\n      this.reconnectDelay_ = RECONNECT_MIN_DELAY;\n      if (!this.realtime_) {\n        this.scheduleConnect_(0);\n      }\n    }\n  }\n\n  private handleTimestamp_(timestamp: number) {\n    const delta = timestamp - new Date().getTime();\n    this.onServerInfoUpdate_({ serverTimeOffset: delta });\n  }\n\n  private cancelSentTransactions_() {\n    for (let i = 0; i < this.outstandingPuts_.length; i++) {\n      const put = this.outstandingPuts_[i];\n      if (put && /*hash*/ 'h' in put.request && put.queued) {\n        if (put.onComplete) {\n          put.onComplete('disconnect');\n        }\n\n        delete this.outstandingPuts_[i];\n        this.outstandingPutCount_--;\n      }\n    }\n\n    // Clean up array occasionally.\n    if (this.outstandingPutCount_ === 0) {\n      this.outstandingPuts_ = [];\n    }\n  }\n\n  private onListenRevoked_(pathString: string, query?: unknown[]) {\n    // Remove the listen and manufacture a \"permission_denied\" error for the failed listen.\n    let queryId;\n    if (!query) {\n      queryId = 'default';\n    } else {\n      queryId = query.map(q => ObjectToUniqueKey(q)).join('$');\n    }\n    const listen = this.removeListen_(pathString, queryId);\n    if (listen && listen.onComplete) {\n      listen.onComplete('permission_denied');\n    }\n  }\n\n  private removeListen_(pathString: string, queryId: string): ListenSpec {\n    const normalizedPathString = new Path(pathString).toString(); // normalize path.\n    let listen;\n    if (this.listens.has(normalizedPathString)) {\n      const map = this.listens.get(normalizedPathString)!;\n      listen = map.get(queryId);\n      map.delete(queryId);\n      if (map.size === 0) {\n        this.listens.delete(normalizedPathString);\n      }\n    } else {\n      // all listens for this path has already been removed\n      listen = undefined;\n    }\n    return listen;\n  }\n\n  private onAuthRevoked_(statusCode: string, explanation: string) {\n    log('Auth token revoked: ' + statusCode + '/' + explanation);\n    this.authToken_ = null;\n    this.forceTokenRefresh_ = true;\n    this.realtime_.close();\n    if (statusCode === 'invalid_token' || statusCode === 'permission_denied') {\n      // We'll wait a couple times before logging the warning / increasing the\n      // retry period since oauth tokens will report as \"invalid\" if they're\n      // just expired. Plus there may be transient issues that resolve themselves.\n      this.invalidAuthTokenCount_++;\n      if (this.invalidAuthTokenCount_ >= INVALID_TOKEN_THRESHOLD) {\n        // Set a long reconnect delay because recovery is unlikely\n        this.reconnectDelay_ = RECONNECT_MAX_DELAY_FOR_ADMINS;\n\n        // Notify the auth token provider that the token is invalid, which will log\n        // a warning\n        this.authTokenProvider_.notifyForInvalidToken();\n      }\n    }\n  }\n\n  private onAppCheckRevoked_(statusCode: string, explanation: string) {\n    log('App check token revoked: ' + statusCode + '/' + explanation);\n    this.appCheckToken_ = null;\n    this.forceTokenRefresh_ = true;\n    // Note: We don't close the connection as the developer may not have\n    // enforcement enabled. The backend closes connections with enforcements.\n    if (statusCode === 'invalid_token' || statusCode === 'permission_denied') {\n      // We'll wait a couple times before logging the warning / increasing the\n      // retry period since oauth tokens will report as \"invalid\" if they're\n      // just expired. Plus there may be transient issues that resolve themselves.\n      this.invalidAppCheckTokenCount_++;\n      if (this.invalidAppCheckTokenCount_ >= INVALID_TOKEN_THRESHOLD) {\n        this.appCheckTokenProvider_.notifyForInvalidToken();\n      }\n    }\n  }\n\n  private onSecurityDebugPacket_(body: { [k: string]: unknown }) {\n    if (this.securityDebugCallback_) {\n      this.securityDebugCallback_(body);\n    } else {\n      if ('msg' in body) {\n        console.log(\n          'FIREBASE: ' + (body['msg'] as string).replace('\\n', '\\nFIREBASE: ')\n        );\n      }\n    }\n  }\n\n  private restoreState_() {\n    //Re-authenticate ourselves if we have a credential stored.\n    this.tryAuth();\n    this.tryAppCheck();\n\n    // Puts depend on having received the corresponding data update from the server before they complete, so we must\n    // make sure to send listens before puts.\n    for (const queries of this.listens.values()) {\n      for (const listenSpec of queries.values()) {\n        this.sendListen_(listenSpec);\n      }\n    }\n\n    for (let i = 0; i < this.outstandingPuts_.length; i++) {\n      if (this.outstandingPuts_[i]) {\n        this.sendPut_(i);\n      }\n    }\n\n    while (this.onDisconnectRequestQueue_.length) {\n      const request = this.onDisconnectRequestQueue_.shift();\n      this.sendOnDisconnect_(\n        request.action,\n        request.pathString,\n        request.data,\n        request.onComplete\n      );\n    }\n\n    for (let i = 0; i < this.outstandingGets_.length; i++) {\n      if (this.outstandingGets_[i]) {\n        this.sendGet_(i);\n      }\n    }\n  }\n\n  /**\n   * Sends client stats for first connection\n   */\n  private sendConnectStats_() {\n    const stats: { [k: string]: number } = {};\n\n    let clientName = 'js';\n    if (isNodeSdk()) {\n      if (this.repoInfo_.nodeAdmin) {\n        clientName = 'admin_node';\n      } else {\n        clientName = 'node';\n      }\n    }\n\n    stats['sdk.' + clientName + '.' + SDK_VERSION.replace(/\\./g, '-')] = 1;\n\n    if (isMobileCordova()) {\n      stats['framework.cordova'] = 1;\n    } else if (isReactNative()) {\n      stats['framework.reactnative'] = 1;\n    }\n    this.reportStats(stats);\n  }\n\n  private shouldReconnect_(): boolean {\n    const online = OnlineMonitor.getInstance().currentlyOnline();\n    return isEmpty(this.interruptReasons_) && online;\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Path } from '../util/Path';\n\nimport { Index } from './indexes/Index';\n\n/**\n * Node is an interface defining the common functionality for nodes in\n * a DataSnapshot.\n *\n * @interface\n */\nexport interface Node {\n  /**\n   * Whether this node is a leaf node.\n   * @returns Whether this is a leaf node.\n   */\n  isLeafNode(): boolean;\n\n  /**\n   * Gets the priority of the node.\n   * @returns The priority of the node.\n   */\n  getPriority(): Node;\n\n  /**\n   * Returns a duplicate node with the new priority.\n   * @param newPriorityNode - New priority to set for the node.\n   * @returns Node with new priority.\n   */\n  updatePriority(newPriorityNode: Node): Node;\n\n  /**\n   * Returns the specified immediate child, or null if it doesn't exist.\n   * @param childName - The name of the child to retrieve.\n   * @returns The retrieved child, or an empty node.\n   */\n  getImmediateChild(childName: string): Node;\n\n  /**\n   * Returns a child by path, or null if it doesn't exist.\n   * @param path - The path of the child to retrieve.\n   * @returns The retrieved child or an empty node.\n   */\n  getChild(path: Path): Node;\n\n  /**\n   * Returns the name of the child immediately prior to the specified childNode, or null.\n   * @param childName - The name of the child to find the predecessor of.\n   * @param childNode - The node to find the predecessor of.\n   * @param index - The index to use to determine the predecessor\n   * @returns The name of the predecessor child, or null if childNode is the first child.\n   */\n  getPredecessorChildName(\n    childName: string,\n    childNode: Node,\n    index: Index\n  ): string | null;\n\n  /**\n   * Returns a duplicate node, with the specified immediate child updated.\n   * Any value in the node will be removed.\n   * @param childName - The name of the child to update.\n   * @param newChildNode - The new child node\n   * @returns The updated node.\n   */\n  updateImmediateChild(childName: string, newChildNode: Node): Node;\n\n  /**\n   * Returns a duplicate node, with the specified child updated.  Any value will\n   * be removed.\n   * @param path - The path of the child to update.\n   * @param newChildNode - The new child node, which may be an empty node\n   * @returns The updated node.\n   */\n  updateChild(path: Path, newChildNode: Node): Node;\n\n  /**\n   * True if the immediate child specified exists\n   */\n  hasChild(childName: string): boolean;\n\n  /**\n   * @returns True if this node has no value or children.\n   */\n  isEmpty(): boolean;\n\n  /**\n   * @returns The number of children of this node.\n   */\n  numChildren(): number;\n\n  /**\n   * Calls action for each child.\n   * @param action - Action to be called for\n   * each child.  It's passed the child name and the child node.\n   * @returns The first truthy value return by action, or the last falsey one\n   */\n  forEachChild(index: Index, action: (a: string, b: Node) => void): unknown;\n\n  /**\n   * @param exportFormat - True for export format (also wire protocol format).\n   * @returns Value of this node as JSON.\n   */\n  val(exportFormat?: boolean): unknown;\n\n  /**\n   * @returns hash representing the node contents.\n   */\n  hash(): string;\n\n  /**\n   * @param other - Another node\n   * @returns -1 for less than, 0 for equal, 1 for greater than other\n   */\n  compareTo(other: Node): number;\n\n  /**\n   * @returns Whether or not this snapshot equals other\n   */\n  equals(other: Node): boolean;\n\n  /**\n   * @returns This node, with the specified index now available\n   */\n  withIndex(indexDefinition: Index): Node;\n\n  isIndexed(indexDefinition: Index): boolean;\n}\n\nexport class NamedNode {\n  constructor(public name: string, public node: Node) {}\n\n  static Wrap(name: string, node: Node) {\n    return new NamedNode(name, node);\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Comparator } from '../../util/SortedMap';\nimport { MIN_NAME } from '../../util/util';\nimport { Node, NamedNode } from '../Node';\n\nexport abstract class Index {\n  abstract compare(a: NamedNode, b: NamedNode): number;\n\n  abstract isDefinedOn(node: Node): boolean;\n\n  /**\n   * @returns A standalone comparison function for\n   * this index\n   */\n  getCompare(): Comparator<NamedNode> {\n    return this.compare.bind(this);\n  }\n\n  /**\n   * Given a before and after value for a node, determine if the indexed value has changed. Even if they are different,\n   * it's possible that the changes are isolated to parts of the snapshot that are not indexed.\n   *\n   *\n   * @returns True if the portion of the snapshot being indexed changed between oldNode and newNode\n   */\n  indexedValueChanged(oldNode: Node, newNode: Node): boolean {\n    const oldWrapped = new NamedNode(MIN_NAME, oldNode);\n    const newWrapped = new NamedNode(MIN_NAME, newNode);\n    return this.compare(oldWrapped, newWrapped) !== 0;\n  }\n\n  /**\n   * @returns a node wrapper that will sort equal to or less than\n   * any other node wrapper, using this index\n   */\n  minPost(): NamedNode {\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    return (NamedNode as any).MIN;\n  }\n\n  /**\n   * @returns a node wrapper that will sort greater than or equal to\n   * any other node wrapper, using this index\n   */\n  abstract maxPost(): NamedNode;\n\n  abstract makePost(indexValue: unknown, name: string): NamedNode;\n\n  /**\n   * @returns String representation for inclusion in a query spec\n   */\n  abstract toString(): string;\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { assert, assertionError } from '@firebase/util';\n\nimport { nameCompare, MAX_NAME } from '../../util/util';\nimport { ChildrenNode } from '../ChildrenNode';\nimport { Node, NamedNode } from '../Node';\n\nimport { Index } from './Index';\n\nlet __EMPTY_NODE: ChildrenNode;\n\nexport class KeyIndex extends Index {\n  static get __EMPTY_NODE() {\n    return __EMPTY_NODE;\n  }\n\n  static set __EMPTY_NODE(val) {\n    __EMPTY_NODE = val;\n  }\n  compare(a: NamedNode, b: NamedNode): number {\n    return nameCompare(a.name, b.name);\n  }\n  isDefinedOn(node: Node): boolean {\n    // We could probably return true here (since every node has a key), but it's never called\n    // so just leaving unimplemented for now.\n    throw assertionError('KeyIndex.isDefinedOn not expected to be called.');\n  }\n  indexedValueChanged(oldNode: Node, newNode: Node): boolean {\n    return false; // The key for a node never changes.\n  }\n  minPost() {\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    return (NamedNode as any).MIN;\n  }\n  maxPost(): NamedNode {\n    // TODO: This should really be created once and cached in a static property, but\n    // NamedNode isn't defined yet, so I can't use it in a static.  Bleh.\n    return new NamedNode(MAX_NAME, __EMPTY_NODE);\n  }\n\n  makePost(indexValue: string, name: string): NamedNode {\n    assert(\n      typeof indexValue === 'string',\n      'KeyIndex indexValue must always be a string.'\n    );\n    // We just use empty node, but it'll never be compared, since our comparator only looks at name.\n    return new NamedNode(indexValue, __EMPTY_NODE);\n  }\n\n  /**\n   * @returns String representation for inclusion in a query spec\n   */\n  toString(): string {\n    return '.key';\n  }\n}\n\nexport const KEY_INDEX = new KeyIndex();\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * @fileoverview Implementation of an immutable SortedMap using a Left-leaning\n * Red-Black Tree, adapted from the implementation in Mugs\n * (http://mads379.github.com/mugs/) by Mads Hartmann Jensen\n * (mads379\\@gmail.com).\n *\n * Original paper on Left-leaning Red-Black Trees:\n *   http://www.cs.princeton.edu/~rs/talks/LLRB/LLRB.pdf\n *\n * Invariant 1: No red node has a red child\n * Invariant 2: Every leaf path has the same number of black nodes\n * Invariant 3: Only the left child can be red (left leaning)\n */\n\n// TODO: There are some improvements I'd like to make to improve memory / perf:\n//  * Create two prototypes, LLRedNode and LLBlackNode, instead of storing a\n//    color property in every node.\n// TODO: It would also be good (and possibly necessary) to create a base\n// interface for LLRBNode and LLRBEmptyNode.\n\nexport type Comparator<K> = (key1: K, key2: K) => number;\n\n/**\n * An iterator over an LLRBNode.\n */\nexport class SortedMapIterator<K, V, T> {\n  private nodeStack_: Array<LLRBNode<K, V> | LLRBEmptyNode<K, V>> = [];\n\n  /**\n   * @param node - Node to iterate.\n   * @param isReverse_ - Whether or not to iterate in reverse\n   */\n  constructor(\n    node: LLRBNode<K, V> | LLRBEmptyNode<K, V>,\n    startKey: K | null,\n    comparator: Comparator<K>,\n    private isReverse_: boolean,\n    private resultGenerator_: ((k: K, v: V) => T) | null = null\n  ) {\n    let cmp = 1;\n    while (!node.isEmpty()) {\n      node = node as LLRBNode<K, V>;\n      cmp = startKey ? comparator(node.key, startKey) : 1;\n      // flip the comparison if we're going in reverse\n      if (isReverse_) {\n        cmp *= -1;\n      }\n\n      if (cmp < 0) {\n        // This node is less than our start key. ignore it\n        if (this.isReverse_) {\n          node = node.left;\n        } else {\n          node = node.right;\n        }\n      } else if (cmp === 0) {\n        // This node is exactly equal to our start key. Push it on the stack, but stop iterating;\n        this.nodeStack_.push(node);\n        break;\n      } else {\n        // This node is greater than our start key, add it to the stack and move to the next one\n        this.nodeStack_.push(node);\n        if (this.isReverse_) {\n          node = node.right;\n        } else {\n          node = node.left;\n        }\n      }\n    }\n  }\n\n  getNext(): T {\n    if (this.nodeStack_.length === 0) {\n      return null;\n    }\n\n    let node = this.nodeStack_.pop();\n    let result: T;\n    if (this.resultGenerator_) {\n      result = this.resultGenerator_(node.key, node.value);\n    } else {\n      result = ({ key: node.key, value: node.value } as unknown) as T;\n    }\n\n    if (this.isReverse_) {\n      node = node.left;\n      while (!node.isEmpty()) {\n        this.nodeStack_.push(node);\n        node = node.right;\n      }\n    } else {\n      node = node.right;\n      while (!node.isEmpty()) {\n        this.nodeStack_.push(node);\n        node = node.left;\n      }\n    }\n\n    return result;\n  }\n\n  hasNext(): boolean {\n    return this.nodeStack_.length > 0;\n  }\n\n  peek(): T {\n    if (this.nodeStack_.length === 0) {\n      return null;\n    }\n\n    const node = this.nodeStack_[this.nodeStack_.length - 1];\n    if (this.resultGenerator_) {\n      return this.resultGenerator_(node.key, node.value);\n    } else {\n      return ({ key: node.key, value: node.value } as unknown) as T;\n    }\n  }\n}\n\n/**\n * Represents a node in a Left-leaning Red-Black tree.\n */\nexport class LLRBNode<K, V> {\n  color: boolean;\n  left: LLRBNode<K, V> | LLRBEmptyNode<K, V>;\n  right: LLRBNode<K, V> | LLRBEmptyNode<K, V>;\n\n  /**\n   * @param key - Key associated with this node.\n   * @param value - Value associated with this node.\n   * @param color - Whether this node is red.\n   * @param left - Left child.\n   * @param right - Right child.\n   */\n  constructor(\n    public key: K,\n    public value: V,\n    color: boolean | null,\n    left?: LLRBNode<K, V> | LLRBEmptyNode<K, V> | null,\n    right?: LLRBNode<K, V> | LLRBEmptyNode<K, V> | null\n  ) {\n    this.color = color != null ? color : LLRBNode.RED;\n    this.left =\n      left != null ? left : (SortedMap.EMPTY_NODE as LLRBEmptyNode<K, V>);\n    this.right =\n      right != null ? right : (SortedMap.EMPTY_NODE as LLRBEmptyNode<K, V>);\n  }\n\n  static RED = true;\n  static BLACK = false;\n\n  /**\n   * Returns a copy of the current node, optionally replacing pieces of it.\n   *\n   * @param key - New key for the node, or null.\n   * @param value - New value for the node, or null.\n   * @param color - New color for the node, or null.\n   * @param left - New left child for the node, or null.\n   * @param right - New right child for the node, or null.\n   * @returns The node copy.\n   */\n  copy(\n    key: K | null,\n    value: V | null,\n    color: boolean | null,\n    left: LLRBNode<K, V> | LLRBEmptyNode<K, V> | null,\n    right: LLRBNode<K, V> | LLRBEmptyNode<K, V> | null\n  ): LLRBNode<K, V> {\n    return new LLRBNode(\n      key != null ? key : this.key,\n      value != null ? value : this.value,\n      color != null ? color : this.color,\n      left != null ? left : this.left,\n      right != null ? right : this.right\n    );\n  }\n\n  /**\n   * @returns The total number of nodes in the tree.\n   */\n  count(): number {\n    return this.left.count() + 1 + this.right.count();\n  }\n\n  /**\n   * @returns True if the tree is empty.\n   */\n  isEmpty(): boolean {\n    return false;\n  }\n\n  /**\n   * Traverses the tree in key order and calls the specified action function\n   * for each node.\n   *\n   * @param action - Callback function to be called for each\n   *   node.  If it returns true, traversal is aborted.\n   * @returns The first truthy value returned by action, or the last falsey\n   *   value returned by action\n   */\n  inorderTraversal(action: (k: K, v: V) => unknown): boolean {\n    return (\n      this.left.inorderTraversal(action) ||\n      !!action(this.key, this.value) ||\n      this.right.inorderTraversal(action)\n    );\n  }\n\n  /**\n   * Traverses the tree in reverse key order and calls the specified action function\n   * for each node.\n   *\n   * @param action - Callback function to be called for each\n   * node.  If it returns true, traversal is aborted.\n   * @returns True if traversal was aborted.\n   */\n  reverseTraversal(action: (k: K, v: V) => void): boolean {\n    return (\n      this.right.reverseTraversal(action) ||\n      action(this.key, this.value) ||\n      this.left.reverseTraversal(action)\n    );\n  }\n\n  /**\n   * @returns The minimum node in the tree.\n   */\n  private min_(): LLRBNode<K, V> {\n    if (this.left.isEmpty()) {\n      return this;\n    } else {\n      return (this.left as LLRBNode<K, V>).min_();\n    }\n  }\n\n  /**\n   * @returns The maximum key in the tree.\n   */\n  minKey(): K {\n    return this.min_().key;\n  }\n\n  /**\n   * @returns The maximum key in the tree.\n   */\n  maxKey(): K {\n    if (this.right.isEmpty()) {\n      return this.key;\n    } else {\n      return this.right.maxKey();\n    }\n  }\n\n  /**\n   * @param key - Key to insert.\n   * @param value - Value to insert.\n   * @param comparator - Comparator.\n   * @returns New tree, with the key/value added.\n   */\n  insert(key: K, value: V, comparator: Comparator<K>): LLRBNode<K, V> {\n    let n: LLRBNode<K, V> = this;\n    const cmp = comparator(key, n.key);\n    if (cmp < 0) {\n      n = n.copy(null, null, null, n.left.insert(key, value, comparator), null);\n    } else if (cmp === 0) {\n      n = n.copy(null, value, null, null, null);\n    } else {\n      n = n.copy(\n        null,\n        null,\n        null,\n        null,\n        n.right.insert(key, value, comparator)\n      );\n    }\n    return n.fixUp_();\n  }\n\n  /**\n   * @returns New tree, with the minimum key removed.\n   */\n  private removeMin_(): LLRBNode<K, V> | LLRBEmptyNode<K, V> {\n    if (this.left.isEmpty()) {\n      return SortedMap.EMPTY_NODE as LLRBEmptyNode<K, V>;\n    }\n    let n: LLRBNode<K, V> = this;\n    if (!n.left.isRed_() && !n.left.left.isRed_()) {\n      n = n.moveRedLeft_();\n    }\n    n = n.copy(null, null, null, (n.left as LLRBNode<K, V>).removeMin_(), null);\n    return n.fixUp_();\n  }\n\n  /**\n   * @param key - The key of the item to remove.\n   * @param comparator - Comparator.\n   * @returns New tree, with the specified item removed.\n   */\n  remove(\n    key: K,\n    comparator: Comparator<K>\n  ): LLRBNode<K, V> | LLRBEmptyNode<K, V> {\n    let n, smallest;\n    n = this;\n    if (comparator(key, n.key) < 0) {\n      if (!n.left.isEmpty() && !n.left.isRed_() && !n.left.left.isRed_()) {\n        n = n.moveRedLeft_();\n      }\n      n = n.copy(null, null, null, n.left.remove(key, comparator), null);\n    } else {\n      if (n.left.isRed_()) {\n        n = n.rotateRight_();\n      }\n      if (!n.right.isEmpty() && !n.right.isRed_() && !n.right.left.isRed_()) {\n        n = n.moveRedRight_();\n      }\n      if (comparator(key, n.key) === 0) {\n        if (n.right.isEmpty()) {\n          return SortedMap.EMPTY_NODE as LLRBEmptyNode<K, V>;\n        } else {\n          smallest = (n.right as LLRBNode<K, V>).min_();\n          n = n.copy(\n            smallest.key,\n            smallest.value,\n            null,\n            null,\n            (n.right as LLRBNode<K, V>).removeMin_()\n          );\n        }\n      }\n      n = n.copy(null, null, null, null, n.right.remove(key, comparator));\n    }\n    return n.fixUp_();\n  }\n\n  /**\n   * @returns Whether this is a RED node.\n   */\n  isRed_(): boolean {\n    return this.color;\n  }\n\n  /**\n   * @returns New tree after performing any needed rotations.\n   */\n  private fixUp_(): LLRBNode<K, V> {\n    let n: LLRBNode<K, V> = this;\n    if (n.right.isRed_() && !n.left.isRed_()) {\n      n = n.rotateLeft_();\n    }\n    if (n.left.isRed_() && n.left.left.isRed_()) {\n      n = n.rotateRight_();\n    }\n    if (n.left.isRed_() && n.right.isRed_()) {\n      n = n.colorFlip_();\n    }\n    return n;\n  }\n\n  /**\n   * @returns New tree, after moveRedLeft.\n   */\n  private moveRedLeft_(): LLRBNode<K, V> {\n    let n = this.colorFlip_();\n    if (n.right.left.isRed_()) {\n      n = n.copy(\n        null,\n        null,\n        null,\n        null,\n        (n.right as LLRBNode<K, V>).rotateRight_()\n      );\n      n = n.rotateLeft_();\n      n = n.colorFlip_();\n    }\n    return n;\n  }\n\n  /**\n   * @returns New tree, after moveRedRight.\n   */\n  private moveRedRight_(): LLRBNode<K, V> {\n    let n = this.colorFlip_();\n    if (n.left.left.isRed_()) {\n      n = n.rotateRight_();\n      n = n.colorFlip_();\n    }\n    return n;\n  }\n\n  /**\n   * @returns New tree, after rotateLeft.\n   */\n  private rotateLeft_(): LLRBNode<K, V> {\n    const nl = this.copy(null, null, LLRBNode.RED, null, this.right.left);\n    return this.right.copy(null, null, this.color, nl, null) as LLRBNode<K, V>;\n  }\n\n  /**\n   * @returns New tree, after rotateRight.\n   */\n  private rotateRight_(): LLRBNode<K, V> {\n    const nr = this.copy(null, null, LLRBNode.RED, this.left.right, null);\n    return this.left.copy(null, null, this.color, null, nr) as LLRBNode<K, V>;\n  }\n\n  /**\n   * @returns Newt ree, after colorFlip.\n   */\n  private colorFlip_(): LLRBNode<K, V> {\n    const left = this.left.copy(null, null, !this.left.color, null, null);\n    const right = this.right.copy(null, null, !this.right.color, null, null);\n    return this.copy(null, null, !this.color, left, right);\n  }\n\n  /**\n   * For testing.\n   *\n   * @returns True if all is well.\n   */\n  private checkMaxDepth_(): boolean {\n    const blackDepth = this.check_();\n    return Math.pow(2.0, blackDepth) <= this.count() + 1;\n  }\n\n  check_(): number {\n    if (this.isRed_() && this.left.isRed_()) {\n      throw new Error(\n        'Red node has red child(' + this.key + ',' + this.value + ')'\n      );\n    }\n    if (this.right.isRed_()) {\n      throw new Error(\n        'Right child of (' + this.key + ',' + this.value + ') is red'\n      );\n    }\n    const blackDepth = this.left.check_();\n    if (blackDepth !== this.right.check_()) {\n      throw new Error('Black depths differ');\n    } else {\n      return blackDepth + (this.isRed_() ? 0 : 1);\n    }\n  }\n}\n\n/**\n * Represents an empty node (a leaf node in the Red-Black Tree).\n */\nexport class LLRBEmptyNode<K, V> {\n  key: K;\n  value: V;\n  left: LLRBNode<K, V> | LLRBEmptyNode<K, V>;\n  right: LLRBNode<K, V> | LLRBEmptyNode<K, V>;\n  color: boolean;\n\n  /**\n   * Returns a copy of the current node.\n   *\n   * @returns The node copy.\n   */\n  copy(\n    key: K | null,\n    value: V | null,\n    color: boolean | null,\n    left: LLRBNode<K, V> | LLRBEmptyNode<K, V> | null,\n    right: LLRBNode<K, V> | LLRBEmptyNode<K, V> | null\n  ): LLRBEmptyNode<K, V> {\n    return this;\n  }\n\n  /**\n   * Returns a copy of the tree, with the specified key/value added.\n   *\n   * @param key - Key to be added.\n   * @param value - Value to be added.\n   * @param comparator - Comparator.\n   * @returns New tree, with item added.\n   */\n  insert(key: K, value: V, comparator: Comparator<K>): LLRBNode<K, V> {\n    return new LLRBNode(key, value, null);\n  }\n\n  /**\n   * Returns a copy of the tree, with the specified key removed.\n   *\n   * @param key - The key to remove.\n   * @param comparator - Comparator.\n   * @returns New tree, with item removed.\n   */\n  remove(key: K, comparator: Comparator<K>): LLRBEmptyNode<K, V> {\n    return this;\n  }\n\n  /**\n   * @returns The total number of nodes in the tree.\n   */\n  count(): number {\n    return 0;\n  }\n\n  /**\n   * @returns True if the tree is empty.\n   */\n  isEmpty(): boolean {\n    return true;\n  }\n\n  /**\n   * Traverses the tree in key order and calls the specified action function\n   * for each node.\n   *\n   * @param action - Callback function to be called for each\n   * node.  If it returns true, traversal is aborted.\n   * @returns True if traversal was aborted.\n   */\n  inorderTraversal(action: (k: K, v: V) => unknown): boolean {\n    return false;\n  }\n\n  /**\n   * Traverses the tree in reverse key order and calls the specified action function\n   * for each node.\n   *\n   * @param action - Callback function to be called for each\n   * node.  If it returns true, traversal is aborted.\n   * @returns True if traversal was aborted.\n   */\n  reverseTraversal(action: (k: K, v: V) => void): boolean {\n    return false;\n  }\n\n  minKey(): null {\n    return null;\n  }\n\n  maxKey(): null {\n    return null;\n  }\n\n  check_(): number {\n    return 0;\n  }\n\n  /**\n   * @returns Whether this node is red.\n   */\n  isRed_() {\n    return false;\n  }\n}\n\n/**\n * An immutable sorted map implementation, based on a Left-leaning Red-Black\n * tree.\n */\nexport class SortedMap<K, V> {\n  /**\n   * Always use the same empty node, to reduce memory.\n   */\n  static EMPTY_NODE = new LLRBEmptyNode();\n\n  /**\n   * @param comparator_ - Key comparator.\n   * @param root_ - Optional root node for the map.\n   */\n  constructor(\n    private comparator_: Comparator<K>,\n    private root_:\n      | LLRBNode<K, V>\n      | LLRBEmptyNode<K, V> = SortedMap.EMPTY_NODE as LLRBEmptyNode<K, V>\n  ) {}\n\n  /**\n   * Returns a copy of the map, with the specified key/value added or replaced.\n   * (TODO: We should perhaps rename this method to 'put')\n   *\n   * @param key - Key to be added.\n   * @param value - Value to be added.\n   * @returns New map, with item added.\n   */\n  insert(key: K, value: V): SortedMap<K, V> {\n    return new SortedMap(\n      this.comparator_,\n      this.root_\n        .insert(key, value, this.comparator_)\n        .copy(null, null, LLRBNode.BLACK, null, null)\n    );\n  }\n\n  /**\n   * Returns a copy of the map, with the specified key removed.\n   *\n   * @param key - The key to remove.\n   * @returns New map, with item removed.\n   */\n  remove(key: K): SortedMap<K, V> {\n    return new SortedMap(\n      this.comparator_,\n      this.root_\n        .remove(key, this.comparator_)\n        .copy(null, null, LLRBNode.BLACK, null, null)\n    );\n  }\n\n  /**\n   * Returns the value of the node with the given key, or null.\n   *\n   * @param key - The key to look up.\n   * @returns The value of the node with the given key, or null if the\n   * key doesn't exist.\n   */\n  get(key: K): V | null {\n    let cmp;\n    let node = this.root_;\n    while (!node.isEmpty()) {\n      cmp = this.comparator_(key, node.key);\n      if (cmp === 0) {\n        return node.value;\n      } else if (cmp < 0) {\n        node = node.left;\n      } else if (cmp > 0) {\n        node = node.right;\n      }\n    }\n    return null;\n  }\n\n  /**\n   * Returns the key of the item *before* the specified key, or null if key is the first item.\n   * @param key - The key to find the predecessor of\n   * @returns The predecessor key.\n   */\n  getPredecessorKey(key: K): K | null {\n    let cmp,\n      node = this.root_,\n      rightParent = null;\n    while (!node.isEmpty()) {\n      cmp = this.comparator_(key, node.key);\n      if (cmp === 0) {\n        if (!node.left.isEmpty()) {\n          node = node.left;\n          while (!node.right.isEmpty()) {\n            node = node.right;\n          }\n          return node.key;\n        } else if (rightParent) {\n          return rightParent.key;\n        } else {\n          return null; // first item.\n        }\n      } else if (cmp < 0) {\n        node = node.left;\n      } else if (cmp > 0) {\n        rightParent = node;\n        node = node.right;\n      }\n    }\n\n    throw new Error(\n      'Attempted to find predecessor key for a nonexistent key.  What gives?'\n    );\n  }\n\n  /**\n   * @returns True if the map is empty.\n   */\n  isEmpty(): boolean {\n    return this.root_.isEmpty();\n  }\n\n  /**\n   * @returns The total number of nodes in the map.\n   */\n  count(): number {\n    return this.root_.count();\n  }\n\n  /**\n   * @returns The minimum key in the map.\n   */\n  minKey(): K | null {\n    return this.root_.minKey();\n  }\n\n  /**\n   * @returns The maximum key in the map.\n   */\n  maxKey(): K | null {\n    return this.root_.maxKey();\n  }\n\n  /**\n   * Traverses the map in key order and calls the specified action function\n   * for each key/value pair.\n   *\n   * @param action - Callback function to be called\n   * for each key/value pair.  If action returns true, traversal is aborted.\n   * @returns The first truthy value returned by action, or the last falsey\n   *   value returned by action\n   */\n  inorderTraversal(action: (k: K, v: V) => unknown): boolean {\n    return this.root_.inorderTraversal(action);\n  }\n\n  /**\n   * Traverses the map in reverse key order and calls the specified action function\n   * for each key/value pair.\n   *\n   * @param action - Callback function to be called\n   * for each key/value pair.  If action returns true, traversal is aborted.\n   * @returns True if the traversal was aborted.\n   */\n  reverseTraversal(action: (k: K, v: V) => void): boolean {\n    return this.root_.reverseTraversal(action);\n  }\n\n  /**\n   * Returns an iterator over the SortedMap.\n   * @returns The iterator.\n   */\n  getIterator<T>(\n    resultGenerator?: (k: K, v: V) => T\n  ): SortedMapIterator<K, V, T> {\n    return new SortedMapIterator(\n      this.root_,\n      null,\n      this.comparator_,\n      false,\n      resultGenerator\n    );\n  }\n\n  getIteratorFrom<T>(\n    key: K,\n    resultGenerator?: (k: K, v: V) => T\n  ): SortedMapIterator<K, V, T> {\n    return new SortedMapIterator(\n      this.root_,\n      key,\n      this.comparator_,\n      false,\n      resultGenerator\n    );\n  }\n\n  getReverseIteratorFrom<T>(\n    key: K,\n    resultGenerator?: (k: K, v: V) => T\n  ): SortedMapIterator<K, V, T> {\n    return new SortedMapIterator(\n      this.root_,\n      key,\n      this.comparator_,\n      true,\n      resultGenerator\n    );\n  }\n\n  getReverseIterator<T>(\n    resultGenerator?: (k: K, v: V) => T\n  ): SortedMapIterator<K, V, T> {\n    return new SortedMapIterator(\n      this.root_,\n      null,\n      this.comparator_,\n      true,\n      resultGenerator\n    );\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { nameCompare } from '../util/util';\n\nimport { NamedNode } from './Node';\n\nexport function NAME_ONLY_COMPARATOR(left: NamedNode, right: NamedNode) {\n  return nameCompare(left.name, right.name);\n}\n\nexport function NAME_COMPARATOR(left: string, right: string) {\n  return nameCompare(left, right);\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { assert, contains } from '@firebase/util';\n\nimport { Indexable } from '../util/misc';\nimport { doubleToIEEE754String } from '../util/util';\n\nimport { Node } from './Node';\n\nlet MAX_NODE: Node;\n\nexport function setMaxNode(val: Node) {\n  MAX_NODE = val;\n}\n\nexport const priorityHashText = function (priority: string | number): string {\n  if (typeof priority === 'number') {\n    return 'number:' + doubleToIEEE754String(priority);\n  } else {\n    return 'string:' + priority;\n  }\n};\n\n/**\n * Validates that a priority snapshot Node is valid.\n */\nexport const validatePriorityNode = function (priorityNode: Node) {\n  if (priorityNode.isLeafNode()) {\n    const val = priorityNode.val();\n    assert(\n      typeof val === 'string' ||\n        typeof val === 'number' ||\n        (typeof val === 'object' && contains(val as Indexable, '.sv')),\n      'Priority must be a string or number.'\n    );\n  } else {\n    assert(\n      priorityNode === MAX_NODE || priorityNode.isEmpty(),\n      'priority of unexpected type.'\n    );\n  }\n  // Don't call getPriority() on MAX_NODE to avoid hitting assertion.\n  assert(\n    priorityNode === MAX_NODE || priorityNode.getPriority().isEmpty(),\n    \"Priority nodes can't have a priority of their own.\"\n  );\n};\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { assert } from '@firebase/util';\n\nimport { Indexable } from '../util/misc';\nimport {\n  Path,\n  pathGetFront,\n  pathGetLength,\n  pathIsEmpty,\n  pathPopFront\n} from '../util/Path';\nimport { doubleToIEEE754String, sha1 } from '../util/util';\n\nimport { ChildrenNodeConstructor } from './ChildrenNode';\nimport { Index } from './indexes/Index';\nimport { Node } from './Node';\nimport { priorityHashText, validatePriorityNode } from './snap';\n\nlet __childrenNodeConstructor: ChildrenNodeConstructor;\n\n/**\n * LeafNode is a class for storing leaf nodes in a DataSnapshot.  It\n * implements Node and stores the value of the node (a string,\n * number, or boolean) accessible via getValue().\n */\nexport class LeafNode implements Node {\n  static set __childrenNodeConstructor(val: ChildrenNodeConstructor) {\n    __childrenNodeConstructor = val;\n  }\n\n  static get __childrenNodeConstructor() {\n    return __childrenNodeConstructor;\n  }\n\n  /**\n   * The sort order for comparing leaf nodes of different types. If two leaf nodes have\n   * the same type, the comparison falls back to their value\n   */\n  static VALUE_TYPE_ORDER = ['object', 'boolean', 'number', 'string'];\n\n  private lazyHash_: string | null = null;\n\n  /**\n   * @param value_ - The value to store in this leaf node. The object type is\n   * possible in the event of a deferred value\n   * @param priorityNode_ - The priority of this node.\n   */\n  constructor(\n    private readonly value_: string | number | boolean | Indexable,\n    private priorityNode_: Node = LeafNode.__childrenNodeConstructor.EMPTY_NODE\n  ) {\n    assert(\n      this.value_ !== undefined && this.value_ !== null,\n      \"LeafNode shouldn't be created with null/undefined value.\"\n    );\n\n    validatePriorityNode(this.priorityNode_);\n  }\n\n  /** @inheritDoc */\n  isLeafNode(): boolean {\n    return true;\n  }\n\n  /** @inheritDoc */\n  getPriority(): Node {\n    return this.priorityNode_;\n  }\n\n  /** @inheritDoc */\n  updatePriority(newPriorityNode: Node): Node {\n    return new LeafNode(this.value_, newPriorityNode);\n  }\n\n  /** @inheritDoc */\n  getImmediateChild(childName: string): Node {\n    // Hack to treat priority as a regular child\n    if (childName === '.priority') {\n      return this.priorityNode_;\n    } else {\n      return LeafNode.__childrenNodeConstructor.EMPTY_NODE;\n    }\n  }\n\n  /** @inheritDoc */\n  getChild(path: Path): Node {\n    if (pathIsEmpty(path)) {\n      return this;\n    } else if (pathGetFront(path) === '.priority') {\n      return this.priorityNode_;\n    } else {\n      return LeafNode.__childrenNodeConstructor.EMPTY_NODE;\n    }\n  }\n  hasChild(): boolean {\n    return false;\n  }\n\n  /** @inheritDoc */\n  getPredecessorChildName(childName: string, childNode: Node): null {\n    return null;\n  }\n\n  /** @inheritDoc */\n  updateImmediateChild(childName: string, newChildNode: Node): Node {\n    if (childName === '.priority') {\n      return this.updatePriority(newChildNode);\n    } else if (newChildNode.isEmpty() && childName !== '.priority') {\n      return this;\n    } else {\n      return LeafNode.__childrenNodeConstructor.EMPTY_NODE.updateImmediateChild(\n        childName,\n        newChildNode\n      ).updatePriority(this.priorityNode_);\n    }\n  }\n\n  /** @inheritDoc */\n  updateChild(path: Path, newChildNode: Node): Node {\n    const front = pathGetFront(path);\n    if (front === null) {\n      return newChildNode;\n    } else if (newChildNode.isEmpty() && front !== '.priority') {\n      return this;\n    } else {\n      assert(\n        front !== '.priority' || pathGetLength(path) === 1,\n        '.priority must be the last token in a path'\n      );\n\n      return this.updateImmediateChild(\n        front,\n        LeafNode.__childrenNodeConstructor.EMPTY_NODE.updateChild(\n          pathPopFront(path),\n          newChildNode\n        )\n      );\n    }\n  }\n\n  /** @inheritDoc */\n  isEmpty(): boolean {\n    return false;\n  }\n\n  /** @inheritDoc */\n  numChildren(): number {\n    return 0;\n  }\n\n  /** @inheritDoc */\n  forEachChild(index: Index, action: (s: string, n: Node) => void): boolean {\n    return false;\n  }\n  val(exportFormat?: boolean): {} {\n    if (exportFormat && !this.getPriority().isEmpty()) {\n      return {\n        '.value': this.getValue(),\n        '.priority': this.getPriority().val()\n      };\n    } else {\n      return this.getValue();\n    }\n  }\n\n  /** @inheritDoc */\n  hash(): string {\n    if (this.lazyHash_ === null) {\n      let toHash = '';\n      if (!this.priorityNode_.isEmpty()) {\n        toHash +=\n          'priority:' +\n          priorityHashText(this.priorityNode_.val() as number | string) +\n          ':';\n      }\n\n      const type = typeof this.value_;\n      toHash += type + ':';\n      if (type === 'number') {\n        toHash += doubleToIEEE754String(this.value_ as number);\n      } else {\n        toHash += this.value_;\n      }\n      this.lazyHash_ = sha1(toHash);\n    }\n    return this.lazyHash_;\n  }\n\n  /**\n   * Returns the value of the leaf node.\n   * @returns The value of the node.\n   */\n  getValue(): Indexable | string | number | boolean {\n    return this.value_;\n  }\n  compareTo(other: Node): number {\n    if (other === LeafNode.__childrenNodeConstructor.EMPTY_NODE) {\n      return 1;\n    } else if (other instanceof LeafNode.__childrenNodeConstructor) {\n      return -1;\n    } else {\n      assert(other.isLeafNode(), 'Unknown node type');\n      return this.compareToLeafNode_(other as LeafNode);\n    }\n  }\n\n  /**\n   * Comparison specifically for two leaf nodes\n   */\n  private compareToLeafNode_(otherLeaf: LeafNode): number {\n    const otherLeafType = typeof otherLeaf.value_;\n    const thisLeafType = typeof this.value_;\n    const otherIndex = LeafNode.VALUE_TYPE_ORDER.indexOf(otherLeafType);\n    const thisIndex = LeafNode.VALUE_TYPE_ORDER.indexOf(thisLeafType);\n    assert(otherIndex >= 0, 'Unknown leaf type: ' + otherLeafType);\n    assert(thisIndex >= 0, 'Unknown leaf type: ' + thisLeafType);\n    if (otherIndex === thisIndex) {\n      // Same type, compare values\n      if (thisLeafType === 'object') {\n        // Deferred value nodes are all equal, but we should also never get to this point...\n        return 0;\n      } else {\n        // Note that this works because true > false, all others are number or string comparisons\n        if (this.value_ < otherLeaf.value_) {\n          return -1;\n        } else if (this.value_ === otherLeaf.value_) {\n          return 0;\n        } else {\n          return 1;\n        }\n      }\n    } else {\n      return thisIndex - otherIndex;\n    }\n  }\n  withIndex(): Node {\n    return this;\n  }\n  isIndexed(): boolean {\n    return true;\n  }\n  equals(other: Node): boolean {\n    if (other === this) {\n      return true;\n    } else if (other.isLeafNode()) {\n      const otherLeaf = other as LeafNode;\n      return (\n        this.value_ === otherLeaf.value_ &&\n        this.priorityNode_.equals(otherLeaf.priorityNode_)\n      );\n    } else {\n      return false;\n    }\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { nameCompare, MAX_NAME } from '../../util/util';\nimport { LeafNode } from '../LeafNode';\nimport { NamedNode, Node } from '../Node';\n\nimport { Index } from './Index';\n\nlet nodeFromJSON: (a: unknown) => Node;\nlet MAX_NODE: Node;\n\nexport function setNodeFromJSON(val: (a: unknown) => Node) {\n  nodeFromJSON = val;\n}\n\nexport function setMaxNode(val: Node) {\n  MAX_NODE = val;\n}\n\nexport class PriorityIndex extends Index {\n  compare(a: NamedNode, b: NamedNode): number {\n    const aPriority = a.node.getPriority();\n    const bPriority = b.node.getPriority();\n    const indexCmp = aPriority.compareTo(bPriority);\n    if (indexCmp === 0) {\n      return nameCompare(a.name, b.name);\n    } else {\n      return indexCmp;\n    }\n  }\n  isDefinedOn(node: Node): boolean {\n    return !node.getPriority().isEmpty();\n  }\n  indexedValueChanged(oldNode: Node, newNode: Node): boolean {\n    return !oldNode.getPriority().equals(newNode.getPriority());\n  }\n  minPost(): NamedNode {\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    return (NamedNode as any).MIN;\n  }\n  maxPost(): NamedNode {\n    return new NamedNode(MAX_NAME, new LeafNode('[PRIORITY-POST]', MAX_NODE));\n  }\n\n  makePost(indexValue: unknown, name: string): NamedNode {\n    const priorityNode = nodeFromJSON(indexValue);\n    return new NamedNode(name, new LeafNode('[PRIORITY-POST]', priorityNode));\n  }\n\n  /**\n   * @returns String representation for inclusion in a query spec\n   */\n  toString(): string {\n    return '.priority';\n  }\n}\n\nexport const PRIORITY_INDEX = new PriorityIndex();\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { LLRBNode, SortedMap } from '../util/SortedMap';\n\nimport { NamedNode } from './Node';\n\nconst LOG_2 = Math.log(2);\n\nclass Base12Num {\n  count: number;\n  private current_: number;\n  private bits_: number;\n\n  constructor(length: number) {\n    const logBase2 = (num: number) =>\n      // eslint-disable-next-line @typescript-eslint/no-explicit-any\n      parseInt((Math.log(num) / LOG_2) as any, 10);\n    const bitMask = (bits: number) => parseInt(Array(bits + 1).join('1'), 2);\n    this.count = logBase2(length + 1);\n    this.current_ = this.count - 1;\n    const mask = bitMask(this.count);\n    this.bits_ = (length + 1) & mask;\n  }\n\n  nextBitIsOne(): boolean {\n    //noinspection JSBitwiseOperatorUsage\n    const result = !(this.bits_ & (0x1 << this.current_));\n    this.current_--;\n    return result;\n  }\n}\n\n/**\n * Takes a list of child nodes and constructs a SortedSet using the given comparison\n * function\n *\n * Uses the algorithm described in the paper linked here:\n * http://citeseerx.ist.psu.edu/viewdoc/summary?doi=10.1.1.46.1458\n *\n * @param childList - Unsorted list of children\n * @param cmp - The comparison method to be used\n * @param keyFn - An optional function to extract K from a node wrapper, if K's\n * type is not NamedNode\n * @param mapSortFn - An optional override for comparator used by the generated sorted map\n */\nexport const buildChildSet = function <K, V>(\n  childList: NamedNode[],\n  cmp: (a: NamedNode, b: NamedNode) => number,\n  keyFn?: (a: NamedNode) => K,\n  mapSortFn?: (a: K, b: K) => number\n): SortedMap<K, V> {\n  childList.sort(cmp);\n\n  const buildBalancedTree = function (\n    low: number,\n    high: number\n  ): LLRBNode<K, V> | null {\n    const length = high - low;\n    let namedNode: NamedNode;\n    let key: K;\n    if (length === 0) {\n      return null;\n    } else if (length === 1) {\n      namedNode = childList[low];\n      key = keyFn ? keyFn(namedNode) : ((namedNode as unknown) as K);\n      return new LLRBNode(\n        key,\n        (namedNode.node as unknown) as V,\n        LLRBNode.BLACK,\n        null,\n        null\n      );\n    } else {\n      // eslint-disable-next-line @typescript-eslint/no-explicit-any\n      const middle = parseInt((length / 2) as any, 10) + low;\n      const left = buildBalancedTree(low, middle);\n      const right = buildBalancedTree(middle + 1, high);\n      namedNode = childList[middle];\n      key = keyFn ? keyFn(namedNode) : ((namedNode as unknown) as K);\n      return new LLRBNode(\n        key,\n        (namedNode.node as unknown) as V,\n        LLRBNode.BLACK,\n        left,\n        right\n      );\n    }\n  };\n\n  const buildFrom12Array = function (base12: Base12Num): LLRBNode<K, V> {\n    let node: LLRBNode<K, V> = null;\n    let root = null;\n    let index = childList.length;\n\n    const buildPennant = function (chunkSize: number, color: boolean) {\n      const low = index - chunkSize;\n      const high = index;\n      index -= chunkSize;\n      const childTree = buildBalancedTree(low + 1, high);\n      const namedNode = childList[low];\n      const key: K = keyFn ? keyFn(namedNode) : ((namedNode as unknown) as K);\n      attachPennant(\n        new LLRBNode(\n          key,\n          (namedNode.node as unknown) as V,\n          color,\n          null,\n          childTree\n        )\n      );\n    };\n\n    const attachPennant = function (pennant: LLRBNode<K, V>) {\n      if (node) {\n        node.left = pennant;\n        node = pennant;\n      } else {\n        root = pennant;\n        node = pennant;\n      }\n    };\n\n    for (let i = 0; i < base12.count; ++i) {\n      const isOne = base12.nextBitIsOne();\n      // The number of nodes taken in each slice is 2^(arr.length - (i + 1))\n      const chunkSize = Math.pow(2, base12.count - (i + 1));\n      if (isOne) {\n        buildPennant(chunkSize, LLRBNode.BLACK);\n      } else {\n        // current == 2\n        buildPennant(chunkSize, LLRBNode.BLACK);\n        buildPennant(chunkSize, LLRBNode.RED);\n      }\n    }\n    return root;\n  };\n\n  const base12 = new Base12Num(childList.length);\n  const root = buildFrom12Array(base12);\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  return new SortedMap<K, V>(mapSortFn || (cmp as any), root);\n};\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { assert, contains, map, safeGet } from '@firebase/util';\n\nimport { SortedMap } from '../util/SortedMap';\n\nimport { buildChildSet } from './childSet';\nimport { Index } from './indexes/Index';\nimport { KEY_INDEX } from './indexes/KeyIndex';\nimport { PRIORITY_INDEX } from './indexes/PriorityIndex';\nimport { NamedNode, Node } from './Node';\n\nlet _defaultIndexMap: IndexMap;\n\nconst fallbackObject = {};\n\nexport class IndexMap {\n  /**\n   * The default IndexMap for nodes without a priority\n   */\n  static get Default(): IndexMap {\n    assert(\n      fallbackObject && PRIORITY_INDEX,\n      'ChildrenNode.ts has not been loaded'\n    );\n    _defaultIndexMap =\n      _defaultIndexMap ||\n      new IndexMap(\n        { '.priority': fallbackObject },\n        { '.priority': PRIORITY_INDEX }\n      );\n    return _defaultIndexMap;\n  }\n\n  constructor(\n    private indexes_: {\n      [k: string]: SortedMap<NamedNode, Node> | /*FallbackType*/ object;\n    },\n    private indexSet_: { [k: string]: Index }\n  ) {}\n\n  get(indexKey: string): SortedMap<NamedNode, Node> | null {\n    const sortedMap = safeGet(this.indexes_, indexKey);\n    if (!sortedMap) {\n      throw new Error('No index defined for ' + indexKey);\n    }\n\n    if (sortedMap instanceof SortedMap) {\n      return sortedMap;\n    } else {\n      // The index exists, but it falls back to just name comparison. Return null so that the calling code uses the\n      // regular child map\n      return null;\n    }\n  }\n\n  hasIndex(indexDefinition: Index): boolean {\n    return contains(this.indexSet_, indexDefinition.toString());\n  }\n\n  addIndex(\n    indexDefinition: Index,\n    existingChildren: SortedMap<string, Node>\n  ): IndexMap {\n    assert(\n      indexDefinition !== KEY_INDEX,\n      \"KeyIndex always exists and isn't meant to be added to the IndexMap.\"\n    );\n    const childList = [];\n    let sawIndexedValue = false;\n    const iter = existingChildren.getIterator(NamedNode.Wrap);\n    let next = iter.getNext();\n    while (next) {\n      sawIndexedValue =\n        sawIndexedValue || indexDefinition.isDefinedOn(next.node);\n      childList.push(next);\n      next = iter.getNext();\n    }\n    let newIndex;\n    if (sawIndexedValue) {\n      newIndex = buildChildSet(childList, indexDefinition.getCompare());\n    } else {\n      newIndex = fallbackObject;\n    }\n    const indexName = indexDefinition.toString();\n    const newIndexSet = { ...this.indexSet_ };\n    newIndexSet[indexName] = indexDefinition;\n    const newIndexes = { ...this.indexes_ };\n    newIndexes[indexName] = newIndex;\n    return new IndexMap(newIndexes, newIndexSet);\n  }\n\n  /**\n   * Ensure that this node is properly tracked in any indexes that we're maintaining\n   */\n  addToIndexes(\n    namedNode: NamedNode,\n    existingChildren: SortedMap<string, Node>\n  ): IndexMap {\n    const newIndexes = map(\n      this.indexes_,\n      (indexedChildren: SortedMap<NamedNode, Node>, indexName: string) => {\n        const index = safeGet(this.indexSet_, indexName);\n        assert(index, 'Missing index implementation for ' + indexName);\n        if (indexedChildren === fallbackObject) {\n          // Check to see if we need to index everything\n          if (index.isDefinedOn(namedNode.node)) {\n            // We need to build this index\n            const childList = [];\n            const iter = existingChildren.getIterator(NamedNode.Wrap);\n            let next = iter.getNext();\n            while (next) {\n              if (next.name !== namedNode.name) {\n                childList.push(next);\n              }\n              next = iter.getNext();\n            }\n            childList.push(namedNode);\n            return buildChildSet(childList, index.getCompare());\n          } else {\n            // No change, this remains a fallback\n            return fallbackObject;\n          }\n        } else {\n          const existingSnap = existingChildren.get(namedNode.name);\n          let newChildren = indexedChildren;\n          if (existingSnap) {\n            newChildren = newChildren.remove(\n              new NamedNode(namedNode.name, existingSnap)\n            );\n          }\n          return newChildren.insert(namedNode, namedNode.node);\n        }\n      }\n    );\n    return new IndexMap(newIndexes, this.indexSet_);\n  }\n\n  /**\n   * Create a new IndexMap instance with the given value removed\n   */\n  removeFromIndexes(\n    namedNode: NamedNode,\n    existingChildren: SortedMap<string, Node>\n  ): IndexMap {\n    const newIndexes = map(\n      this.indexes_,\n      (indexedChildren: SortedMap<NamedNode, Node>) => {\n        if (indexedChildren === fallbackObject) {\n          // This is the fallback. Just return it, nothing to do in this case\n          return indexedChildren;\n        } else {\n          const existingSnap = existingChildren.get(namedNode.name);\n          if (existingSnap) {\n            return indexedChildren.remove(\n              new NamedNode(namedNode.name, existingSnap)\n            );\n          } else {\n            // No record of this child\n            return indexedChildren;\n          }\n        }\n      }\n    );\n    return new IndexMap(newIndexes, this.indexSet_);\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { assert } from '@firebase/util';\n\nimport { Path, pathGetFront, pathGetLength, pathPopFront } from '../util/Path';\nimport { SortedMap, SortedMapIterator } from '../util/SortedMap';\nimport { MAX_NAME, MIN_NAME, sha1 } from '../util/util';\n\nimport { NAME_COMPARATOR } from './comparators';\nimport { Index } from './indexes/Index';\nimport { KEY_INDEX, KeyIndex } from './indexes/KeyIndex';\nimport {\n  PRIORITY_INDEX,\n  setMaxNode as setPriorityMaxNode\n} from './indexes/PriorityIndex';\nimport { IndexMap } from './IndexMap';\nimport { LeafNode } from './LeafNode';\nimport { NamedNode, Node } from './Node';\nimport { priorityHashText, setMaxNode, validatePriorityNode } from './snap';\n\nexport interface ChildrenNodeConstructor {\n  new (\n    children_: SortedMap<string, Node>,\n    priorityNode_: Node | null,\n    indexMap_: IndexMap\n  ): ChildrenNode;\n  EMPTY_NODE: ChildrenNode;\n}\n\n// TODO: For memory savings, don't store priorityNode_ if it's empty.\n\nlet EMPTY_NODE: ChildrenNode;\n\n/**\n * ChildrenNode is a class for storing internal nodes in a DataSnapshot\n * (i.e. nodes with children).  It implements Node and stores the\n * list of children in the children property, sorted by child name.\n */\nexport class ChildrenNode implements Node {\n  private lazyHash_: string | null = null;\n\n  static get EMPTY_NODE(): ChildrenNode {\n    return (\n      EMPTY_NODE ||\n      (EMPTY_NODE = new ChildrenNode(\n        new SortedMap<string, Node>(NAME_COMPARATOR),\n        null,\n        IndexMap.Default\n      ))\n    );\n  }\n\n  /**\n   * @param children_ - List of children of this node..\n   * @param priorityNode_ - The priority of this node (as a snapshot node).\n   */\n  constructor(\n    private readonly children_: SortedMap<string, Node>,\n    private readonly priorityNode_: Node | null,\n    private indexMap_: IndexMap\n  ) {\n    /**\n     * Note: The only reason we allow null priority is for EMPTY_NODE, since we can't use\n     * EMPTY_NODE as the priority of EMPTY_NODE.  We might want to consider making EMPTY_NODE its own\n     * class instead of an empty ChildrenNode.\n     */\n    if (this.priorityNode_) {\n      validatePriorityNode(this.priorityNode_);\n    }\n\n    if (this.children_.isEmpty()) {\n      assert(\n        !this.priorityNode_ || this.priorityNode_.isEmpty(),\n        'An empty node cannot have a priority'\n      );\n    }\n  }\n\n  /** @inheritDoc */\n  isLeafNode(): boolean {\n    return false;\n  }\n\n  /** @inheritDoc */\n  getPriority(): Node {\n    return this.priorityNode_ || EMPTY_NODE;\n  }\n\n  /** @inheritDoc */\n  updatePriority(newPriorityNode: Node): Node {\n    if (this.children_.isEmpty()) {\n      // Don't allow priorities on empty nodes\n      return this;\n    } else {\n      return new ChildrenNode(this.children_, newPriorityNode, this.indexMap_);\n    }\n  }\n\n  /** @inheritDoc */\n  getImmediateChild(childName: string): Node {\n    // Hack to treat priority as a regular child\n    if (childName === '.priority') {\n      return this.getPriority();\n    } else {\n      const child = this.children_.get(childName);\n      return child === null ? EMPTY_NODE : child;\n    }\n  }\n\n  /** @inheritDoc */\n  getChild(path: Path): Node {\n    const front = pathGetFront(path);\n    if (front === null) {\n      return this;\n    }\n\n    return this.getImmediateChild(front).getChild(pathPopFront(path));\n  }\n\n  /** @inheritDoc */\n  hasChild(childName: string): boolean {\n    return this.children_.get(childName) !== null;\n  }\n\n  /** @inheritDoc */\n  updateImmediateChild(childName: string, newChildNode: Node): Node {\n    assert(newChildNode, 'We should always be passing snapshot nodes');\n    if (childName === '.priority') {\n      return this.updatePriority(newChildNode);\n    } else {\n      const namedNode = new NamedNode(childName, newChildNode);\n      let newChildren, newIndexMap;\n      if (newChildNode.isEmpty()) {\n        newChildren = this.children_.remove(childName);\n        newIndexMap = this.indexMap_.removeFromIndexes(\n          namedNode,\n          this.children_\n        );\n      } else {\n        newChildren = this.children_.insert(childName, newChildNode);\n        newIndexMap = this.indexMap_.addToIndexes(namedNode, this.children_);\n      }\n\n      const newPriority = newChildren.isEmpty()\n        ? EMPTY_NODE\n        : this.priorityNode_;\n      return new ChildrenNode(newChildren, newPriority, newIndexMap);\n    }\n  }\n\n  /** @inheritDoc */\n  updateChild(path: Path, newChildNode: Node): Node {\n    const front = pathGetFront(path);\n    if (front === null) {\n      return newChildNode;\n    } else {\n      assert(\n        pathGetFront(path) !== '.priority' || pathGetLength(path) === 1,\n        '.priority must be the last token in a path'\n      );\n      const newImmediateChild = this.getImmediateChild(front).updateChild(\n        pathPopFront(path),\n        newChildNode\n      );\n      return this.updateImmediateChild(front, newImmediateChild);\n    }\n  }\n\n  /** @inheritDoc */\n  isEmpty(): boolean {\n    return this.children_.isEmpty();\n  }\n\n  /** @inheritDoc */\n  numChildren(): number {\n    return this.children_.count();\n  }\n\n  private static INTEGER_REGEXP_ = /^(0|[1-9]\\d*)$/;\n\n  /** @inheritDoc */\n  val(exportFormat?: boolean): object {\n    if (this.isEmpty()) {\n      return null;\n    }\n\n    const obj: { [k: string]: unknown } = {};\n    let numKeys = 0,\n      maxKey = 0,\n      allIntegerKeys = true;\n    this.forEachChild(PRIORITY_INDEX, (key: string, childNode: Node) => {\n      obj[key] = childNode.val(exportFormat);\n\n      numKeys++;\n      if (allIntegerKeys && ChildrenNode.INTEGER_REGEXP_.test(key)) {\n        maxKey = Math.max(maxKey, Number(key));\n      } else {\n        allIntegerKeys = false;\n      }\n    });\n\n    if (!exportFormat && allIntegerKeys && maxKey < 2 * numKeys) {\n      // convert to array.\n      const array: unknown[] = [];\n      // eslint-disable-next-line guard-for-in\n      for (const key in obj) {\n        array[(key as unknown) as number] = obj[key];\n      }\n\n      return array;\n    } else {\n      if (exportFormat && !this.getPriority().isEmpty()) {\n        obj['.priority'] = this.getPriority().val();\n      }\n      return obj;\n    }\n  }\n\n  /** @inheritDoc */\n  hash(): string {\n    if (this.lazyHash_ === null) {\n      let toHash = '';\n      if (!this.getPriority().isEmpty()) {\n        toHash +=\n          'priority:' +\n          priorityHashText(this.getPriority().val() as string | number) +\n          ':';\n      }\n\n      this.forEachChild(PRIORITY_INDEX, (key, childNode) => {\n        const childHash = childNode.hash();\n        if (childHash !== '') {\n          toHash += ':' + key + ':' + childHash;\n        }\n      });\n\n      this.lazyHash_ = toHash === '' ? '' : sha1(toHash);\n    }\n    return this.lazyHash_;\n  }\n\n  /** @inheritDoc */\n  getPredecessorChildName(\n    childName: string,\n    childNode: Node,\n    index: Index\n  ): string {\n    const idx = this.resolveIndex_(index);\n    if (idx) {\n      const predecessor = idx.getPredecessorKey(\n        new NamedNode(childName, childNode)\n      );\n      return predecessor ? predecessor.name : null;\n    } else {\n      return this.children_.getPredecessorKey(childName);\n    }\n  }\n\n  getFirstChildName(indexDefinition: Index): string | null {\n    const idx = this.resolveIndex_(indexDefinition);\n    if (idx) {\n      const minKey = idx.minKey();\n      return minKey && minKey.name;\n    } else {\n      return this.children_.minKey();\n    }\n  }\n\n  getFirstChild(indexDefinition: Index): NamedNode | null {\n    const minKey = this.getFirstChildName(indexDefinition);\n    if (minKey) {\n      return new NamedNode(minKey, this.children_.get(minKey));\n    } else {\n      return null;\n    }\n  }\n\n  /**\n   * Given an index, return the key name of the largest value we have, according to that index\n   */\n  getLastChildName(indexDefinition: Index): string | null {\n    const idx = this.resolveIndex_(indexDefinition);\n    if (idx) {\n      const maxKey = idx.maxKey();\n      return maxKey && maxKey.name;\n    } else {\n      return this.children_.maxKey();\n    }\n  }\n\n  getLastChild(indexDefinition: Index): NamedNode | null {\n    const maxKey = this.getLastChildName(indexDefinition);\n    if (maxKey) {\n      return new NamedNode(maxKey, this.children_.get(maxKey));\n    } else {\n      return null;\n    }\n  }\n  forEachChild(\n    index: Index,\n    action: (key: string, node: Node) => boolean | void\n  ): boolean {\n    const idx = this.resolveIndex_(index);\n    if (idx) {\n      return idx.inorderTraversal(wrappedNode => {\n        return action(wrappedNode.name, wrappedNode.node);\n      });\n    } else {\n      return this.children_.inorderTraversal(action);\n    }\n  }\n\n  getIterator(\n    indexDefinition: Index\n  ): SortedMapIterator<string | NamedNode, Node, NamedNode> {\n    return this.getIteratorFrom(indexDefinition.minPost(), indexDefinition);\n  }\n\n  getIteratorFrom(\n    startPost: NamedNode,\n    indexDefinition: Index\n  ): SortedMapIterator<string | NamedNode, Node, NamedNode> {\n    const idx = this.resolveIndex_(indexDefinition);\n    if (idx) {\n      return idx.getIteratorFrom(startPost, key => key);\n    } else {\n      const iterator = this.children_.getIteratorFrom(\n        startPost.name,\n        NamedNode.Wrap\n      );\n      let next = iterator.peek();\n      while (next != null && indexDefinition.compare(next, startPost) < 0) {\n        iterator.getNext();\n        next = iterator.peek();\n      }\n      return iterator;\n    }\n  }\n\n  getReverseIterator(\n    indexDefinition: Index\n  ): SortedMapIterator<string | NamedNode, Node, NamedNode> {\n    return this.getReverseIteratorFrom(\n      indexDefinition.maxPost(),\n      indexDefinition\n    );\n  }\n\n  getReverseIteratorFrom(\n    endPost: NamedNode,\n    indexDefinition: Index\n  ): SortedMapIterator<string | NamedNode, Node, NamedNode> {\n    const idx = this.resolveIndex_(indexDefinition);\n    if (idx) {\n      return idx.getReverseIteratorFrom(endPost, key => {\n        return key;\n      });\n    } else {\n      const iterator = this.children_.getReverseIteratorFrom(\n        endPost.name,\n        NamedNode.Wrap\n      );\n      let next = iterator.peek();\n      while (next != null && indexDefinition.compare(next, endPost) > 0) {\n        iterator.getNext();\n        next = iterator.peek();\n      }\n      return iterator;\n    }\n  }\n  compareTo(other: ChildrenNode): number {\n    if (this.isEmpty()) {\n      if (other.isEmpty()) {\n        return 0;\n      } else {\n        return -1;\n      }\n    } else if (other.isLeafNode() || other.isEmpty()) {\n      return 1;\n    } else if (other === MAX_NODE) {\n      return -1;\n    } else {\n      // Must be another node with children.\n      return 0;\n    }\n  }\n  withIndex(indexDefinition: Index): Node {\n    if (\n      indexDefinition === KEY_INDEX ||\n      this.indexMap_.hasIndex(indexDefinition)\n    ) {\n      return this;\n    } else {\n      const newIndexMap = this.indexMap_.addIndex(\n        indexDefinition,\n        this.children_\n      );\n      return new ChildrenNode(this.children_, this.priorityNode_, newIndexMap);\n    }\n  }\n  isIndexed(index: Index): boolean {\n    return index === KEY_INDEX || this.indexMap_.hasIndex(index);\n  }\n  equals(other: Node): boolean {\n    if (other === this) {\n      return true;\n    } else if (other.isLeafNode()) {\n      return false;\n    } else {\n      const otherChildrenNode = other as ChildrenNode;\n      if (!this.getPriority().equals(otherChildrenNode.getPriority())) {\n        return false;\n      } else if (\n        this.children_.count() === otherChildrenNode.children_.count()\n      ) {\n        const thisIter = this.getIterator(PRIORITY_INDEX);\n        const otherIter = otherChildrenNode.getIterator(PRIORITY_INDEX);\n        let thisCurrent = thisIter.getNext();\n        let otherCurrent = otherIter.getNext();\n        while (thisCurrent && otherCurrent) {\n          if (\n            thisCurrent.name !== otherCurrent.name ||\n            !thisCurrent.node.equals(otherCurrent.node)\n          ) {\n            return false;\n          }\n          thisCurrent = thisIter.getNext();\n          otherCurrent = otherIter.getNext();\n        }\n        return thisCurrent === null && otherCurrent === null;\n      } else {\n        return false;\n      }\n    }\n  }\n\n  /**\n   * Returns a SortedMap ordered by index, or null if the default (by-key) ordering can be used\n   * instead.\n   *\n   */\n  private resolveIndex_(\n    indexDefinition: Index\n  ): SortedMap<NamedNode, Node> | null {\n    if (indexDefinition === KEY_INDEX) {\n      return null;\n    } else {\n      return this.indexMap_.get(indexDefinition.toString());\n    }\n  }\n}\n\nexport class MaxNode extends ChildrenNode {\n  constructor() {\n    super(\n      new SortedMap<string, Node>(NAME_COMPARATOR),\n      ChildrenNode.EMPTY_NODE,\n      IndexMap.Default\n    );\n  }\n\n  compareTo(other: Node): number {\n    if (other === this) {\n      return 0;\n    } else {\n      return 1;\n    }\n  }\n\n  equals(other: Node): boolean {\n    // Not that we every compare it, but MAX_NODE is only ever equal to itself\n    return other === this;\n  }\n\n  getPriority(): MaxNode {\n    return this;\n  }\n\n  getImmediateChild(childName: string): ChildrenNode {\n    return ChildrenNode.EMPTY_NODE;\n  }\n\n  isEmpty(): boolean {\n    return false;\n  }\n}\n\n/**\n * Marker that will sort higher than any other snapshot.\n */\nexport const MAX_NODE = new MaxNode();\n\n/**\n * Document NamedNode extensions\n */\ndeclare module './Node' {\n  interface NamedNode {\n    MIN: NamedNode;\n    MAX: NamedNode;\n  }\n}\n\nObject.defineProperties(NamedNode, {\n  MIN: {\n    value: new NamedNode(MIN_NAME, ChildrenNode.EMPTY_NODE)\n  },\n  MAX: {\n    value: new NamedNode(MAX_NAME, MAX_NODE)\n  }\n});\n\n/**\n * Reference Extensions\n */\nKeyIndex.__EMPTY_NODE = ChildrenNode.EMPTY_NODE;\nLeafNode.__childrenNodeConstructor = ChildrenNode;\nsetMaxNode(MAX_NODE);\nsetPriorityMaxNode(MAX_NODE);\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { contains, assert } from '@firebase/util';\n\nimport { Indexable } from '../util/misc';\nimport { SortedMap } from '../util/SortedMap';\nimport { each } from '../util/util';\n\nimport { ChildrenNode } from './ChildrenNode';\nimport { buildChildSet } from './childSet';\nimport { NAME_COMPARATOR, NAME_ONLY_COMPARATOR } from './comparators';\nimport { PRIORITY_INDEX, setNodeFromJSON } from './indexes/PriorityIndex';\nimport { IndexMap } from './IndexMap';\nimport { LeafNode } from './LeafNode';\nimport { NamedNode, Node } from './Node';\n\nconst USE_HINZE = true;\n\n/**\n * Constructs a snapshot node representing the passed JSON and returns it.\n * @param json - JSON to create a node for.\n * @param priority - Optional priority to use.  This will be ignored if the\n * passed JSON contains a .priority property.\n */\nexport function nodeFromJSON(\n  json: unknown | null,\n  priority: unknown = null\n): Node {\n  if (json === null) {\n    return ChildrenNode.EMPTY_NODE;\n  }\n\n  if (typeof json === 'object' && '.priority' in json) {\n    priority = json['.priority'];\n  }\n\n  assert(\n    priority === null ||\n      typeof priority === 'string' ||\n      typeof priority === 'number' ||\n      (typeof priority === 'object' && '.sv' in (priority as object)),\n    'Invalid priority type found: ' + typeof priority\n  );\n\n  if (typeof json === 'object' && '.value' in json && json['.value'] !== null) {\n    json = json['.value'];\n  }\n\n  // Valid leaf nodes include non-objects or server-value wrapper objects\n  if (typeof json !== 'object' || '.sv' in json) {\n    const jsonLeaf = json as string | number | boolean | Indexable;\n    return new LeafNode(jsonLeaf, nodeFromJSON(priority));\n  }\n\n  if (!(json instanceof Array) && USE_HINZE) {\n    const children: NamedNode[] = [];\n    let childrenHavePriority = false;\n    const hinzeJsonObj = json;\n    each(hinzeJsonObj, (key, child) => {\n      if (key.substring(0, 1) !== '.') {\n        // Ignore metadata nodes\n        const childNode = nodeFromJSON(child);\n        if (!childNode.isEmpty()) {\n          childrenHavePriority =\n            childrenHavePriority || !childNode.getPriority().isEmpty();\n          children.push(new NamedNode(key, childNode));\n        }\n      }\n    });\n\n    if (children.length === 0) {\n      return ChildrenNode.EMPTY_NODE;\n    }\n\n    const childSet = buildChildSet(\n      children,\n      NAME_ONLY_COMPARATOR,\n      namedNode => namedNode.name,\n      NAME_COMPARATOR\n    ) as SortedMap<string, Node>;\n    if (childrenHavePriority) {\n      const sortedChildSet = buildChildSet(\n        children,\n        PRIORITY_INDEX.getCompare()\n      );\n      return new ChildrenNode(\n        childSet,\n        nodeFromJSON(priority),\n        new IndexMap(\n          { '.priority': sortedChildSet },\n          { '.priority': PRIORITY_INDEX }\n        )\n      );\n    } else {\n      return new ChildrenNode(\n        childSet,\n        nodeFromJSON(priority),\n        IndexMap.Default\n      );\n    }\n  } else {\n    let node: Node = ChildrenNode.EMPTY_NODE;\n    each(json, (key: string, childData: unknown) => {\n      if (contains(json as object, key)) {\n        if (key.substring(0, 1) !== '.') {\n          // ignore metadata nodes.\n          const childNode = nodeFromJSON(childData);\n          if (childNode.isLeafNode() || !childNode.isEmpty()) {\n            node = node.updateImmediateChild(key, childNode);\n          }\n        }\n      }\n    });\n\n    return node.updatePriority(nodeFromJSON(priority));\n  }\n}\n\nsetNodeFromJSON(nodeFromJSON);\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { assert } from '@firebase/util';\n\nimport { Path, pathGetFront, pathIsEmpty, pathSlice } from '../../util/Path';\nimport { MAX_NAME, nameCompare } from '../../util/util';\nimport { ChildrenNode, MAX_NODE } from '../ChildrenNode';\nimport { NamedNode, Node } from '../Node';\nimport { nodeFromJSON } from '../nodeFromJSON';\n\nimport { Index } from './Index';\n\nexport class PathIndex extends Index {\n  constructor(private indexPath_: Path) {\n    super();\n\n    assert(\n      !pathIsEmpty(indexPath_) && pathGetFront(indexPath_) !== '.priority',\n      \"Can't create PathIndex with empty path or .priority key\"\n    );\n  }\n\n  protected extractChild(snap: Node): Node {\n    return snap.getChild(this.indexPath_);\n  }\n  isDefinedOn(node: Node): boolean {\n    return !node.getChild(this.indexPath_).isEmpty();\n  }\n  compare(a: NamedNode, b: NamedNode): number {\n    const aChild = this.extractChild(a.node);\n    const bChild = this.extractChild(b.node);\n    const indexCmp = aChild.compareTo(bChild);\n    if (indexCmp === 0) {\n      return nameCompare(a.name, b.name);\n    } else {\n      return indexCmp;\n    }\n  }\n  makePost(indexValue: object, name: string): NamedNode {\n    const valueNode = nodeFromJSON(indexValue);\n    const node = ChildrenNode.EMPTY_NODE.updateChild(\n      this.indexPath_,\n      valueNode\n    );\n    return new NamedNode(name, node);\n  }\n  maxPost(): NamedNode {\n    const node = ChildrenNode.EMPTY_NODE.updateChild(this.indexPath_, MAX_NODE);\n    return new NamedNode(MAX_NAME, node);\n  }\n  toString(): string {\n    return pathSlice(this.indexPath_, 0).join('/');\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { nameCompare } from '../../util/util';\nimport { NamedNode, Node } from '../Node';\nimport { nodeFromJSON } from '../nodeFromJSON';\n\nimport { Index } from './Index';\n\nexport class ValueIndex extends Index {\n  compare(a: NamedNode, b: NamedNode): number {\n    const indexCmp = a.node.compareTo(b.node);\n    if (indexCmp === 0) {\n      return nameCompare(a.name, b.name);\n    } else {\n      return indexCmp;\n    }\n  }\n  isDefinedOn(node: Node): boolean {\n    return true;\n  }\n  indexedValueChanged(oldNode: Node, newNode: Node): boolean {\n    return !oldNode.equals(newNode);\n  }\n  minPost(): NamedNode {\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    return (NamedNode as any).MIN;\n  }\n  maxPost(): NamedNode {\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    return (NamedNode as any).MAX;\n  }\n\n  makePost(indexValue: object, name: string): NamedNode {\n    const valueNode = nodeFromJSON(indexValue);\n    return new NamedNode(name, valueNode);\n  }\n\n  /**\n   * @returns String representation for inclusion in a query spec\n   */\n  toString(): string {\n    return '.value';\n  }\n}\n\nexport const VALUE_INDEX = new ValueIndex();\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { assert } from '@firebase/util';\n\nimport {\n  tryParseInt,\n  MAX_NAME,\n  MIN_NAME,\n  INTEGER_32_MIN,\n  INTEGER_32_MAX\n} from '../util/util';\n\n// Modeled after base64 web-safe chars, but ordered by ASCII.\nconst PUSH_CHARS =\n  '-0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ_abcdefghijklmnopqrstuvwxyz';\n\nconst MIN_PUSH_CHAR = '-';\n\nconst MAX_PUSH_CHAR = 'z';\n\nconst MAX_KEY_LEN = 786;\n\n/**\n * Fancy ID generator that creates 20-character string identifiers with the\n * following properties:\n *\n * 1. They're based on timestamp so that they sort *after* any existing ids.\n * 2. They contain 72-bits of random data after the timestamp so that IDs won't\n *    collide with other clients' IDs.\n * 3. They sort *lexicographically* (so the timestamp is converted to characters\n *    that will sort properly).\n * 4. They're monotonically increasing. Even if you generate more than one in\n *    the same timestamp, the latter ones will sort after the former ones. We do\n *    this by using the previous random bits but \"incrementing\" them by 1 (only\n *    in the case of a timestamp collision).\n */\nexport const nextPushId = (function () {\n  // Timestamp of last push, used to prevent local collisions if you push twice\n  // in one ms.\n  let lastPushTime = 0;\n\n  // We generate 72-bits of randomness which get turned into 12 characters and\n  // appended to the timestamp to prevent collisions with other clients. We\n  // store the last characters we generated because in the event of a collision,\n  // we'll use those same characters except \"incremented\" by one.\n  const lastRandChars: number[] = [];\n\n  return function (now: number) {\n    const duplicateTime = now === lastPushTime;\n    lastPushTime = now;\n\n    let i;\n    const timeStampChars = new Array(8);\n    for (i = 7; i >= 0; i--) {\n      timeStampChars[i] = PUSH_CHARS.charAt(now % 64);\n      // NOTE: Can't use << here because javascript will convert to int and lose\n      // the upper bits.\n      now = Math.floor(now / 64);\n    }\n    assert(now === 0, 'Cannot push at time == 0');\n\n    let id = timeStampChars.join('');\n\n    if (!duplicateTime) {\n      for (i = 0; i < 12; i++) {\n        lastRandChars[i] = Math.floor(Math.random() * 64);\n      }\n    } else {\n      // If the timestamp hasn't changed since last push, use the same random\n      // number, except incremented by 1.\n      for (i = 11; i >= 0 && lastRandChars[i] === 63; i--) {\n        lastRandChars[i] = 0;\n      }\n      lastRandChars[i]++;\n    }\n    for (i = 0; i < 12; i++) {\n      id += PUSH_CHARS.charAt(lastRandChars[i]);\n    }\n    assert(id.length === 20, 'nextPushId: Length should be 20.');\n\n    return id;\n  };\n})();\n\nexport const successor = function (key: string) {\n  if (key === '' + INTEGER_32_MAX) {\n    // See https://firebase.google.com/docs/database/web/lists-of-data#data-order\n    return MIN_PUSH_CHAR;\n  }\n  const keyAsInt: number = tryParseInt(key);\n  if (keyAsInt != null) {\n    return '' + (keyAsInt + 1);\n  }\n  const next = new Array(key.length);\n\n  for (let i = 0; i < next.length; i++) {\n    next[i] = key.charAt(i);\n  }\n\n  if (next.length < MAX_KEY_LEN) {\n    next.push(MIN_PUSH_CHAR);\n    return next.join('');\n  }\n\n  let i = next.length - 1;\n\n  while (i >= 0 && next[i] === MAX_PUSH_CHAR) {\n    i--;\n  }\n\n  // `successor` was called on the largest possible key, so return the\n  // MAX_NAME, which sorts larger than all keys.\n  if (i === -1) {\n    return MAX_NAME;\n  }\n\n  const source = next[i];\n  const sourcePlusOne = PUSH_CHARS.charAt(PUSH_CHARS.indexOf(source) + 1);\n  next[i] = sourcePlusOne;\n\n  return next.slice(0, i + 1).join('');\n};\n\n// `key` is assumed to be non-empty.\nexport const predecessor = function (key: string) {\n  if (key === '' + INTEGER_32_MIN) {\n    return MIN_NAME;\n  }\n  const keyAsInt: number = tryParseInt(key);\n  if (keyAsInt != null) {\n    return '' + (keyAsInt - 1);\n  }\n  const next = new Array(key.length);\n  for (let i = 0; i < next.length; i++) {\n    next[i] = key.charAt(i);\n  }\n  // If `key` ends in `MIN_PUSH_CHAR`, the largest key lexicographically\n  // smaller than `key`, is `key[0:key.length - 1]`. The next key smaller\n  // than that, `predecessor(predecessor(key))`, is\n  //\n  // `key[0:key.length - 2] + (key[key.length - 1] - 1) + \\\n  //   { MAX_PUSH_CHAR repeated MAX_KEY_LEN - (key.length - 1) times }\n  //\n  // analogous to increment/decrement for base-10 integers.\n  //\n  // This works because lexigographic comparison works character-by-character,\n  // using length as a tie-breaker if one key is a prefix of the other.\n  if (next[next.length - 1] === MIN_PUSH_CHAR) {\n    if (next.length === 1) {\n      // See https://firebase.google.com/docs/database/web/lists-of-data#orderbykey\n      return '' + INTEGER_32_MAX;\n    }\n    delete next[next.length - 1];\n    return next.join('');\n  }\n  // Replace the last character with it's immediate predecessor, and\n  // fill the suffix of the key with MAX_PUSH_CHAR. This is the\n  // lexicographically largest possible key smaller than `key`.\n  next[next.length - 1] = PUSH_CHARS.charAt(\n    PUSH_CHARS.indexOf(next[next.length - 1]) - 1\n  );\n  return next.join('') + MAX_PUSH_CHAR.repeat(MAX_KEY_LEN - next.length);\n};\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Node } from '../snap/Node';\n\nexport const enum ChangeType {\n  /** Event type for a child added */\n  CHILD_ADDED = 'child_added',\n  /** Event type for a child removed */\n  CHILD_REMOVED = 'child_removed',\n  /** Event type for a child changed */\n  CHILD_CHANGED = 'child_changed',\n  /** Event type for a child moved */\n  CHILD_MOVED = 'child_moved',\n  /** Event type for a value change */\n  VALUE = 'value'\n}\n\nexport interface Change {\n  /** @param type - The event type */\n  type: ChangeType;\n  /** @param snapshotNode - The data */\n  snapshotNode: Node;\n  /** @param childName - The name for this child, if it's a child even */\n  childName?: string;\n  /** @param oldSnap - Used for intermediate processing of child changed events */\n  oldSnap?: Node;\n  /**  * @param prevName - The name for the previous child, if applicable */\n  prevName?: string | null;\n}\n\nexport function changeValue(snapshotNode: Node): Change {\n  return { type: ChangeType.VALUE, snapshotNode };\n}\n\nexport function changeChildAdded(\n  childName: string,\n  snapshotNode: Node\n): Change {\n  return { type: ChangeType.CHILD_ADDED, snapshotNode, childName };\n}\n\nexport function changeChildRemoved(\n  childName: string,\n  snapshotNode: Node\n): Change {\n  return { type: ChangeType.CHILD_REMOVED, snapshotNode, childName };\n}\n\nexport function changeChildChanged(\n  childName: string,\n  snapshotNode: Node,\n  oldSnap: Node\n): Change {\n  return {\n    type: ChangeType.CHILD_CHANGED,\n    snapshotNode,\n    childName,\n    oldSnap\n  };\n}\n\nexport function changeChildMoved(\n  childName: string,\n  snapshotNode: Node\n): Change {\n  return { type: ChangeType.CHILD_MOVED, snapshotNode, childName };\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { assert } from '@firebase/util';\n\nimport { ChildrenNode } from '../../snap/ChildrenNode';\nimport { Index } from '../../snap/indexes/Index';\nimport { PRIORITY_INDEX } from '../../snap/indexes/PriorityIndex';\nimport { Node } from '../../snap/Node';\nimport { Path } from '../../util/Path';\nimport {\n  changeChildAdded,\n  changeChildChanged,\n  changeChildRemoved\n} from '../Change';\nimport { ChildChangeAccumulator } from '../ChildChangeAccumulator';\nimport { CompleteChildSource } from '../CompleteChildSource';\n\nimport { NodeFilter } from './NodeFilter';\n\n/**\n * Doesn't really filter nodes but applies an index to the node and keeps track of any changes\n */\nexport class IndexedFilter implements NodeFilter {\n  constructor(private readonly index_: Index) {}\n\n  updateChild(\n    snap: Node,\n    key: string,\n    newChild: Node,\n    affectedPath: Path,\n    source: CompleteChildSource,\n    optChangeAccumulator: ChildChangeAccumulator | null\n  ): Node {\n    assert(\n      snap.isIndexed(this.index_),\n      'A node must be indexed if only a child is updated'\n    );\n    const oldChild = snap.getImmediateChild(key);\n    // Check if anything actually changed.\n    if (\n      oldChild.getChild(affectedPath).equals(newChild.getChild(affectedPath))\n    ) {\n      // There's an edge case where a child can enter or leave the view because affectedPath was set to null.\n      // In this case, affectedPath will appear null in both the old and new snapshots.  So we need\n      // to avoid treating these cases as \"nothing changed.\"\n      if (oldChild.isEmpty() === newChild.isEmpty()) {\n        // Nothing changed.\n\n        // This assert should be valid, but it's expensive (can dominate perf testing) so don't actually do it.\n        //assert(oldChild.equals(newChild), 'Old and new snapshots should be equal.');\n        return snap;\n      }\n    }\n\n    if (optChangeAccumulator != null) {\n      if (newChild.isEmpty()) {\n        if (snap.hasChild(key)) {\n          optChangeAccumulator.trackChildChange(\n            changeChildRemoved(key, oldChild)\n          );\n        } else {\n          assert(\n            snap.isLeafNode(),\n            'A child remove without an old child only makes sense on a leaf node'\n          );\n        }\n      } else if (oldChild.isEmpty()) {\n        optChangeAccumulator.trackChildChange(changeChildAdded(key, newChild));\n      } else {\n        optChangeAccumulator.trackChildChange(\n          changeChildChanged(key, newChild, oldChild)\n        );\n      }\n    }\n    if (snap.isLeafNode() && newChild.isEmpty()) {\n      return snap;\n    } else {\n      // Make sure the node is indexed\n      return snap.updateImmediateChild(key, newChild).withIndex(this.index_);\n    }\n  }\n  updateFullNode(\n    oldSnap: Node,\n    newSnap: Node,\n    optChangeAccumulator: ChildChangeAccumulator | null\n  ): Node {\n    if (optChangeAccumulator != null) {\n      if (!oldSnap.isLeafNode()) {\n        oldSnap.forEachChild(PRIORITY_INDEX, (key, childNode) => {\n          if (!newSnap.hasChild(key)) {\n            optChangeAccumulator.trackChildChange(\n              changeChildRemoved(key, childNode)\n            );\n          }\n        });\n      }\n      if (!newSnap.isLeafNode()) {\n        newSnap.forEachChild(PRIORITY_INDEX, (key, childNode) => {\n          if (oldSnap.hasChild(key)) {\n            const oldChild = oldSnap.getImmediateChild(key);\n            if (!oldChild.equals(childNode)) {\n              optChangeAccumulator.trackChildChange(\n                changeChildChanged(key, childNode, oldChild)\n              );\n            }\n          } else {\n            optChangeAccumulator.trackChildChange(\n              changeChildAdded(key, childNode)\n            );\n          }\n        });\n      }\n    }\n    return newSnap.withIndex(this.index_);\n  }\n  updatePriority(oldSnap: Node, newPriority: Node): Node {\n    if (oldSnap.isEmpty()) {\n      return ChildrenNode.EMPTY_NODE;\n    } else {\n      return oldSnap.updatePriority(newPriority);\n    }\n  }\n  filtersNodes(): boolean {\n    return false;\n  }\n  getIndexedFilter(): IndexedFilter {\n    return this;\n  }\n  getIndex(): Index {\n    return this.index_;\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { NamedNode, Node } from '../../../core/snap/Node';\nimport { ChildrenNode } from '../../snap/ChildrenNode';\nimport { Index } from '../../snap/indexes/Index';\nimport { PRIORITY_INDEX } from '../../snap/indexes/PriorityIndex';\nimport { Path } from '../../util/Path';\nimport { ChildChangeAccumulator } from '../ChildChangeAccumulator';\nimport { CompleteChildSource } from '../CompleteChildSource';\nimport { QueryParams } from '../QueryParams';\n\nimport { IndexedFilter } from './IndexedFilter';\nimport { NodeFilter } from './NodeFilter';\n\n/**\n * Filters nodes by range and uses an IndexFilter to track any changes after filtering the node\n */\nexport class RangedFilter implements NodeFilter {\n  private indexedFilter_: IndexedFilter;\n\n  private index_: Index;\n\n  private startPost_: NamedNode;\n\n  private endPost_: NamedNode;\n\n  constructor(params: QueryParams) {\n    this.indexedFilter_ = new IndexedFilter(params.getIndex());\n    this.index_ = params.getIndex();\n    this.startPost_ = RangedFilter.getStartPost_(params);\n    this.endPost_ = RangedFilter.getEndPost_(params);\n  }\n\n  getStartPost(): NamedNode {\n    return this.startPost_;\n  }\n\n  getEndPost(): NamedNode {\n    return this.endPost_;\n  }\n\n  matches(node: NamedNode): boolean {\n    return (\n      this.index_.compare(this.getStartPost(), node) <= 0 &&\n      this.index_.compare(node, this.getEndPost()) <= 0\n    );\n  }\n  updateChild(\n    snap: Node,\n    key: string,\n    newChild: Node,\n    affectedPath: Path,\n    source: CompleteChildSource,\n    optChangeAccumulator: ChildChangeAccumulator | null\n  ): Node {\n    if (!this.matches(new NamedNode(key, newChild))) {\n      newChild = ChildrenNode.EMPTY_NODE;\n    }\n    return this.indexedFilter_.updateChild(\n      snap,\n      key,\n      newChild,\n      affectedPath,\n      source,\n      optChangeAccumulator\n    );\n  }\n  updateFullNode(\n    oldSnap: Node,\n    newSnap: Node,\n    optChangeAccumulator: ChildChangeAccumulator | null\n  ): Node {\n    if (newSnap.isLeafNode()) {\n      // Make sure we have a children node with the correct index, not a leaf node;\n      newSnap = ChildrenNode.EMPTY_NODE;\n    }\n    let filtered = newSnap.withIndex(this.index_);\n    // Don't support priorities on queries\n    filtered = filtered.updatePriority(ChildrenNode.EMPTY_NODE);\n    const self = this;\n    newSnap.forEachChild(PRIORITY_INDEX, (key, childNode) => {\n      if (!self.matches(new NamedNode(key, childNode))) {\n        filtered = filtered.updateImmediateChild(key, ChildrenNode.EMPTY_NODE);\n      }\n    });\n    return this.indexedFilter_.updateFullNode(\n      oldSnap,\n      filtered,\n      optChangeAccumulator\n    );\n  }\n  updatePriority(oldSnap: Node, newPriority: Node): Node {\n    // Don't support priorities on queries\n    return oldSnap;\n  }\n  filtersNodes(): boolean {\n    return true;\n  }\n  getIndexedFilter(): IndexedFilter {\n    return this.indexedFilter_;\n  }\n  getIndex(): Index {\n    return this.index_;\n  }\n\n  private static getStartPost_(params: QueryParams): NamedNode {\n    if (params.hasStart()) {\n      const startName = params.getIndexStartName();\n      return params.getIndex().makePost(params.getIndexStartValue(), startName);\n    } else {\n      return params.getIndex().minPost();\n    }\n  }\n\n  private static getEndPost_(params: QueryParams): NamedNode {\n    if (params.hasEnd()) {\n      const endName = params.getIndexEndName();\n      return params.getIndex().makePost(params.getIndexEndValue(), endName);\n    } else {\n      return params.getIndex().maxPost();\n    }\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { assert } from '@firebase/util';\n\nimport { ChildrenNode } from '../../snap/ChildrenNode';\nimport { Index } from '../../snap/indexes/Index';\nimport { NamedNode, Node } from '../../snap/Node';\nimport { Path } from '../../util/Path';\nimport {\n  changeChildAdded,\n  changeChildChanged,\n  changeChildRemoved\n} from '../Change';\nimport { ChildChangeAccumulator } from '../ChildChangeAccumulator';\nimport { CompleteChildSource } from '../CompleteChildSource';\nimport { QueryParams } from '../QueryParams';\n\nimport { IndexedFilter } from './IndexedFilter';\nimport { NodeFilter } from './NodeFilter';\nimport { RangedFilter } from './RangedFilter';\n\n/**\n * Applies a limit and a range to a node and uses RangedFilter to do the heavy lifting where possible\n */\nexport class LimitedFilter implements NodeFilter {\n  private readonly rangedFilter_: RangedFilter;\n\n  private readonly index_: Index;\n\n  private readonly limit_: number;\n\n  private readonly reverse_: boolean;\n\n  constructor(params: QueryParams) {\n    this.rangedFilter_ = new RangedFilter(params);\n    this.index_ = params.getIndex();\n    this.limit_ = params.getLimit();\n    this.reverse_ = !params.isViewFromLeft();\n  }\n  updateChild(\n    snap: Node,\n    key: string,\n    newChild: Node,\n    affectedPath: Path,\n    source: CompleteChildSource,\n    optChangeAccumulator: ChildChangeAccumulator | null\n  ): Node {\n    if (!this.rangedFilter_.matches(new NamedNode(key, newChild))) {\n      newChild = ChildrenNode.EMPTY_NODE;\n    }\n    if (snap.getImmediateChild(key).equals(newChild)) {\n      // No change\n      return snap;\n    } else if (snap.numChildren() < this.limit_) {\n      return this.rangedFilter_\n        .getIndexedFilter()\n        .updateChild(\n          snap,\n          key,\n          newChild,\n          affectedPath,\n          source,\n          optChangeAccumulator\n        );\n    } else {\n      return this.fullLimitUpdateChild_(\n        snap,\n        key,\n        newChild,\n        source,\n        optChangeAccumulator\n      );\n    }\n  }\n  updateFullNode(\n    oldSnap: Node,\n    newSnap: Node,\n    optChangeAccumulator: ChildChangeAccumulator | null\n  ): Node {\n    let filtered;\n    if (newSnap.isLeafNode() || newSnap.isEmpty()) {\n      // Make sure we have a children node with the correct index, not a leaf node;\n      filtered = ChildrenNode.EMPTY_NODE.withIndex(this.index_);\n    } else {\n      if (\n        this.limit_ * 2 < newSnap.numChildren() &&\n        newSnap.isIndexed(this.index_)\n      ) {\n        // Easier to build up a snapshot, since what we're given has more than twice the elements we want\n        filtered = ChildrenNode.EMPTY_NODE.withIndex(this.index_);\n        // anchor to the startPost, endPost, or last element as appropriate\n        let iterator;\n        if (this.reverse_) {\n          iterator = (newSnap as ChildrenNode).getReverseIteratorFrom(\n            this.rangedFilter_.getEndPost(),\n            this.index_\n          );\n        } else {\n          iterator = (newSnap as ChildrenNode).getIteratorFrom(\n            this.rangedFilter_.getStartPost(),\n            this.index_\n          );\n        }\n        let count = 0;\n        while (iterator.hasNext() && count < this.limit_) {\n          const next = iterator.getNext();\n          let inRange;\n          if (this.reverse_) {\n            inRange =\n              this.index_.compare(this.rangedFilter_.getStartPost(), next) <= 0;\n          } else {\n            inRange =\n              this.index_.compare(next, this.rangedFilter_.getEndPost()) <= 0;\n          }\n          if (inRange) {\n            filtered = filtered.updateImmediateChild(next.name, next.node);\n            count++;\n          } else {\n            // if we have reached the end post, we cannot keep adding elemments\n            break;\n          }\n        }\n      } else {\n        // The snap contains less than twice the limit. Faster to delete from the snap than build up a new one\n        filtered = newSnap.withIndex(this.index_);\n        // Don't support priorities on queries\n        filtered = filtered.updatePriority(\n          ChildrenNode.EMPTY_NODE\n        ) as ChildrenNode;\n        let startPost;\n        let endPost;\n        let cmp;\n        let iterator;\n        if (this.reverse_) {\n          iterator = filtered.getReverseIterator(this.index_);\n          startPost = this.rangedFilter_.getEndPost();\n          endPost = this.rangedFilter_.getStartPost();\n          const indexCompare = this.index_.getCompare();\n          cmp = (a: NamedNode, b: NamedNode) => indexCompare(b, a);\n        } else {\n          iterator = filtered.getIterator(this.index_);\n          startPost = this.rangedFilter_.getStartPost();\n          endPost = this.rangedFilter_.getEndPost();\n          cmp = this.index_.getCompare();\n        }\n\n        let count = 0;\n        let foundStartPost = false;\n        while (iterator.hasNext()) {\n          const next = iterator.getNext();\n          if (!foundStartPost && cmp(startPost, next) <= 0) {\n            // start adding\n            foundStartPost = true;\n          }\n          const inRange =\n            foundStartPost && count < this.limit_ && cmp(next, endPost) <= 0;\n          if (inRange) {\n            count++;\n          } else {\n            filtered = filtered.updateImmediateChild(\n              next.name,\n              ChildrenNode.EMPTY_NODE\n            );\n          }\n        }\n      }\n    }\n    return this.rangedFilter_\n      .getIndexedFilter()\n      .updateFullNode(oldSnap, filtered, optChangeAccumulator);\n  }\n  updatePriority(oldSnap: Node, newPriority: Node): Node {\n    // Don't support priorities on queries\n    return oldSnap;\n  }\n  filtersNodes(): boolean {\n    return true;\n  }\n  getIndexedFilter(): IndexedFilter {\n    return this.rangedFilter_.getIndexedFilter();\n  }\n  getIndex(): Index {\n    return this.index_;\n  }\n\n  private fullLimitUpdateChild_(\n    snap: Node,\n    childKey: string,\n    childSnap: Node,\n    source: CompleteChildSource,\n    changeAccumulator: ChildChangeAccumulator | null\n  ): Node {\n    // TODO: rename all cache stuff etc to general snap terminology\n    let cmp;\n    if (this.reverse_) {\n      const indexCmp = this.index_.getCompare();\n      cmp = (a: NamedNode, b: NamedNode) => indexCmp(b, a);\n    } else {\n      cmp = this.index_.getCompare();\n    }\n    const oldEventCache = snap as ChildrenNode;\n    assert(oldEventCache.numChildren() === this.limit_, '');\n    const newChildNamedNode = new NamedNode(childKey, childSnap);\n    const windowBoundary = this.reverse_\n      ? oldEventCache.getFirstChild(this.index_)\n      : (oldEventCache.getLastChild(this.index_) as NamedNode);\n    const inRange = this.rangedFilter_.matches(newChildNamedNode);\n    if (oldEventCache.hasChild(childKey)) {\n      const oldChildSnap = oldEventCache.getImmediateChild(childKey);\n      let nextChild = source.getChildAfterChild(\n        this.index_,\n        windowBoundary,\n        this.reverse_\n      );\n      while (\n        nextChild != null &&\n        (nextChild.name === childKey || oldEventCache.hasChild(nextChild.name))\n      ) {\n        // There is a weird edge case where a node is updated as part of a merge in the write tree, but hasn't\n        // been applied to the limited filter yet. Ignore this next child which will be updated later in\n        // the limited filter...\n        nextChild = source.getChildAfterChild(\n          this.index_,\n          nextChild,\n          this.reverse_\n        );\n      }\n      const compareNext =\n        nextChild == null ? 1 : cmp(nextChild, newChildNamedNode);\n      const remainsInWindow =\n        inRange && !childSnap.isEmpty() && compareNext >= 0;\n      if (remainsInWindow) {\n        if (changeAccumulator != null) {\n          changeAccumulator.trackChildChange(\n            changeChildChanged(childKey, childSnap, oldChildSnap)\n          );\n        }\n        return oldEventCache.updateImmediateChild(childKey, childSnap);\n      } else {\n        if (changeAccumulator != null) {\n          changeAccumulator.trackChildChange(\n            changeChildRemoved(childKey, oldChildSnap)\n          );\n        }\n        const newEventCache = oldEventCache.updateImmediateChild(\n          childKey,\n          ChildrenNode.EMPTY_NODE\n        );\n        const nextChildInRange =\n          nextChild != null && this.rangedFilter_.matches(nextChild);\n        if (nextChildInRange) {\n          if (changeAccumulator != null) {\n            changeAccumulator.trackChildChange(\n              changeChildAdded(nextChild.name, nextChild.node)\n            );\n          }\n          return newEventCache.updateImmediateChild(\n            nextChild.name,\n            nextChild.node\n          );\n        } else {\n          return newEventCache;\n        }\n      }\n    } else if (childSnap.isEmpty()) {\n      // we're deleting a node, but it was not in the window, so ignore it\n      return snap;\n    } else if (inRange) {\n      if (cmp(windowBoundary, newChildNamedNode) >= 0) {\n        if (changeAccumulator != null) {\n          changeAccumulator.trackChildChange(\n            changeChildRemoved(windowBoundary.name, windowBoundary.node)\n          );\n          changeAccumulator.trackChildChange(\n            changeChildAdded(childKey, childSnap)\n          );\n        }\n        return oldEventCache\n          .updateImmediateChild(childKey, childSnap)\n          .updateImmediateChild(windowBoundary.name, ChildrenNode.EMPTY_NODE);\n      } else {\n        return snap;\n      }\n    } else {\n      return snap;\n    }\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { assert, stringify } from '@firebase/util';\n\nimport { Index } from '../snap/indexes/Index';\nimport { KEY_INDEX } from '../snap/indexes/KeyIndex';\nimport { PathIndex } from '../snap/indexes/PathIndex';\nimport { PRIORITY_INDEX, PriorityIndex } from '../snap/indexes/PriorityIndex';\nimport { VALUE_INDEX } from '../snap/indexes/ValueIndex';\nimport { predecessor, successor } from '../util/NextPushId';\nimport { MAX_NAME, MIN_NAME } from '../util/util';\n\nimport { IndexedFilter } from './filter/IndexedFilter';\nimport { LimitedFilter } from './filter/LimitedFilter';\nimport { NodeFilter } from './filter/NodeFilter';\nimport { RangedFilter } from './filter/RangedFilter';\n\n/**\n * Wire Protocol Constants\n */\nconst enum WIRE_PROTOCOL_CONSTANTS {\n  INDEX_START_VALUE = 'sp',\n  INDEX_START_NAME = 'sn',\n  INDEX_END_VALUE = 'ep',\n  INDEX_END_NAME = 'en',\n  LIMIT = 'l',\n  VIEW_FROM = 'vf',\n  VIEW_FROM_LEFT = 'l',\n  VIEW_FROM_RIGHT = 'r',\n  INDEX = 'i'\n}\n\n/**\n * REST Query Constants\n */\nconst enum REST_QUERY_CONSTANTS {\n  ORDER_BY = 'orderBy',\n  PRIORITY_INDEX = '$priority',\n  VALUE_INDEX = '$value',\n  KEY_INDEX = '$key',\n  START_AT = 'startAt',\n  END_AT = 'endAt',\n  LIMIT_TO_FIRST = 'limitToFirst',\n  LIMIT_TO_LAST = 'limitToLast'\n}\n\n/**\n * This class is an immutable-from-the-public-api struct containing a set of query parameters defining a\n * range to be returned for a particular location. It is assumed that validation of parameters is done at the\n * user-facing API level, so it is not done here.\n */\nexport class QueryParams {\n  limitSet_ = false;\n  startSet_ = false;\n  startNameSet_ = false;\n  startAfterSet_ = false;\n  endSet_ = false;\n  endNameSet_ = false;\n  endBeforeSet_ = false;\n  limit_ = 0;\n  viewFrom_ = '';\n  indexStartValue_: unknown | null = null;\n  indexStartName_ = '';\n  indexEndValue_: unknown | null = null;\n  indexEndName_ = '';\n  index_: PriorityIndex = PRIORITY_INDEX;\n\n  hasStart(): boolean {\n    return this.startSet_;\n  }\n\n  hasStartAfter(): boolean {\n    return this.startAfterSet_;\n  }\n\n  hasEndBefore(): boolean {\n    return this.endBeforeSet_;\n  }\n\n  /**\n   * @returns True if it would return from left.\n   */\n  isViewFromLeft(): boolean {\n    if (this.viewFrom_ === '') {\n      // limit(), rather than limitToFirst or limitToLast was called.\n      // This means that only one of startSet_ and endSet_ is true. Use them\n      // to calculate which side of the view to anchor to. If neither is set,\n      // anchor to the end.\n      return this.startSet_;\n    } else {\n      return this.viewFrom_ === WIRE_PROTOCOL_CONSTANTS.VIEW_FROM_LEFT;\n    }\n  }\n\n  /**\n   * Only valid to call if hasStart() returns true\n   */\n  getIndexStartValue(): unknown {\n    assert(this.startSet_, 'Only valid if start has been set');\n    return this.indexStartValue_;\n  }\n\n  /**\n   * Only valid to call if hasStart() returns true.\n   * Returns the starting key name for the range defined by these query parameters\n   */\n  getIndexStartName(): string {\n    assert(this.startSet_, 'Only valid if start has been set');\n    if (this.startNameSet_) {\n      return this.indexStartName_;\n    } else {\n      return MIN_NAME;\n    }\n  }\n\n  hasEnd(): boolean {\n    return this.endSet_;\n  }\n\n  /**\n   * Only valid to call if hasEnd() returns true.\n   */\n  getIndexEndValue(): unknown {\n    assert(this.endSet_, 'Only valid if end has been set');\n    return this.indexEndValue_;\n  }\n\n  /**\n   * Only valid to call if hasEnd() returns true.\n   * Returns the end key name for the range defined by these query parameters\n   */\n  getIndexEndName(): string {\n    assert(this.endSet_, 'Only valid if end has been set');\n    if (this.endNameSet_) {\n      return this.indexEndName_;\n    } else {\n      return MAX_NAME;\n    }\n  }\n\n  hasLimit(): boolean {\n    return this.limitSet_;\n  }\n\n  /**\n   * @returns True if a limit has been set and it has been explicitly anchored\n   */\n  hasAnchoredLimit(): boolean {\n    return this.limitSet_ && this.viewFrom_ !== '';\n  }\n\n  /**\n   * Only valid to call if hasLimit() returns true\n   */\n  getLimit(): number {\n    assert(this.limitSet_, 'Only valid if limit has been set');\n    return this.limit_;\n  }\n\n  getIndex(): Index {\n    return this.index_;\n  }\n\n  loadsAllData(): boolean {\n    return !(this.startSet_ || this.endSet_ || this.limitSet_);\n  }\n\n  isDefault(): boolean {\n    return this.loadsAllData() && this.index_ === PRIORITY_INDEX;\n  }\n\n  copy(): QueryParams {\n    const copy = new QueryParams();\n    copy.limitSet_ = this.limitSet_;\n    copy.limit_ = this.limit_;\n    copy.startSet_ = this.startSet_;\n    copy.indexStartValue_ = this.indexStartValue_;\n    copy.startNameSet_ = this.startNameSet_;\n    copy.indexStartName_ = this.indexStartName_;\n    copy.endSet_ = this.endSet_;\n    copy.indexEndValue_ = this.indexEndValue_;\n    copy.endNameSet_ = this.endNameSet_;\n    copy.indexEndName_ = this.indexEndName_;\n    copy.index_ = this.index_;\n    copy.viewFrom_ = this.viewFrom_;\n    return copy;\n  }\n}\n\nexport function queryParamsGetNodeFilter(queryParams: QueryParams): NodeFilter {\n  if (queryParams.loadsAllData()) {\n    return new IndexedFilter(queryParams.getIndex());\n  } else if (queryParams.hasLimit()) {\n    return new LimitedFilter(queryParams);\n  } else {\n    return new RangedFilter(queryParams);\n  }\n}\n\nexport function queryParamsLimit(\n  queryParams: QueryParams,\n  newLimit: number\n): QueryParams {\n  const newParams = queryParams.copy();\n  newParams.limitSet_ = true;\n  newParams.limit_ = newLimit;\n  newParams.viewFrom_ = '';\n  return newParams;\n}\n\nexport function queryParamsLimitToFirst(\n  queryParams: QueryParams,\n  newLimit: number\n): QueryParams {\n  const newParams = queryParams.copy();\n  newParams.limitSet_ = true;\n  newParams.limit_ = newLimit;\n  newParams.viewFrom_ = WIRE_PROTOCOL_CONSTANTS.VIEW_FROM_LEFT;\n  return newParams;\n}\n\nexport function queryParamsLimitToLast(\n  queryParams: QueryParams,\n  newLimit: number\n): QueryParams {\n  const newParams = queryParams.copy();\n  newParams.limitSet_ = true;\n  newParams.limit_ = newLimit;\n  newParams.viewFrom_ = WIRE_PROTOCOL_CONSTANTS.VIEW_FROM_RIGHT;\n  return newParams;\n}\n\nexport function queryParamsStartAt(\n  queryParams: QueryParams,\n  indexValue: unknown,\n  key?: string | null\n): QueryParams {\n  const newParams = queryParams.copy();\n  newParams.startSet_ = true;\n  if (indexValue === undefined) {\n    indexValue = null;\n  }\n  newParams.indexStartValue_ = indexValue;\n  if (key != null) {\n    newParams.startNameSet_ = true;\n    newParams.indexStartName_ = key;\n  } else {\n    newParams.startNameSet_ = false;\n    newParams.indexStartName_ = '';\n  }\n  return newParams;\n}\n\nexport function queryParamsStartAfter(\n  queryParams: QueryParams,\n  indexValue: unknown,\n  key?: string | null\n): QueryParams {\n  let params: QueryParams;\n  if (queryParams.index_ === KEY_INDEX) {\n    if (typeof indexValue === 'string') {\n      indexValue = successor(indexValue as string);\n    }\n    params = queryParamsStartAt(queryParams, indexValue, key);\n  } else {\n    let childKey: string;\n    if (key == null) {\n      childKey = MAX_NAME;\n    } else {\n      childKey = successor(key);\n    }\n    params = queryParamsStartAt(queryParams, indexValue, childKey);\n  }\n  params.startAfterSet_ = true;\n  return params;\n}\n\nexport function queryParamsEndAt(\n  queryParams: QueryParams,\n  indexValue: unknown,\n  key?: string | null\n): QueryParams {\n  const newParams = queryParams.copy();\n  newParams.endSet_ = true;\n  if (indexValue === undefined) {\n    indexValue = null;\n  }\n  newParams.indexEndValue_ = indexValue;\n  if (key !== undefined) {\n    newParams.endNameSet_ = true;\n    newParams.indexEndName_ = key;\n  } else {\n    newParams.endNameSet_ = false;\n    newParams.indexEndName_ = '';\n  }\n  return newParams;\n}\n\nexport function queryParamsEndBefore(\n  queryParams: QueryParams,\n  indexValue: unknown,\n  key?: string | null\n): QueryParams {\n  let childKey: string;\n  let params: QueryParams;\n  if (queryParams.index_ === KEY_INDEX) {\n    if (typeof indexValue === 'string') {\n      indexValue = predecessor(indexValue as string);\n    }\n    params = queryParamsEndAt(queryParams, indexValue, key);\n  } else {\n    if (key == null) {\n      childKey = MIN_NAME;\n    } else {\n      childKey = predecessor(key);\n    }\n    params = queryParamsEndAt(queryParams, indexValue, childKey);\n  }\n  params.endBeforeSet_ = true;\n  return params;\n}\n\nexport function queryParamsOrderBy(\n  queryParams: QueryParams,\n  index: Index\n): QueryParams {\n  const newParams = queryParams.copy();\n  newParams.index_ = index;\n  return newParams;\n}\n\n/**\n * Returns a set of REST query string parameters representing this query.\n *\n * @returns query string parameters\n */\nexport function queryParamsToRestQueryStringParameters(\n  queryParams: QueryParams\n): Record<string, string | number> {\n  const qs: Record<string, string | number> = {};\n\n  if (queryParams.isDefault()) {\n    return qs;\n  }\n\n  let orderBy;\n  if (queryParams.index_ === PRIORITY_INDEX) {\n    orderBy = REST_QUERY_CONSTANTS.PRIORITY_INDEX;\n  } else if (queryParams.index_ === VALUE_INDEX) {\n    orderBy = REST_QUERY_CONSTANTS.VALUE_INDEX;\n  } else if (queryParams.index_ === KEY_INDEX) {\n    orderBy = REST_QUERY_CONSTANTS.KEY_INDEX;\n  } else {\n    assert(queryParams.index_ instanceof PathIndex, 'Unrecognized index type!');\n    orderBy = queryParams.index_.toString();\n  }\n  qs[REST_QUERY_CONSTANTS.ORDER_BY] = stringify(orderBy);\n\n  if (queryParams.startSet_) {\n    qs[REST_QUERY_CONSTANTS.START_AT] = stringify(queryParams.indexStartValue_);\n    if (queryParams.startNameSet_) {\n      qs[REST_QUERY_CONSTANTS.START_AT] +=\n        ',' + stringify(queryParams.indexStartName_);\n    }\n  }\n\n  if (queryParams.endSet_) {\n    qs[REST_QUERY_CONSTANTS.END_AT] = stringify(queryParams.indexEndValue_);\n    if (queryParams.endNameSet_) {\n      qs[REST_QUERY_CONSTANTS.END_AT] +=\n        ',' + stringify(queryParams.indexEndName_);\n    }\n  }\n\n  if (queryParams.limitSet_) {\n    if (queryParams.isViewFromLeft()) {\n      qs[REST_QUERY_CONSTANTS.LIMIT_TO_FIRST] = queryParams.limit_;\n    } else {\n      qs[REST_QUERY_CONSTANTS.LIMIT_TO_LAST] = queryParams.limit_;\n    }\n  }\n\n  return qs;\n}\n\nexport function queryParamsGetQueryObject(\n  queryParams: QueryParams\n): Record<string, unknown> {\n  const obj: Record<string, unknown> = {};\n  if (queryParams.startSet_) {\n    obj[WIRE_PROTOCOL_CONSTANTS.INDEX_START_VALUE] =\n      queryParams.indexStartValue_;\n    if (queryParams.startNameSet_) {\n      obj[WIRE_PROTOCOL_CONSTANTS.INDEX_START_NAME] =\n        queryParams.indexStartName_;\n    }\n  }\n  if (queryParams.endSet_) {\n    obj[WIRE_PROTOCOL_CONSTANTS.INDEX_END_VALUE] = queryParams.indexEndValue_;\n    if (queryParams.endNameSet_) {\n      obj[WIRE_PROTOCOL_CONSTANTS.INDEX_END_NAME] = queryParams.indexEndName_;\n    }\n  }\n  if (queryParams.limitSet_) {\n    obj[WIRE_PROTOCOL_CONSTANTS.LIMIT] = queryParams.limit_;\n    let viewFrom = queryParams.viewFrom_;\n    if (viewFrom === '') {\n      if (queryParams.isViewFromLeft()) {\n        viewFrom = WIRE_PROTOCOL_CONSTANTS.VIEW_FROM_LEFT;\n      } else {\n        viewFrom = WIRE_PROTOCOL_CONSTANTS.VIEW_FROM_RIGHT;\n      }\n    }\n    obj[WIRE_PROTOCOL_CONSTANTS.VIEW_FROM] = viewFrom;\n  }\n  // For now, priority index is the default, so we only specify if it's some other index\n  if (queryParams.index_ !== PRIORITY_INDEX) {\n    obj[WIRE_PROTOCOL_CONSTANTS.INDEX] = queryParams.index_.toString();\n  }\n  return obj;\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {\n  assert,\n  jsonEval,\n  safeGet,\n  querystring,\n  Deferred\n} from '@firebase/util';\n\nimport { AppCheckTokenProvider } from './AppCheckTokenProvider';\nimport { AuthTokenProvider } from './AuthTokenProvider';\nimport { RepoInfo } from './RepoInfo';\nimport { ServerActions } from './ServerActions';\nimport { logWrapper, warn } from './util/util';\nimport { QueryContext } from './view/EventRegistration';\nimport { queryParamsToRestQueryStringParameters } from './view/QueryParams';\n\n/**\n * An implementation of ServerActions that communicates with the server via REST requests.\n * This is mostly useful for compatibility with crawlers, where we don't want to spin up a full\n * persistent connection (using WebSockets or long-polling)\n */\nexport class ReadonlyRestClient extends ServerActions {\n  reportStats(stats: { [k: string]: unknown }): void {\n    throw new Error('Method not implemented.');\n  }\n\n  /** @private {function(...[*])} */\n  private log_: (...args: unknown[]) => void = logWrapper('p:rest:');\n\n  /**\n   * We don't actually need to track listens, except to prevent us calling an onComplete for a listen\n   * that's been removed. :-/\n   */\n  private listens_: { [k: string]: object } = {};\n\n  static getListenId_(query: QueryContext, tag?: number | null): string {\n    if (tag !== undefined) {\n      return 'tag$' + tag;\n    } else {\n      assert(\n        query._queryParams.isDefault(),\n        \"should have a tag if it's not a default query.\"\n      );\n      return query._path.toString();\n    }\n  }\n\n  /**\n   * @param repoInfo_ - Data about the namespace we are connecting to\n   * @param onDataUpdate_ - A callback for new data from the server\n   */\n  constructor(\n    private repoInfo_: RepoInfo,\n    private onDataUpdate_: (\n      a: string,\n      b: unknown,\n      c: boolean,\n      d: number | null\n    ) => void,\n    private authTokenProvider_: AuthTokenProvider,\n    private appCheckTokenProvider_: AppCheckTokenProvider\n  ) {\n    super();\n  }\n\n  /** @inheritDoc */\n  listen(\n    query: QueryContext,\n    currentHashFn: () => string,\n    tag: number | null,\n    onComplete: (a: string, b: unknown) => void\n  ) {\n    const pathString = query._path.toString();\n    this.log_('Listen called for ' + pathString + ' ' + query._queryIdentifier);\n\n    // Mark this listener so we can tell if it's removed.\n    const listenId = ReadonlyRestClient.getListenId_(query, tag);\n    const thisListen = {};\n    this.listens_[listenId] = thisListen;\n\n    const queryStringParameters = queryParamsToRestQueryStringParameters(\n      query._queryParams\n    );\n\n    this.restRequest_(\n      pathString + '.json',\n      queryStringParameters,\n      (error, result) => {\n        let data = result;\n\n        if (error === 404) {\n          data = null;\n          error = null;\n        }\n\n        if (error === null) {\n          this.onDataUpdate_(pathString, data, /*isMerge=*/ false, tag);\n        }\n\n        if (safeGet(this.listens_, listenId) === thisListen) {\n          let status;\n          if (!error) {\n            status = 'ok';\n          } else if (error === 401) {\n            status = 'permission_denied';\n          } else {\n            status = 'rest_error:' + error;\n          }\n\n          onComplete(status, null);\n        }\n      }\n    );\n  }\n\n  /** @inheritDoc */\n  unlisten(query: QueryContext, tag: number | null) {\n    const listenId = ReadonlyRestClient.getListenId_(query, tag);\n    delete this.listens_[listenId];\n  }\n\n  get(query: QueryContext): Promise<string> {\n    const queryStringParameters = queryParamsToRestQueryStringParameters(\n      query._queryParams\n    );\n\n    const pathString = query._path.toString();\n\n    const deferred = new Deferred<string>();\n\n    this.restRequest_(\n      pathString + '.json',\n      queryStringParameters,\n      (error, result) => {\n        let data = result;\n\n        if (error === 404) {\n          data = null;\n          error = null;\n        }\n\n        if (error === null) {\n          this.onDataUpdate_(\n            pathString,\n            data,\n            /*isMerge=*/ false,\n            /*tag=*/ null\n          );\n          deferred.resolve(data as string);\n        } else {\n          deferred.reject(new Error(data as string));\n        }\n      }\n    );\n    return deferred.promise;\n  }\n\n  /** @inheritDoc */\n  refreshAuthToken(token: string) {\n    // no-op since we just always call getToken.\n  }\n\n  /**\n   * Performs a REST request to the given path, with the provided query string parameters,\n   * and any auth credentials we have.\n   */\n  private restRequest_(\n    pathString: string,\n    queryStringParameters: { [k: string]: string | number } = {},\n    callback: ((a: number | null, b?: unknown) => void) | null\n  ) {\n    queryStringParameters['format'] = 'export';\n\n    return Promise.all([\n      this.authTokenProvider_.getToken(/*forceRefresh=*/ false),\n      this.appCheckTokenProvider_.getToken(/*forceRefresh=*/ false)\n    ]).then(([authToken, appCheckToken]) => {\n      if (authToken && authToken.accessToken) {\n        queryStringParameters['auth'] = authToken.accessToken;\n      }\n      if (appCheckToken && appCheckToken.token) {\n        queryStringParameters['ac'] = appCheckToken.token;\n      }\n\n      const url =\n        (this.repoInfo_.secure ? 'https://' : 'http://') +\n        this.repoInfo_.host +\n        pathString +\n        '?' +\n        'ns=' +\n        this.repoInfo_.namespace +\n        querystring(queryStringParameters);\n\n      this.log_('Sending REST request for ' + url);\n      const xhr = new XMLHttpRequest();\n      xhr.onreadystatechange = () => {\n        if (callback && xhr.readyState === 4) {\n          this.log_(\n            'REST Response for ' + url + ' received. status:',\n            xhr.status,\n            'response:',\n            xhr.responseText\n          );\n          let res = null;\n          if (xhr.status >= 200 && xhr.status < 300) {\n            try {\n              res = jsonEval(xhr.responseText);\n            } catch (e) {\n              warn(\n                'Failed to parse JSON response for ' +\n                  url +\n                  ': ' +\n                  xhr.responseText\n              );\n            }\n            callback(null, res);\n          } else {\n            // 401 and 404 are expected.\n            if (xhr.status !== 401 && xhr.status !== 404) {\n              warn(\n                'Got unsuccessful REST response for ' +\n                  url +\n                  ' Status: ' +\n                  xhr.status\n              );\n            }\n            callback(xhr.status);\n          }\n          callback = null;\n        }\n      };\n\n      xhr.open('GET', url, /*asynchronous=*/ true);\n      xhr.send();\n    });\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { ChildrenNode } from './snap/ChildrenNode';\nimport { Node } from './snap/Node';\nimport { Path } from './util/Path';\n\n/**\n * Mutable object which basically just stores a reference to the \"latest\" immutable snapshot.\n */\nexport class SnapshotHolder {\n  private rootNode_: Node = ChildrenNode.EMPTY_NODE;\n\n  getNode(path: Path): Node {\n    return this.rootNode_.getChild(path);\n  }\n\n  updateSnapshot(path: Path, newSnapshotNode: Node) {\n    this.rootNode_ = this.rootNode_.updateChild(path, newSnapshotNode);\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { PRIORITY_INDEX } from './snap/indexes/PriorityIndex';\nimport { Node } from './snap/Node';\nimport { Path, pathGetFront, pathIsEmpty, pathPopFront } from './util/Path';\n\n/**\n * Helper class to store a sparse set of snapshots.\n */\nexport interface SparseSnapshotTree {\n  value: Node | null;\n  readonly children: Map<string, SparseSnapshotTree>;\n}\n\nexport function newSparseSnapshotTree(): SparseSnapshotTree {\n  return {\n    value: null,\n    children: new Map()\n  };\n}\n\n/**\n * Gets the node stored at the given path if one exists.\n * Only seems to be used in tests.\n *\n * @param path - Path to look up snapshot for.\n * @returns The retrieved node, or null.\n */\nexport function sparseSnapshotTreeFind(\n  sparseSnapshotTree: SparseSnapshotTree,\n  path: Path\n): Node | null {\n  if (sparseSnapshotTree.value != null) {\n    return sparseSnapshotTree.value.getChild(path);\n  } else if (!pathIsEmpty(path) && sparseSnapshotTree.children.size > 0) {\n    const childKey = pathGetFront(path);\n    path = pathPopFront(path);\n    if (sparseSnapshotTree.children.has(childKey)) {\n      const childTree = sparseSnapshotTree.children.get(childKey);\n      return sparseSnapshotTreeFind(childTree, path);\n    } else {\n      return null;\n    }\n  } else {\n    return null;\n  }\n}\n\n/**\n * Stores the given node at the specified path. If there is already a node\n * at a shallower path, it merges the new data into that snapshot node.\n *\n * @param path - Path to look up snapshot for.\n * @param data - The new data, or null.\n */\nexport function sparseSnapshotTreeRemember(\n  sparseSnapshotTree: SparseSnapshotTree,\n  path: Path,\n  data: Node\n): void {\n  if (pathIsEmpty(path)) {\n    sparseSnapshotTree.value = data;\n    sparseSnapshotTree.children.clear();\n  } else if (sparseSnapshotTree.value !== null) {\n    sparseSnapshotTree.value = sparseSnapshotTree.value.updateChild(path, data);\n  } else {\n    const childKey = pathGetFront(path);\n    if (!sparseSnapshotTree.children.has(childKey)) {\n      sparseSnapshotTree.children.set(childKey, newSparseSnapshotTree());\n    }\n\n    const child = sparseSnapshotTree.children.get(childKey);\n    path = pathPopFront(path);\n    sparseSnapshotTreeRemember(child, path, data);\n  }\n}\n\n/**\n * Purge the data at path from the cache.\n *\n * @param path - Path to look up snapshot for.\n * @returns True if this node should now be removed.\n */\nexport function sparseSnapshotTreeForget(\n  sparseSnapshotTree: SparseSnapshotTree,\n  path: Path\n): boolean {\n  if (pathIsEmpty(path)) {\n    sparseSnapshotTree.value = null;\n    sparseSnapshotTree.children.clear();\n    return true;\n  } else {\n    if (sparseSnapshotTree.value !== null) {\n      if (sparseSnapshotTree.value.isLeafNode()) {\n        // We're trying to forget a node that doesn't exist\n        return false;\n      } else {\n        const value = sparseSnapshotTree.value;\n        sparseSnapshotTree.value = null;\n\n        value.forEachChild(PRIORITY_INDEX, (key, tree) => {\n          sparseSnapshotTreeRemember(sparseSnapshotTree, new Path(key), tree);\n        });\n\n        return sparseSnapshotTreeForget(sparseSnapshotTree, path);\n      }\n    } else if (sparseSnapshotTree.children.size > 0) {\n      const childKey = pathGetFront(path);\n      path = pathPopFront(path);\n      if (sparseSnapshotTree.children.has(childKey)) {\n        const safeToRemove = sparseSnapshotTreeForget(\n          sparseSnapshotTree.children.get(childKey),\n          path\n        );\n        if (safeToRemove) {\n          sparseSnapshotTree.children.delete(childKey);\n        }\n      }\n\n      return sparseSnapshotTree.children.size === 0;\n    } else {\n      return true;\n    }\n  }\n}\n\n/**\n * Recursively iterates through all of the stored tree and calls the\n * callback on each one.\n *\n * @param prefixPath - Path to look up node for.\n * @param func - The function to invoke for each tree.\n */\nexport function sparseSnapshotTreeForEachTree(\n  sparseSnapshotTree: SparseSnapshotTree,\n  prefixPath: Path,\n  func: (a: Path, b: Node) => unknown\n): void {\n  if (sparseSnapshotTree.value !== null) {\n    func(prefixPath, sparseSnapshotTree.value);\n  } else {\n    sparseSnapshotTreeForEachChild(sparseSnapshotTree, (key, tree) => {\n      const path = new Path(prefixPath.toString() + '/' + key);\n      sparseSnapshotTreeForEachTree(tree, path, func);\n    });\n  }\n}\n\n/**\n * Iterates through each immediate child and triggers the callback.\n * Only seems to be used in tests.\n *\n * @param func - The function to invoke for each child.\n */\nexport function sparseSnapshotTreeForEachChild(\n  sparseSnapshotTree: SparseSnapshotTree,\n  func: (a: string, b: SparseSnapshotTree) => void\n): void {\n  sparseSnapshotTree.children.forEach((tree, key) => {\n    func(key, tree);\n  });\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { each } from '../util/util';\n\nimport { StatsCollection } from './StatsCollection';\n\n/**\n * Returns the delta from the previous call to get stats.\n *\n * @param collection_ - The collection to \"listen\" to.\n */\nexport class StatsListener {\n  private last_: { [k: string]: number } | null = null;\n\n  constructor(private collection_: StatsCollection) {}\n\n  get(): { [k: string]: number } {\n    const newStats = this.collection_.get();\n\n    const delta = { ...newStats };\n    if (this.last_) {\n      each(this.last_, (stat: string, value: number) => {\n        delta[stat] = delta[stat] - value;\n      });\n    }\n    this.last_ = newStats;\n\n    return delta;\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { contains } from '@firebase/util';\n\nimport { ServerActions } from '../ServerActions';\nimport { setTimeoutNonBlocking, each } from '../util/util';\n\nimport { StatsCollection } from './StatsCollection';\nimport { StatsListener } from './StatsListener';\n\n// Assuming some apps may have a short amount of time on page, and a bulk of firebase operations probably\n// happen on page load, we try to report our first set of stats pretty quickly, but we wait at least 10\n// seconds to try to ensure the Firebase connection is established / settled.\nconst FIRST_STATS_MIN_TIME = 10 * 1000;\nconst FIRST_STATS_MAX_TIME = 30 * 1000;\n\n// We'll continue to report stats on average every 5 minutes.\nconst REPORT_STATS_INTERVAL = 5 * 60 * 1000;\n\nexport class StatsReporter {\n  private statsListener_: StatsListener;\n  statsToReport_: { [k: string]: boolean } = {};\n\n  constructor(collection: StatsCollection, private server_: ServerActions) {\n    this.statsListener_ = new StatsListener(collection);\n\n    const timeout =\n      FIRST_STATS_MIN_TIME +\n      (FIRST_STATS_MAX_TIME - FIRST_STATS_MIN_TIME) * Math.random();\n    setTimeoutNonBlocking(this.reportStats_.bind(this), Math.floor(timeout));\n  }\n\n  private reportStats_() {\n    const stats = this.statsListener_.get();\n    const reportedStats: typeof stats = {};\n    let haveStatsToReport = false;\n\n    each(stats, (stat: string, value: number) => {\n      if (value > 0 && contains(this.statsToReport_, stat)) {\n        reportedStats[stat] = value;\n        haveStatsToReport = true;\n      }\n    });\n\n    if (haveStatsToReport) {\n      this.server_.reportStats(reportedStats);\n    }\n\n    // queue our next run.\n    setTimeoutNonBlocking(\n      this.reportStats_.bind(this),\n      Math.floor(Math.random() * 2 * REPORT_STATS_INTERVAL)\n    );\n  }\n}\n\nexport function statsReporterIncludeStat(\n  reporter: StatsReporter,\n  stat: string\n) {\n  reporter.statsToReport_[stat] = true;\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Path } from '../util/Path';\n\n/**\n *\n * @enum\n */\nexport enum OperationType {\n  OVERWRITE,\n  MERGE,\n  ACK_USER_WRITE,\n  LISTEN_COMPLETE\n}\n\n/**\n * @interface\n */\nexport interface Operation {\n  source: OperationSource;\n\n  type: OperationType;\n\n  path: Path;\n\n  operationForChild(childName: string): Operation | null;\n}\n\nexport interface OperationSource {\n  fromUser: boolean;\n  fromServer: boolean;\n  queryId: string | null;\n  tagged: boolean;\n}\n\nexport function newOperationSourceUser(): OperationSource {\n  return {\n    fromUser: true,\n    fromServer: false,\n    queryId: null,\n    tagged: false\n  };\n}\n\nexport function newOperationSourceServer(): OperationSource {\n  return {\n    fromUser: false,\n    fromServer: true,\n    queryId: null,\n    tagged: false\n  };\n}\n\nexport function newOperationSourceServerTaggedQuery(\n  queryId: string\n): OperationSource {\n  return {\n    fromUser: false,\n    fromServer: true,\n    queryId,\n    tagged: true\n  };\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { assert } from '@firebase/util';\n\nimport { ImmutableTree } from '../util/ImmutableTree';\nimport {\n  newEmptyPath,\n  Path,\n  pathGetFront,\n  pathIsEmpty,\n  pathPopFront\n} from '../util/Path';\n\nimport { newOperationSourceUser, Operation, OperationType } from './Operation';\n\nexport class AckUserWrite implements Operation {\n  /** @inheritDoc */\n  type = OperationType.ACK_USER_WRITE;\n\n  /** @inheritDoc */\n  source = newOperationSourceUser();\n\n  /**\n   * @param affectedTree - A tree containing true for each affected path. Affected paths can't overlap.\n   */\n  constructor(\n    /** @inheritDoc */ public path: Path,\n    /** @inheritDoc */ public affectedTree: ImmutableTree<boolean>,\n    /** @inheritDoc */ public revert: boolean\n  ) {}\n  operationForChild(childName: string): AckUserWrite {\n    if (!pathIsEmpty(this.path)) {\n      assert(\n        pathGetFront(this.path) === childName,\n        'operationForChild called for unrelated child.'\n      );\n      return new AckUserWrite(\n        pathPopFront(this.path),\n        this.affectedTree,\n        this.revert\n      );\n    } else if (this.affectedTree.value != null) {\n      assert(\n        this.affectedTree.children.isEmpty(),\n        'affectedTree should not have overlapping affected paths.'\n      );\n      // All child locations are affected as well; just return same operation.\n      return this;\n    } else {\n      const childTree = this.affectedTree.subtree(new Path(childName));\n      return new AckUserWrite(newEmptyPath(), childTree, this.revert);\n    }\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { newEmptyPath, Path, pathIsEmpty, pathPopFront } from '../util/Path';\n\nimport { Operation, OperationSource, OperationType } from './Operation';\n\nexport class ListenComplete implements Operation {\n  /** @inheritDoc */\n  type = OperationType.LISTEN_COMPLETE;\n\n  constructor(public source: OperationSource, public path: Path) {}\n\n  operationForChild(childName: string): ListenComplete {\n    if (pathIsEmpty(this.path)) {\n      return new ListenComplete(this.source, newEmptyPath());\n    } else {\n      return new ListenComplete(this.source, pathPopFront(this.path));\n    }\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Node } from '../snap/Node';\nimport { newEmptyPath, Path, pathIsEmpty, pathPopFront } from '../util/Path';\n\nimport { Operation, OperationSource, OperationType } from './Operation';\n\nexport class Overwrite implements Operation {\n  /** @inheritDoc */\n  type = OperationType.OVERWRITE;\n\n  constructor(\n    public source: OperationSource,\n    public path: Path,\n    public snap: Node\n  ) {}\n\n  operationForChild(childName: string): Overwrite {\n    if (pathIsEmpty(this.path)) {\n      return new Overwrite(\n        this.source,\n        newEmptyPath(),\n        this.snap.getImmediateChild(childName)\n      );\n    } else {\n      return new Overwrite(this.source, pathPopFront(this.path), this.snap);\n    }\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { assert } from '@firebase/util';\n\nimport { Node } from '../snap/Node';\nimport { ImmutableTree } from '../util/ImmutableTree';\nimport {\n  newEmptyPath,\n  Path,\n  pathGetFront,\n  pathIsEmpty,\n  pathPopFront\n} from '../util/Path';\n\nimport { Operation, OperationSource, OperationType } from './Operation';\nimport { Overwrite } from './Overwrite';\n\nexport class Merge implements Operation {\n  /** @inheritDoc */\n  type = OperationType.MERGE;\n\n  constructor(\n    /** @inheritDoc */ public source: OperationSource,\n    /** @inheritDoc */ public path: Path,\n    /** @inheritDoc */ public children: ImmutableTree<Node>\n  ) {}\n  operationForChild(childName: string): Operation {\n    if (pathIsEmpty(this.path)) {\n      const childTree = this.children.subtree(new Path(childName));\n      if (childTree.isEmpty()) {\n        // This child is unaffected\n        return null;\n      } else if (childTree.value) {\n        // We have a snapshot for the child in question.  This becomes an overwrite of the child.\n        return new Overwrite(this.source, newEmptyPath(), childTree.value);\n      } else {\n        // This is a merge at a deeper level\n        return new Merge(this.source, newEmptyPath(), childTree);\n      }\n    } else {\n      assert(\n        pathGetFront(this.path) === childName,\n        \"Can't get a merge for a child not on the path of the operation\"\n      );\n      return new Merge(this.source, pathPopFront(this.path), this.children);\n    }\n  }\n  toString(): string {\n    return (\n      'Operation(' +\n      this.path +\n      ': ' +\n      this.source.toString() +\n      ' merge: ' +\n      this.children.toString() +\n      ')'\n    );\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Node } from '../snap/Node';\nimport { Path, pathGetFront, pathIsEmpty } from '../util/Path';\n\n/**\n * A cache node only stores complete children. Additionally it holds a flag whether the node can be considered fully\n * initialized in the sense that we know at one point in time this represented a valid state of the world, e.g.\n * initialized with data from the server, or a complete overwrite by the client. The filtered flag also tracks\n * whether a node potentially had children removed due to a filter.\n */\nexport class CacheNode {\n  constructor(\n    private node_: Node,\n    private fullyInitialized_: boolean,\n    private filtered_: boolean\n  ) {}\n\n  /**\n   * Returns whether this node was fully initialized with either server data or a complete overwrite by the client\n   */\n  isFullyInitialized(): boolean {\n    return this.fullyInitialized_;\n  }\n\n  /**\n   * Returns whether this node is potentially missing children due to a filter applied to the node\n   */\n  isFiltered(): boolean {\n    return this.filtered_;\n  }\n\n  isCompleteForPath(path: Path): boolean {\n    if (pathIsEmpty(path)) {\n      return this.isFullyInitialized() && !this.filtered_;\n    }\n\n    const childKey = pathGetFront(path);\n    return this.isCompleteForChild(childKey);\n  }\n\n  isCompleteForChild(key: string): boolean {\n    return (\n      (this.isFullyInitialized() && !this.filtered_) || this.node_.hasChild(key)\n    );\n  }\n\n  getNode(): Node {\n    return this.node_;\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { assertionError } from '@firebase/util';\n\nimport { Index } from '../snap/indexes/Index';\nimport { NamedNode, Node } from '../snap/Node';\n\nimport { Change, ChangeType, changeChildMoved } from './Change';\nimport { Event } from './Event';\nimport { EventRegistration, QueryContext } from './EventRegistration';\n\n/**\n * An EventGenerator is used to convert \"raw\" changes (Change) as computed by the\n * CacheDiffer into actual events (Event) that can be raised.  See generateEventsForChanges()\n * for details.\n *\n */\nexport class EventGenerator {\n  index_: Index;\n\n  constructor(public query_: QueryContext) {\n    this.index_ = this.query_._queryParams.getIndex();\n  }\n}\n\n/**\n * Given a set of raw changes (no moved events and prevName not specified yet), and a set of\n * EventRegistrations that should be notified of these changes, generate the actual events to be raised.\n *\n * Notes:\n *  - child_moved events will be synthesized at this time for any child_changed events that affect\n *    our index.\n *  - prevName will be calculated based on the index ordering.\n */\nexport function eventGeneratorGenerateEventsForChanges(\n  eventGenerator: EventGenerator,\n  changes: Change[],\n  eventCache: Node,\n  eventRegistrations: EventRegistration[]\n): Event[] {\n  const events: Event[] = [];\n  const moves: Change[] = [];\n\n  changes.forEach(change => {\n    if (\n      change.type === ChangeType.CHILD_CHANGED &&\n      eventGenerator.index_.indexedValueChanged(\n        change.oldSnap as Node,\n        change.snapshotNode\n      )\n    ) {\n      moves.push(changeChildMoved(change.childName, change.snapshotNode));\n    }\n  });\n\n  eventGeneratorGenerateEventsForType(\n    eventGenerator,\n    events,\n    ChangeType.CHILD_REMOVED,\n    changes,\n    eventRegistrations,\n    eventCache\n  );\n  eventGeneratorGenerateEventsForType(\n    eventGenerator,\n    events,\n    ChangeType.CHILD_ADDED,\n    changes,\n    eventRegistrations,\n    eventCache\n  );\n  eventGeneratorGenerateEventsForType(\n    eventGenerator,\n    events,\n    ChangeType.CHILD_MOVED,\n    moves,\n    eventRegistrations,\n    eventCache\n  );\n  eventGeneratorGenerateEventsForType(\n    eventGenerator,\n    events,\n    ChangeType.CHILD_CHANGED,\n    changes,\n    eventRegistrations,\n    eventCache\n  );\n  eventGeneratorGenerateEventsForType(\n    eventGenerator,\n    events,\n    ChangeType.VALUE,\n    changes,\n    eventRegistrations,\n    eventCache\n  );\n\n  return events;\n}\n\n/**\n * Given changes of a single change type, generate the corresponding events.\n */\nfunction eventGeneratorGenerateEventsForType(\n  eventGenerator: EventGenerator,\n  events: Event[],\n  eventType: string,\n  changes: Change[],\n  registrations: EventRegistration[],\n  eventCache: Node\n) {\n  const filteredChanges = changes.filter(change => change.type === eventType);\n\n  filteredChanges.sort((a, b) =>\n    eventGeneratorCompareChanges(eventGenerator, a, b)\n  );\n  filteredChanges.forEach(change => {\n    const materializedChange = eventGeneratorMaterializeSingleChange(\n      eventGenerator,\n      change,\n      eventCache\n    );\n    registrations.forEach(registration => {\n      if (registration.respondsTo(change.type)) {\n        events.push(\n          registration.createEvent(materializedChange, eventGenerator.query_)\n        );\n      }\n    });\n  });\n}\n\nfunction eventGeneratorMaterializeSingleChange(\n  eventGenerator: EventGenerator,\n  change: Change,\n  eventCache: Node\n): Change {\n  if (change.type === 'value' || change.type === 'child_removed') {\n    return change;\n  } else {\n    change.prevName = eventCache.getPredecessorChildName(\n      change.childName,\n      change.snapshotNode,\n      eventGenerator.index_\n    );\n    return change;\n  }\n}\n\nfunction eventGeneratorCompareChanges(\n  eventGenerator: EventGenerator,\n  a: Change,\n  b: Change\n) {\n  if (a.childName == null || b.childName == null) {\n    throw assertionError('Should only compare child_ events.');\n  }\n  const aWrapped = new NamedNode(a.childName, a.snapshotNode);\n  const bWrapped = new NamedNode(b.childName, b.snapshotNode);\n  return eventGenerator.index_.compare(aWrapped, bWrapped);\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Node } from '../snap/Node';\n\nimport { CacheNode } from './CacheNode';\n\n/**\n * Stores the data we have cached for a view.\n *\n * serverSnap is the cached server data, eventSnap is the cached event data (server data plus any local writes).\n */\nexport interface ViewCache {\n  readonly eventCache: CacheNode;\n  readonly serverCache: CacheNode;\n}\n\nexport function newViewCache(\n  eventCache: CacheNode,\n  serverCache: CacheNode\n): ViewCache {\n  return { eventCache, serverCache };\n}\n\nexport function viewCacheUpdateEventSnap(\n  viewCache: ViewCache,\n  eventSnap: Node,\n  complete: boolean,\n  filtered: boolean\n): ViewCache {\n  return newViewCache(\n    new CacheNode(eventSnap, complete, filtered),\n    viewCache.serverCache\n  );\n}\n\nexport function viewCacheUpdateServerSnap(\n  viewCache: ViewCache,\n  serverSnap: Node,\n  complete: boolean,\n  filtered: boolean\n): ViewCache {\n  return newViewCache(\n    viewCache.eventCache,\n    new CacheNode(serverSnap, complete, filtered)\n  );\n}\n\nexport function viewCacheGetCompleteEventSnap(\n  viewCache: ViewCache\n): Node | null {\n  return viewCache.eventCache.isFullyInitialized()\n    ? viewCache.eventCache.getNode()\n    : null;\n}\n\nexport function viewCacheGetCompleteServerSnap(\n  viewCache: ViewCache\n): Node | null {\n  return viewCache.serverCache.isFullyInitialized()\n    ? viewCache.serverCache.getNode()\n    : null;\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {\n  newEmptyPath,\n  Path,\n  pathChild,\n  pathGetFront,\n  pathIsEmpty,\n  pathPopFront\n} from './Path';\nimport { SortedMap } from './SortedMap';\nimport { each, stringCompare } from './util';\n\nlet emptyChildrenSingleton: SortedMap<string, ImmutableTree<null>>;\n\n/**\n * Singleton empty children collection.\n *\n */\nconst EmptyChildren = (): SortedMap<string, ImmutableTree<null>> => {\n  if (!emptyChildrenSingleton) {\n    emptyChildrenSingleton = new SortedMap<string, ImmutableTree<null>>(\n      stringCompare\n    );\n  }\n  return emptyChildrenSingleton;\n};\n\n/**\n * A tree with immutable elements.\n */\nexport class ImmutableTree<T> {\n  static fromObject<T>(obj: { [k: string]: T }): ImmutableTree<T> {\n    let tree: ImmutableTree<T> = new ImmutableTree<T>(null);\n    each(obj, (childPath: string, childSnap: T) => {\n      tree = tree.set(new Path(childPath), childSnap);\n    });\n    return tree;\n  }\n\n  constructor(\n    public readonly value: T | null,\n    public readonly children: SortedMap<\n      string,\n      ImmutableTree<T>\n    > = EmptyChildren()\n  ) {}\n\n  /**\n   * True if the value is empty and there are no children\n   */\n  isEmpty(): boolean {\n    return this.value === null && this.children.isEmpty();\n  }\n\n  /**\n   * Given a path and predicate, return the first node and the path to that node\n   * where the predicate returns true.\n   *\n   * TODO Do a perf test -- If we're creating a bunch of `{path: value:}`\n   * objects on the way back out, it may be better to pass down a pathSoFar obj.\n   *\n   * @param relativePath - The remainder of the path\n   * @param predicate - The predicate to satisfy to return a node\n   */\n  findRootMostMatchingPathAndValue(\n    relativePath: Path,\n    predicate: (a: T) => boolean\n  ): { path: Path; value: T } | null {\n    if (this.value != null && predicate(this.value)) {\n      return { path: newEmptyPath(), value: this.value };\n    } else {\n      if (pathIsEmpty(relativePath)) {\n        return null;\n      } else {\n        const front = pathGetFront(relativePath);\n        const child = this.children.get(front);\n        if (child !== null) {\n          const childExistingPathAndValue = child.findRootMostMatchingPathAndValue(\n            pathPopFront(relativePath),\n            predicate\n          );\n          if (childExistingPathAndValue != null) {\n            const fullPath = pathChild(\n              new Path(front),\n              childExistingPathAndValue.path\n            );\n            return { path: fullPath, value: childExistingPathAndValue.value };\n          } else {\n            return null;\n          }\n        } else {\n          return null;\n        }\n      }\n    }\n  }\n\n  /**\n   * Find, if it exists, the shortest subpath of the given path that points a defined\n   * value in the tree\n   */\n  findRootMostValueAndPath(\n    relativePath: Path\n  ): { path: Path; value: T } | null {\n    return this.findRootMostMatchingPathAndValue(relativePath, () => true);\n  }\n\n  /**\n   * @returns The subtree at the given path\n   */\n  subtree(relativePath: Path): ImmutableTree<T> {\n    if (pathIsEmpty(relativePath)) {\n      return this;\n    } else {\n      const front = pathGetFront(relativePath);\n      const childTree = this.children.get(front);\n      if (childTree !== null) {\n        return childTree.subtree(pathPopFront(relativePath));\n      } else {\n        return new ImmutableTree<T>(null);\n      }\n    }\n  }\n\n  /**\n   * Sets a value at the specified path.\n   *\n   * @param relativePath - Path to set value at.\n   * @param toSet - Value to set.\n   * @returns Resulting tree.\n   */\n  set(relativePath: Path, toSet: T | null): ImmutableTree<T> {\n    if (pathIsEmpty(relativePath)) {\n      return new ImmutableTree(toSet, this.children);\n    } else {\n      const front = pathGetFront(relativePath);\n      const child = this.children.get(front) || new ImmutableTree<T>(null);\n      const newChild = child.set(pathPopFront(relativePath), toSet);\n      const newChildren = this.children.insert(front, newChild);\n      return new ImmutableTree(this.value, newChildren);\n    }\n  }\n\n  /**\n   * Removes the value at the specified path.\n   *\n   * @param relativePath - Path to value to remove.\n   * @returns Resulting tree.\n   */\n  remove(relativePath: Path): ImmutableTree<T> {\n    if (pathIsEmpty(relativePath)) {\n      if (this.children.isEmpty()) {\n        return new ImmutableTree<T>(null);\n      } else {\n        return new ImmutableTree(null, this.children);\n      }\n    } else {\n      const front = pathGetFront(relativePath);\n      const child = this.children.get(front);\n      if (child) {\n        const newChild = child.remove(pathPopFront(relativePath));\n        let newChildren;\n        if (newChild.isEmpty()) {\n          newChildren = this.children.remove(front);\n        } else {\n          newChildren = this.children.insert(front, newChild);\n        }\n        if (this.value === null && newChildren.isEmpty()) {\n          return new ImmutableTree<T>(null);\n        } else {\n          return new ImmutableTree(this.value, newChildren);\n        }\n      } else {\n        return this;\n      }\n    }\n  }\n\n  /**\n   * Gets a value from the tree.\n   *\n   * @param relativePath - Path to get value for.\n   * @returns Value at path, or null.\n   */\n  get(relativePath: Path): T | null {\n    if (pathIsEmpty(relativePath)) {\n      return this.value;\n    } else {\n      const front = pathGetFront(relativePath);\n      const child = this.children.get(front);\n      if (child) {\n        return child.get(pathPopFront(relativePath));\n      } else {\n        return null;\n      }\n    }\n  }\n\n  /**\n   * Replace the subtree at the specified path with the given new tree.\n   *\n   * @param relativePath - Path to replace subtree for.\n   * @param newTree - New tree.\n   * @returns Resulting tree.\n   */\n  setTree(relativePath: Path, newTree: ImmutableTree<T>): ImmutableTree<T> {\n    if (pathIsEmpty(relativePath)) {\n      return newTree;\n    } else {\n      const front = pathGetFront(relativePath);\n      const child = this.children.get(front) || new ImmutableTree<T>(null);\n      const newChild = child.setTree(pathPopFront(relativePath), newTree);\n      let newChildren;\n      if (newChild.isEmpty()) {\n        newChildren = this.children.remove(front);\n      } else {\n        newChildren = this.children.insert(front, newChild);\n      }\n      return new ImmutableTree(this.value, newChildren);\n    }\n  }\n\n  /**\n   * Performs a depth first fold on this tree. Transforms a tree into a single\n   * value, given a function that operates on the path to a node, an optional\n   * current value, and a map of child names to folded subtrees\n   */\n  fold<V>(fn: (path: Path, value: T, children: { [k: string]: V }) => V): V {\n    return this.fold_(newEmptyPath(), fn);\n  }\n\n  /**\n   * Recursive helper for public-facing fold() method\n   */\n  private fold_<V>(\n    pathSoFar: Path,\n    fn: (path: Path, value: T | null, children: { [k: string]: V }) => V\n  ): V {\n    const accum: { [k: string]: V } = {};\n    this.children.inorderTraversal(\n      (childKey: string, childTree: ImmutableTree<T>) => {\n        accum[childKey] = childTree.fold_(pathChild(pathSoFar, childKey), fn);\n      }\n    );\n    return fn(pathSoFar, this.value, accum);\n  }\n\n  /**\n   * Find the first matching value on the given path. Return the result of applying f to it.\n   */\n  findOnPath<V>(path: Path, f: (path: Path, value: T) => V | null): V | null {\n    return this.findOnPath_(path, newEmptyPath(), f);\n  }\n\n  private findOnPath_<V>(\n    pathToFollow: Path,\n    pathSoFar: Path,\n    f: (path: Path, value: T) => V | null\n  ): V | null {\n    const result = this.value ? f(pathSoFar, this.value) : false;\n    if (result) {\n      return result;\n    } else {\n      if (pathIsEmpty(pathToFollow)) {\n        return null;\n      } else {\n        const front = pathGetFront(pathToFollow)!;\n        const nextChild = this.children.get(front);\n        if (nextChild) {\n          return nextChild.findOnPath_(\n            pathPopFront(pathToFollow),\n            pathChild(pathSoFar, front),\n            f\n          );\n        } else {\n          return null;\n        }\n      }\n    }\n  }\n\n  foreachOnPath(\n    path: Path,\n    f: (path: Path, value: T) => void\n  ): ImmutableTree<T> {\n    return this.foreachOnPath_(path, newEmptyPath(), f);\n  }\n\n  private foreachOnPath_(\n    pathToFollow: Path,\n    currentRelativePath: Path,\n    f: (path: Path, value: T) => void\n  ): ImmutableTree<T> {\n    if (pathIsEmpty(pathToFollow)) {\n      return this;\n    } else {\n      if (this.value) {\n        f(currentRelativePath, this.value);\n      }\n      const front = pathGetFront(pathToFollow);\n      const nextChild = this.children.get(front);\n      if (nextChild) {\n        return nextChild.foreachOnPath_(\n          pathPopFront(pathToFollow),\n          pathChild(currentRelativePath, front),\n          f\n        );\n      } else {\n        return new ImmutableTree<T>(null);\n      }\n    }\n  }\n\n  /**\n   * Calls the given function for each node in the tree that has a value.\n   *\n   * @param f - A function to be called with the path from the root of the tree to\n   * a node, and the value at that node. Called in depth-first order.\n   */\n  foreach(f: (path: Path, value: T) => void) {\n    this.foreach_(newEmptyPath(), f);\n  }\n\n  private foreach_(\n    currentRelativePath: Path,\n    f: (path: Path, value: T) => void\n  ) {\n    this.children.inorderTraversal((childName, childTree) => {\n      childTree.foreach_(pathChild(currentRelativePath, childName), f);\n    });\n    if (this.value) {\n      f(currentRelativePath, this.value);\n    }\n  }\n\n  foreachChild(f: (name: string, value: T) => void) {\n    this.children.inorderTraversal(\n      (childName: string, childTree: ImmutableTree<T>) => {\n        if (childTree.value) {\n          f(childName, childTree.value);\n        }\n      }\n    );\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { assert } from '@firebase/util';\n\nimport { ChildrenNode } from './snap/ChildrenNode';\nimport { PRIORITY_INDEX } from './snap/indexes/PriorityIndex';\nimport { NamedNode, Node } from './snap/Node';\nimport { ImmutableTree } from './util/ImmutableTree';\nimport {\n  newEmptyPath,\n  newRelativePath,\n  Path,\n  pathChild,\n  pathIsEmpty\n} from './util/Path';\nimport { each } from './util/util';\n\n/**\n * This class holds a collection of writes that can be applied to nodes in unison. It abstracts away the logic with\n * dealing with priority writes and multiple nested writes. At any given path there is only allowed to be one write\n * modifying that path. Any write to an existing path or shadowing an existing path will modify that existing write\n * to reflect the write added.\n */\nexport class CompoundWrite {\n  constructor(public writeTree_: ImmutableTree<Node>) {}\n\n  static empty(): CompoundWrite {\n    return new CompoundWrite(new ImmutableTree(null));\n  }\n}\n\nexport function compoundWriteAddWrite(\n  compoundWrite: CompoundWrite,\n  path: Path,\n  node: Node\n): CompoundWrite {\n  if (pathIsEmpty(path)) {\n    return new CompoundWrite(new ImmutableTree(node));\n  } else {\n    const rootmost = compoundWrite.writeTree_.findRootMostValueAndPath(path);\n    if (rootmost != null) {\n      const rootMostPath = rootmost.path;\n      let value = rootmost.value;\n      const relativePath = newRelativePath(rootMostPath, path);\n      value = value.updateChild(relativePath, node);\n      return new CompoundWrite(\n        compoundWrite.writeTree_.set(rootMostPath, value)\n      );\n    } else {\n      const subtree = new ImmutableTree(node);\n      const newWriteTree = compoundWrite.writeTree_.setTree(path, subtree);\n      return new CompoundWrite(newWriteTree);\n    }\n  }\n}\n\nexport function compoundWriteAddWrites(\n  compoundWrite: CompoundWrite,\n  path: Path,\n  updates: { [name: string]: Node }\n): CompoundWrite {\n  let newWrite = compoundWrite;\n  each(updates, (childKey: string, node: Node) => {\n    newWrite = compoundWriteAddWrite(newWrite, pathChild(path, childKey), node);\n  });\n  return newWrite;\n}\n\n/**\n * Will remove a write at the given path and deeper paths. This will <em>not</em> modify a write at a higher\n * location, which must be removed by calling this method with that path.\n *\n * @param compoundWrite - The CompoundWrite to remove.\n * @param path - The path at which a write and all deeper writes should be removed\n * @returns The new CompoundWrite with the removed path\n */\nexport function compoundWriteRemoveWrite(\n  compoundWrite: CompoundWrite,\n  path: Path\n): CompoundWrite {\n  if (pathIsEmpty(path)) {\n    return CompoundWrite.empty();\n  } else {\n    const newWriteTree = compoundWrite.writeTree_.setTree(\n      path,\n      new ImmutableTree<Node>(null)\n    );\n    return new CompoundWrite(newWriteTree);\n  }\n}\n\n/**\n * Returns whether this CompoundWrite will fully overwrite a node at a given location and can therefore be\n * considered \"complete\".\n *\n * @param compoundWrite - The CompoundWrite to check.\n * @param path - The path to check for\n * @returns Whether there is a complete write at that path\n */\nexport function compoundWriteHasCompleteWrite(\n  compoundWrite: CompoundWrite,\n  path: Path\n): boolean {\n  return compoundWriteGetCompleteNode(compoundWrite, path) != null;\n}\n\n/**\n * Returns a node for a path if and only if the node is a \"complete\" overwrite at that path. This will not aggregate\n * writes from deeper paths, but will return child nodes from a more shallow path.\n *\n * @param compoundWrite - The CompoundWrite to get the node from.\n * @param path - The path to get a complete write\n * @returns The node if complete at that path, or null otherwise.\n */\nexport function compoundWriteGetCompleteNode(\n  compoundWrite: CompoundWrite,\n  path: Path\n): Node | null {\n  const rootmost = compoundWrite.writeTree_.findRootMostValueAndPath(path);\n  if (rootmost != null) {\n    return compoundWrite.writeTree_\n      .get(rootmost.path)\n      .getChild(newRelativePath(rootmost.path, path));\n  } else {\n    return null;\n  }\n}\n\n/**\n * Returns all children that are guaranteed to be a complete overwrite.\n *\n * @param compoundWrite - The CompoundWrite to get children from.\n * @returns A list of all complete children.\n */\nexport function compoundWriteGetCompleteChildren(\n  compoundWrite: CompoundWrite\n): NamedNode[] {\n  const children: NamedNode[] = [];\n  const node = compoundWrite.writeTree_.value;\n  if (node != null) {\n    // If it's a leaf node, it has no children; so nothing to do.\n    if (!node.isLeafNode()) {\n      (node as ChildrenNode).forEachChild(\n        PRIORITY_INDEX,\n        (childName, childNode) => {\n          children.push(new NamedNode(childName, childNode));\n        }\n      );\n    }\n  } else {\n    compoundWrite.writeTree_.children.inorderTraversal(\n      (childName, childTree) => {\n        if (childTree.value != null) {\n          children.push(new NamedNode(childName, childTree.value));\n        }\n      }\n    );\n  }\n  return children;\n}\n\nexport function compoundWriteChildCompoundWrite(\n  compoundWrite: CompoundWrite,\n  path: Path\n): CompoundWrite {\n  if (pathIsEmpty(path)) {\n    return compoundWrite;\n  } else {\n    const shadowingNode = compoundWriteGetCompleteNode(compoundWrite, path);\n    if (shadowingNode != null) {\n      return new CompoundWrite(new ImmutableTree(shadowingNode));\n    } else {\n      return new CompoundWrite(compoundWrite.writeTree_.subtree(path));\n    }\n  }\n}\n\n/**\n * Returns true if this CompoundWrite is empty and therefore does not modify any nodes.\n * @returns Whether this CompoundWrite is empty\n */\nexport function compoundWriteIsEmpty(compoundWrite: CompoundWrite): boolean {\n  return compoundWrite.writeTree_.isEmpty();\n}\n\n/**\n * Applies this CompoundWrite to a node. The node is returned with all writes from this CompoundWrite applied to the\n * node\n * @param node - The node to apply this CompoundWrite to\n * @returns The node with all writes applied\n */\nexport function compoundWriteApply(\n  compoundWrite: CompoundWrite,\n  node: Node\n): Node {\n  return applySubtreeWrite(newEmptyPath(), compoundWrite.writeTree_, node);\n}\n\nfunction applySubtreeWrite(\n  relativePath: Path,\n  writeTree: ImmutableTree<Node>,\n  node: Node\n): Node {\n  if (writeTree.value != null) {\n    // Since there a write is always a leaf, we're done here\n    return node.updateChild(relativePath, writeTree.value);\n  } else {\n    let priorityWrite = null;\n    writeTree.children.inorderTraversal((childKey, childTree) => {\n      if (childKey === '.priority') {\n        // Apply priorities at the end so we don't update priorities for either empty nodes or forget\n        // to apply priorities to empty nodes that are later filled\n        assert(\n          childTree.value !== null,\n          'Priority writes must always be leaf nodes'\n        );\n        priorityWrite = childTree.value;\n      } else {\n        node = applySubtreeWrite(\n          pathChild(relativePath, childKey),\n          childTree,\n          node\n        );\n      }\n    });\n    // If there was a priority write, we only apply it if the node is not empty\n    if (!node.getChild(relativePath).isEmpty() && priorityWrite !== null) {\n      node = node.updateChild(\n        pathChild(relativePath, '.priority'),\n        priorityWrite\n      );\n    }\n    return node;\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { assert, assertionError, safeGet } from '@firebase/util';\n\nimport {\n  CompoundWrite,\n  compoundWriteAddWrite,\n  compoundWriteAddWrites,\n  compoundWriteApply,\n  compoundWriteChildCompoundWrite,\n  compoundWriteGetCompleteChildren,\n  compoundWriteGetCompleteNode,\n  compoundWriteHasCompleteWrite,\n  compoundWriteIsEmpty,\n  compoundWriteRemoveWrite\n} from './CompoundWrite';\nimport { ChildrenNode } from './snap/ChildrenNode';\nimport { Index } from './snap/indexes/Index';\nimport { PRIORITY_INDEX } from './snap/indexes/PriorityIndex';\nimport { NamedNode, Node } from './snap/Node';\nimport {\n  newEmptyPath,\n  newRelativePath,\n  Path,\n  pathChild,\n  pathContains,\n  pathGetFront,\n  pathIsEmpty,\n  pathPopFront\n} from './util/Path';\nimport { each } from './util/util';\nimport { CacheNode } from './view/CacheNode';\n\n/**\n * Defines a single user-initiated write operation. May be the result of a set(), transaction(), or update() call. In\n * the case of a set() or transaction, snap wil be non-null.  In the case of an update(), children will be non-null.\n */\nexport interface WriteRecord {\n  writeId: number;\n  path: Path;\n  snap?: Node | null;\n  children?: { [k: string]: Node } | null;\n  visible: boolean;\n}\n\n/**\n * Create a new WriteTreeRef for the given path. For use with a new sync point at the given path.\n *\n */\nexport function writeTreeChildWrites(\n  writeTree: WriteTree,\n  path: Path\n): WriteTreeRef {\n  return newWriteTreeRef(path, writeTree);\n}\n\n/**\n * Record a new overwrite from user code.\n *\n * @param visible - This is set to false by some transactions. It should be excluded from event caches\n */\nexport function writeTreeAddOverwrite(\n  writeTree: WriteTree,\n  path: Path,\n  snap: Node,\n  writeId: number,\n  visible?: boolean\n) {\n  assert(\n    writeId > writeTree.lastWriteId,\n    'Stacking an older write on top of newer ones'\n  );\n  if (visible === undefined) {\n    visible = true;\n  }\n  writeTree.allWrites.push({\n    path,\n    snap,\n    writeId,\n    visible\n  });\n\n  if (visible) {\n    writeTree.visibleWrites = compoundWriteAddWrite(\n      writeTree.visibleWrites,\n      path,\n      snap\n    );\n  }\n  writeTree.lastWriteId = writeId;\n}\n\n/**\n * Record a new merge from user code.\n */\nexport function writeTreeAddMerge(\n  writeTree: WriteTree,\n  path: Path,\n  changedChildren: { [k: string]: Node },\n  writeId: number\n) {\n  assert(\n    writeId > writeTree.lastWriteId,\n    'Stacking an older merge on top of newer ones'\n  );\n  writeTree.allWrites.push({\n    path,\n    children: changedChildren,\n    writeId,\n    visible: true\n  });\n\n  writeTree.visibleWrites = compoundWriteAddWrites(\n    writeTree.visibleWrites,\n    path,\n    changedChildren\n  );\n  writeTree.lastWriteId = writeId;\n}\n\nexport function writeTreeGetWrite(\n  writeTree: WriteTree,\n  writeId: number\n): WriteRecord | null {\n  for (let i = 0; i < writeTree.allWrites.length; i++) {\n    const record = writeTree.allWrites[i];\n    if (record.writeId === writeId) {\n      return record;\n    }\n  }\n  return null;\n}\n\n/**\n * Remove a write (either an overwrite or merge) that has been successfully acknowledge by the server. Recalculates\n * the tree if necessary.  We return true if it may have been visible, meaning views need to reevaluate.\n *\n * @returns true if the write may have been visible (meaning we'll need to reevaluate / raise\n * events as a result).\n */\nexport function writeTreeRemoveWrite(\n  writeTree: WriteTree,\n  writeId: number\n): boolean {\n  // Note: disabling this check. It could be a transaction that preempted another transaction, and thus was applied\n  // out of order.\n  //const validClear = revert || this.allWrites_.length === 0 || writeId <= this.allWrites_[0].writeId;\n  //assert(validClear, \"Either we don't have this write, or it's the first one in the queue\");\n\n  const idx = writeTree.allWrites.findIndex(s => {\n    return s.writeId === writeId;\n  });\n  assert(idx >= 0, 'removeWrite called with nonexistent writeId.');\n  const writeToRemove = writeTree.allWrites[idx];\n  writeTree.allWrites.splice(idx, 1);\n\n  let removedWriteWasVisible = writeToRemove.visible;\n  let removedWriteOverlapsWithOtherWrites = false;\n\n  let i = writeTree.allWrites.length - 1;\n\n  while (removedWriteWasVisible && i >= 0) {\n    const currentWrite = writeTree.allWrites[i];\n    if (currentWrite.visible) {\n      if (\n        i >= idx &&\n        writeTreeRecordContainsPath_(currentWrite, writeToRemove.path)\n      ) {\n        // The removed write was completely shadowed by a subsequent write.\n        removedWriteWasVisible = false;\n      } else if (pathContains(writeToRemove.path, currentWrite.path)) {\n        // Either we're covering some writes or they're covering part of us (depending on which came first).\n        removedWriteOverlapsWithOtherWrites = true;\n      }\n    }\n    i--;\n  }\n\n  if (!removedWriteWasVisible) {\n    return false;\n  } else if (removedWriteOverlapsWithOtherWrites) {\n    // There's some shadowing going on. Just rebuild the visible writes from scratch.\n    writeTreeResetTree_(writeTree);\n    return true;\n  } else {\n    // There's no shadowing.  We can safely just remove the write(s) from visibleWrites.\n    if (writeToRemove.snap) {\n      writeTree.visibleWrites = compoundWriteRemoveWrite(\n        writeTree.visibleWrites,\n        writeToRemove.path\n      );\n    } else {\n      const children = writeToRemove.children;\n      each(children, (childName: string) => {\n        writeTree.visibleWrites = compoundWriteRemoveWrite(\n          writeTree.visibleWrites,\n          pathChild(writeToRemove.path, childName)\n        );\n      });\n    }\n    return true;\n  }\n}\n\nfunction writeTreeRecordContainsPath_(\n  writeRecord: WriteRecord,\n  path: Path\n): boolean {\n  if (writeRecord.snap) {\n    return pathContains(writeRecord.path, path);\n  } else {\n    for (const childName in writeRecord.children) {\n      if (\n        writeRecord.children.hasOwnProperty(childName) &&\n        pathContains(pathChild(writeRecord.path, childName), path)\n      ) {\n        return true;\n      }\n    }\n    return false;\n  }\n}\n\n/**\n * Re-layer the writes and merges into a tree so we can efficiently calculate event snapshots\n */\nfunction writeTreeResetTree_(writeTree: WriteTree) {\n  writeTree.visibleWrites = writeTreeLayerTree_(\n    writeTree.allWrites,\n    writeTreeDefaultFilter_,\n    newEmptyPath()\n  );\n  if (writeTree.allWrites.length > 0) {\n    writeTree.lastWriteId =\n      writeTree.allWrites[writeTree.allWrites.length - 1].writeId;\n  } else {\n    writeTree.lastWriteId = -1;\n  }\n}\n\n/**\n * The default filter used when constructing the tree. Keep everything that's visible.\n */\nfunction writeTreeDefaultFilter_(write: WriteRecord) {\n  return write.visible;\n}\n\n/**\n * Static method. Given an array of WriteRecords, a filter for which ones to include, and a path, construct the tree of\n * event data at that path.\n */\nfunction writeTreeLayerTree_(\n  writes: WriteRecord[],\n  filter: (w: WriteRecord) => boolean,\n  treeRoot: Path\n): CompoundWrite {\n  let compoundWrite = CompoundWrite.empty();\n  for (let i = 0; i < writes.length; ++i) {\n    const write = writes[i];\n    // Theory, a later set will either:\n    // a) abort a relevant transaction, so no need to worry about excluding it from calculating that transaction\n    // b) not be relevant to a transaction (separate branch), so again will not affect the data for that transaction\n    if (filter(write)) {\n      const writePath = write.path;\n      let relativePath: Path;\n      if (write.snap) {\n        if (pathContains(treeRoot, writePath)) {\n          relativePath = newRelativePath(treeRoot, writePath);\n          compoundWrite = compoundWriteAddWrite(\n            compoundWrite,\n            relativePath,\n            write.snap\n          );\n        } else if (pathContains(writePath, treeRoot)) {\n          relativePath = newRelativePath(writePath, treeRoot);\n          compoundWrite = compoundWriteAddWrite(\n            compoundWrite,\n            newEmptyPath(),\n            write.snap.getChild(relativePath)\n          );\n        } else {\n          // There is no overlap between root path and write path, ignore write\n        }\n      } else if (write.children) {\n        if (pathContains(treeRoot, writePath)) {\n          relativePath = newRelativePath(treeRoot, writePath);\n          compoundWrite = compoundWriteAddWrites(\n            compoundWrite,\n            relativePath,\n            write.children\n          );\n        } else if (pathContains(writePath, treeRoot)) {\n          relativePath = newRelativePath(writePath, treeRoot);\n          if (pathIsEmpty(relativePath)) {\n            compoundWrite = compoundWriteAddWrites(\n              compoundWrite,\n              newEmptyPath(),\n              write.children\n            );\n          } else {\n            const child = safeGet(write.children, pathGetFront(relativePath));\n            if (child) {\n              // There exists a child in this node that matches the root path\n              const deepNode = child.getChild(pathPopFront(relativePath));\n              compoundWrite = compoundWriteAddWrite(\n                compoundWrite,\n                newEmptyPath(),\n                deepNode\n              );\n            }\n          }\n        } else {\n          // There is no overlap between root path and write path, ignore write\n        }\n      } else {\n        throw assertionError('WriteRecord should have .snap or .children');\n      }\n    }\n  }\n  return compoundWrite;\n}\n\n/**\n * Return a complete snapshot for the given path if there's visible write data at that path, else null.\n * No server data is considered.\n *\n */\nexport function writeTreeGetCompleteWriteData(\n  writeTree: WriteTree,\n  path: Path\n): Node | null {\n  return compoundWriteGetCompleteNode(writeTree.visibleWrites, path);\n}\n\n/**\n * Given optional, underlying server data, and an optional set of constraints (exclude some sets, include hidden\n * writes), attempt to calculate a complete snapshot for the given path\n *\n * @param writeIdsToExclude - An optional set to be excluded\n * @param includeHiddenWrites - Defaults to false, whether or not to layer on writes with visible set to false\n */\nexport function writeTreeCalcCompleteEventCache(\n  writeTree: WriteTree,\n  treePath: Path,\n  completeServerCache: Node | null,\n  writeIdsToExclude?: number[],\n  includeHiddenWrites?: boolean\n): Node | null {\n  if (!writeIdsToExclude && !includeHiddenWrites) {\n    const shadowingNode = compoundWriteGetCompleteNode(\n      writeTree.visibleWrites,\n      treePath\n    );\n    if (shadowingNode != null) {\n      return shadowingNode;\n    } else {\n      const subMerge = compoundWriteChildCompoundWrite(\n        writeTree.visibleWrites,\n        treePath\n      );\n      if (compoundWriteIsEmpty(subMerge)) {\n        return completeServerCache;\n      } else if (\n        completeServerCache == null &&\n        !compoundWriteHasCompleteWrite(subMerge, newEmptyPath())\n      ) {\n        // We wouldn't have a complete snapshot, since there's no underlying data and no complete shadow\n        return null;\n      } else {\n        const layeredCache = completeServerCache || ChildrenNode.EMPTY_NODE;\n        return compoundWriteApply(subMerge, layeredCache);\n      }\n    }\n  } else {\n    const merge = compoundWriteChildCompoundWrite(\n      writeTree.visibleWrites,\n      treePath\n    );\n    if (!includeHiddenWrites && compoundWriteIsEmpty(merge)) {\n      return completeServerCache;\n    } else {\n      // If the server cache is null, and we don't have a complete cache, we need to return null\n      if (\n        !includeHiddenWrites &&\n        completeServerCache == null &&\n        !compoundWriteHasCompleteWrite(merge, newEmptyPath())\n      ) {\n        return null;\n      } else {\n        const filter = function (write: WriteRecord) {\n          return (\n            (write.visible || includeHiddenWrites) &&\n            (!writeIdsToExclude ||\n              !~writeIdsToExclude.indexOf(write.writeId)) &&\n            (pathContains(write.path, treePath) ||\n              pathContains(treePath, write.path))\n          );\n        };\n        const mergeAtPath = writeTreeLayerTree_(\n          writeTree.allWrites,\n          filter,\n          treePath\n        );\n        const layeredCache = completeServerCache || ChildrenNode.EMPTY_NODE;\n        return compoundWriteApply(mergeAtPath, layeredCache);\n      }\n    }\n  }\n}\n\n/**\n * With optional, underlying server data, attempt to return a children node of children that we have complete data for.\n * Used when creating new views, to pre-fill their complete event children snapshot.\n */\nexport function writeTreeCalcCompleteEventChildren(\n  writeTree: WriteTree,\n  treePath: Path,\n  completeServerChildren: ChildrenNode | null\n) {\n  let completeChildren = ChildrenNode.EMPTY_NODE as Node;\n  const topLevelSet = compoundWriteGetCompleteNode(\n    writeTree.visibleWrites,\n    treePath\n  );\n  if (topLevelSet) {\n    if (!topLevelSet.isLeafNode()) {\n      // we're shadowing everything. Return the children.\n      topLevelSet.forEachChild(PRIORITY_INDEX, (childName, childSnap) => {\n        completeChildren = completeChildren.updateImmediateChild(\n          childName,\n          childSnap\n        );\n      });\n    }\n    return completeChildren;\n  } else if (completeServerChildren) {\n    // Layer any children we have on top of this\n    // We know we don't have a top-level set, so just enumerate existing children\n    const merge = compoundWriteChildCompoundWrite(\n      writeTree.visibleWrites,\n      treePath\n    );\n    completeServerChildren.forEachChild(\n      PRIORITY_INDEX,\n      (childName, childNode) => {\n        const node = compoundWriteApply(\n          compoundWriteChildCompoundWrite(merge, new Path(childName)),\n          childNode\n        );\n        completeChildren = completeChildren.updateImmediateChild(\n          childName,\n          node\n        );\n      }\n    );\n    // Add any complete children we have from the set\n    compoundWriteGetCompleteChildren(merge).forEach(namedNode => {\n      completeChildren = completeChildren.updateImmediateChild(\n        namedNode.name,\n        namedNode.node\n      );\n    });\n    return completeChildren;\n  } else {\n    // We don't have anything to layer on top of. Layer on any children we have\n    // Note that we can return an empty snap if we have a defined delete\n    const merge = compoundWriteChildCompoundWrite(\n      writeTree.visibleWrites,\n      treePath\n    );\n    compoundWriteGetCompleteChildren(merge).forEach(namedNode => {\n      completeChildren = completeChildren.updateImmediateChild(\n        namedNode.name,\n        namedNode.node\n      );\n    });\n    return completeChildren;\n  }\n}\n\n/**\n * Given that the underlying server data has updated, determine what, if anything, needs to be\n * applied to the event cache.\n *\n * Possibilities:\n *\n * 1. No writes are shadowing. Events should be raised, the snap to be applied comes from the server data\n *\n * 2. Some write is completely shadowing. No events to be raised\n *\n * 3. Is partially shadowed. Events\n *\n * Either existingEventSnap or existingServerSnap must exist\n */\nexport function writeTreeCalcEventCacheAfterServerOverwrite(\n  writeTree: WriteTree,\n  treePath: Path,\n  childPath: Path,\n  existingEventSnap: Node | null,\n  existingServerSnap: Node | null\n): Node | null {\n  assert(\n    existingEventSnap || existingServerSnap,\n    'Either existingEventSnap or existingServerSnap must exist'\n  );\n  const path = pathChild(treePath, childPath);\n  if (compoundWriteHasCompleteWrite(writeTree.visibleWrites, path)) {\n    // At this point we can probably guarantee that we're in case 2, meaning no events\n    // May need to check visibility while doing the findRootMostValueAndPath call\n    return null;\n  } else {\n    // No complete shadowing. We're either partially shadowing or not shadowing at all.\n    const childMerge = compoundWriteChildCompoundWrite(\n      writeTree.visibleWrites,\n      path\n    );\n    if (compoundWriteIsEmpty(childMerge)) {\n      // We're not shadowing at all. Case 1\n      return existingServerSnap.getChild(childPath);\n    } else {\n      // This could be more efficient if the serverNode + updates doesn't change the eventSnap\n      // However this is tricky to find out, since user updates don't necessary change the server\n      // snap, e.g. priority updates on empty nodes, or deep deletes. Another special case is if the server\n      // adds nodes, but doesn't change any existing writes. It is therefore not enough to\n      // only check if the updates change the serverNode.\n      // Maybe check if the merge tree contains these special cases and only do a full overwrite in that case?\n      return compoundWriteApply(\n        childMerge,\n        existingServerSnap.getChild(childPath)\n      );\n    }\n  }\n}\n\n/**\n * Returns a complete child for a given server snap after applying all user writes or null if there is no\n * complete child for this ChildKey.\n */\nexport function writeTreeCalcCompleteChild(\n  writeTree: WriteTree,\n  treePath: Path,\n  childKey: string,\n  existingServerSnap: CacheNode\n): Node | null {\n  const path = pathChild(treePath, childKey);\n  const shadowingNode = compoundWriteGetCompleteNode(\n    writeTree.visibleWrites,\n    path\n  );\n  if (shadowingNode != null) {\n    return shadowingNode;\n  } else {\n    if (existingServerSnap.isCompleteForChild(childKey)) {\n      const childMerge = compoundWriteChildCompoundWrite(\n        writeTree.visibleWrites,\n        path\n      );\n      return compoundWriteApply(\n        childMerge,\n        existingServerSnap.getNode().getImmediateChild(childKey)\n      );\n    } else {\n      return null;\n    }\n  }\n}\n\n/**\n * Returns a node if there is a complete overwrite for this path. More specifically, if there is a write at\n * a higher path, this will return the child of that write relative to the write and this path.\n * Returns null if there is no write at this path.\n */\nexport function writeTreeShadowingWrite(\n  writeTree: WriteTree,\n  path: Path\n): Node | null {\n  return compoundWriteGetCompleteNode(writeTree.visibleWrites, path);\n}\n\n/**\n * This method is used when processing child remove events on a query. If we can, we pull in children that were outside\n * the window, but may now be in the window.\n */\nexport function writeTreeCalcIndexedSlice(\n  writeTree: WriteTree,\n  treePath: Path,\n  completeServerData: Node | null,\n  startPost: NamedNode,\n  count: number,\n  reverse: boolean,\n  index: Index\n): NamedNode[] {\n  let toIterate: Node;\n  const merge = compoundWriteChildCompoundWrite(\n    writeTree.visibleWrites,\n    treePath\n  );\n  const shadowingNode = compoundWriteGetCompleteNode(merge, newEmptyPath());\n  if (shadowingNode != null) {\n    toIterate = shadowingNode;\n  } else if (completeServerData != null) {\n    toIterate = compoundWriteApply(merge, completeServerData);\n  } else {\n    // no children to iterate on\n    return [];\n  }\n  toIterate = toIterate.withIndex(index);\n  if (!toIterate.isEmpty() && !toIterate.isLeafNode()) {\n    const nodes = [];\n    const cmp = index.getCompare();\n    const iter = reverse\n      ? (toIterate as ChildrenNode).getReverseIteratorFrom(startPost, index)\n      : (toIterate as ChildrenNode).getIteratorFrom(startPost, index);\n    let next = iter.getNext();\n    while (next && nodes.length < count) {\n      if (cmp(next, startPost) !== 0) {\n        nodes.push(next);\n      }\n      next = iter.getNext();\n    }\n    return nodes;\n  } else {\n    return [];\n  }\n}\n\nexport function newWriteTree(): WriteTree {\n  return {\n    visibleWrites: CompoundWrite.empty(),\n    allWrites: [],\n    lastWriteId: -1\n  };\n}\n\n/**\n * WriteTree tracks all pending user-initiated writes and has methods to calculate the result of merging them\n * with underlying server data (to create \"event cache\" data).  Pending writes are added with addOverwrite()\n * and addMerge(), and removed with removeWrite().\n */\nexport interface WriteTree {\n  /**\n   * A tree tracking the result of applying all visible writes.  This does not include transactions with\n   * applyLocally=false or writes that are completely shadowed by other writes.\n   */\n  visibleWrites: CompoundWrite;\n\n  /**\n   * A list of all pending writes, regardless of visibility and shadowed-ness.  Used to calculate arbitrary\n   * sets of the changed data, such as hidden writes (from transactions) or changes with certain writes excluded (also\n   * used by transactions).\n   */\n  allWrites: WriteRecord[];\n\n  lastWriteId: number;\n}\n\n/**\n * If possible, returns a complete event cache, using the underlying server data if possible. In addition, can be used\n * to get a cache that includes hidden writes, and excludes arbitrary writes. Note that customizing the returned node\n * can lead to a more expensive calculation.\n *\n * @param writeIdsToExclude - Optional writes to exclude.\n * @param includeHiddenWrites - Defaults to false, whether or not to layer on writes with visible set to false\n */\nexport function writeTreeRefCalcCompleteEventCache(\n  writeTreeRef: WriteTreeRef,\n  completeServerCache: Node | null,\n  writeIdsToExclude?: number[],\n  includeHiddenWrites?: boolean\n): Node | null {\n  return writeTreeCalcCompleteEventCache(\n    writeTreeRef.writeTree,\n    writeTreeRef.treePath,\n    completeServerCache,\n    writeIdsToExclude,\n    includeHiddenWrites\n  );\n}\n\n/**\n * If possible, returns a children node containing all of the complete children we have data for. The returned data is a\n * mix of the given server data and write data.\n *\n */\nexport function writeTreeRefCalcCompleteEventChildren(\n  writeTreeRef: WriteTreeRef,\n  completeServerChildren: ChildrenNode | null\n): ChildrenNode {\n  return writeTreeCalcCompleteEventChildren(\n    writeTreeRef.writeTree,\n    writeTreeRef.treePath,\n    completeServerChildren\n  ) as ChildrenNode;\n}\n\n/**\n * Given that either the underlying server data has updated or the outstanding writes have updated, determine what,\n * if anything, needs to be applied to the event cache.\n *\n * Possibilities:\n *\n * 1. No writes are shadowing. Events should be raised, the snap to be applied comes from the server data\n *\n * 2. Some write is completely shadowing. No events to be raised\n *\n * 3. Is partially shadowed. Events should be raised\n *\n * Either existingEventSnap or existingServerSnap must exist, this is validated via an assert\n *\n *\n */\nexport function writeTreeRefCalcEventCacheAfterServerOverwrite(\n  writeTreeRef: WriteTreeRef,\n  path: Path,\n  existingEventSnap: Node | null,\n  existingServerSnap: Node | null\n): Node | null {\n  return writeTreeCalcEventCacheAfterServerOverwrite(\n    writeTreeRef.writeTree,\n    writeTreeRef.treePath,\n    path,\n    existingEventSnap,\n    existingServerSnap\n  );\n}\n\n/**\n * Returns a node if there is a complete overwrite for this path. More specifically, if there is a write at\n * a higher path, this will return the child of that write relative to the write and this path.\n * Returns null if there is no write at this path.\n *\n */\nexport function writeTreeRefShadowingWrite(\n  writeTreeRef: WriteTreeRef,\n  path: Path\n): Node | null {\n  return writeTreeShadowingWrite(\n    writeTreeRef.writeTree,\n    pathChild(writeTreeRef.treePath, path)\n  );\n}\n\n/**\n * This method is used when processing child remove events on a query. If we can, we pull in children that were outside\n * the window, but may now be in the window\n */\nexport function writeTreeRefCalcIndexedSlice(\n  writeTreeRef: WriteTreeRef,\n  completeServerData: Node | null,\n  startPost: NamedNode,\n  count: number,\n  reverse: boolean,\n  index: Index\n): NamedNode[] {\n  return writeTreeCalcIndexedSlice(\n    writeTreeRef.writeTree,\n    writeTreeRef.treePath,\n    completeServerData,\n    startPost,\n    count,\n    reverse,\n    index\n  );\n}\n\n/**\n * Returns a complete child for a given server snap after applying all user writes or null if there is no\n * complete child for this ChildKey.\n */\nexport function writeTreeRefCalcCompleteChild(\n  writeTreeRef: WriteTreeRef,\n  childKey: string,\n  existingServerCache: CacheNode\n): Node | null {\n  return writeTreeCalcCompleteChild(\n    writeTreeRef.writeTree,\n    writeTreeRef.treePath,\n    childKey,\n    existingServerCache\n  );\n}\n\n/**\n * Return a WriteTreeRef for a child.\n */\nexport function writeTreeRefChild(\n  writeTreeRef: WriteTreeRef,\n  childName: string\n): WriteTreeRef {\n  return newWriteTreeRef(\n    pathChild(writeTreeRef.treePath, childName),\n    writeTreeRef.writeTree\n  );\n}\n\nexport function newWriteTreeRef(\n  path: Path,\n  writeTree: WriteTree\n): WriteTreeRef {\n  return {\n    treePath: path,\n    writeTree\n  };\n}\n\n/**\n * A WriteTreeRef wraps a WriteTree and a path, for convenient access to a particular subtree.  All of the methods\n * just proxy to the underlying WriteTree.\n *\n */\nexport interface WriteTreeRef {\n  /**\n   * The path to this particular write tree ref. Used for calling methods on writeTree_ while exposing a simpler\n   * interface to callers.\n   */\n  readonly treePath: Path;\n\n  /**\n   * * A reference to the actual tree of write data. All methods are pass-through to the tree, but with the appropriate\n   * path prefixed.\n   *\n   * This lets us make cheap references to points in the tree for sync points without having to copy and maintain all of\n   * the data.\n   */\n  readonly writeTree: WriteTree;\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { assert, assertionError } from '@firebase/util';\n\nimport {\n  Change,\n  ChangeType,\n  changeChildAdded,\n  changeChildChanged,\n  changeChildRemoved\n} from './Change';\n\nexport class ChildChangeAccumulator {\n  private readonly changeMap: Map<string, Change> = new Map();\n\n  trackChildChange(change: Change) {\n    const type = change.type;\n    const childKey = change.childName!;\n    assert(\n      type === ChangeType.CHILD_ADDED ||\n        type === ChangeType.CHILD_CHANGED ||\n        type === ChangeType.CHILD_REMOVED,\n      'Only child changes supported for tracking'\n    );\n    assert(\n      childKey !== '.priority',\n      'Only non-priority child changes can be tracked.'\n    );\n    const oldChange = this.changeMap.get(childKey);\n    if (oldChange) {\n      const oldType = oldChange.type;\n      if (\n        type === ChangeType.CHILD_ADDED &&\n        oldType === ChangeType.CHILD_REMOVED\n      ) {\n        this.changeMap.set(\n          childKey,\n          changeChildChanged(\n            childKey,\n            change.snapshotNode,\n            oldChange.snapshotNode\n          )\n        );\n      } else if (\n        type === ChangeType.CHILD_REMOVED &&\n        oldType === ChangeType.CHILD_ADDED\n      ) {\n        this.changeMap.delete(childKey);\n      } else if (\n        type === ChangeType.CHILD_REMOVED &&\n        oldType === ChangeType.CHILD_CHANGED\n      ) {\n        this.changeMap.set(\n          childKey,\n          changeChildRemoved(childKey, oldChange.oldSnap)\n        );\n      } else if (\n        type === ChangeType.CHILD_CHANGED &&\n        oldType === ChangeType.CHILD_ADDED\n      ) {\n        this.changeMap.set(\n          childKey,\n          changeChildAdded(childKey, change.snapshotNode)\n        );\n      } else if (\n        type === ChangeType.CHILD_CHANGED &&\n        oldType === ChangeType.CHILD_CHANGED\n      ) {\n        this.changeMap.set(\n          childKey,\n          changeChildChanged(childKey, change.snapshotNode, oldChange.oldSnap)\n        );\n      } else {\n        throw assertionError(\n          'Illegal combination of changes: ' +\n            change +\n            ' occurred after ' +\n            oldChange\n        );\n      }\n    } else {\n      this.changeMap.set(childKey, change);\n    }\n  }\n\n  getChanges(): Change[] {\n    return Array.from(this.changeMap.values());\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Index } from '../snap/indexes/Index';\nimport { NamedNode, Node } from '../snap/Node';\nimport {\n  WriteTreeRef,\n  writeTreeRefCalcCompleteChild,\n  writeTreeRefCalcIndexedSlice\n} from '../WriteTree';\n\nimport { CacheNode } from './CacheNode';\nimport { ViewCache, viewCacheGetCompleteServerSnap } from './ViewCache';\n\n/**\n * Since updates to filtered nodes might require nodes to be pulled in from \"outside\" the node, this interface\n * can help to get complete children that can be pulled in.\n * A class implementing this interface takes potentially multiple sources (e.g. user writes, server data from\n * other views etc.) to try it's best to get a complete child that might be useful in pulling into the view.\n *\n * @interface\n */\nexport interface CompleteChildSource {\n  getCompleteChild(childKey: string): Node | null;\n\n  getChildAfterChild(\n    index: Index,\n    child: NamedNode,\n    reverse: boolean\n  ): NamedNode | null;\n}\n\n/**\n * An implementation of CompleteChildSource that never returns any additional children\n */\n// eslint-disable-next-line @typescript-eslint/naming-convention\nexport class NoCompleteChildSource_ implements CompleteChildSource {\n  getCompleteChild(childKey?: string): Node | null {\n    return null;\n  }\n  getChildAfterChild(\n    index?: Index,\n    child?: NamedNode,\n    reverse?: boolean\n  ): NamedNode | null {\n    return null;\n  }\n}\n\n/**\n * Singleton instance.\n */\nexport const NO_COMPLETE_CHILD_SOURCE = new NoCompleteChildSource_();\n\n/**\n * An implementation of CompleteChildSource that uses a WriteTree in addition to any other server data or\n * old event caches available to calculate complete children.\n */\nexport class WriteTreeCompleteChildSource implements CompleteChildSource {\n  constructor(\n    private writes_: WriteTreeRef,\n    private viewCache_: ViewCache,\n    private optCompleteServerCache_: Node | null = null\n  ) {}\n  getCompleteChild(childKey: string): Node | null {\n    const node = this.viewCache_.eventCache;\n    if (node.isCompleteForChild(childKey)) {\n      return node.getNode().getImmediateChild(childKey);\n    } else {\n      const serverNode =\n        this.optCompleteServerCache_ != null\n          ? new CacheNode(this.optCompleteServerCache_, true, false)\n          : this.viewCache_.serverCache;\n      return writeTreeRefCalcCompleteChild(this.writes_, childKey, serverNode);\n    }\n  }\n  getChildAfterChild(\n    index: Index,\n    child: NamedNode,\n    reverse: boolean\n  ): NamedNode | null {\n    const completeServerData =\n      this.optCompleteServerCache_ != null\n        ? this.optCompleteServerCache_\n        : viewCacheGetCompleteServerSnap(this.viewCache_);\n    const nodes = writeTreeRefCalcIndexedSlice(\n      this.writes_,\n      completeServerData,\n      child,\n      1,\n      reverse,\n      index\n    );\n    if (nodes.length === 0) {\n      return null;\n    } else {\n      return nodes[0];\n    }\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { assert, assertionError } from '@firebase/util';\n\nimport { AckUserWrite } from '../operation/AckUserWrite';\nimport { Merge } from '../operation/Merge';\nimport { Operation, OperationType } from '../operation/Operation';\nimport { Overwrite } from '../operation/Overwrite';\nimport { ChildrenNode } from '../snap/ChildrenNode';\nimport { KEY_INDEX } from '../snap/indexes/KeyIndex';\nimport { Node } from '../snap/Node';\nimport { ImmutableTree } from '../util/ImmutableTree';\nimport {\n  newEmptyPath,\n  Path,\n  pathChild,\n  pathGetBack,\n  pathGetFront,\n  pathGetLength,\n  pathIsEmpty,\n  pathParent,\n  pathPopFront\n} from '../util/Path';\nimport {\n  WriteTreeRef,\n  writeTreeRefCalcCompleteChild,\n  writeTreeRefCalcCompleteEventCache,\n  writeTreeRefCalcCompleteEventChildren,\n  writeTreeRefCalcEventCacheAfterServerOverwrite,\n  writeTreeRefShadowingWrite\n} from '../WriteTree';\n\nimport { Change, changeValue } from './Change';\nimport { ChildChangeAccumulator } from './ChildChangeAccumulator';\nimport {\n  CompleteChildSource,\n  NO_COMPLETE_CHILD_SOURCE,\n  WriteTreeCompleteChildSource\n} from './CompleteChildSource';\nimport { NodeFilter } from './filter/NodeFilter';\nimport {\n  ViewCache,\n  viewCacheGetCompleteEventSnap,\n  viewCacheGetCompleteServerSnap,\n  viewCacheUpdateEventSnap,\n  viewCacheUpdateServerSnap\n} from './ViewCache';\n\nexport interface ProcessorResult {\n  readonly viewCache: ViewCache;\n  readonly changes: Change[];\n}\n\nexport interface ViewProcessor {\n  readonly filter: NodeFilter;\n}\n\nexport function newViewProcessor(filter: NodeFilter): ViewProcessor {\n  return { filter };\n}\n\nexport function viewProcessorAssertIndexed(\n  viewProcessor: ViewProcessor,\n  viewCache: ViewCache\n): void {\n  assert(\n    viewCache.eventCache.getNode().isIndexed(viewProcessor.filter.getIndex()),\n    'Event snap not indexed'\n  );\n  assert(\n    viewCache.serverCache.getNode().isIndexed(viewProcessor.filter.getIndex()),\n    'Server snap not indexed'\n  );\n}\n\nexport function viewProcessorApplyOperation(\n  viewProcessor: ViewProcessor,\n  oldViewCache: ViewCache,\n  operation: Operation,\n  writesCache: WriteTreeRef,\n  completeCache: Node | null\n): ProcessorResult {\n  const accumulator = new ChildChangeAccumulator();\n  let newViewCache, filterServerNode;\n  if (operation.type === OperationType.OVERWRITE) {\n    const overwrite = operation as Overwrite;\n    if (overwrite.source.fromUser) {\n      newViewCache = viewProcessorApplyUserOverwrite(\n        viewProcessor,\n        oldViewCache,\n        overwrite.path,\n        overwrite.snap,\n        writesCache,\n        completeCache,\n        accumulator\n      );\n    } else {\n      assert(overwrite.source.fromServer, 'Unknown source.');\n      // We filter the node if it's a tagged update or the node has been previously filtered  and the\n      // update is not at the root in which case it is ok (and necessary) to mark the node unfiltered\n      // again\n      filterServerNode =\n        overwrite.source.tagged ||\n        (oldViewCache.serverCache.isFiltered() && !pathIsEmpty(overwrite.path));\n      newViewCache = viewProcessorApplyServerOverwrite(\n        viewProcessor,\n        oldViewCache,\n        overwrite.path,\n        overwrite.snap,\n        writesCache,\n        completeCache,\n        filterServerNode,\n        accumulator\n      );\n    }\n  } else if (operation.type === OperationType.MERGE) {\n    const merge = operation as Merge;\n    if (merge.source.fromUser) {\n      newViewCache = viewProcessorApplyUserMerge(\n        viewProcessor,\n        oldViewCache,\n        merge.path,\n        merge.children,\n        writesCache,\n        completeCache,\n        accumulator\n      );\n    } else {\n      assert(merge.source.fromServer, 'Unknown source.');\n      // We filter the node if it's a tagged update or the node has been previously filtered\n      filterServerNode =\n        merge.source.tagged || oldViewCache.serverCache.isFiltered();\n      newViewCache = viewProcessorApplyServerMerge(\n        viewProcessor,\n        oldViewCache,\n        merge.path,\n        merge.children,\n        writesCache,\n        completeCache,\n        filterServerNode,\n        accumulator\n      );\n    }\n  } else if (operation.type === OperationType.ACK_USER_WRITE) {\n    const ackUserWrite = operation as AckUserWrite;\n    if (!ackUserWrite.revert) {\n      newViewCache = viewProcessorAckUserWrite(\n        viewProcessor,\n        oldViewCache,\n        ackUserWrite.path,\n        ackUserWrite.affectedTree,\n        writesCache,\n        completeCache,\n        accumulator\n      );\n    } else {\n      newViewCache = viewProcessorRevertUserWrite(\n        viewProcessor,\n        oldViewCache,\n        ackUserWrite.path,\n        writesCache,\n        completeCache,\n        accumulator\n      );\n    }\n  } else if (operation.type === OperationType.LISTEN_COMPLETE) {\n    newViewCache = viewProcessorListenComplete(\n      viewProcessor,\n      oldViewCache,\n      operation.path,\n      writesCache,\n      accumulator\n    );\n  } else {\n    throw assertionError('Unknown operation type: ' + operation.type);\n  }\n  const changes = accumulator.getChanges();\n  viewProcessorMaybeAddValueEvent(oldViewCache, newViewCache, changes);\n  return { viewCache: newViewCache, changes };\n}\n\nfunction viewProcessorMaybeAddValueEvent(\n  oldViewCache: ViewCache,\n  newViewCache: ViewCache,\n  accumulator: Change[]\n): void {\n  const eventSnap = newViewCache.eventCache;\n  if (eventSnap.isFullyInitialized()) {\n    const isLeafOrEmpty =\n      eventSnap.getNode().isLeafNode() || eventSnap.getNode().isEmpty();\n    const oldCompleteSnap = viewCacheGetCompleteEventSnap(oldViewCache);\n    if (\n      accumulator.length > 0 ||\n      !oldViewCache.eventCache.isFullyInitialized() ||\n      (isLeafOrEmpty && !eventSnap.getNode().equals(oldCompleteSnap)) ||\n      !eventSnap.getNode().getPriority().equals(oldCompleteSnap.getPriority())\n    ) {\n      accumulator.push(\n        changeValue(viewCacheGetCompleteEventSnap(newViewCache))\n      );\n    }\n  }\n}\n\nfunction viewProcessorGenerateEventCacheAfterServerEvent(\n  viewProcessor: ViewProcessor,\n  viewCache: ViewCache,\n  changePath: Path,\n  writesCache: WriteTreeRef,\n  source: CompleteChildSource,\n  accumulator: ChildChangeAccumulator\n): ViewCache {\n  const oldEventSnap = viewCache.eventCache;\n  if (writeTreeRefShadowingWrite(writesCache, changePath) != null) {\n    // we have a shadowing write, ignore changes\n    return viewCache;\n  } else {\n    let newEventCache, serverNode;\n    if (pathIsEmpty(changePath)) {\n      // TODO: figure out how this plays with \"sliding ack windows\"\n      assert(\n        viewCache.serverCache.isFullyInitialized(),\n        'If change path is empty, we must have complete server data'\n      );\n      if (viewCache.serverCache.isFiltered()) {\n        // We need to special case this, because we need to only apply writes to complete children, or\n        // we might end up raising events for incomplete children. If the server data is filtered deep\n        // writes cannot be guaranteed to be complete\n        const serverCache = viewCacheGetCompleteServerSnap(viewCache);\n        const completeChildren =\n          serverCache instanceof ChildrenNode\n            ? serverCache\n            : ChildrenNode.EMPTY_NODE;\n        const completeEventChildren = writeTreeRefCalcCompleteEventChildren(\n          writesCache,\n          completeChildren\n        );\n        newEventCache = viewProcessor.filter.updateFullNode(\n          viewCache.eventCache.getNode(),\n          completeEventChildren,\n          accumulator\n        );\n      } else {\n        const completeNode = writeTreeRefCalcCompleteEventCache(\n          writesCache,\n          viewCacheGetCompleteServerSnap(viewCache)\n        );\n        newEventCache = viewProcessor.filter.updateFullNode(\n          viewCache.eventCache.getNode(),\n          completeNode,\n          accumulator\n        );\n      }\n    } else {\n      const childKey = pathGetFront(changePath);\n      if (childKey === '.priority') {\n        assert(\n          pathGetLength(changePath) === 1,\n          \"Can't have a priority with additional path components\"\n        );\n        const oldEventNode = oldEventSnap.getNode();\n        serverNode = viewCache.serverCache.getNode();\n        // we might have overwrites for this priority\n        const updatedPriority = writeTreeRefCalcEventCacheAfterServerOverwrite(\n          writesCache,\n          changePath,\n          oldEventNode,\n          serverNode\n        );\n        if (updatedPriority != null) {\n          newEventCache = viewProcessor.filter.updatePriority(\n            oldEventNode,\n            updatedPriority\n          );\n        } else {\n          // priority didn't change, keep old node\n          newEventCache = oldEventSnap.getNode();\n        }\n      } else {\n        const childChangePath = pathPopFront(changePath);\n        // update child\n        let newEventChild;\n        if (oldEventSnap.isCompleteForChild(childKey)) {\n          serverNode = viewCache.serverCache.getNode();\n          const eventChildUpdate = writeTreeRefCalcEventCacheAfterServerOverwrite(\n            writesCache,\n            changePath,\n            oldEventSnap.getNode(),\n            serverNode\n          );\n          if (eventChildUpdate != null) {\n            newEventChild = oldEventSnap\n              .getNode()\n              .getImmediateChild(childKey)\n              .updateChild(childChangePath, eventChildUpdate);\n          } else {\n            // Nothing changed, just keep the old child\n            newEventChild = oldEventSnap.getNode().getImmediateChild(childKey);\n          }\n        } else {\n          newEventChild = writeTreeRefCalcCompleteChild(\n            writesCache,\n            childKey,\n            viewCache.serverCache\n          );\n        }\n        if (newEventChild != null) {\n          newEventCache = viewProcessor.filter.updateChild(\n            oldEventSnap.getNode(),\n            childKey,\n            newEventChild,\n            childChangePath,\n            source,\n            accumulator\n          );\n        } else {\n          // no complete child available or no change\n          newEventCache = oldEventSnap.getNode();\n        }\n      }\n    }\n    return viewCacheUpdateEventSnap(\n      viewCache,\n      newEventCache,\n      oldEventSnap.isFullyInitialized() || pathIsEmpty(changePath),\n      viewProcessor.filter.filtersNodes()\n    );\n  }\n}\n\nfunction viewProcessorApplyServerOverwrite(\n  viewProcessor: ViewProcessor,\n  oldViewCache: ViewCache,\n  changePath: Path,\n  changedSnap: Node,\n  writesCache: WriteTreeRef,\n  completeCache: Node | null,\n  filterServerNode: boolean,\n  accumulator: ChildChangeAccumulator\n): ViewCache {\n  const oldServerSnap = oldViewCache.serverCache;\n  let newServerCache;\n  const serverFilter = filterServerNode\n    ? viewProcessor.filter\n    : viewProcessor.filter.getIndexedFilter();\n  if (pathIsEmpty(changePath)) {\n    newServerCache = serverFilter.updateFullNode(\n      oldServerSnap.getNode(),\n      changedSnap,\n      null\n    );\n  } else if (serverFilter.filtersNodes() && !oldServerSnap.isFiltered()) {\n    // we want to filter the server node, but we didn't filter the server node yet, so simulate a full update\n    const newServerNode = oldServerSnap\n      .getNode()\n      .updateChild(changePath, changedSnap);\n    newServerCache = serverFilter.updateFullNode(\n      oldServerSnap.getNode(),\n      newServerNode,\n      null\n    );\n  } else {\n    const childKey = pathGetFront(changePath);\n    if (\n      !oldServerSnap.isCompleteForPath(changePath) &&\n      pathGetLength(changePath) > 1\n    ) {\n      // We don't update incomplete nodes with updates intended for other listeners\n      return oldViewCache;\n    }\n    const childChangePath = pathPopFront(changePath);\n    const childNode = oldServerSnap.getNode().getImmediateChild(childKey);\n    const newChildNode = childNode.updateChild(childChangePath, changedSnap);\n    if (childKey === '.priority') {\n      newServerCache = serverFilter.updatePriority(\n        oldServerSnap.getNode(),\n        newChildNode\n      );\n    } else {\n      newServerCache = serverFilter.updateChild(\n        oldServerSnap.getNode(),\n        childKey,\n        newChildNode,\n        childChangePath,\n        NO_COMPLETE_CHILD_SOURCE,\n        null\n      );\n    }\n  }\n  const newViewCache = viewCacheUpdateServerSnap(\n    oldViewCache,\n    newServerCache,\n    oldServerSnap.isFullyInitialized() || pathIsEmpty(changePath),\n    serverFilter.filtersNodes()\n  );\n  const source = new WriteTreeCompleteChildSource(\n    writesCache,\n    newViewCache,\n    completeCache\n  );\n  return viewProcessorGenerateEventCacheAfterServerEvent(\n    viewProcessor,\n    newViewCache,\n    changePath,\n    writesCache,\n    source,\n    accumulator\n  );\n}\n\nfunction viewProcessorApplyUserOverwrite(\n  viewProcessor: ViewProcessor,\n  oldViewCache: ViewCache,\n  changePath: Path,\n  changedSnap: Node,\n  writesCache: WriteTreeRef,\n  completeCache: Node | null,\n  accumulator: ChildChangeAccumulator\n): ViewCache {\n  const oldEventSnap = oldViewCache.eventCache;\n  let newViewCache, newEventCache;\n  const source = new WriteTreeCompleteChildSource(\n    writesCache,\n    oldViewCache,\n    completeCache\n  );\n  if (pathIsEmpty(changePath)) {\n    newEventCache = viewProcessor.filter.updateFullNode(\n      oldViewCache.eventCache.getNode(),\n      changedSnap,\n      accumulator\n    );\n    newViewCache = viewCacheUpdateEventSnap(\n      oldViewCache,\n      newEventCache,\n      true,\n      viewProcessor.filter.filtersNodes()\n    );\n  } else {\n    const childKey = pathGetFront(changePath);\n    if (childKey === '.priority') {\n      newEventCache = viewProcessor.filter.updatePriority(\n        oldViewCache.eventCache.getNode(),\n        changedSnap\n      );\n      newViewCache = viewCacheUpdateEventSnap(\n        oldViewCache,\n        newEventCache,\n        oldEventSnap.isFullyInitialized(),\n        oldEventSnap.isFiltered()\n      );\n    } else {\n      const childChangePath = pathPopFront(changePath);\n      const oldChild = oldEventSnap.getNode().getImmediateChild(childKey);\n      let newChild;\n      if (pathIsEmpty(childChangePath)) {\n        // Child overwrite, we can replace the child\n        newChild = changedSnap;\n      } else {\n        const childNode = source.getCompleteChild(childKey);\n        if (childNode != null) {\n          if (\n            pathGetBack(childChangePath) === '.priority' &&\n            childNode.getChild(pathParent(childChangePath)).isEmpty()\n          ) {\n            // This is a priority update on an empty node. If this node exists on the server, the\n            // server will send down the priority in the update, so ignore for now\n            newChild = childNode;\n          } else {\n            newChild = childNode.updateChild(childChangePath, changedSnap);\n          }\n        } else {\n          // There is no complete child node available\n          newChild = ChildrenNode.EMPTY_NODE;\n        }\n      }\n      if (!oldChild.equals(newChild)) {\n        const newEventSnap = viewProcessor.filter.updateChild(\n          oldEventSnap.getNode(),\n          childKey,\n          newChild,\n          childChangePath,\n          source,\n          accumulator\n        );\n        newViewCache = viewCacheUpdateEventSnap(\n          oldViewCache,\n          newEventSnap,\n          oldEventSnap.isFullyInitialized(),\n          viewProcessor.filter.filtersNodes()\n        );\n      } else {\n        newViewCache = oldViewCache;\n      }\n    }\n  }\n  return newViewCache;\n}\n\nfunction viewProcessorCacheHasChild(\n  viewCache: ViewCache,\n  childKey: string\n): boolean {\n  return viewCache.eventCache.isCompleteForChild(childKey);\n}\n\nfunction viewProcessorApplyUserMerge(\n  viewProcessor: ViewProcessor,\n  viewCache: ViewCache,\n  path: Path,\n  changedChildren: ImmutableTree<Node>,\n  writesCache: WriteTreeRef,\n  serverCache: Node | null,\n  accumulator: ChildChangeAccumulator\n): ViewCache {\n  // HACK: In the case of a limit query, there may be some changes that bump things out of the\n  // window leaving room for new items.  It's important we process these changes first, so we\n  // iterate the changes twice, first processing any that affect items currently in view.\n  // TODO: I consider an item \"in view\" if cacheHasChild is true, which checks both the server\n  // and event snap.  I'm not sure if this will result in edge cases when a child is in one but\n  // not the other.\n  let curViewCache = viewCache;\n  changedChildren.foreach((relativePath, childNode) => {\n    const writePath = pathChild(path, relativePath);\n    if (viewProcessorCacheHasChild(viewCache, pathGetFront(writePath))) {\n      curViewCache = viewProcessorApplyUserOverwrite(\n        viewProcessor,\n        curViewCache,\n        writePath,\n        childNode,\n        writesCache,\n        serverCache,\n        accumulator\n      );\n    }\n  });\n\n  changedChildren.foreach((relativePath, childNode) => {\n    const writePath = pathChild(path, relativePath);\n    if (!viewProcessorCacheHasChild(viewCache, pathGetFront(writePath))) {\n      curViewCache = viewProcessorApplyUserOverwrite(\n        viewProcessor,\n        curViewCache,\n        writePath,\n        childNode,\n        writesCache,\n        serverCache,\n        accumulator\n      );\n    }\n  });\n\n  return curViewCache;\n}\n\nfunction viewProcessorApplyMerge(\n  viewProcessor: ViewProcessor,\n  node: Node,\n  merge: ImmutableTree<Node>\n): Node {\n  merge.foreach((relativePath, childNode) => {\n    node = node.updateChild(relativePath, childNode);\n  });\n  return node;\n}\n\nfunction viewProcessorApplyServerMerge(\n  viewProcessor: ViewProcessor,\n  viewCache: ViewCache,\n  path: Path,\n  changedChildren: ImmutableTree<Node>,\n  writesCache: WriteTreeRef,\n  serverCache: Node | null,\n  filterServerNode: boolean,\n  accumulator: ChildChangeAccumulator\n): ViewCache {\n  // If we don't have a cache yet, this merge was intended for a previously listen in the same location. Ignore it and\n  // wait for the complete data update coming soon.\n  if (\n    viewCache.serverCache.getNode().isEmpty() &&\n    !viewCache.serverCache.isFullyInitialized()\n  ) {\n    return viewCache;\n  }\n\n  // HACK: In the case of a limit query, there may be some changes that bump things out of the\n  // window leaving room for new items.  It's important we process these changes first, so we\n  // iterate the changes twice, first processing any that affect items currently in view.\n  // TODO: I consider an item \"in view\" if cacheHasChild is true, which checks both the server\n  // and event snap.  I'm not sure if this will result in edge cases when a child is in one but\n  // not the other.\n  let curViewCache = viewCache;\n  let viewMergeTree;\n  if (pathIsEmpty(path)) {\n    viewMergeTree = changedChildren;\n  } else {\n    viewMergeTree = new ImmutableTree<Node>(null).setTree(\n      path,\n      changedChildren\n    );\n  }\n  const serverNode = viewCache.serverCache.getNode();\n  viewMergeTree.children.inorderTraversal((childKey, childTree) => {\n    if (serverNode.hasChild(childKey)) {\n      const serverChild = viewCache.serverCache\n        .getNode()\n        .getImmediateChild(childKey);\n      const newChild = viewProcessorApplyMerge(\n        viewProcessor,\n        serverChild,\n        childTree\n      );\n      curViewCache = viewProcessorApplyServerOverwrite(\n        viewProcessor,\n        curViewCache,\n        new Path(childKey),\n        newChild,\n        writesCache,\n        serverCache,\n        filterServerNode,\n        accumulator\n      );\n    }\n  });\n  viewMergeTree.children.inorderTraversal((childKey, childMergeTree) => {\n    const isUnknownDeepMerge =\n      !viewCache.serverCache.isCompleteForChild(childKey) &&\n      childMergeTree.value === undefined;\n    if (!serverNode.hasChild(childKey) && !isUnknownDeepMerge) {\n      const serverChild = viewCache.serverCache\n        .getNode()\n        .getImmediateChild(childKey);\n      const newChild = viewProcessorApplyMerge(\n        viewProcessor,\n        serverChild,\n        childMergeTree\n      );\n      curViewCache = viewProcessorApplyServerOverwrite(\n        viewProcessor,\n        curViewCache,\n        new Path(childKey),\n        newChild,\n        writesCache,\n        serverCache,\n        filterServerNode,\n        accumulator\n      );\n    }\n  });\n\n  return curViewCache;\n}\n\nfunction viewProcessorAckUserWrite(\n  viewProcessor: ViewProcessor,\n  viewCache: ViewCache,\n  ackPath: Path,\n  affectedTree: ImmutableTree<boolean>,\n  writesCache: WriteTreeRef,\n  completeCache: Node | null,\n  accumulator: ChildChangeAccumulator\n): ViewCache {\n  if (writeTreeRefShadowingWrite(writesCache, ackPath) != null) {\n    return viewCache;\n  }\n\n  // Only filter server node if it is currently filtered\n  const filterServerNode = viewCache.serverCache.isFiltered();\n\n  // Essentially we'll just get our existing server cache for the affected paths and re-apply it as a server update\n  // now that it won't be shadowed.\n  const serverCache = viewCache.serverCache;\n  if (affectedTree.value != null) {\n    // This is an overwrite.\n    if (\n      (pathIsEmpty(ackPath) && serverCache.isFullyInitialized()) ||\n      serverCache.isCompleteForPath(ackPath)\n    ) {\n      return viewProcessorApplyServerOverwrite(\n        viewProcessor,\n        viewCache,\n        ackPath,\n        serverCache.getNode().getChild(ackPath),\n        writesCache,\n        completeCache,\n        filterServerNode,\n        accumulator\n      );\n    } else if (pathIsEmpty(ackPath)) {\n      // This is a goofy edge case where we are acking data at this location but don't have full data.  We\n      // should just re-apply whatever we have in our cache as a merge.\n      let changedChildren = new ImmutableTree<Node>(null);\n      serverCache.getNode().forEachChild(KEY_INDEX, (name, node) => {\n        changedChildren = changedChildren.set(new Path(name), node);\n      });\n      return viewProcessorApplyServerMerge(\n        viewProcessor,\n        viewCache,\n        ackPath,\n        changedChildren,\n        writesCache,\n        completeCache,\n        filterServerNode,\n        accumulator\n      );\n    } else {\n      return viewCache;\n    }\n  } else {\n    // This is a merge.\n    let changedChildren = new ImmutableTree<Node>(null);\n    affectedTree.foreach((mergePath, value) => {\n      const serverCachePath = pathChild(ackPath, mergePath);\n      if (serverCache.isCompleteForPath(serverCachePath)) {\n        changedChildren = changedChildren.set(\n          mergePath,\n          serverCache.getNode().getChild(serverCachePath)\n        );\n      }\n    });\n    return viewProcessorApplyServerMerge(\n      viewProcessor,\n      viewCache,\n      ackPath,\n      changedChildren,\n      writesCache,\n      completeCache,\n      filterServerNode,\n      accumulator\n    );\n  }\n}\n\nfunction viewProcessorListenComplete(\n  viewProcessor: ViewProcessor,\n  viewCache: ViewCache,\n  path: Path,\n  writesCache: WriteTreeRef,\n  accumulator: ChildChangeAccumulator\n): ViewCache {\n  const oldServerNode = viewCache.serverCache;\n  const newViewCache = viewCacheUpdateServerSnap(\n    viewCache,\n    oldServerNode.getNode(),\n    oldServerNode.isFullyInitialized() || pathIsEmpty(path),\n    oldServerNode.isFiltered()\n  );\n  return viewProcessorGenerateEventCacheAfterServerEvent(\n    viewProcessor,\n    newViewCache,\n    path,\n    writesCache,\n    NO_COMPLETE_CHILD_SOURCE,\n    accumulator\n  );\n}\n\nfunction viewProcessorRevertUserWrite(\n  viewProcessor: ViewProcessor,\n  viewCache: ViewCache,\n  path: Path,\n  writesCache: WriteTreeRef,\n  completeServerCache: Node | null,\n  accumulator: ChildChangeAccumulator\n): ViewCache {\n  let complete;\n  if (writeTreeRefShadowingWrite(writesCache, path) != null) {\n    return viewCache;\n  } else {\n    const source = new WriteTreeCompleteChildSource(\n      writesCache,\n      viewCache,\n      completeServerCache\n    );\n    const oldEventCache = viewCache.eventCache.getNode();\n    let newEventCache;\n    if (pathIsEmpty(path) || pathGetFront(path) === '.priority') {\n      let newNode;\n      if (viewCache.serverCache.isFullyInitialized()) {\n        newNode = writeTreeRefCalcCompleteEventCache(\n          writesCache,\n          viewCacheGetCompleteServerSnap(viewCache)\n        );\n      } else {\n        const serverChildren = viewCache.serverCache.getNode();\n        assert(\n          serverChildren instanceof ChildrenNode,\n          'serverChildren would be complete if leaf node'\n        );\n        newNode = writeTreeRefCalcCompleteEventChildren(\n          writesCache,\n          serverChildren as ChildrenNode\n        );\n      }\n      newNode = newNode as Node;\n      newEventCache = viewProcessor.filter.updateFullNode(\n        oldEventCache,\n        newNode,\n        accumulator\n      );\n    } else {\n      const childKey = pathGetFront(path);\n      let newChild = writeTreeRefCalcCompleteChild(\n        writesCache,\n        childKey,\n        viewCache.serverCache\n      );\n      if (\n        newChild == null &&\n        viewCache.serverCache.isCompleteForChild(childKey)\n      ) {\n        newChild = oldEventCache.getImmediateChild(childKey);\n      }\n      if (newChild != null) {\n        newEventCache = viewProcessor.filter.updateChild(\n          oldEventCache,\n          childKey,\n          newChild,\n          pathPopFront(path),\n          source,\n          accumulator\n        );\n      } else if (viewCache.eventCache.getNode().hasChild(childKey)) {\n        // No complete child available, delete the existing one, if any\n        newEventCache = viewProcessor.filter.updateChild(\n          oldEventCache,\n          childKey,\n          ChildrenNode.EMPTY_NODE,\n          pathPopFront(path),\n          source,\n          accumulator\n        );\n      } else {\n        newEventCache = oldEventCache;\n      }\n      if (\n        newEventCache.isEmpty() &&\n        viewCache.serverCache.isFullyInitialized()\n      ) {\n        // We might have reverted all child writes. Maybe the old event was a leaf node\n        complete = writeTreeRefCalcCompleteEventCache(\n          writesCache,\n          viewCacheGetCompleteServerSnap(viewCache)\n        );\n        if (complete.isLeafNode()) {\n          newEventCache = viewProcessor.filter.updateFullNode(\n            newEventCache,\n            complete,\n            accumulator\n          );\n        }\n      }\n    }\n    complete =\n      viewCache.serverCache.isFullyInitialized() ||\n      writeTreeRefShadowingWrite(writesCache, newEmptyPath()) != null;\n    return viewCacheUpdateEventSnap(\n      viewCache,\n      newEventCache,\n      complete,\n      viewProcessor.filter.filtersNodes()\n    );\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { assert } from '@firebase/util';\n\nimport { Operation, OperationType } from '../operation/Operation';\nimport { ChildrenNode } from '../snap/ChildrenNode';\nimport { PRIORITY_INDEX } from '../snap/indexes/PriorityIndex';\nimport { Node } from '../snap/Node';\nimport { Path, pathGetFront, pathIsEmpty } from '../util/Path';\nimport { WriteTreeRef } from '../WriteTree';\n\nimport { CacheNode } from './CacheNode';\nimport { Change, changeChildAdded, changeValue } from './Change';\nimport { CancelEvent, Event } from './Event';\nimport {\n  EventGenerator,\n  eventGeneratorGenerateEventsForChanges\n} from './EventGenerator';\nimport { EventRegistration, QueryContext } from './EventRegistration';\nimport { IndexedFilter } from './filter/IndexedFilter';\nimport { queryParamsGetNodeFilter } from './QueryParams';\nimport {\n  newViewCache,\n  ViewCache,\n  viewCacheGetCompleteEventSnap,\n  viewCacheGetCompleteServerSnap\n} from './ViewCache';\nimport {\n  newViewProcessor,\n  ViewProcessor,\n  viewProcessorApplyOperation,\n  viewProcessorAssertIndexed\n} from './ViewProcessor';\n\n/**\n * A view represents a specific location and query that has 1 or more event registrations.\n *\n * It does several things:\n *  - Maintains the list of event registrations for this location/query.\n *  - Maintains a cache of the data visible for this location/query.\n *  - Applies new operations (via applyOperation), updates the cache, and based on the event\n *    registrations returns the set of events to be raised.\n */\nexport class View {\n  processor_: ViewProcessor;\n  viewCache_: ViewCache;\n  eventRegistrations_: EventRegistration[] = [];\n  eventGenerator_: EventGenerator;\n\n  constructor(private query_: QueryContext, initialViewCache: ViewCache) {\n    const params = this.query_._queryParams;\n\n    const indexFilter = new IndexedFilter(params.getIndex());\n    const filter = queryParamsGetNodeFilter(params);\n\n    this.processor_ = newViewProcessor(filter);\n\n    const initialServerCache = initialViewCache.serverCache;\n    const initialEventCache = initialViewCache.eventCache;\n\n    // Don't filter server node with other filter than index, wait for tagged listen\n    const serverSnap = indexFilter.updateFullNode(\n      ChildrenNode.EMPTY_NODE,\n      initialServerCache.getNode(),\n      null\n    );\n    const eventSnap = filter.updateFullNode(\n      ChildrenNode.EMPTY_NODE,\n      initialEventCache.getNode(),\n      null\n    );\n    const newServerCache = new CacheNode(\n      serverSnap,\n      initialServerCache.isFullyInitialized(),\n      indexFilter.filtersNodes()\n    );\n    const newEventCache = new CacheNode(\n      eventSnap,\n      initialEventCache.isFullyInitialized(),\n      filter.filtersNodes()\n    );\n\n    this.viewCache_ = newViewCache(newEventCache, newServerCache);\n    this.eventGenerator_ = new EventGenerator(this.query_);\n  }\n\n  get query(): QueryContext {\n    return this.query_;\n  }\n}\n\nexport function viewGetServerCache(view: View): Node | null {\n  return view.viewCache_.serverCache.getNode();\n}\n\nexport function viewGetCompleteNode(view: View): Node | null {\n  return viewCacheGetCompleteEventSnap(view.viewCache_);\n}\n\nexport function viewGetCompleteServerCache(\n  view: View,\n  path: Path\n): Node | null {\n  const cache = viewCacheGetCompleteServerSnap(view.viewCache_);\n  if (cache) {\n    // If this isn't a \"loadsAllData\" view, then cache isn't actually a complete cache and\n    // we need to see if it contains the child we're interested in.\n    if (\n      view.query._queryParams.loadsAllData() ||\n      (!pathIsEmpty(path) &&\n        !cache.getImmediateChild(pathGetFront(path)).isEmpty())\n    ) {\n      return cache.getChild(path);\n    }\n  }\n  return null;\n}\n\nexport function viewIsEmpty(view: View): boolean {\n  return view.eventRegistrations_.length === 0;\n}\n\nexport function viewAddEventRegistration(\n  view: View,\n  eventRegistration: EventRegistration\n) {\n  view.eventRegistrations_.push(eventRegistration);\n}\n\n/**\n * @param eventRegistration - If null, remove all callbacks.\n * @param cancelError - If a cancelError is provided, appropriate cancel events will be returned.\n * @returns Cancel events, if cancelError was provided.\n */\nexport function viewRemoveEventRegistration(\n  view: View,\n  eventRegistration: EventRegistration | null,\n  cancelError?: Error\n): Event[] {\n  const cancelEvents: CancelEvent[] = [];\n  if (cancelError) {\n    assert(\n      eventRegistration == null,\n      'A cancel should cancel all event registrations.'\n    );\n    const path = view.query._path;\n    view.eventRegistrations_.forEach(registration => {\n      const maybeEvent = registration.createCancelEvent(cancelError, path);\n      if (maybeEvent) {\n        cancelEvents.push(maybeEvent);\n      }\n    });\n  }\n\n  if (eventRegistration) {\n    let remaining = [];\n    for (let i = 0; i < view.eventRegistrations_.length; ++i) {\n      const existing = view.eventRegistrations_[i];\n      if (!existing.matches(eventRegistration)) {\n        remaining.push(existing);\n      } else if (eventRegistration.hasAnyCallback()) {\n        // We're removing just this one\n        remaining = remaining.concat(view.eventRegistrations_.slice(i + 1));\n        break;\n      }\n    }\n    view.eventRegistrations_ = remaining;\n  } else {\n    view.eventRegistrations_ = [];\n  }\n  return cancelEvents;\n}\n\n/**\n * Applies the given Operation, updates our cache, and returns the appropriate events.\n */\nexport function viewApplyOperation(\n  view: View,\n  operation: Operation,\n  writesCache: WriteTreeRef,\n  completeServerCache: Node | null\n): Event[] {\n  if (\n    operation.type === OperationType.MERGE &&\n    operation.source.queryId !== null\n  ) {\n    assert(\n      viewCacheGetCompleteServerSnap(view.viewCache_),\n      'We should always have a full cache before handling merges'\n    );\n    assert(\n      viewCacheGetCompleteEventSnap(view.viewCache_),\n      'Missing event cache, even though we have a server cache'\n    );\n  }\n\n  const oldViewCache = view.viewCache_;\n  const result = viewProcessorApplyOperation(\n    view.processor_,\n    oldViewCache,\n    operation,\n    writesCache,\n    completeServerCache\n  );\n  viewProcessorAssertIndexed(view.processor_, result.viewCache);\n\n  assert(\n    result.viewCache.serverCache.isFullyInitialized() ||\n      !oldViewCache.serverCache.isFullyInitialized(),\n    'Once a server snap is complete, it should never go back'\n  );\n\n  view.viewCache_ = result.viewCache;\n\n  return viewGenerateEventsForChanges_(\n    view,\n    result.changes,\n    result.viewCache.eventCache.getNode(),\n    null\n  );\n}\n\nexport function viewGetInitialEvents(\n  view: View,\n  registration: EventRegistration\n): Event[] {\n  const eventSnap = view.viewCache_.eventCache;\n  const initialChanges: Change[] = [];\n  if (!eventSnap.getNode().isLeafNode()) {\n    const eventNode = eventSnap.getNode() as ChildrenNode;\n    eventNode.forEachChild(PRIORITY_INDEX, (key, childNode) => {\n      initialChanges.push(changeChildAdded(key, childNode));\n    });\n  }\n  if (eventSnap.isFullyInitialized()) {\n    initialChanges.push(changeValue(eventSnap.getNode()));\n  }\n  return viewGenerateEventsForChanges_(\n    view,\n    initialChanges,\n    eventSnap.getNode(),\n    registration\n  );\n}\n\nfunction viewGenerateEventsForChanges_(\n  view: View,\n  changes: Change[],\n  eventCache: Node,\n  eventRegistration?: EventRegistration\n): Event[] {\n  const registrations = eventRegistration\n    ? [eventRegistration]\n    : view.eventRegistrations_;\n  return eventGeneratorGenerateEventsForChanges(\n    view.eventGenerator_,\n    changes,\n    eventCache,\n    registrations\n  );\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { assert } from '@firebase/util';\n\nimport { ReferenceConstructor } from '../exp/Reference';\n\nimport { Operation } from './operation/Operation';\nimport { ChildrenNode } from './snap/ChildrenNode';\nimport { Node } from './snap/Node';\nimport { Path } from './util/Path';\nimport { CacheNode } from './view/CacheNode';\nimport { Event } from './view/Event';\nimport { EventRegistration, QueryContext } from './view/EventRegistration';\nimport {\n  View,\n  viewAddEventRegistration,\n  viewApplyOperation,\n  viewGetCompleteServerCache,\n  viewGetInitialEvents,\n  viewIsEmpty,\n  viewRemoveEventRegistration\n} from './view/View';\nimport { newViewCache } from './view/ViewCache';\nimport {\n  WriteTreeRef,\n  writeTreeRefCalcCompleteEventCache,\n  writeTreeRefCalcCompleteEventChildren\n} from './WriteTree';\n\nlet referenceConstructor: ReferenceConstructor;\n\n/**\n * SyncPoint represents a single location in a SyncTree with 1 or more event registrations, meaning we need to\n * maintain 1 or more Views at this location to cache server data and raise appropriate events for server changes\n * and user writes (set, transaction, update).\n *\n * It's responsible for:\n *  - Maintaining the set of 1 or more views necessary at this location (a SyncPoint with 0 views should be removed).\n *  - Proxying user / server operations to the views as appropriate (i.e. applyServerOverwrite,\n *    applyUserOverwrite, etc.)\n */\nexport class SyncPoint {\n  /**\n   * The Views being tracked at this location in the tree, stored as a map where the key is a\n   * queryId and the value is the View for that query.\n   *\n   * NOTE: This list will be quite small (usually 1, but perhaps 2 or 3; any more is an odd use case).\n   */\n  readonly views: Map<string, View> = new Map();\n}\n\nexport function syncPointSetReferenceConstructor(\n  val: ReferenceConstructor\n): void {\n  assert(\n    !referenceConstructor,\n    '__referenceConstructor has already been defined'\n  );\n  referenceConstructor = val;\n}\n\nfunction syncPointGetReferenceConstructor(): ReferenceConstructor {\n  assert(referenceConstructor, 'Reference.ts has not been loaded');\n  return referenceConstructor;\n}\n\nexport function syncPointIsEmpty(syncPoint: SyncPoint): boolean {\n  return syncPoint.views.size === 0;\n}\n\nexport function syncPointApplyOperation(\n  syncPoint: SyncPoint,\n  operation: Operation,\n  writesCache: WriteTreeRef,\n  optCompleteServerCache: Node | null\n): Event[] {\n  const queryId = operation.source.queryId;\n  if (queryId !== null) {\n    const view = syncPoint.views.get(queryId);\n    assert(view != null, 'SyncTree gave us an op for an invalid query.');\n    return viewApplyOperation(\n      view,\n      operation,\n      writesCache,\n      optCompleteServerCache\n    );\n  } else {\n    let events: Event[] = [];\n\n    for (const view of syncPoint.views.values()) {\n      events = events.concat(\n        viewApplyOperation(view, operation, writesCache, optCompleteServerCache)\n      );\n    }\n\n    return events;\n  }\n}\n\n/**\n * Get a view for the specified query.\n *\n * @param query - The query to return a view for\n * @param writesCache\n * @param serverCache\n * @param serverCacheComplete\n * @returns Events to raise.\n */\nexport function syncPointGetView(\n  syncPoint: SyncPoint,\n  query: QueryContext,\n  writesCache: WriteTreeRef,\n  serverCache: Node | null,\n  serverCacheComplete: boolean\n): View {\n  const queryId = query._queryIdentifier;\n  const view = syncPoint.views.get(queryId);\n  if (!view) {\n    // TODO: make writesCache take flag for complete server node\n    let eventCache = writeTreeRefCalcCompleteEventCache(\n      writesCache,\n      serverCacheComplete ? serverCache : null\n    );\n    let eventCacheComplete = false;\n    if (eventCache) {\n      eventCacheComplete = true;\n    } else if (serverCache instanceof ChildrenNode) {\n      eventCache = writeTreeRefCalcCompleteEventChildren(\n        writesCache,\n        serverCache\n      );\n      eventCacheComplete = false;\n    } else {\n      eventCache = ChildrenNode.EMPTY_NODE;\n      eventCacheComplete = false;\n    }\n    const viewCache = newViewCache(\n      new CacheNode(eventCache, eventCacheComplete, false),\n      new CacheNode(serverCache, serverCacheComplete, false)\n    );\n    return new View(query, viewCache);\n  }\n  return view;\n}\n\n/**\n * Add an event callback for the specified query.\n *\n * @param query\n * @param eventRegistration\n * @param writesCache\n * @param serverCache - Complete server cache, if we have it.\n * @param serverCacheComplete\n * @returns Events to raise.\n */\nexport function syncPointAddEventRegistration(\n  syncPoint: SyncPoint,\n  query: QueryContext,\n  eventRegistration: EventRegistration,\n  writesCache: WriteTreeRef,\n  serverCache: Node | null,\n  serverCacheComplete: boolean\n): Event[] {\n  const view = syncPointGetView(\n    syncPoint,\n    query,\n    writesCache,\n    serverCache,\n    serverCacheComplete\n  );\n  if (!syncPoint.views.has(query._queryIdentifier)) {\n    syncPoint.views.set(query._queryIdentifier, view);\n  }\n  // This is guaranteed to exist now, we just created anything that was missing\n  viewAddEventRegistration(view, eventRegistration);\n  return viewGetInitialEvents(view, eventRegistration);\n}\n\n/**\n * Remove event callback(s).  Return cancelEvents if a cancelError is specified.\n *\n * If query is the default query, we'll check all views for the specified eventRegistration.\n * If eventRegistration is null, we'll remove all callbacks for the specified view(s).\n *\n * @param eventRegistration - If null, remove all callbacks.\n * @param cancelError - If a cancelError is provided, appropriate cancel events will be returned.\n * @returns removed queries and any cancel events\n */\nexport function syncPointRemoveEventRegistration(\n  syncPoint: SyncPoint,\n  query: QueryContext,\n  eventRegistration: EventRegistration | null,\n  cancelError?: Error\n): { removed: QueryContext[]; events: Event[] } {\n  const queryId = query._queryIdentifier;\n  const removed: QueryContext[] = [];\n  let cancelEvents: Event[] = [];\n  const hadCompleteView = syncPointHasCompleteView(syncPoint);\n  if (queryId === 'default') {\n    // When you do ref.off(...), we search all views for the registration to remove.\n    for (const [viewQueryId, view] of syncPoint.views.entries()) {\n      cancelEvents = cancelEvents.concat(\n        viewRemoveEventRegistration(view, eventRegistration, cancelError)\n      );\n      if (viewIsEmpty(view)) {\n        syncPoint.views.delete(viewQueryId);\n\n        // We'll deal with complete views later.\n        if (!view.query._queryParams.loadsAllData()) {\n          removed.push(view.query);\n        }\n      }\n    }\n  } else {\n    // remove the callback from the specific view.\n    const view = syncPoint.views.get(queryId);\n    if (view) {\n      cancelEvents = cancelEvents.concat(\n        viewRemoveEventRegistration(view, eventRegistration, cancelError)\n      );\n      if (viewIsEmpty(view)) {\n        syncPoint.views.delete(queryId);\n\n        // We'll deal with complete views later.\n        if (!view.query._queryParams.loadsAllData()) {\n          removed.push(view.query);\n        }\n      }\n    }\n  }\n\n  if (hadCompleteView && !syncPointHasCompleteView(syncPoint)) {\n    // We removed our last complete view.\n    removed.push(\n      new (syncPointGetReferenceConstructor())(query._repo, query._path)\n    );\n  }\n\n  return { removed, events: cancelEvents };\n}\n\nexport function syncPointGetQueryViews(syncPoint: SyncPoint): View[] {\n  const result = [];\n  for (const view of syncPoint.views.values()) {\n    if (!view.query._queryParams.loadsAllData()) {\n      result.push(view);\n    }\n  }\n  return result;\n}\n\n/**\n * @param path - The path to the desired complete snapshot\n * @returns A complete cache, if it exists\n */\nexport function syncPointGetCompleteServerCache(\n  syncPoint: SyncPoint,\n  path: Path\n): Node | null {\n  let serverCache: Node | null = null;\n  for (const view of syncPoint.views.values()) {\n    serverCache = serverCache || viewGetCompleteServerCache(view, path);\n  }\n  return serverCache;\n}\n\nexport function syncPointViewForQuery(\n  syncPoint: SyncPoint,\n  query: QueryContext\n): View | null {\n  const params = query._queryParams;\n  if (params.loadsAllData()) {\n    return syncPointGetCompleteView(syncPoint);\n  } else {\n    const queryId = query._queryIdentifier;\n    return syncPoint.views.get(queryId);\n  }\n}\n\nexport function syncPointViewExistsForQuery(\n  syncPoint: SyncPoint,\n  query: QueryContext\n): boolean {\n  return syncPointViewForQuery(syncPoint, query) != null;\n}\n\nexport function syncPointHasCompleteView(syncPoint: SyncPoint): boolean {\n  return syncPointGetCompleteView(syncPoint) != null;\n}\n\nexport function syncPointGetCompleteView(syncPoint: SyncPoint): View | null {\n  for (const view of syncPoint.views.values()) {\n    if (view.query._queryParams.loadsAllData()) {\n      return view;\n    }\n  }\n  return null;\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { assert } from '@firebase/util';\n\nimport { ReferenceConstructor } from '../exp/Reference';\n\nimport { AckUserWrite } from './operation/AckUserWrite';\nimport { ListenComplete } from './operation/ListenComplete';\nimport { Merge } from './operation/Merge';\nimport {\n  newOperationSourceServer,\n  newOperationSourceServerTaggedQuery,\n  newOperationSourceUser,\n  Operation\n} from './operation/Operation';\nimport { Overwrite } from './operation/Overwrite';\nimport { ChildrenNode } from './snap/ChildrenNode';\nimport { Node } from './snap/Node';\nimport {\n  SyncPoint,\n  syncPointAddEventRegistration,\n  syncPointApplyOperation,\n  syncPointGetCompleteServerCache,\n  syncPointGetCompleteView,\n  syncPointGetQueryViews,\n  syncPointGetView,\n  syncPointHasCompleteView,\n  syncPointIsEmpty,\n  syncPointRemoveEventRegistration,\n  syncPointViewExistsForQuery,\n  syncPointViewForQuery\n} from './SyncPoint';\nimport { ImmutableTree } from './util/ImmutableTree';\nimport {\n  newEmptyPath,\n  newRelativePath,\n  Path,\n  pathGetFront,\n  pathIsEmpty\n} from './util/Path';\nimport { each, errorForServerCode } from './util/util';\nimport { CacheNode } from './view/CacheNode';\nimport { Event } from './view/Event';\nimport { EventRegistration, QueryContext } from './view/EventRegistration';\nimport { View, viewGetCompleteNode, viewGetServerCache } from './view/View';\nimport {\n  newWriteTree,\n  WriteTree,\n  writeTreeAddMerge,\n  writeTreeAddOverwrite,\n  writeTreeCalcCompleteEventCache,\n  writeTreeChildWrites,\n  writeTreeGetWrite,\n  WriteTreeRef,\n  writeTreeRefChild,\n  writeTreeRemoveWrite\n} from './WriteTree';\n\nlet referenceConstructor: ReferenceConstructor;\n\nexport function syncTreeSetReferenceConstructor(\n  val: ReferenceConstructor\n): void {\n  assert(\n    !referenceConstructor,\n    '__referenceConstructor has already been defined'\n  );\n  referenceConstructor = val;\n}\n\nfunction syncTreeGetReferenceConstructor(): ReferenceConstructor {\n  assert(referenceConstructor, 'Reference.ts has not been loaded');\n  return referenceConstructor;\n}\n\nexport interface ListenProvider {\n  startListening(\n    query: QueryContext,\n    tag: number | null,\n    hashFn: () => string,\n    onComplete: (a: string, b?: unknown) => Event[]\n  ): Event[];\n\n  stopListening(a: QueryContext, b: number | null): void;\n}\n\n/**\n * Static tracker for next query tag.\n */\nlet syncTreeNextQueryTag_ = 1;\n\n/**\n * SyncTree is the central class for managing event callback registration, data caching, views\n * (query processing), and event generation.  There are typically two SyncTree instances for\n * each Repo, one for the normal Firebase data, and one for the .info data.\n *\n * It has a number of responsibilities, including:\n *  - Tracking all user event callbacks (registered via addEventRegistration() and removeEventRegistration()).\n *  - Applying and caching data changes for user set(), transaction(), and update() calls\n *    (applyUserOverwrite(), applyUserMerge()).\n *  - Applying and caching data changes for server data changes (applyServerOverwrite(),\n *    applyServerMerge()).\n *  - Generating user-facing events for server and user changes (all of the apply* methods\n *    return the set of events that need to be raised as a result).\n *  - Maintaining the appropriate set of server listens to ensure we are always subscribed\n *    to the correct set of paths and queries to satisfy the current set of user event\n *    callbacks (listens are started/stopped using the provided listenProvider).\n *\n * NOTE: Although SyncTree tracks event callbacks and calculates events to raise, the actual\n * events are returned to the caller rather than raised synchronously.\n *\n */\nexport class SyncTree {\n  /**\n   * Tree of SyncPoints.  There's a SyncPoint at any location that has 1 or more views.\n   */\n  syncPointTree_: ImmutableTree<SyncPoint> = new ImmutableTree<SyncPoint>(null);\n\n  /**\n   * A tree of all pending user writes (user-initiated set()'s, transaction()'s, update()'s, etc.).\n   */\n  pendingWriteTree_: WriteTree = newWriteTree();\n\n  readonly tagToQueryMap: Map<number, string> = new Map();\n  readonly queryToTagMap: Map<string, number> = new Map();\n\n  /**\n   * @param listenProvider_ - Used by SyncTree to start / stop listening\n   *   to server data.\n   */\n  constructor(public listenProvider_: ListenProvider) {}\n}\n\n/**\n * Apply the data changes for a user-generated set() or transaction() call.\n *\n * @returns Events to raise.\n */\nexport function syncTreeApplyUserOverwrite(\n  syncTree: SyncTree,\n  path: Path,\n  newData: Node,\n  writeId: number,\n  visible?: boolean\n): Event[] {\n  // Record pending write.\n  writeTreeAddOverwrite(\n    syncTree.pendingWriteTree_,\n    path,\n    newData,\n    writeId,\n    visible\n  );\n\n  if (!visible) {\n    return [];\n  } else {\n    return syncTreeApplyOperationToSyncPoints_(\n      syncTree,\n      new Overwrite(newOperationSourceUser(), path, newData)\n    );\n  }\n}\n\n/**\n * Apply the data from a user-generated update() call\n *\n * @returns Events to raise.\n */\nexport function syncTreeApplyUserMerge(\n  syncTree: SyncTree,\n  path: Path,\n  changedChildren: { [k: string]: Node },\n  writeId: number\n): Event[] {\n  // Record pending merge.\n  writeTreeAddMerge(syncTree.pendingWriteTree_, path, changedChildren, writeId);\n\n  const changeTree = ImmutableTree.fromObject(changedChildren);\n\n  return syncTreeApplyOperationToSyncPoints_(\n    syncTree,\n    new Merge(newOperationSourceUser(), path, changeTree)\n  );\n}\n\n/**\n * Acknowledge a pending user write that was previously registered with applyUserOverwrite() or applyUserMerge().\n *\n * @param revert - True if the given write failed and needs to be reverted\n * @returns Events to raise.\n */\nexport function syncTreeAckUserWrite(\n  syncTree: SyncTree,\n  writeId: number,\n  revert: boolean = false\n) {\n  const write = writeTreeGetWrite(syncTree.pendingWriteTree_, writeId);\n  const needToReevaluate = writeTreeRemoveWrite(\n    syncTree.pendingWriteTree_,\n    writeId\n  );\n  if (!needToReevaluate) {\n    return [];\n  } else {\n    let affectedTree = new ImmutableTree<boolean>(null);\n    if (write.snap != null) {\n      // overwrite\n      affectedTree = affectedTree.set(newEmptyPath(), true);\n    } else {\n      each(write.children, (pathString: string) => {\n        affectedTree = affectedTree.set(new Path(pathString), true);\n      });\n    }\n    return syncTreeApplyOperationToSyncPoints_(\n      syncTree,\n      new AckUserWrite(write.path, affectedTree, revert)\n    );\n  }\n}\n\n/**\n * Apply new server data for the specified path..\n *\n * @returns Events to raise.\n */\nexport function syncTreeApplyServerOverwrite(\n  syncTree: SyncTree,\n  path: Path,\n  newData: Node\n): Event[] {\n  return syncTreeApplyOperationToSyncPoints_(\n    syncTree,\n    new Overwrite(newOperationSourceServer(), path, newData)\n  );\n}\n\n/**\n * Apply new server data to be merged in at the specified path.\n *\n * @returns Events to raise.\n */\nexport function syncTreeApplyServerMerge(\n  syncTree: SyncTree,\n  path: Path,\n  changedChildren: { [k: string]: Node }\n): Event[] {\n  const changeTree = ImmutableTree.fromObject(changedChildren);\n\n  return syncTreeApplyOperationToSyncPoints_(\n    syncTree,\n    new Merge(newOperationSourceServer(), path, changeTree)\n  );\n}\n\n/**\n * Apply a listen complete for a query\n *\n * @returns Events to raise.\n */\nexport function syncTreeApplyListenComplete(\n  syncTree: SyncTree,\n  path: Path\n): Event[] {\n  return syncTreeApplyOperationToSyncPoints_(\n    syncTree,\n    new ListenComplete(newOperationSourceServer(), path)\n  );\n}\n\n/**\n * Apply a listen complete for a tagged query\n *\n * @returns Events to raise.\n */\nexport function syncTreeApplyTaggedListenComplete(\n  syncTree: SyncTree,\n  path: Path,\n  tag: number\n): Event[] {\n  const queryKey = syncTreeQueryKeyForTag_(syncTree, tag);\n  if (queryKey) {\n    const r = syncTreeParseQueryKey_(queryKey);\n    const queryPath = r.path,\n      queryId = r.queryId;\n    const relativePath = newRelativePath(queryPath, path);\n    const op = new ListenComplete(\n      newOperationSourceServerTaggedQuery(queryId),\n      relativePath\n    );\n    return syncTreeApplyTaggedOperation_(syncTree, queryPath, op);\n  } else {\n    // We've already removed the query. No big deal, ignore the update\n    return [];\n  }\n}\n\n/**\n * Remove event callback(s).\n *\n * If query is the default query, we'll check all queries for the specified eventRegistration.\n * If eventRegistration is null, we'll remove all callbacks for the specified query/queries.\n *\n * @param eventRegistration - If null, all callbacks are removed.\n * @param cancelError - If a cancelError is provided, appropriate cancel events will be returned.\n * @returns Cancel events, if cancelError was provided.\n */\nexport function syncTreeRemoveEventRegistration(\n  syncTree: SyncTree,\n  query: QueryContext,\n  eventRegistration: EventRegistration | null,\n  cancelError?: Error\n): Event[] {\n  // Find the syncPoint first. Then deal with whether or not it has matching listeners\n  const path = query._path;\n  const maybeSyncPoint = syncTree.syncPointTree_.get(path);\n  let cancelEvents: Event[] = [];\n  // A removal on a default query affects all queries at that location. A removal on an indexed query, even one without\n  // other query constraints, does *not* affect all queries at that location. So this check must be for 'default', and\n  // not loadsAllData().\n  if (\n    maybeSyncPoint &&\n    (query._queryIdentifier === 'default' ||\n      syncPointViewExistsForQuery(maybeSyncPoint, query))\n  ) {\n    const removedAndEvents = syncPointRemoveEventRegistration(\n      maybeSyncPoint,\n      query,\n      eventRegistration,\n      cancelError\n    );\n    if (syncPointIsEmpty(maybeSyncPoint)) {\n      syncTree.syncPointTree_ = syncTree.syncPointTree_.remove(path);\n    }\n    const removed = removedAndEvents.removed;\n    cancelEvents = removedAndEvents.events;\n    // We may have just removed one of many listeners and can short-circuit this whole process\n    // We may also not have removed a default listener, in which case all of the descendant listeners should already be\n    // properly set up.\n    //\n    // Since indexed queries can shadow if they don't have other query constraints, check for loadsAllData(), instead of\n    // queryId === 'default'\n    const removingDefault =\n      -1 !==\n      removed.findIndex(query => {\n        return query._queryParams.loadsAllData();\n      });\n    const covered = syncTree.syncPointTree_.findOnPath(\n      path,\n      (relativePath, parentSyncPoint) =>\n        syncPointHasCompleteView(parentSyncPoint)\n    );\n\n    if (removingDefault && !covered) {\n      const subtree = syncTree.syncPointTree_.subtree(path);\n      // There are potentially child listeners. Determine what if any listens we need to send before executing the\n      // removal\n      if (!subtree.isEmpty()) {\n        // We need to fold over our subtree and collect the listeners to send\n        const newViews = syncTreeCollectDistinctViewsForSubTree_(subtree);\n\n        // Ok, we've collected all the listens we need. Set them up.\n        for (let i = 0; i < newViews.length; ++i) {\n          const view = newViews[i],\n            newQuery = view.query;\n          const listener = syncTreeCreateListenerForView_(syncTree, view);\n          syncTree.listenProvider_.startListening(\n            syncTreeQueryForListening_(newQuery),\n            syncTreeTagForQuery_(syncTree, newQuery),\n            listener.hashFn,\n            listener.onComplete\n          );\n        }\n      } else {\n        // There's nothing below us, so nothing we need to start listening on\n      }\n    }\n    // If we removed anything and we're not covered by a higher up listen, we need to stop listening on this query\n    // The above block has us covered in terms of making sure we're set up on listens lower in the tree.\n    // Also, note that if we have a cancelError, it's already been removed at the provider level.\n    if (!covered && removed.length > 0 && !cancelError) {\n      // If we removed a default, then we weren't listening on any of the other queries here. Just cancel the one\n      // default. Otherwise, we need to iterate through and cancel each individual query\n      if (removingDefault) {\n        // We don't tag default listeners\n        const defaultTag: number | null = null;\n        syncTree.listenProvider_.stopListening(\n          syncTreeQueryForListening_(query),\n          defaultTag\n        );\n      } else {\n        removed.forEach((queryToRemove: QueryContext) => {\n          const tagToRemove = syncTree.queryToTagMap.get(\n            syncTreeMakeQueryKey_(queryToRemove)\n          );\n          syncTree.listenProvider_.stopListening(\n            syncTreeQueryForListening_(queryToRemove),\n            tagToRemove\n          );\n        });\n      }\n    }\n    // Now, clear all of the tags we're tracking for the removed listens\n    syncTreeRemoveTags_(syncTree, removed);\n  } else {\n    // No-op, this listener must've been already removed\n  }\n  return cancelEvents;\n}\n\n/**\n * Apply new server data for the specified tagged query.\n *\n * @returns Events to raise.\n */\nexport function syncTreeApplyTaggedQueryOverwrite(\n  syncTree: SyncTree,\n  path: Path,\n  snap: Node,\n  tag: number\n): Event[] {\n  const queryKey = syncTreeQueryKeyForTag_(syncTree, tag);\n  if (queryKey != null) {\n    const r = syncTreeParseQueryKey_(queryKey);\n    const queryPath = r.path,\n      queryId = r.queryId;\n    const relativePath = newRelativePath(queryPath, path);\n    const op = new Overwrite(\n      newOperationSourceServerTaggedQuery(queryId),\n      relativePath,\n      snap\n    );\n    return syncTreeApplyTaggedOperation_(syncTree, queryPath, op);\n  } else {\n    // Query must have been removed already\n    return [];\n  }\n}\n\n/**\n * Apply server data to be merged in for the specified tagged query.\n *\n * @returns Events to raise.\n */\nexport function syncTreeApplyTaggedQueryMerge(\n  syncTree: SyncTree,\n  path: Path,\n  changedChildren: { [k: string]: Node },\n  tag: number\n): Event[] {\n  const queryKey = syncTreeQueryKeyForTag_(syncTree, tag);\n  if (queryKey) {\n    const r = syncTreeParseQueryKey_(queryKey);\n    const queryPath = r.path,\n      queryId = r.queryId;\n    const relativePath = newRelativePath(queryPath, path);\n    const changeTree = ImmutableTree.fromObject(changedChildren);\n    const op = new Merge(\n      newOperationSourceServerTaggedQuery(queryId),\n      relativePath,\n      changeTree\n    );\n    return syncTreeApplyTaggedOperation_(syncTree, queryPath, op);\n  } else {\n    // We've already removed the query. No big deal, ignore the update\n    return [];\n  }\n}\n\n/**\n * Add an event callback for the specified query.\n *\n * @returns Events to raise.\n */\nexport function syncTreeAddEventRegistration(\n  syncTree: SyncTree,\n  query: QueryContext,\n  eventRegistration: EventRegistration\n): Event[] {\n  const path = query._path;\n\n  let serverCache: Node | null = null;\n  let foundAncestorDefaultView = false;\n  // Any covering writes will necessarily be at the root, so really all we need to find is the server cache.\n  // Consider optimizing this once there's a better understanding of what actual behavior will be.\n  syncTree.syncPointTree_.foreachOnPath(path, (pathToSyncPoint, sp) => {\n    const relativePath = newRelativePath(pathToSyncPoint, path);\n    serverCache =\n      serverCache || syncPointGetCompleteServerCache(sp, relativePath);\n    foundAncestorDefaultView =\n      foundAncestorDefaultView || syncPointHasCompleteView(sp);\n  });\n  let syncPoint = syncTree.syncPointTree_.get(path);\n  if (!syncPoint) {\n    syncPoint = new SyncPoint();\n    syncTree.syncPointTree_ = syncTree.syncPointTree_.set(path, syncPoint);\n  } else {\n    foundAncestorDefaultView =\n      foundAncestorDefaultView || syncPointHasCompleteView(syncPoint);\n    serverCache =\n      serverCache || syncPointGetCompleteServerCache(syncPoint, newEmptyPath());\n  }\n\n  let serverCacheComplete;\n  if (serverCache != null) {\n    serverCacheComplete = true;\n  } else {\n    serverCacheComplete = false;\n    serverCache = ChildrenNode.EMPTY_NODE;\n    const subtree = syncTree.syncPointTree_.subtree(path);\n    subtree.foreachChild((childName, childSyncPoint) => {\n      const completeCache = syncPointGetCompleteServerCache(\n        childSyncPoint,\n        newEmptyPath()\n      );\n      if (completeCache) {\n        serverCache = serverCache.updateImmediateChild(\n          childName,\n          completeCache\n        );\n      }\n    });\n  }\n\n  const viewAlreadyExists = syncPointViewExistsForQuery(syncPoint, query);\n  if (!viewAlreadyExists && !query._queryParams.loadsAllData()) {\n    // We need to track a tag for this query\n    const queryKey = syncTreeMakeQueryKey_(query);\n    assert(\n      !syncTree.queryToTagMap.has(queryKey),\n      'View does not exist, but we have a tag'\n    );\n    const tag = syncTreeGetNextQueryTag_();\n    syncTree.queryToTagMap.set(queryKey, tag);\n    syncTree.tagToQueryMap.set(tag, queryKey);\n  }\n  const writesCache = writeTreeChildWrites(syncTree.pendingWriteTree_, path);\n  let events = syncPointAddEventRegistration(\n    syncPoint,\n    query,\n    eventRegistration,\n    writesCache,\n    serverCache,\n    serverCacheComplete\n  );\n  if (!viewAlreadyExists && !foundAncestorDefaultView) {\n    const view = syncPointViewForQuery(syncPoint, query);\n    events = events.concat(syncTreeSetupListener_(syncTree, query, view));\n  }\n  return events;\n}\n\n/**\n * Returns a complete cache, if we have one, of the data at a particular path. If the location does not have a\n * listener above it, we will get a false \"null\". This shouldn't be a problem because transactions will always\n * have a listener above, and atomic operations would correctly show a jitter of <increment value> ->\n *     <incremented total> as the write is applied locally and then acknowledged at the server.\n *\n * Note: this method will *include* hidden writes from transaction with applyLocally set to false.\n *\n * @param path - The path to the data we want\n * @param writeIdsToExclude - A specific set to be excluded\n */\nexport function syncTreeCalcCompleteEventCache(\n  syncTree: SyncTree,\n  path: Path,\n  writeIdsToExclude?: number[]\n): Node {\n  const includeHiddenSets = true;\n  const writeTree = syncTree.pendingWriteTree_;\n  const serverCache = syncTree.syncPointTree_.findOnPath(\n    path,\n    (pathSoFar, syncPoint) => {\n      const relativePath = newRelativePath(pathSoFar, path);\n      const serverCache = syncPointGetCompleteServerCache(\n        syncPoint,\n        relativePath\n      );\n      if (serverCache) {\n        return serverCache;\n      }\n    }\n  );\n  return writeTreeCalcCompleteEventCache(\n    writeTree,\n    path,\n    serverCache,\n    writeIdsToExclude,\n    includeHiddenSets\n  );\n}\n\nexport function syncTreeGetServerValue(\n  syncTree: SyncTree,\n  query: QueryContext\n): Node | null {\n  const path = query._path;\n  let serverCache: Node | null = null;\n  // Any covering writes will necessarily be at the root, so really all we need to find is the server cache.\n  // Consider optimizing this once there's a better understanding of what actual behavior will be.\n  syncTree.syncPointTree_.foreachOnPath(path, (pathToSyncPoint, sp) => {\n    const relativePath = newRelativePath(pathToSyncPoint, path);\n    serverCache =\n      serverCache || syncPointGetCompleteServerCache(sp, relativePath);\n  });\n  let syncPoint = syncTree.syncPointTree_.get(path);\n  if (!syncPoint) {\n    syncPoint = new SyncPoint();\n    syncTree.syncPointTree_ = syncTree.syncPointTree_.set(path, syncPoint);\n  } else {\n    serverCache =\n      serverCache || syncPointGetCompleteServerCache(syncPoint, newEmptyPath());\n  }\n  const serverCacheComplete = serverCache != null;\n  const serverCacheNode: CacheNode | null = serverCacheComplete\n    ? new CacheNode(serverCache, true, false)\n    : null;\n  const writesCache: WriteTreeRef | null = writeTreeChildWrites(\n    syncTree.pendingWriteTree_,\n    query._path\n  );\n  const view: View = syncPointGetView(\n    syncPoint,\n    query,\n    writesCache,\n    serverCacheComplete ? serverCacheNode.getNode() : ChildrenNode.EMPTY_NODE,\n    serverCacheComplete\n  );\n  return viewGetCompleteNode(view);\n}\n\n/**\n * A helper method that visits all descendant and ancestor SyncPoints, applying the operation.\n *\n * NOTES:\n * - Descendant SyncPoints will be visited first (since we raise events depth-first).\n *\n * - We call applyOperation() on each SyncPoint passing three things:\n *   1. A version of the Operation that has been made relative to the SyncPoint location.\n *   2. A WriteTreeRef of any writes we have cached at the SyncPoint location.\n *   3. A snapshot Node with cached server data, if we have it.\n *\n * - We concatenate all of the events returned by each SyncPoint and return the result.\n */\nfunction syncTreeApplyOperationToSyncPoints_(\n  syncTree: SyncTree,\n  operation: Operation\n): Event[] {\n  return syncTreeApplyOperationHelper_(\n    operation,\n    syncTree.syncPointTree_,\n    /*serverCache=*/ null,\n    writeTreeChildWrites(syncTree.pendingWriteTree_, newEmptyPath())\n  );\n}\n\n/**\n * Recursive helper for applyOperationToSyncPoints_\n */\nfunction syncTreeApplyOperationHelper_(\n  operation: Operation,\n  syncPointTree: ImmutableTree<SyncPoint>,\n  serverCache: Node | null,\n  writesCache: WriteTreeRef\n): Event[] {\n  if (pathIsEmpty(operation.path)) {\n    return syncTreeApplyOperationDescendantsHelper_(\n      operation,\n      syncPointTree,\n      serverCache,\n      writesCache\n    );\n  } else {\n    const syncPoint = syncPointTree.get(newEmptyPath());\n\n    // If we don't have cached server data, see if we can get it from this SyncPoint.\n    if (serverCache == null && syncPoint != null) {\n      serverCache = syncPointGetCompleteServerCache(syncPoint, newEmptyPath());\n    }\n\n    let events: Event[] = [];\n    const childName = pathGetFront(operation.path);\n    const childOperation = operation.operationForChild(childName);\n    const childTree = syncPointTree.children.get(childName);\n    if (childTree && childOperation) {\n      const childServerCache = serverCache\n        ? serverCache.getImmediateChild(childName)\n        : null;\n      const childWritesCache = writeTreeRefChild(writesCache, childName);\n      events = events.concat(\n        syncTreeApplyOperationHelper_(\n          childOperation,\n          childTree,\n          childServerCache,\n          childWritesCache\n        )\n      );\n    }\n\n    if (syncPoint) {\n      events = events.concat(\n        syncPointApplyOperation(syncPoint, operation, writesCache, serverCache)\n      );\n    }\n\n    return events;\n  }\n}\n\n/**\n * Recursive helper for applyOperationToSyncPoints_\n */\nfunction syncTreeApplyOperationDescendantsHelper_(\n  operation: Operation,\n  syncPointTree: ImmutableTree<SyncPoint>,\n  serverCache: Node | null,\n  writesCache: WriteTreeRef\n): Event[] {\n  const syncPoint = syncPointTree.get(newEmptyPath());\n\n  // If we don't have cached server data, see if we can get it from this SyncPoint.\n  if (serverCache == null && syncPoint != null) {\n    serverCache = syncPointGetCompleteServerCache(syncPoint, newEmptyPath());\n  }\n\n  let events: Event[] = [];\n  syncPointTree.children.inorderTraversal((childName, childTree) => {\n    const childServerCache = serverCache\n      ? serverCache.getImmediateChild(childName)\n      : null;\n    const childWritesCache = writeTreeRefChild(writesCache, childName);\n    const childOperation = operation.operationForChild(childName);\n    if (childOperation) {\n      events = events.concat(\n        syncTreeApplyOperationDescendantsHelper_(\n          childOperation,\n          childTree,\n          childServerCache,\n          childWritesCache\n        )\n      );\n    }\n  });\n\n  if (syncPoint) {\n    events = events.concat(\n      syncPointApplyOperation(syncPoint, operation, writesCache, serverCache)\n    );\n  }\n\n  return events;\n}\n\nfunction syncTreeCreateListenerForView_(\n  syncTree: SyncTree,\n  view: View\n): { hashFn(): string; onComplete(a: string, b?: unknown): Event[] } {\n  const query = view.query;\n  const tag = syncTreeTagForQuery_(syncTree, query);\n\n  return {\n    hashFn: () => {\n      const cache = viewGetServerCache(view) || ChildrenNode.EMPTY_NODE;\n      return cache.hash();\n    },\n    onComplete: (status: string): Event[] => {\n      if (status === 'ok') {\n        if (tag) {\n          return syncTreeApplyTaggedListenComplete(syncTree, query._path, tag);\n        } else {\n          return syncTreeApplyListenComplete(syncTree, query._path);\n        }\n      } else {\n        // If a listen failed, kill all of the listeners here, not just the one that triggered the error.\n        // Note that this may need to be scoped to just this listener if we change permissions on filtered children\n        const error = errorForServerCode(status, query);\n        return syncTreeRemoveEventRegistration(\n          syncTree,\n          query,\n          /*eventRegistration*/ null,\n          error\n        );\n      }\n    }\n  };\n}\n\n/**\n * Return the tag associated with the given query.\n */\nfunction syncTreeTagForQuery_(\n  syncTree: SyncTree,\n  query: QueryContext\n): number | null {\n  const queryKey = syncTreeMakeQueryKey_(query);\n  return syncTree.queryToTagMap.get(queryKey);\n}\n\n/**\n * Given a query, computes a \"queryKey\" suitable for use in our queryToTagMap_.\n */\nfunction syncTreeMakeQueryKey_(query: QueryContext): string {\n  return query._path.toString() + '$' + query._queryIdentifier;\n}\n\n/**\n * Return the query associated with the given tag, if we have one\n */\nfunction syncTreeQueryKeyForTag_(\n  syncTree: SyncTree,\n  tag: number\n): string | null {\n  return syncTree.tagToQueryMap.get(tag);\n}\n\n/**\n * Given a queryKey (created by makeQueryKey), parse it back into a path and queryId.\n */\nfunction syncTreeParseQueryKey_(\n  queryKey: string\n): { queryId: string; path: Path } {\n  const splitIndex = queryKey.indexOf('$');\n  assert(\n    splitIndex !== -1 && splitIndex < queryKey.length - 1,\n    'Bad queryKey.'\n  );\n  return {\n    queryId: queryKey.substr(splitIndex + 1),\n    path: new Path(queryKey.substr(0, splitIndex))\n  };\n}\n\n/**\n * A helper method to apply tagged operations\n */\nfunction syncTreeApplyTaggedOperation_(\n  syncTree: SyncTree,\n  queryPath: Path,\n  operation: Operation\n): Event[] {\n  const syncPoint = syncTree.syncPointTree_.get(queryPath);\n  assert(syncPoint, \"Missing sync point for query tag that we're tracking\");\n  const writesCache = writeTreeChildWrites(\n    syncTree.pendingWriteTree_,\n    queryPath\n  );\n  return syncPointApplyOperation(syncPoint, operation, writesCache, null);\n}\n\n/**\n * This collapses multiple unfiltered views into a single view, since we only need a single\n * listener for them.\n */\nfunction syncTreeCollectDistinctViewsForSubTree_(\n  subtree: ImmutableTree<SyncPoint>\n): View[] {\n  return subtree.fold<View[]>((relativePath, maybeChildSyncPoint, childMap) => {\n    if (maybeChildSyncPoint && syncPointHasCompleteView(maybeChildSyncPoint)) {\n      const completeView = syncPointGetCompleteView(maybeChildSyncPoint);\n      return [completeView];\n    } else {\n      // No complete view here, flatten any deeper listens into an array\n      let views: View[] = [];\n      if (maybeChildSyncPoint) {\n        views = syncPointGetQueryViews(maybeChildSyncPoint);\n      }\n      each(childMap, (_key: string, childViews: View[]) => {\n        views = views.concat(childViews);\n      });\n      return views;\n    }\n  });\n}\n\n/**\n * Normalizes a query to a query we send the server for listening\n *\n * @returns The normalized query\n */\nfunction syncTreeQueryForListening_(query: QueryContext): QueryContext {\n  if (query._queryParams.loadsAllData() && !query._queryParams.isDefault()) {\n    // We treat queries that load all data as default queries\n    // Cast is necessary because ref() technically returns Firebase which is actually fb.api.Firebase which inherits\n    // from Query\n    return new (syncTreeGetReferenceConstructor())(query._repo, query._path);\n  } else {\n    return query;\n  }\n}\n\nfunction syncTreeRemoveTags_(syncTree: SyncTree, queries: QueryContext[]) {\n  for (let j = 0; j < queries.length; ++j) {\n    const removedQuery = queries[j];\n    if (!removedQuery._queryParams.loadsAllData()) {\n      // We should have a tag for this\n      const removedQueryKey = syncTreeMakeQueryKey_(removedQuery);\n      const removedQueryTag = syncTree.queryToTagMap.get(removedQueryKey);\n      syncTree.queryToTagMap.delete(removedQueryKey);\n      syncTree.tagToQueryMap.delete(removedQueryTag);\n    }\n  }\n}\n\n/**\n * Static accessor for query tags.\n */\nfunction syncTreeGetNextQueryTag_(): number {\n  return syncTreeNextQueryTag_++;\n}\n\n/**\n * For a given new listen, manage the de-duplication of outstanding subscriptions.\n *\n * @returns This method can return events to support synchronous data sources\n */\nfunction syncTreeSetupListener_(\n  syncTree: SyncTree,\n  query: QueryContext,\n  view: View\n): Event[] {\n  const path = query._path;\n  const tag = syncTreeTagForQuery_(syncTree, query);\n  const listener = syncTreeCreateListenerForView_(syncTree, view);\n\n  const events = syncTree.listenProvider_.startListening(\n    syncTreeQueryForListening_(query),\n    tag,\n    listener.hashFn,\n    listener.onComplete\n  );\n\n  const subtree = syncTree.syncPointTree_.subtree(path);\n  // The root of this subtree has our query. We're here because we definitely need to send a listen for that, but we\n  // may need to shadow other listens as well.\n  if (tag) {\n    assert(\n      !syncPointHasCompleteView(subtree.value),\n      \"If we're adding a query, it shouldn't be shadowed\"\n    );\n  } else {\n    // Shadow everything at or below this location, this is a default listener.\n    const queriesToStop = subtree.fold<QueryContext[]>(\n      (relativePath, maybeChildSyncPoint, childMap) => {\n        if (\n          !pathIsEmpty(relativePath) &&\n          maybeChildSyncPoint &&\n          syncPointHasCompleteView(maybeChildSyncPoint)\n        ) {\n          return [syncPointGetCompleteView(maybeChildSyncPoint).query];\n        } else {\n          // No default listener here, flatten any deeper queries into an array\n          let queries: QueryContext[] = [];\n          if (maybeChildSyncPoint) {\n            queries = queries.concat(\n              syncPointGetQueryViews(maybeChildSyncPoint).map(\n                view => view.query\n              )\n            );\n          }\n          each(childMap, (_key: string, childQueries: QueryContext[]) => {\n            queries = queries.concat(childQueries);\n          });\n          return queries;\n        }\n      }\n    );\n    for (let i = 0; i < queriesToStop.length; ++i) {\n      const queryToStop = queriesToStop[i];\n      syncTree.listenProvider_.stopListening(\n        syncTreeQueryForListening_(queryToStop),\n        syncTreeTagForQuery_(syncTree, queryToStop)\n      );\n    }\n  }\n  return events;\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { assert } from '@firebase/util';\n\nimport { ChildrenNode } from '../snap/ChildrenNode';\nimport { PRIORITY_INDEX } from '../snap/indexes/PriorityIndex';\nimport { LeafNode } from '../snap/LeafNode';\nimport { Node } from '../snap/Node';\nimport { nodeFromJSON } from '../snap/nodeFromJSON';\nimport { SyncTree, syncTreeCalcCompleteEventCache } from '../SyncTree';\n\nimport { Indexable } from './misc';\nimport { Path, pathChild } from './Path';\n\n/* It's critical for performance that we do not calculate actual values from a SyncTree\n * unless and until the value is needed. Because we expose both a SyncTree and Node\n * version of deferred value resolution, we ned a wrapper class that will let us share\n * code.\n *\n * @see https://github.com/firebase/firebase-js-sdk/issues/2487\n */\ninterface ValueProvider {\n  getImmediateChild(childName: string): ValueProvider;\n  node(): Node;\n}\n\nclass ExistingValueProvider implements ValueProvider {\n  constructor(readonly node_: Node) {}\n\n  getImmediateChild(childName: string): ValueProvider {\n    const child = this.node_.getImmediateChild(childName);\n    return new ExistingValueProvider(child);\n  }\n\n  node(): Node {\n    return this.node_;\n  }\n}\n\nclass DeferredValueProvider implements ValueProvider {\n  private syncTree_: SyncTree;\n  private path_: Path;\n\n  constructor(syncTree: SyncTree, path: Path) {\n    this.syncTree_ = syncTree;\n    this.path_ = path;\n  }\n\n  getImmediateChild(childName: string): ValueProvider {\n    const childPath = pathChild(this.path_, childName);\n    return new DeferredValueProvider(this.syncTree_, childPath);\n  }\n\n  node(): Node {\n    return syncTreeCalcCompleteEventCache(this.syncTree_, this.path_);\n  }\n}\n\n/**\n * Generate placeholders for deferred values.\n */\nexport const generateWithValues = function (\n  values: {\n    [k: string]: unknown;\n  } | null\n): { [k: string]: unknown } {\n  values = values || {};\n  values['timestamp'] = values['timestamp'] || new Date().getTime();\n  return values;\n};\n\n/**\n * Value to use when firing local events. When writing server values, fire\n * local events with an approximate value, otherwise return value as-is.\n */\nexport const resolveDeferredLeafValue = function (\n  value: { [k: string]: unknown } | string | number | boolean,\n  existingVal: ValueProvider,\n  serverValues: { [k: string]: unknown }\n): string | number | boolean {\n  if (!value || typeof value !== 'object') {\n    return value as string | number | boolean;\n  }\n  assert('.sv' in value, 'Unexpected leaf node or priority contents');\n\n  if (typeof value['.sv'] === 'string') {\n    return resolveScalarDeferredValue(value['.sv'], existingVal, serverValues);\n  } else if (typeof value['.sv'] === 'object') {\n    return resolveComplexDeferredValue(value['.sv'], existingVal, serverValues);\n  } else {\n    assert(false, 'Unexpected server value: ' + JSON.stringify(value, null, 2));\n  }\n};\n\nconst resolveScalarDeferredValue = function (\n  op: string,\n  existing: ValueProvider,\n  serverValues: { [k: string]: unknown }\n): string | number | boolean {\n  switch (op) {\n    case 'timestamp':\n      return serverValues['timestamp'] as string | number | boolean;\n    default:\n      assert(false, 'Unexpected server value: ' + op);\n  }\n};\n\nconst resolveComplexDeferredValue = function (\n  op: object,\n  existing: ValueProvider,\n  unused: { [k: string]: unknown }\n): string | number | boolean {\n  if (!op.hasOwnProperty('increment')) {\n    assert(false, 'Unexpected server value: ' + JSON.stringify(op, null, 2));\n  }\n  const delta = op['increment'];\n  if (typeof delta !== 'number') {\n    assert(false, 'Unexpected increment value: ' + delta);\n  }\n\n  const existingNode = existing.node();\n  assert(\n    existingNode !== null && typeof existingNode !== 'undefined',\n    'Expected ChildrenNode.EMPTY_NODE for nulls'\n  );\n\n  // Incrementing a non-number sets the value to the incremented amount\n  if (!existingNode.isLeafNode()) {\n    return delta;\n  }\n\n  const leaf = existingNode as LeafNode;\n  const existingVal = leaf.getValue();\n  if (typeof existingVal !== 'number') {\n    return delta;\n  }\n\n  // No need to do over/underflow arithmetic here because JS only handles floats under the covers\n  return existingVal + delta;\n};\n\n/**\n * Recursively replace all deferred values and priorities in the tree with the\n * specified generated replacement values.\n * @param path - path to which write is relative\n * @param node - new data written at path\n * @param syncTree - current data\n */\nexport const resolveDeferredValueTree = function (\n  path: Path,\n  node: Node,\n  syncTree: SyncTree,\n  serverValues: Indexable\n): Node {\n  return resolveDeferredValue(\n    node,\n    new DeferredValueProvider(syncTree, path),\n    serverValues\n  );\n};\n\n/**\n * Recursively replace all deferred values and priorities in the node with the\n * specified generated replacement values.  If there are no server values in the node,\n * it'll be returned as-is.\n */\nexport const resolveDeferredValueSnapshot = function (\n  node: Node,\n  existing: Node,\n  serverValues: Indexable\n): Node {\n  return resolveDeferredValue(\n    node,\n    new ExistingValueProvider(existing),\n    serverValues\n  );\n};\n\nfunction resolveDeferredValue(\n  node: Node,\n  existingVal: ValueProvider,\n  serverValues: Indexable\n): Node {\n  const rawPri = node.getPriority().val() as\n    | Indexable\n    | boolean\n    | null\n    | number\n    | string;\n  const priority = resolveDeferredLeafValue(\n    rawPri,\n    existingVal.getImmediateChild('.priority'),\n    serverValues\n  );\n  let newNode: Node;\n\n  if (node.isLeafNode()) {\n    const leafNode = node as LeafNode;\n    const value = resolveDeferredLeafValue(\n      leafNode.getValue(),\n      existingVal,\n      serverValues\n    );\n    if (\n      value !== leafNode.getValue() ||\n      priority !== leafNode.getPriority().val()\n    ) {\n      return new LeafNode(value, nodeFromJSON(priority));\n    } else {\n      return node;\n    }\n  } else {\n    const childrenNode = node as ChildrenNode;\n    newNode = childrenNode;\n    if (priority !== childrenNode.getPriority().val()) {\n      newNode = newNode.updatePriority(new LeafNode(priority));\n    }\n    childrenNode.forEachChild(PRIORITY_INDEX, (childName, childNode) => {\n      const newChildNode = resolveDeferredValue(\n        childNode,\n        existingVal.getImmediateChild(childName),\n        serverValues\n      );\n      if (newChildNode !== childNode) {\n        newNode = newNode.updateImmediateChild(childName, newChildNode);\n      }\n    });\n    return newNode;\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { contains, safeGet } from '@firebase/util';\n\nimport { Path, pathGetFront, pathPopFront } from './Path';\nimport { each } from './util';\n\n/**\n * Node in a Tree.\n */\nexport interface TreeNode<T> {\n  // TODO: Consider making accessors that create children and value lazily or\n  // separate Internal / Leaf 'types'.\n  children: Record<string, TreeNode<T>>;\n  childCount: number;\n  value?: T;\n}\n\n/**\n * A light-weight tree, traversable by path.  Nodes can have both values and children.\n * Nodes are not enumerated (by forEachChild) unless they have a value or non-empty\n * children.\n */\nexport class Tree<T> {\n  /**\n   * @param name - Optional name of the node.\n   * @param parent - Optional parent node.\n   * @param node - Optional node to wrap.\n   */\n  constructor(\n    readonly name: string = '',\n    readonly parent: Tree<T> | null = null,\n    public node: TreeNode<T> = { children: {}, childCount: 0 }\n  ) {}\n}\n\n/**\n * Returns a sub-Tree for the given path.\n *\n * @param pathObj - Path to look up.\n * @returns Tree for path.\n */\nexport function treeSubTree<T>(tree: Tree<T>, pathObj: string | Path): Tree<T> {\n  // TODO: Require pathObj to be Path?\n  let path = pathObj instanceof Path ? pathObj : new Path(pathObj);\n  let child = tree,\n    next = pathGetFront(path);\n  while (next !== null) {\n    const childNode = safeGet(child.node.children, next) || {\n      children: {},\n      childCount: 0\n    };\n    child = new Tree<T>(next, child, childNode);\n    path = pathPopFront(path);\n    next = pathGetFront(path);\n  }\n\n  return child;\n}\n\n/**\n * Returns the data associated with this tree node.\n *\n * @returns The data or null if no data exists.\n */\nexport function treeGetValue<T>(tree: Tree<T>): T | undefined {\n  return tree.node.value;\n}\n\n/**\n * Sets data to this tree node.\n *\n * @param value - Value to set.\n */\nexport function treeSetValue<T>(tree: Tree<T>, value: T | undefined): void {\n  tree.node.value = value;\n  treeUpdateParents(tree);\n}\n\n/**\n * @returns Whether the tree has any children.\n */\nexport function treeHasChildren<T>(tree: Tree<T>): boolean {\n  return tree.node.childCount > 0;\n}\n\n/**\n * @returns Whethe rthe tree is empty (no value or children).\n */\nexport function treeIsEmpty<T>(tree: Tree<T>): boolean {\n  return treeGetValue(tree) === undefined && !treeHasChildren(tree);\n}\n\n/**\n * Calls action for each child of this tree node.\n *\n * @param action - Action to be called for each child.\n */\nexport function treeForEachChild<T>(\n  tree: Tree<T>,\n  action: (tree: Tree<T>) => void\n): void {\n  each(tree.node.children, (child: string, childTree: TreeNode<T>) => {\n    action(new Tree<T>(child, tree, childTree));\n  });\n}\n\n/**\n * Does a depth-first traversal of this node's descendants, calling action for each one.\n *\n * @param action - Action to be called for each child.\n * @param includeSelf - Whether to call action on this node as well. Defaults to\n *   false.\n * @param childrenFirst - Whether to call action on children before calling it on\n *   parent.\n */\nexport function treeForEachDescendant<T>(\n  tree: Tree<T>,\n  action: (tree: Tree<T>) => void,\n  includeSelf?: boolean,\n  childrenFirst?: boolean\n): void {\n  if (includeSelf && !childrenFirst) {\n    action(tree);\n  }\n\n  treeForEachChild(tree, child => {\n    treeForEachDescendant(child, action, true, childrenFirst);\n  });\n\n  if (includeSelf && childrenFirst) {\n    action(tree);\n  }\n}\n\n/**\n * Calls action on each ancestor node.\n *\n * @param action - Action to be called on each parent; return\n *   true to abort.\n * @param includeSelf - Whether to call action on this node as well.\n * @returns true if the action callback returned true.\n */\nexport function treeForEachAncestor<T>(\n  tree: Tree<T>,\n  action: (tree: Tree<T>) => unknown,\n  includeSelf?: boolean\n): boolean {\n  let node = includeSelf ? tree : tree.parent;\n  while (node !== null) {\n    if (action(node)) {\n      return true;\n    }\n    node = node.parent;\n  }\n  return false;\n}\n\n/**\n * Does a depth-first traversal of this node's descendants.  When a descendant with a value\n * is found, action is called on it and traversal does not continue inside the node.\n * Action is *not* called on this node.\n *\n * @param action - Action to be called for each child.\n */\nexport function treeForEachImmediateDescendantWithValue<T>(\n  tree: Tree<T>,\n  action: (tree: Tree<T>) => void\n): void {\n  treeForEachChild(tree, child => {\n    if (treeGetValue(child) !== undefined) {\n      action(child);\n    } else {\n      treeForEachImmediateDescendantWithValue(child, action);\n    }\n  });\n}\n\n/**\n * @returns The path of this tree node, as a Path.\n */\nexport function treeGetPath<T>(tree: Tree<T>) {\n  return new Path(\n    tree.parent === null\n      ? tree.name\n      : treeGetPath(tree.parent) + '/' + tree.name\n  );\n}\n\n/**\n * Adds or removes this child from its parent based on whether it's empty or not.\n */\nfunction treeUpdateParents<T>(tree: Tree<T>) {\n  if (tree.parent !== null) {\n    treeUpdateChild(tree.parent, tree.name, tree);\n  }\n}\n\n/**\n * Adds or removes the passed child to this tree node, depending on whether it's empty.\n *\n * @param childName - The name of the child to update.\n * @param child - The child to update.\n */\nfunction treeUpdateChild<T>(tree: Tree<T>, childName: string, child: Tree<T>) {\n  const childEmpty = treeIsEmpty(child);\n  const childExists = contains(tree.node.children, childName);\n  if (childEmpty && childExists) {\n    delete tree.node.children[childName];\n    tree.node.childCount--;\n    treeUpdateParents(tree);\n  } else if (!childEmpty && !childExists) {\n    tree.node.children[childName] = child.node;\n    tree.node.childCount++;\n    treeUpdateParents(tree);\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {\n  contains,\n  errorPrefix as errorPrefixFxn,\n  safeGet,\n  stringLength\n} from '@firebase/util';\n\nimport { RepoInfo } from '../RepoInfo';\n\nimport {\n  Path,\n  pathChild,\n  pathCompare,\n  pathContains,\n  pathGetBack,\n  pathGetFront,\n  pathSlice,\n  ValidationPath,\n  validationPathPop,\n  validationPathPush,\n  validationPathToErrorString\n} from './Path';\nimport { each, isInvalidJSONNumber } from './util';\n\n/**\n * True for invalid Firebase keys\n */\nexport const INVALID_KEY_REGEX_ = /[\\[\\].#$\\/\\u0000-\\u001F\\u007F]/;\n\n/**\n * True for invalid Firebase paths.\n * Allows '/' in paths.\n */\nexport const INVALID_PATH_REGEX_ = /[\\[\\].#$\\u0000-\\u001F\\u007F]/;\n\n/**\n * Maximum number of characters to allow in leaf value\n */\nexport const MAX_LEAF_SIZE_ = 10 * 1024 * 1024;\n\nexport const isValidKey = function (key: unknown): boolean {\n  return (\n    typeof key === 'string' && key.length !== 0 && !INVALID_KEY_REGEX_.test(key)\n  );\n};\n\nexport const isValidPathString = function (pathString: string): boolean {\n  return (\n    typeof pathString === 'string' &&\n    pathString.length !== 0 &&\n    !INVALID_PATH_REGEX_.test(pathString)\n  );\n};\n\nexport const isValidRootPathString = function (pathString: string): boolean {\n  if (pathString) {\n    // Allow '/.info/' at the beginning.\n    pathString = pathString.replace(/^\\/*\\.info(\\/|$)/, '/');\n  }\n\n  return isValidPathString(pathString);\n};\n\nexport const isValidPriority = function (priority: unknown): boolean {\n  return (\n    priority === null ||\n    typeof priority === 'string' ||\n    (typeof priority === 'number' && !isInvalidJSONNumber(priority)) ||\n    (priority &&\n      typeof priority === 'object' &&\n      // eslint-disable-next-line @typescript-eslint/no-explicit-any\n      contains(priority as any, '.sv'))\n  );\n};\n\n/**\n * Pre-validate a datum passed as an argument to Firebase function.\n */\nexport const validateFirebaseDataArg = function (\n  fnName: string,\n  value: unknown,\n  path: Path,\n  optional: boolean\n) {\n  if (optional && value === undefined) {\n    return;\n  }\n\n  validateFirebaseData(errorPrefixFxn(fnName, 'value'), value, path);\n};\n\n/**\n * Validate a data object client-side before sending to server.\n */\nexport const validateFirebaseData = function (\n  errorPrefix: string,\n  data: unknown,\n  path_: Path | ValidationPath\n) {\n  const path =\n    path_ instanceof Path ? new ValidationPath(path_, errorPrefix) : path_;\n\n  if (data === undefined) {\n    throw new Error(\n      errorPrefix + 'contains undefined ' + validationPathToErrorString(path)\n    );\n  }\n  if (typeof data === 'function') {\n    throw new Error(\n      errorPrefix +\n        'contains a function ' +\n        validationPathToErrorString(path) +\n        ' with contents = ' +\n        data.toString()\n    );\n  }\n  if (isInvalidJSONNumber(data)) {\n    throw new Error(\n      errorPrefix +\n        'contains ' +\n        data.toString() +\n        ' ' +\n        validationPathToErrorString(path)\n    );\n  }\n\n  // Check max leaf size, but try to avoid the utf8 conversion if we can.\n  if (\n    typeof data === 'string' &&\n    data.length > MAX_LEAF_SIZE_ / 3 &&\n    stringLength(data) > MAX_LEAF_SIZE_\n  ) {\n    throw new Error(\n      errorPrefix +\n        'contains a string greater than ' +\n        MAX_LEAF_SIZE_ +\n        ' utf8 bytes ' +\n        validationPathToErrorString(path) +\n        \" ('\" +\n        data.substring(0, 50) +\n        \"...')\"\n    );\n  }\n\n  // TODO = Perf = Consider combining the recursive validation of keys into NodeFromJSON\n  // to save extra walking of large objects.\n  if (data && typeof data === 'object') {\n    let hasDotValue = false;\n    let hasActualChild = false;\n    each(data, (key: string, value: unknown) => {\n      if (key === '.value') {\n        hasDotValue = true;\n      } else if (key !== '.priority' && key !== '.sv') {\n        hasActualChild = true;\n        if (!isValidKey(key)) {\n          throw new Error(\n            errorPrefix +\n              ' contains an invalid key (' +\n              key +\n              ') ' +\n              validationPathToErrorString(path) +\n              '.  Keys must be non-empty strings ' +\n              'and can\\'t contain \".\", \"#\", \"$\", \"/\", \"[\", or \"]\"'\n          );\n        }\n      }\n\n      validationPathPush(path, key);\n      validateFirebaseData(errorPrefix, value, path);\n      validationPathPop(path);\n    });\n\n    if (hasDotValue && hasActualChild) {\n      throw new Error(\n        errorPrefix +\n          ' contains \".value\" child ' +\n          validationPathToErrorString(path) +\n          ' in addition to actual children.'\n      );\n    }\n  }\n};\n\n/**\n * Pre-validate paths passed in the firebase function.\n */\nexport const validateFirebaseMergePaths = function (\n  errorPrefix: string,\n  mergePaths: Path[]\n) {\n  let i, curPath: Path;\n  for (i = 0; i < mergePaths.length; i++) {\n    curPath = mergePaths[i];\n    const keys = pathSlice(curPath);\n    for (let j = 0; j < keys.length; j++) {\n      if (keys[j] === '.priority' && j === keys.length - 1) {\n        // .priority is OK\n      } else if (!isValidKey(keys[j])) {\n        throw new Error(\n          errorPrefix +\n            'contains an invalid key (' +\n            keys[j] +\n            ') in path ' +\n            curPath.toString() +\n            '. Keys must be non-empty strings ' +\n            'and can\\'t contain \".\", \"#\", \"$\", \"/\", \"[\", or \"]\"'\n        );\n      }\n    }\n  }\n\n  // Check that update keys are not descendants of each other.\n  // We rely on the property that sorting guarantees that ancestors come\n  // right before descendants.\n  mergePaths.sort(pathCompare);\n  let prevPath: Path | null = null;\n  for (i = 0; i < mergePaths.length; i++) {\n    curPath = mergePaths[i];\n    if (prevPath !== null && pathContains(prevPath, curPath)) {\n      throw new Error(\n        errorPrefix +\n          'contains a path ' +\n          prevPath.toString() +\n          ' that is ancestor of another path ' +\n          curPath.toString()\n      );\n    }\n    prevPath = curPath;\n  }\n};\n\n/**\n * pre-validate an object passed as an argument to firebase function (\n * must be an object - e.g. for firebase.update()).\n */\nexport const validateFirebaseMergeDataArg = function (\n  fnName: string,\n  data: unknown,\n  path: Path,\n  optional: boolean\n) {\n  if (optional && data === undefined) {\n    return;\n  }\n\n  const errorPrefix = errorPrefixFxn(fnName, 'values');\n\n  if (!(data && typeof data === 'object') || Array.isArray(data)) {\n    throw new Error(\n      errorPrefix + ' must be an object containing the children to replace.'\n    );\n  }\n\n  const mergePaths: Path[] = [];\n  each(data, (key: string, value: unknown) => {\n    const curPath = new Path(key);\n    validateFirebaseData(errorPrefix, value, pathChild(path, curPath));\n    if (pathGetBack(curPath) === '.priority') {\n      if (!isValidPriority(value)) {\n        throw new Error(\n          errorPrefix +\n            \"contains an invalid value for '\" +\n            curPath.toString() +\n            \"', which must be a valid \" +\n            'Firebase priority (a string, finite number, server value, or null).'\n        );\n      }\n    }\n    mergePaths.push(curPath);\n  });\n  validateFirebaseMergePaths(errorPrefix, mergePaths);\n};\n\nexport const validatePriority = function (\n  fnName: string,\n  priority: unknown,\n  optional: boolean\n) {\n  if (optional && priority === undefined) {\n    return;\n  }\n  if (isInvalidJSONNumber(priority)) {\n    throw new Error(\n      errorPrefixFxn(fnName, 'priority') +\n        'is ' +\n        priority.toString() +\n        ', but must be a valid Firebase priority (a string, finite number, ' +\n        'server value, or null).'\n    );\n  }\n  // Special case to allow importing data with a .sv.\n  if (!isValidPriority(priority)) {\n    throw new Error(\n      errorPrefixFxn(fnName, 'priority') +\n        'must be a valid Firebase priority ' +\n        '(a string, finite number, server value, or null).'\n    );\n  }\n};\n\nexport const validateEventType = function (\n  fnName: string,\n  eventType: string,\n  optional: boolean\n) {\n  if (optional && eventType === undefined) {\n    return;\n  }\n\n  switch (eventType) {\n    case 'value':\n    case 'child_added':\n    case 'child_removed':\n    case 'child_changed':\n    case 'child_moved':\n      break;\n    default:\n      throw new Error(\n        errorPrefixFxn(fnName, 'eventType') +\n          'must be a valid event type = \"value\", \"child_added\", \"child_removed\", ' +\n          '\"child_changed\", or \"child_moved\".'\n      );\n  }\n};\n\nexport const validateKey = function (\n  fnName: string,\n  argumentName: string,\n  key: string,\n  optional: boolean\n) {\n  if (optional && key === undefined) {\n    return;\n  }\n  if (!isValidKey(key)) {\n    throw new Error(\n      errorPrefixFxn(fnName, argumentName) +\n        'was an invalid key = \"' +\n        key +\n        '\".  Firebase keys must be non-empty strings and ' +\n        'can\\'t contain \".\", \"#\", \"$\", \"/\", \"[\", or \"]\").'\n    );\n  }\n};\n\nexport const validatePathString = function (\n  fnName: string,\n  argumentName: string,\n  pathString: string,\n  optional: boolean\n) {\n  if (optional && pathString === undefined) {\n    return;\n  }\n\n  if (!isValidPathString(pathString)) {\n    throw new Error(\n      errorPrefixFxn(fnName, argumentName) +\n        'was an invalid path = \"' +\n        pathString +\n        '\". Paths must be non-empty strings and ' +\n        'can\\'t contain \".\", \"#\", \"$\", \"[\", or \"]\"'\n    );\n  }\n};\n\nexport const validateRootPathString = function (\n  fnName: string,\n  argumentName: string,\n  pathString: string,\n  optional: boolean\n) {\n  if (pathString) {\n    // Allow '/.info/' at the beginning.\n    pathString = pathString.replace(/^\\/*\\.info(\\/|$)/, '/');\n  }\n\n  validatePathString(fnName, argumentName, pathString, optional);\n};\n\nexport const validateWritablePath = function (fnName: string, path: Path) {\n  if (pathGetFront(path) === '.info') {\n    throw new Error(fnName + \" failed = Can't modify data under /.info/\");\n  }\n};\n\nexport const validateUrl = function (\n  fnName: string,\n  parsedUrl: { repoInfo: RepoInfo; path: Path }\n) {\n  // TODO = Validate server better.\n  const pathString = parsedUrl.path.toString();\n  if (\n    !(typeof parsedUrl.repoInfo.host === 'string') ||\n    parsedUrl.repoInfo.host.length === 0 ||\n    (!isValidKey(parsedUrl.repoInfo.namespace) &&\n      parsedUrl.repoInfo.host.split(':')[0] !== 'localhost') ||\n    (pathString.length !== 0 && !isValidRootPathString(pathString))\n  ) {\n    throw new Error(\n      errorPrefixFxn(fnName, 'url') +\n        'must be a valid firebase URL and ' +\n        'the path can\\'t contain \".\", \"#\", \"$\", \"[\", or \"]\".'\n    );\n  }\n};\n\nexport const validateBoolean = function (\n  fnName: string,\n  argumentName: string,\n  bool: unknown,\n  optional: boolean\n) {\n  if (optional && bool === undefined) {\n    return;\n  }\n  if (typeof bool !== 'boolean') {\n    throw new Error(\n      errorPrefixFxn(fnName, argumentName) + 'must be a boolean.'\n    );\n  }\n};\n\nexport const validateString = function (\n  fnName: string,\n  argumentName: string,\n  string: unknown,\n  optional: boolean\n) {\n  if (optional && string === undefined) {\n    return;\n  }\n  if (!(typeof string === 'string')) {\n    throw new Error(\n      errorPrefixFxn(fnName, argumentName) + 'must be a valid string.'\n    );\n  }\n};\n\nexport const validateObject = function (\n  fnName: string,\n  argumentName: string,\n  obj: unknown,\n  optional: boolean\n) {\n  if (optional && obj === undefined) {\n    return;\n  }\n  if (!(obj && typeof obj === 'object') || obj === null) {\n    throw new Error(\n      errorPrefixFxn(fnName, argumentName) + 'must be a valid object.'\n    );\n  }\n};\n\nexport const validateObjectContainsKey = function (\n  fnName: string,\n  argumentName: string,\n  obj: unknown,\n  key: string,\n  optional: boolean,\n  optType?: string\n) {\n  const objectContainsKey =\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    obj && typeof obj === 'object' && contains(obj as any, key);\n\n  if (!objectContainsKey) {\n    if (optional) {\n      return;\n    } else {\n      throw new Error(\n        errorPrefixFxn(fnName, argumentName) +\n          'must contain the key \"' +\n          key +\n          '\"'\n      );\n    }\n  }\n\n  if (optType) {\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    const val = safeGet(obj as any, key);\n    if (\n      (optType === 'number' && !(typeof val === 'number')) ||\n      (optType === 'string' && !(typeof val === 'string')) ||\n      (optType === 'boolean' && !(typeof val === 'boolean')) ||\n      (optType === 'function' && !(typeof val === 'function')) ||\n      (optType === 'object' && !(typeof val === 'object') && val)\n    ) {\n      if (optional) {\n        throw new Error(\n          errorPrefixFxn(fnName, argumentName) +\n            'contains invalid value for key \"' +\n            key +\n            '\" (must be of type \"' +\n            optType +\n            '\")'\n        );\n      } else {\n        throw new Error(\n          errorPrefixFxn(fnName, argumentName) +\n            'must contain the key \"' +\n            key +\n            '\" with type \"' +\n            optType +\n            '\"'\n        );\n      }\n    }\n  }\n};\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Path, pathContains, pathEquals } from '../util/Path';\nimport { exceptionGuard, log, logger } from '../util/util';\n\nimport { Event } from './Event';\n\n/**\n * The event queue serves a few purposes:\n * 1. It ensures we maintain event order in the face of event callbacks doing operations that result in more\n *    events being queued.\n * 2. raiseQueuedEvents() handles being called reentrantly nicely.  That is, if in the course of raising events,\n *    raiseQueuedEvents() is called again, the \"inner\" call will pick up raising events where the \"outer\" call\n *    left off, ensuring that the events are still raised synchronously and in order.\n * 3. You can use raiseEventsAtPath and raiseEventsForChangedPath to ensure only relevant previously-queued\n *    events are raised synchronously.\n *\n * NOTE: This can all go away if/when we move to async events.\n *\n */\nexport class EventQueue {\n  eventLists_: EventList[] = [];\n\n  /**\n   * Tracks recursion depth of raiseQueuedEvents_, for debugging purposes.\n   */\n  recursionDepth_ = 0;\n}\n\n/**\n * @param eventDataList - The new events to queue.\n */\nexport function eventQueueQueueEvents(\n  eventQueue: EventQueue,\n  eventDataList: Event[]\n) {\n  // We group events by path, storing them in a single EventList, to make it easier to skip over them quickly.\n  let currList: EventList | null = null;\n  for (let i = 0; i < eventDataList.length; i++) {\n    const data = eventDataList[i];\n    const path = data.getPath();\n    if (currList !== null && !pathEquals(path, currList.path)) {\n      eventQueue.eventLists_.push(currList);\n      currList = null;\n    }\n\n    if (currList === null) {\n      currList = { events: [], path };\n    }\n\n    currList.events.push(data);\n  }\n  if (currList) {\n    eventQueue.eventLists_.push(currList);\n  }\n}\n\n/**\n * Queues the specified events and synchronously raises all events (including previously queued ones)\n * for the specified path.\n *\n * It is assumed that the new events are all for the specified path.\n *\n * @param path - The path to raise events for.\n * @param eventDataList - The new events to raise.\n */\nexport function eventQueueRaiseEventsAtPath(\n  eventQueue: EventQueue,\n  path: Path,\n  eventDataList: Event[]\n) {\n  eventQueueQueueEvents(eventQueue, eventDataList);\n  eventQueueRaiseQueuedEventsMatchingPredicate(eventQueue, eventPath =>\n    pathEquals(eventPath, path)\n  );\n}\n\n/**\n * Queues the specified events and synchronously raises all events (including previously queued ones) for\n * locations related to the specified change path (i.e. all ancestors and descendants).\n *\n * It is assumed that the new events are all related (ancestor or descendant) to the specified path.\n *\n * @param changedPath - The path to raise events for.\n * @param eventDataList - The events to raise\n */\nexport function eventQueueRaiseEventsForChangedPath(\n  eventQueue: EventQueue,\n  changedPath: Path,\n  eventDataList: Event[]\n) {\n  eventQueueQueueEvents(eventQueue, eventDataList);\n  eventQueueRaiseQueuedEventsMatchingPredicate(\n    eventQueue,\n    eventPath =>\n      pathContains(eventPath, changedPath) ||\n      pathContains(changedPath, eventPath)\n  );\n}\n\nfunction eventQueueRaiseQueuedEventsMatchingPredicate(\n  eventQueue: EventQueue,\n  predicate: (path: Path) => boolean\n) {\n  eventQueue.recursionDepth_++;\n\n  let sentAll = true;\n  for (let i = 0; i < eventQueue.eventLists_.length; i++) {\n    const eventList = eventQueue.eventLists_[i];\n    if (eventList) {\n      const eventPath = eventList.path;\n      if (predicate(eventPath)) {\n        eventListRaise(eventQueue.eventLists_[i]);\n        eventQueue.eventLists_[i] = null;\n      } else {\n        sentAll = false;\n      }\n    }\n  }\n\n  if (sentAll) {\n    eventQueue.eventLists_ = [];\n  }\n\n  eventQueue.recursionDepth_--;\n}\n\ninterface EventList {\n  events: Event[];\n  path: Path;\n}\n\n/**\n * Iterates through the list and raises each event\n */\nfunction eventListRaise(eventList: EventList) {\n  for (let i = 0; i < eventList.events.length; i++) {\n    const eventData = eventList.events[i];\n    if (eventData !== null) {\n      eventList.events[i] = null;\n      const eventFn = eventData.getEventRunner();\n      if (logger) {\n        log('event: ' + eventData.toString());\n      }\n      exceptionGuard(eventFn);\n    }\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {\n  assert,\n  contains,\n  isEmpty,\n  map,\n  safeGet,\n  stringify\n} from '@firebase/util';\n\nimport { AppCheckTokenProvider } from './AppCheckTokenProvider';\nimport { AuthTokenProvider } from './AuthTokenProvider';\nimport { PersistentConnection } from './PersistentConnection';\nimport { ReadonlyRestClient } from './ReadonlyRestClient';\nimport { RepoInfo } from './RepoInfo';\nimport { ServerActions } from './ServerActions';\nimport { ChildrenNode } from './snap/ChildrenNode';\nimport { Node } from './snap/Node';\nimport { nodeFromJSON } from './snap/nodeFromJSON';\nimport { SnapshotHolder } from './SnapshotHolder';\nimport {\n  newSparseSnapshotTree,\n  SparseSnapshotTree,\n  sparseSnapshotTreeForEachTree,\n  sparseSnapshotTreeForget,\n  sparseSnapshotTreeRemember\n} from './SparseSnapshotTree';\nimport { StatsCollection } from './stats/StatsCollection';\nimport { StatsListener } from './stats/StatsListener';\nimport {\n  statsManagerGetCollection,\n  statsManagerGetOrCreateReporter\n} from './stats/StatsManager';\nimport { StatsReporter, statsReporterIncludeStat } from './stats/StatsReporter';\nimport {\n  SyncTree,\n  syncTreeAckUserWrite,\n  syncTreeAddEventRegistration,\n  syncTreeApplyServerMerge,\n  syncTreeApplyServerOverwrite,\n  syncTreeApplyTaggedQueryMerge,\n  syncTreeApplyTaggedQueryOverwrite,\n  syncTreeApplyUserMerge,\n  syncTreeApplyUserOverwrite,\n  syncTreeCalcCompleteEventCache,\n  syncTreeGetServerValue,\n  syncTreeRemoveEventRegistration\n} from './SyncTree';\nimport { Indexable } from './util/misc';\nimport {\n  newEmptyPath,\n  newRelativePath,\n  Path,\n  pathChild,\n  pathGetFront,\n  pathPopFront\n} from './util/Path';\nimport {\n  generateWithValues,\n  resolveDeferredValueSnapshot,\n  resolveDeferredValueTree\n} from './util/ServerValues';\nimport {\n  Tree,\n  treeForEachAncestor,\n  treeForEachChild,\n  treeForEachDescendant,\n  treeGetPath,\n  treeGetValue,\n  treeHasChildren,\n  treeSetValue,\n  treeSubTree\n} from './util/Tree';\nimport {\n  beingCrawled,\n  each,\n  exceptionGuard,\n  log,\n  LUIDGenerator,\n  warn\n} from './util/util';\nimport { isValidPriority, validateFirebaseData } from './util/validation';\nimport { Event } from './view/Event';\nimport {\n  EventQueue,\n  eventQueueQueueEvents,\n  eventQueueRaiseEventsAtPath,\n  eventQueueRaiseEventsForChangedPath\n} from './view/EventQueue';\nimport { EventRegistration, QueryContext } from './view/EventRegistration';\n\nconst INTERRUPT_REASON = 'repo_interrupt';\n\n/**\n * If a transaction does not succeed after 25 retries, we abort it. Among other\n * things this ensure that if there's ever a bug causing a mismatch between\n * client / server hashes for some data, we won't retry indefinitely.\n */\nconst MAX_TRANSACTION_RETRIES = 25;\n\nconst enum TransactionStatus {\n  // We've run the transaction and updated transactionResultData_ with the result, but it isn't currently sent to the\n  // server. A transaction will go from RUN -> SENT -> RUN if it comes back from the server as rejected due to\n  // mismatched hash.\n  RUN,\n\n  // We've run the transaction and sent it to the server and it's currently outstanding (hasn't come back as accepted\n  // or rejected yet).\n  SENT,\n\n  // Temporary state used to mark completed transactions (whether successful or aborted).  The transaction will be\n  // removed when we get a chance to prune completed ones.\n  COMPLETED,\n\n  // Used when an already-sent transaction needs to be aborted (e.g. due to a conflicting set() call that was made).\n  // If it comes back as unsuccessful, we'll abort it.\n  SENT_NEEDS_ABORT,\n\n  // Temporary state used to mark transactions that need to be aborted.\n  NEEDS_ABORT\n}\n\ninterface Transaction {\n  path: Path;\n  update: (a: unknown) => unknown;\n  onComplete: (\n    error: Error | null,\n    committed: boolean,\n    node: Node | null\n  ) => void;\n  status: TransactionStatus;\n  order: number;\n  applyLocally: boolean;\n  retryCount: number;\n  unwatcher: () => void;\n  abortReason: string | null;\n  currentWriteId: number;\n  currentInputSnapshot: Node | null;\n  currentOutputSnapshotRaw: Node | null;\n  currentOutputSnapshotResolved: Node | null;\n}\n\n/**\n * A connection to a single data repository.\n */\nexport class Repo {\n  /** Key for uniquely identifying this repo, used in RepoManager */\n  readonly key: string;\n\n  dataUpdateCount = 0;\n  infoSyncTree_: SyncTree;\n  serverSyncTree_: SyncTree;\n\n  stats_: StatsCollection;\n  statsListener_: StatsListener | null = null;\n  eventQueue_ = new EventQueue();\n  nextWriteId_ = 1;\n  server_: ServerActions;\n  statsReporter_: StatsReporter;\n  infoData_: SnapshotHolder;\n  interceptServerDataCallback_: ((a: string, b: unknown) => void) | null = null;\n\n  /** A list of data pieces and paths to be set when this client disconnects. */\n  onDisconnect_: SparseSnapshotTree = newSparseSnapshotTree();\n\n  /** Stores queues of outstanding transactions for Firebase locations. */\n  transactionQueueTree_ = new Tree<Transaction[]>();\n\n  // TODO: This should be @private but it's used by test_access.js and internal.js\n  persistentConnection_: PersistentConnection | null = null;\n\n  constructor(\n    public repoInfo_: RepoInfo,\n    public forceRestClient_: boolean,\n    public authTokenProvider_: AuthTokenProvider,\n    public appCheckProvider_: AppCheckTokenProvider\n  ) {\n    // This key is intentionally not updated if RepoInfo is later changed or replaced\n    this.key = this.repoInfo_.toURLString();\n  }\n\n  /**\n   * @returns The URL corresponding to the root of this Firebase.\n   */\n  toString(): string {\n    return (\n      (this.repoInfo_.secure ? 'https://' : 'http://') + this.repoInfo_.host\n    );\n  }\n}\n\nexport function repoStart(\n  repo: Repo,\n  appId: string,\n  authOverride?: object\n): void {\n  repo.stats_ = statsManagerGetCollection(repo.repoInfo_);\n\n  if (repo.forceRestClient_ || beingCrawled()) {\n    repo.server_ = new ReadonlyRestClient(\n      repo.repoInfo_,\n      (\n        pathString: string,\n        data: unknown,\n        isMerge: boolean,\n        tag: number | null\n      ) => {\n        repoOnDataUpdate(repo, pathString, data, isMerge, tag);\n      },\n      repo.authTokenProvider_,\n      repo.appCheckProvider_\n    );\n\n    // Minor hack: Fire onConnect immediately, since there's no actual connection.\n    setTimeout(() => repoOnConnectStatus(repo, /* connectStatus= */ true), 0);\n  } else {\n    // Validate authOverride\n    if (typeof authOverride !== 'undefined' && authOverride !== null) {\n      if (typeof authOverride !== 'object') {\n        throw new Error(\n          'Only objects are supported for option databaseAuthVariableOverride'\n        );\n      }\n      try {\n        stringify(authOverride);\n      } catch (e) {\n        throw new Error('Invalid authOverride provided: ' + e);\n      }\n    }\n\n    repo.persistentConnection_ = new PersistentConnection(\n      repo.repoInfo_,\n      appId,\n      (\n        pathString: string,\n        data: unknown,\n        isMerge: boolean,\n        tag: number | null\n      ) => {\n        repoOnDataUpdate(repo, pathString, data, isMerge, tag);\n      },\n      (connectStatus: boolean) => {\n        repoOnConnectStatus(repo, connectStatus);\n      },\n      (updates: object) => {\n        repoOnServerInfoUpdate(repo, updates);\n      },\n      repo.authTokenProvider_,\n      repo.appCheckProvider_,\n      authOverride\n    );\n\n    repo.server_ = repo.persistentConnection_;\n  }\n\n  repo.authTokenProvider_.addTokenChangeListener(token => {\n    repo.server_.refreshAuthToken(token);\n  });\n\n  repo.appCheckProvider_.addTokenChangeListener(result => {\n    repo.server_.refreshAppCheckToken(result.token);\n  });\n\n  // In the case of multiple Repos for the same repoInfo (i.e. there are multiple Firebase.Contexts being used),\n  // we only want to create one StatsReporter.  As such, we'll report stats over the first Repo created.\n  repo.statsReporter_ = statsManagerGetOrCreateReporter(\n    repo.repoInfo_,\n    () => new StatsReporter(repo.stats_, repo.server_)\n  );\n\n  // Used for .info.\n  repo.infoData_ = new SnapshotHolder();\n  repo.infoSyncTree_ = new SyncTree({\n    startListening: (query, tag, currentHashFn, onComplete) => {\n      let infoEvents: Event[] = [];\n      const node = repo.infoData_.getNode(query._path);\n      // This is possibly a hack, but we have different semantics for .info endpoints. We don't raise null events\n      // on initial data...\n      if (!node.isEmpty()) {\n        infoEvents = syncTreeApplyServerOverwrite(\n          repo.infoSyncTree_,\n          query._path,\n          node\n        );\n        setTimeout(() => {\n          onComplete('ok');\n        }, 0);\n      }\n      return infoEvents;\n    },\n    stopListening: () => {}\n  });\n  repoUpdateInfo(repo, 'connected', false);\n\n  repo.serverSyncTree_ = new SyncTree({\n    startListening: (query, tag, currentHashFn, onComplete) => {\n      repo.server_.listen(query, currentHashFn, tag, (status, data) => {\n        const events = onComplete(status, data);\n        eventQueueRaiseEventsForChangedPath(\n          repo.eventQueue_,\n          query._path,\n          events\n        );\n      });\n      // No synchronous events for network-backed sync trees\n      return [];\n    },\n    stopListening: (query, tag) => {\n      repo.server_.unlisten(query, tag);\n    }\n  });\n}\n\n/**\n * @returns The time in milliseconds, taking the server offset into account if we have one.\n */\nexport function repoServerTime(repo: Repo): number {\n  const offsetNode = repo.infoData_.getNode(new Path('.info/serverTimeOffset'));\n  const offset = (offsetNode.val() as number) || 0;\n  return new Date().getTime() + offset;\n}\n\n/**\n * Generate ServerValues using some variables from the repo object.\n */\nexport function repoGenerateServerValues(repo: Repo): Indexable {\n  return generateWithValues({\n    timestamp: repoServerTime(repo)\n  });\n}\n\n/**\n * Called by realtime when we get new messages from the server.\n */\nfunction repoOnDataUpdate(\n  repo: Repo,\n  pathString: string,\n  data: unknown,\n  isMerge: boolean,\n  tag: number | null\n): void {\n  // For testing.\n  repo.dataUpdateCount++;\n  const path = new Path(pathString);\n  data = repo.interceptServerDataCallback_\n    ? repo.interceptServerDataCallback_(pathString, data)\n    : data;\n  let events = [];\n  if (tag) {\n    if (isMerge) {\n      const taggedChildren = map(\n        data as { [k: string]: unknown },\n        (raw: unknown) => nodeFromJSON(raw)\n      );\n      events = syncTreeApplyTaggedQueryMerge(\n        repo.serverSyncTree_,\n        path,\n        taggedChildren,\n        tag\n      );\n    } else {\n      const taggedSnap = nodeFromJSON(data);\n      events = syncTreeApplyTaggedQueryOverwrite(\n        repo.serverSyncTree_,\n        path,\n        taggedSnap,\n        tag\n      );\n    }\n  } else if (isMerge) {\n    const changedChildren = map(\n      data as { [k: string]: unknown },\n      (raw: unknown) => nodeFromJSON(raw)\n    );\n    events = syncTreeApplyServerMerge(\n      repo.serverSyncTree_,\n      path,\n      changedChildren\n    );\n  } else {\n    const snap = nodeFromJSON(data);\n    events = syncTreeApplyServerOverwrite(repo.serverSyncTree_, path, snap);\n  }\n  let affectedPath = path;\n  if (events.length > 0) {\n    // Since we have a listener outstanding for each transaction, receiving any events\n    // is a proxy for some change having occurred.\n    affectedPath = repoRerunTransactions(repo, path);\n  }\n  eventQueueRaiseEventsForChangedPath(repo.eventQueue_, affectedPath, events);\n}\n\n// TODO: This should be @private but it's used by test_access.js and internal.js\nexport function repoInterceptServerData(\n  repo: Repo,\n  callback: ((a: string, b: unknown) => unknown) | null\n): void {\n  repo.interceptServerDataCallback_ = callback;\n}\n\nfunction repoOnConnectStatus(repo: Repo, connectStatus: boolean): void {\n  repoUpdateInfo(repo, 'connected', connectStatus);\n  if (connectStatus === false) {\n    repoRunOnDisconnectEvents(repo);\n  }\n}\n\nfunction repoOnServerInfoUpdate(repo: Repo, updates: object): void {\n  each(updates, (key: string, value: unknown) => {\n    repoUpdateInfo(repo, key, value);\n  });\n}\n\nfunction repoUpdateInfo(repo: Repo, pathString: string, value: unknown): void {\n  const path = new Path('/.info/' + pathString);\n  const newNode = nodeFromJSON(value);\n  repo.infoData_.updateSnapshot(path, newNode);\n  const events = syncTreeApplyServerOverwrite(\n    repo.infoSyncTree_,\n    path,\n    newNode\n  );\n  eventQueueRaiseEventsForChangedPath(repo.eventQueue_, path, events);\n}\n\nfunction repoGetNextWriteId(repo: Repo): number {\n  return repo.nextWriteId_++;\n}\n\n/**\n * The purpose of `getValue` is to return the latest known value\n * satisfying `query`.\n *\n * This method will first check for in-memory cached values\n * belonging to active listeners. If they are found, such values\n * are considered to be the most up-to-date.\n *\n * If the client is not connected, this method will try to\n * establish a connection and request the value for `query`. If\n * the client is not able to retrieve the query result, it reports\n * an error.\n *\n * @param query - The query to surface a value for.\n */\nexport function repoGetValue(repo: Repo, query: QueryContext): Promise<Node> {\n  // Only active queries are cached. There is no persisted cache.\n  const cached = syncTreeGetServerValue(repo.serverSyncTree_, query);\n  if (cached != null) {\n    return Promise.resolve(cached);\n  }\n  return repo.server_.get(query).then(\n    payload => {\n      const node = nodeFromJSON(payload as string).withIndex(\n        query._queryParams.getIndex()\n      );\n      const events = syncTreeApplyServerOverwrite(\n        repo.serverSyncTree_,\n        query._path,\n        node\n      );\n      eventQueueRaiseEventsAtPath(repo.eventQueue_, query._path, events);\n      return Promise.resolve(node);\n    },\n    err => {\n      repoLog(repo, 'get for query ' + stringify(query) + ' failed: ' + err);\n      return Promise.reject(new Error(err as string));\n    }\n  );\n}\n\nexport function repoSetWithPriority(\n  repo: Repo,\n  path: Path,\n  newVal: unknown,\n  newPriority: number | string | null,\n  onComplete: ((status: Error | null, errorReason?: string) => void) | null\n): void {\n  repoLog(repo, 'set', {\n    path: path.toString(),\n    value: newVal,\n    priority: newPriority\n  });\n\n  // TODO: Optimize this behavior to either (a) store flag to skip resolving where possible and / or\n  // (b) store unresolved paths on JSON parse\n  const serverValues = repoGenerateServerValues(repo);\n  const newNodeUnresolved = nodeFromJSON(newVal, newPriority);\n  const existing = syncTreeCalcCompleteEventCache(repo.serverSyncTree_, path);\n  const newNode = resolveDeferredValueSnapshot(\n    newNodeUnresolved,\n    existing,\n    serverValues\n  );\n\n  const writeId = repoGetNextWriteId(repo);\n  const events = syncTreeApplyUserOverwrite(\n    repo.serverSyncTree_,\n    path,\n    newNode,\n    writeId,\n    true\n  );\n  eventQueueQueueEvents(repo.eventQueue_, events);\n  repo.server_.put(\n    path.toString(),\n    newNodeUnresolved.val(/*export=*/ true),\n    (status, errorReason) => {\n      const success = status === 'ok';\n      if (!success) {\n        warn('set at ' + path + ' failed: ' + status);\n      }\n\n      const clearEvents = syncTreeAckUserWrite(\n        repo.serverSyncTree_,\n        writeId,\n        !success\n      );\n      eventQueueRaiseEventsForChangedPath(repo.eventQueue_, path, clearEvents);\n      repoCallOnCompleteCallback(repo, onComplete, status, errorReason);\n    }\n  );\n  const affectedPath = repoAbortTransactions(repo, path);\n  repoRerunTransactions(repo, affectedPath);\n  // We queued the events above, so just flush the queue here\n  eventQueueRaiseEventsForChangedPath(repo.eventQueue_, affectedPath, []);\n}\n\nexport function repoUpdate(\n  repo: Repo,\n  path: Path,\n  childrenToMerge: { [k: string]: unknown },\n  onComplete: ((status: Error | null, errorReason?: string) => void) | null\n): void {\n  repoLog(repo, 'update', { path: path.toString(), value: childrenToMerge });\n\n  // Start with our existing data and merge each child into it.\n  let empty = true;\n  const serverValues = repoGenerateServerValues(repo);\n  const changedChildren: { [k: string]: Node } = {};\n  each(childrenToMerge, (changedKey: string, changedValue: unknown) => {\n    empty = false;\n    changedChildren[changedKey] = resolveDeferredValueTree(\n      pathChild(path, changedKey),\n      nodeFromJSON(changedValue),\n      repo.serverSyncTree_,\n      serverValues\n    );\n  });\n\n  if (!empty) {\n    const writeId = repoGetNextWriteId(repo);\n    const events = syncTreeApplyUserMerge(\n      repo.serverSyncTree_,\n      path,\n      changedChildren,\n      writeId\n    );\n    eventQueueQueueEvents(repo.eventQueue_, events);\n    repo.server_.merge(\n      path.toString(),\n      childrenToMerge,\n      (status, errorReason) => {\n        const success = status === 'ok';\n        if (!success) {\n          warn('update at ' + path + ' failed: ' + status);\n        }\n\n        const clearEvents = syncTreeAckUserWrite(\n          repo.serverSyncTree_,\n          writeId,\n          !success\n        );\n        const affectedPath =\n          clearEvents.length > 0 ? repoRerunTransactions(repo, path) : path;\n        eventQueueRaiseEventsForChangedPath(\n          repo.eventQueue_,\n          affectedPath,\n          clearEvents\n        );\n        repoCallOnCompleteCallback(repo, onComplete, status, errorReason);\n      }\n    );\n\n    each(childrenToMerge, (changedPath: string) => {\n      const affectedPath = repoAbortTransactions(\n        repo,\n        pathChild(path, changedPath)\n      );\n      repoRerunTransactions(repo, affectedPath);\n    });\n\n    // We queued the events above, so just flush the queue here\n    eventQueueRaiseEventsForChangedPath(repo.eventQueue_, path, []);\n  } else {\n    log(\"update() called with empty data.  Don't do anything.\");\n    repoCallOnCompleteCallback(repo, onComplete, 'ok', undefined);\n  }\n}\n\n/**\n * Applies all of the changes stored up in the onDisconnect_ tree.\n */\nfunction repoRunOnDisconnectEvents(repo: Repo): void {\n  repoLog(repo, 'onDisconnectEvents');\n\n  const serverValues = repoGenerateServerValues(repo);\n  const resolvedOnDisconnectTree = newSparseSnapshotTree();\n  sparseSnapshotTreeForEachTree(\n    repo.onDisconnect_,\n    newEmptyPath(),\n    (path, node) => {\n      const resolved = resolveDeferredValueTree(\n        path,\n        node,\n        repo.serverSyncTree_,\n        serverValues\n      );\n      sparseSnapshotTreeRemember(resolvedOnDisconnectTree, path, resolved);\n    }\n  );\n  let events: Event[] = [];\n\n  sparseSnapshotTreeForEachTree(\n    resolvedOnDisconnectTree,\n    newEmptyPath(),\n    (path, snap) => {\n      events = events.concat(\n        syncTreeApplyServerOverwrite(repo.serverSyncTree_, path, snap)\n      );\n      const affectedPath = repoAbortTransactions(repo, path);\n      repoRerunTransactions(repo, affectedPath);\n    }\n  );\n\n  repo.onDisconnect_ = newSparseSnapshotTree();\n  eventQueueRaiseEventsForChangedPath(repo.eventQueue_, newEmptyPath(), events);\n}\n\nexport function repoOnDisconnectCancel(\n  repo: Repo,\n  path: Path,\n  onComplete: ((status: Error | null, errorReason?: string) => void) | null\n): void {\n  repo.server_.onDisconnectCancel(path.toString(), (status, errorReason) => {\n    if (status === 'ok') {\n      sparseSnapshotTreeForget(repo.onDisconnect_, path);\n    }\n    repoCallOnCompleteCallback(repo, onComplete, status, errorReason);\n  });\n}\n\nexport function repoOnDisconnectSet(\n  repo: Repo,\n  path: Path,\n  value: unknown,\n  onComplete: ((status: Error | null, errorReason?: string) => void) | null\n): void {\n  const newNode = nodeFromJSON(value);\n  repo.server_.onDisconnectPut(\n    path.toString(),\n    newNode.val(/*export=*/ true),\n    (status, errorReason) => {\n      if (status === 'ok') {\n        sparseSnapshotTreeRemember(repo.onDisconnect_, path, newNode);\n      }\n      repoCallOnCompleteCallback(repo, onComplete, status, errorReason);\n    }\n  );\n}\n\nexport function repoOnDisconnectSetWithPriority(\n  repo: Repo,\n  path: Path,\n  value: unknown,\n  priority: unknown,\n  onComplete: ((status: Error | null, errorReason?: string) => void) | null\n): void {\n  const newNode = nodeFromJSON(value, priority);\n  repo.server_.onDisconnectPut(\n    path.toString(),\n    newNode.val(/*export=*/ true),\n    (status, errorReason) => {\n      if (status === 'ok') {\n        sparseSnapshotTreeRemember(repo.onDisconnect_, path, newNode);\n      }\n      repoCallOnCompleteCallback(repo, onComplete, status, errorReason);\n    }\n  );\n}\n\nexport function repoOnDisconnectUpdate(\n  repo: Repo,\n  path: Path,\n  childrenToMerge: { [k: string]: unknown },\n  onComplete: ((status: Error | null, errorReason?: string) => void) | null\n): void {\n  if (isEmpty(childrenToMerge)) {\n    log(\"onDisconnect().update() called with empty data.  Don't do anything.\");\n    repoCallOnCompleteCallback(repo, onComplete, 'ok', undefined);\n    return;\n  }\n\n  repo.server_.onDisconnectMerge(\n    path.toString(),\n    childrenToMerge,\n    (status, errorReason) => {\n      if (status === 'ok') {\n        each(childrenToMerge, (childName: string, childNode: unknown) => {\n          const newChildNode = nodeFromJSON(childNode);\n          sparseSnapshotTreeRemember(\n            repo.onDisconnect_,\n            pathChild(path, childName),\n            newChildNode\n          );\n        });\n      }\n      repoCallOnCompleteCallback(repo, onComplete, status, errorReason);\n    }\n  );\n}\n\nexport function repoAddEventCallbackForQuery(\n  repo: Repo,\n  query: QueryContext,\n  eventRegistration: EventRegistration\n): void {\n  let events;\n  if (pathGetFront(query._path) === '.info') {\n    events = syncTreeAddEventRegistration(\n      repo.infoSyncTree_,\n      query,\n      eventRegistration\n    );\n  } else {\n    events = syncTreeAddEventRegistration(\n      repo.serverSyncTree_,\n      query,\n      eventRegistration\n    );\n  }\n  eventQueueRaiseEventsAtPath(repo.eventQueue_, query._path, events);\n}\n\nexport function repoRemoveEventCallbackForQuery(\n  repo: Repo,\n  query: QueryContext,\n  eventRegistration: EventRegistration\n): void {\n  // These are guaranteed not to raise events, since we're not passing in a cancelError. However, we can future-proof\n  // a little bit by handling the return values anyways.\n  let events;\n  if (pathGetFront(query._path) === '.info') {\n    events = syncTreeRemoveEventRegistration(\n      repo.infoSyncTree_,\n      query,\n      eventRegistration\n    );\n  } else {\n    events = syncTreeRemoveEventRegistration(\n      repo.serverSyncTree_,\n      query,\n      eventRegistration\n    );\n  }\n  eventQueueRaiseEventsAtPath(repo.eventQueue_, query._path, events);\n}\n\nexport function repoInterrupt(repo: Repo): void {\n  if (repo.persistentConnection_) {\n    repo.persistentConnection_.interrupt(INTERRUPT_REASON);\n  }\n}\n\nexport function repoResume(repo: Repo): void {\n  if (repo.persistentConnection_) {\n    repo.persistentConnection_.resume(INTERRUPT_REASON);\n  }\n}\n\nexport function repoStats(repo: Repo, showDelta: boolean = false): void {\n  if (typeof console === 'undefined') {\n    return;\n  }\n\n  let stats: { [k: string]: unknown };\n  if (showDelta) {\n    if (!repo.statsListener_) {\n      repo.statsListener_ = new StatsListener(repo.stats_);\n    }\n    stats = repo.statsListener_.get();\n  } else {\n    stats = repo.stats_.get();\n  }\n\n  const longestName = Object.keys(stats).reduce(\n    (previousValue, currentValue) =>\n      Math.max(currentValue.length, previousValue),\n    0\n  );\n\n  each(stats, (stat: string, value: unknown) => {\n    let paddedStat = stat;\n    // pad stat names to be the same length (plus 2 extra spaces).\n    for (let i = stat.length; i < longestName + 2; i++) {\n      paddedStat += ' ';\n    }\n    console.log(paddedStat + value);\n  });\n}\n\nexport function repoStatsIncrementCounter(repo: Repo, metric: string): void {\n  repo.stats_.incrementCounter(metric);\n  statsReporterIncludeStat(repo.statsReporter_, metric);\n}\n\nfunction repoLog(repo: Repo, ...varArgs: unknown[]): void {\n  let prefix = '';\n  if (repo.persistentConnection_) {\n    prefix = repo.persistentConnection_.id + ':';\n  }\n  log(prefix, ...varArgs);\n}\n\nexport function repoCallOnCompleteCallback(\n  repo: Repo,\n  callback: ((status: Error | null, errorReason?: string) => void) | null,\n  status: string,\n  errorReason?: string | null\n): void {\n  if (callback) {\n    exceptionGuard(() => {\n      if (status === 'ok') {\n        callback(null);\n      } else {\n        const code = (status || 'error').toUpperCase();\n        let message = code;\n        if (errorReason) {\n          message += ': ' + errorReason;\n        }\n\n        const error = new Error(message);\n\n        // eslint-disable-next-line @typescript-eslint/no-explicit-any\n        (error as any).code = code;\n        callback(error);\n      }\n    });\n  }\n}\n\n/**\n * Creates a new transaction, adds it to the transactions we're tracking, and\n * sends it to the server if possible.\n *\n * @param path - Path at which to do transaction.\n * @param transactionUpdate - Update callback.\n * @param onComplete - Completion callback.\n * @param unwatcher - Function that will be called when the transaction no longer\n * need data updates for `path`.\n * @param applyLocally - Whether or not to make intermediate results visible\n */\nexport function repoStartTransaction(\n  repo: Repo,\n  path: Path,\n  transactionUpdate: (a: unknown) => unknown,\n  onComplete: ((error: Error, committed: boolean, node: Node) => void) | null,\n  unwatcher: () => void,\n  applyLocally: boolean\n): void {\n  repoLog(repo, 'transaction on ' + path);\n\n  // Initialize transaction.\n  const transaction: Transaction = {\n    path,\n    update: transactionUpdate,\n    onComplete,\n    // One of TransactionStatus enums.\n    status: null,\n    // Used when combining transactions at different locations to figure out\n    // which one goes first.\n    order: LUIDGenerator(),\n    // Whether to raise local events for this transaction.\n    applyLocally,\n    // Count of how many times we've retried the transaction.\n    retryCount: 0,\n    // Function to call to clean up our .on() listener.\n    unwatcher,\n    // Stores why a transaction was aborted.\n    abortReason: null,\n    currentWriteId: null,\n    currentInputSnapshot: null,\n    currentOutputSnapshotRaw: null,\n    currentOutputSnapshotResolved: null\n  };\n\n  // Run transaction initially.\n  const currentState = repoGetLatestState(repo, path, undefined);\n  transaction.currentInputSnapshot = currentState;\n  const newVal = transaction.update(currentState.val());\n  if (newVal === undefined) {\n    // Abort transaction.\n    transaction.unwatcher();\n    transaction.currentOutputSnapshotRaw = null;\n    transaction.currentOutputSnapshotResolved = null;\n    if (transaction.onComplete) {\n      transaction.onComplete(null, false, transaction.currentInputSnapshot);\n    }\n  } else {\n    validateFirebaseData(\n      'transaction failed: Data returned ',\n      newVal,\n      transaction.path\n    );\n\n    // Mark as run and add to our queue.\n    transaction.status = TransactionStatus.RUN;\n    const queueNode = treeSubTree(repo.transactionQueueTree_, path);\n    const nodeQueue = treeGetValue(queueNode) || [];\n    nodeQueue.push(transaction);\n\n    treeSetValue(queueNode, nodeQueue);\n\n    // Update visibleData and raise events\n    // Note: We intentionally raise events after updating all of our\n    // transaction state, since the user could start new transactions from the\n    // event callbacks.\n    let priorityForNode;\n    if (\n      typeof newVal === 'object' &&\n      newVal !== null &&\n      contains(newVal, '.priority')\n    ) {\n      // eslint-disable-next-line @typescript-eslint/no-explicit-any\n      priorityForNode = safeGet(newVal as any, '.priority');\n      assert(\n        isValidPriority(priorityForNode),\n        'Invalid priority returned by transaction. ' +\n          'Priority must be a valid string, finite number, server value, or null.'\n      );\n    } else {\n      const currentNode =\n        syncTreeCalcCompleteEventCache(repo.serverSyncTree_, path) ||\n        ChildrenNode.EMPTY_NODE;\n      priorityForNode = currentNode.getPriority().val();\n    }\n\n    const serverValues = repoGenerateServerValues(repo);\n    const newNodeUnresolved = nodeFromJSON(newVal, priorityForNode);\n    const newNode = resolveDeferredValueSnapshot(\n      newNodeUnresolved,\n      currentState,\n      serverValues\n    );\n    transaction.currentOutputSnapshotRaw = newNodeUnresolved;\n    transaction.currentOutputSnapshotResolved = newNode;\n    transaction.currentWriteId = repoGetNextWriteId(repo);\n\n    const events = syncTreeApplyUserOverwrite(\n      repo.serverSyncTree_,\n      path,\n      newNode,\n      transaction.currentWriteId,\n      transaction.applyLocally\n    );\n    eventQueueRaiseEventsForChangedPath(repo.eventQueue_, path, events);\n\n    repoSendReadyTransactions(repo, repo.transactionQueueTree_);\n  }\n}\n\n/**\n * @param excludeSets - A specific set to exclude\n */\nfunction repoGetLatestState(\n  repo: Repo,\n  path: Path,\n  excludeSets?: number[]\n): Node {\n  return (\n    syncTreeCalcCompleteEventCache(repo.serverSyncTree_, path, excludeSets) ||\n    ChildrenNode.EMPTY_NODE\n  );\n}\n\n/**\n * Sends any already-run transactions that aren't waiting for outstanding\n * transactions to complete.\n *\n * Externally it's called with no arguments, but it calls itself recursively\n * with a particular transactionQueueTree node to recurse through the tree.\n *\n * @param node - transactionQueueTree node to start at.\n */\nfunction repoSendReadyTransactions(\n  repo: Repo,\n  node: Tree<Transaction[]> = repo.transactionQueueTree_\n): void {\n  // Before recursing, make sure any completed transactions are removed.\n  if (!node) {\n    repoPruneCompletedTransactionsBelowNode(repo, node);\n  }\n\n  if (treeGetValue(node)) {\n    const queue = repoBuildTransactionQueue(repo, node);\n    assert(queue.length > 0, 'Sending zero length transaction queue');\n\n    const allRun = queue.every(\n      (transaction: Transaction) => transaction.status === TransactionStatus.RUN\n    );\n\n    // If they're all run (and not sent), we can send them.  Else, we must wait.\n    if (allRun) {\n      repoSendTransactionQueue(repo, treeGetPath(node), queue);\n    }\n  } else if (treeHasChildren(node)) {\n    treeForEachChild(node, childNode => {\n      repoSendReadyTransactions(repo, childNode);\n    });\n  }\n}\n\n/**\n * Given a list of run transactions, send them to the server and then handle\n * the result (success or failure).\n *\n * @param path - The location of the queue.\n * @param queue - Queue of transactions under the specified location.\n */\nfunction repoSendTransactionQueue(\n  repo: Repo,\n  path: Path,\n  queue: Transaction[]\n): void {\n  // Mark transactions as sent and increment retry count!\n  const setsToIgnore = queue.map(txn => {\n    return txn.currentWriteId;\n  });\n  const latestState = repoGetLatestState(repo, path, setsToIgnore);\n  let snapToSend = latestState;\n  const latestHash = latestState.hash();\n  for (let i = 0; i < queue.length; i++) {\n    const txn = queue[i];\n    assert(\n      txn.status === TransactionStatus.RUN,\n      'tryToSendTransactionQueue_: items in queue should all be run.'\n    );\n    txn.status = TransactionStatus.SENT;\n    txn.retryCount++;\n    const relativePath = newRelativePath(path, txn.path);\n    // If we've gotten to this point, the output snapshot must be defined.\n    snapToSend = snapToSend.updateChild(\n      relativePath /** @type {!Node} */,\n      txn.currentOutputSnapshotRaw\n    );\n  }\n\n  const dataToSend = snapToSend.val(true);\n  const pathToSend = path;\n\n  // Send the put.\n  repo.server_.put(\n    pathToSend.toString(),\n    dataToSend,\n    (status: string) => {\n      repoLog(repo, 'transaction put response', {\n        path: pathToSend.toString(),\n        status\n      });\n\n      let events: Event[] = [];\n      if (status === 'ok') {\n        // Queue up the callbacks and fire them after cleaning up all of our\n        // transaction state, since the callback could trigger more\n        // transactions or sets.\n        const callbacks = [];\n        for (let i = 0; i < queue.length; i++) {\n          queue[i].status = TransactionStatus.COMPLETED;\n          events = events.concat(\n            syncTreeAckUserWrite(repo.serverSyncTree_, queue[i].currentWriteId)\n          );\n          if (queue[i].onComplete) {\n            // We never unset the output snapshot, and given that this\n            // transaction is complete, it should be set\n            callbacks.push(() =>\n              queue[i].onComplete(\n                null,\n                true,\n                queue[i].currentOutputSnapshotResolved\n              )\n            );\n          }\n          queue[i].unwatcher();\n        }\n\n        // Now remove the completed transactions.\n        repoPruneCompletedTransactionsBelowNode(\n          repo,\n          treeSubTree(repo.transactionQueueTree_, path)\n        );\n        // There may be pending transactions that we can now send.\n        repoSendReadyTransactions(repo, repo.transactionQueueTree_);\n\n        eventQueueRaiseEventsForChangedPath(repo.eventQueue_, path, events);\n\n        // Finally, trigger onComplete callbacks.\n        for (let i = 0; i < callbacks.length; i++) {\n          exceptionGuard(callbacks[i]);\n        }\n      } else {\n        // transactions are no longer sent.  Update their status appropriately.\n        if (status === 'datastale') {\n          for (let i = 0; i < queue.length; i++) {\n            if (queue[i].status === TransactionStatus.SENT_NEEDS_ABORT) {\n              queue[i].status = TransactionStatus.NEEDS_ABORT;\n            } else {\n              queue[i].status = TransactionStatus.RUN;\n            }\n          }\n        } else {\n          warn(\n            'transaction at ' + pathToSend.toString() + ' failed: ' + status\n          );\n          for (let i = 0; i < queue.length; i++) {\n            queue[i].status = TransactionStatus.NEEDS_ABORT;\n            queue[i].abortReason = status;\n          }\n        }\n\n        repoRerunTransactions(repo, path);\n      }\n    },\n    latestHash\n  );\n}\n\n/**\n * Finds all transactions dependent on the data at changedPath and reruns them.\n *\n * Should be called any time cached data changes.\n *\n * Return the highest path that was affected by rerunning transactions. This\n * is the path at which events need to be raised for.\n *\n * @param changedPath - The path in mergedData that changed.\n * @returns The rootmost path that was affected by rerunning transactions.\n */\nfunction repoRerunTransactions(repo: Repo, changedPath: Path): Path {\n  const rootMostTransactionNode = repoGetAncestorTransactionNode(\n    repo,\n    changedPath\n  );\n  const path = treeGetPath(rootMostTransactionNode);\n\n  const queue = repoBuildTransactionQueue(repo, rootMostTransactionNode);\n  repoRerunTransactionQueue(repo, queue, path);\n\n  return path;\n}\n\n/**\n * Does all the work of rerunning transactions (as well as cleans up aborted\n * transactions and whatnot).\n *\n * @param queue - The queue of transactions to run.\n * @param path - The path the queue is for.\n */\nfunction repoRerunTransactionQueue(\n  repo: Repo,\n  queue: Transaction[],\n  path: Path\n): void {\n  if (queue.length === 0) {\n    return; // Nothing to do!\n  }\n\n  // Queue up the callbacks and fire them after cleaning up all of our\n  // transaction state, since the callback could trigger more transactions or\n  // sets.\n  const callbacks = [];\n  let events: Event[] = [];\n  // Ignore all of the sets we're going to re-run.\n  const txnsToRerun = queue.filter(q => {\n    return q.status === TransactionStatus.RUN;\n  });\n  const setsToIgnore = txnsToRerun.map(q => {\n    return q.currentWriteId;\n  });\n  for (let i = 0; i < queue.length; i++) {\n    const transaction = queue[i];\n    const relativePath = newRelativePath(path, transaction.path);\n    let abortTransaction = false,\n      abortReason;\n    assert(\n      relativePath !== null,\n      'rerunTransactionsUnderNode_: relativePath should not be null.'\n    );\n\n    if (transaction.status === TransactionStatus.NEEDS_ABORT) {\n      abortTransaction = true;\n      abortReason = transaction.abortReason;\n      events = events.concat(\n        syncTreeAckUserWrite(\n          repo.serverSyncTree_,\n          transaction.currentWriteId,\n          true\n        )\n      );\n    } else if (transaction.status === TransactionStatus.RUN) {\n      if (transaction.retryCount >= MAX_TRANSACTION_RETRIES) {\n        abortTransaction = true;\n        abortReason = 'maxretry';\n        events = events.concat(\n          syncTreeAckUserWrite(\n            repo.serverSyncTree_,\n            transaction.currentWriteId,\n            true\n          )\n        );\n      } else {\n        // This code reruns a transaction\n        const currentNode = repoGetLatestState(\n          repo,\n          transaction.path,\n          setsToIgnore\n        );\n        transaction.currentInputSnapshot = currentNode;\n        const newData = queue[i].update(currentNode.val());\n        if (newData !== undefined) {\n          validateFirebaseData(\n            'transaction failed: Data returned ',\n            newData,\n            transaction.path\n          );\n          let newDataNode = nodeFromJSON(newData);\n          const hasExplicitPriority =\n            typeof newData === 'object' &&\n            newData != null &&\n            contains(newData, '.priority');\n          if (!hasExplicitPriority) {\n            // Keep the old priority if there wasn't a priority explicitly specified.\n            newDataNode = newDataNode.updatePriority(currentNode.getPriority());\n          }\n\n          const oldWriteId = transaction.currentWriteId;\n          const serverValues = repoGenerateServerValues(repo);\n          const newNodeResolved = resolveDeferredValueSnapshot(\n            newDataNode,\n            currentNode,\n            serverValues\n          );\n\n          transaction.currentOutputSnapshotRaw = newDataNode;\n          transaction.currentOutputSnapshotResolved = newNodeResolved;\n          transaction.currentWriteId = repoGetNextWriteId(repo);\n          // Mutates setsToIgnore in place\n          setsToIgnore.splice(setsToIgnore.indexOf(oldWriteId), 1);\n          events = events.concat(\n            syncTreeApplyUserOverwrite(\n              repo.serverSyncTree_,\n              transaction.path,\n              newNodeResolved,\n              transaction.currentWriteId,\n              transaction.applyLocally\n            )\n          );\n          events = events.concat(\n            syncTreeAckUserWrite(repo.serverSyncTree_, oldWriteId, true)\n          );\n        } else {\n          abortTransaction = true;\n          abortReason = 'nodata';\n          events = events.concat(\n            syncTreeAckUserWrite(\n              repo.serverSyncTree_,\n              transaction.currentWriteId,\n              true\n            )\n          );\n        }\n      }\n    }\n    eventQueueRaiseEventsForChangedPath(repo.eventQueue_, path, events);\n    events = [];\n    if (abortTransaction) {\n      // Abort.\n      queue[i].status = TransactionStatus.COMPLETED;\n\n      // Removing a listener can trigger pruning which can muck with\n      // mergedData/visibleData (as it prunes data). So defer the unwatcher\n      // until we're done.\n      (function (unwatcher) {\n        setTimeout(unwatcher, Math.floor(0));\n      })(queue[i].unwatcher);\n\n      if (queue[i].onComplete) {\n        if (abortReason === 'nodata') {\n          callbacks.push(() =>\n            queue[i].onComplete(null, false, queue[i].currentInputSnapshot)\n          );\n        } else {\n          callbacks.push(() =>\n            queue[i].onComplete(new Error(abortReason), false, null)\n          );\n        }\n      }\n    }\n  }\n\n  // Clean up completed transactions.\n  repoPruneCompletedTransactionsBelowNode(repo, repo.transactionQueueTree_);\n\n  // Now fire callbacks, now that we're in a good, known state.\n  for (let i = 0; i < callbacks.length; i++) {\n    exceptionGuard(callbacks[i]);\n  }\n\n  // Try to send the transaction result to the server.\n  repoSendReadyTransactions(repo, repo.transactionQueueTree_);\n}\n\n/**\n * Returns the rootmost ancestor node of the specified path that has a pending\n * transaction on it, or just returns the node for the given path if there are\n * no pending transactions on any ancestor.\n *\n * @param path - The location to start at.\n * @returns The rootmost node with a transaction.\n */\nfunction repoGetAncestorTransactionNode(\n  repo: Repo,\n  path: Path\n): Tree<Transaction[]> {\n  let front;\n\n  // Start at the root and walk deeper into the tree towards path until we\n  // find a node with pending transactions.\n  let transactionNode = repo.transactionQueueTree_;\n  front = pathGetFront(path);\n  while (front !== null && treeGetValue(transactionNode) === undefined) {\n    transactionNode = treeSubTree(transactionNode, front);\n    path = pathPopFront(path);\n    front = pathGetFront(path);\n  }\n\n  return transactionNode;\n}\n\n/**\n * Builds the queue of all transactions at or below the specified\n * transactionNode.\n *\n * @param transactionNode\n * @returns The generated queue.\n */\nfunction repoBuildTransactionQueue(\n  repo: Repo,\n  transactionNode: Tree<Transaction[]>\n): Transaction[] {\n  // Walk any child transaction queues and aggregate them into a single queue.\n  const transactionQueue: Transaction[] = [];\n  repoAggregateTransactionQueuesForNode(\n    repo,\n    transactionNode,\n    transactionQueue\n  );\n\n  // Sort them by the order the transactions were created.\n  transactionQueue.sort((a, b) => a.order - b.order);\n\n  return transactionQueue;\n}\n\nfunction repoAggregateTransactionQueuesForNode(\n  repo: Repo,\n  node: Tree<Transaction[]>,\n  queue: Transaction[]\n): void {\n  const nodeQueue = treeGetValue(node);\n  if (nodeQueue) {\n    for (let i = 0; i < nodeQueue.length; i++) {\n      queue.push(nodeQueue[i]);\n    }\n  }\n\n  treeForEachChild(node, child => {\n    repoAggregateTransactionQueuesForNode(repo, child, queue);\n  });\n}\n\n/**\n * Remove COMPLETED transactions at or below this node in the transactionQueueTree_.\n */\nfunction repoPruneCompletedTransactionsBelowNode(\n  repo: Repo,\n  node: Tree<Transaction[]>\n): void {\n  const queue = treeGetValue(node);\n  if (queue) {\n    let to = 0;\n    for (let from = 0; from < queue.length; from++) {\n      if (queue[from].status !== TransactionStatus.COMPLETED) {\n        queue[to] = queue[from];\n        to++;\n      }\n    }\n    queue.length = to;\n    treeSetValue(node, queue.length > 0 ? queue : undefined);\n  }\n\n  treeForEachChild(node, childNode => {\n    repoPruneCompletedTransactionsBelowNode(repo, childNode);\n  });\n}\n\n/**\n * Aborts all transactions on ancestors or descendants of the specified path.\n * Called when doing a set() or update() since we consider them incompatible\n * with transactions.\n *\n * @param path - Path for which we want to abort related transactions.\n */\nfunction repoAbortTransactions(repo: Repo, path: Path): Path {\n  const affectedPath = treeGetPath(repoGetAncestorTransactionNode(repo, path));\n\n  const transactionNode = treeSubTree(repo.transactionQueueTree_, path);\n\n  treeForEachAncestor(transactionNode, (node: Tree<Transaction[]>) => {\n    repoAbortTransactionsOnNode(repo, node);\n  });\n\n  repoAbortTransactionsOnNode(repo, transactionNode);\n\n  treeForEachDescendant(transactionNode, (node: Tree<Transaction[]>) => {\n    repoAbortTransactionsOnNode(repo, node);\n  });\n\n  return affectedPath;\n}\n\n/**\n * Abort transactions stored in this transaction queue node.\n *\n * @param node - Node to abort transactions for.\n */\nfunction repoAbortTransactionsOnNode(\n  repo: Repo,\n  node: Tree<Transaction[]>\n): void {\n  const queue = treeGetValue(node);\n  if (queue) {\n    // Queue up the callbacks and fire them after cleaning up all of our\n    // transaction state, since the callback could trigger more transactions\n    // or sets.\n    const callbacks = [];\n\n    // Go through queue.  Any already-sent transactions must be marked for\n    // abort, while the unsent ones can be immediately aborted and removed.\n    let events: Event[] = [];\n    let lastSent = -1;\n    for (let i = 0; i < queue.length; i++) {\n      if (queue[i].status === TransactionStatus.SENT_NEEDS_ABORT) {\n        // Already marked.  No action needed.\n      } else if (queue[i].status === TransactionStatus.SENT) {\n        assert(\n          lastSent === i - 1,\n          'All SENT items should be at beginning of queue.'\n        );\n        lastSent = i;\n        // Mark transaction for abort when it comes back.\n        queue[i].status = TransactionStatus.SENT_NEEDS_ABORT;\n        queue[i].abortReason = 'set';\n      } else {\n        assert(\n          queue[i].status === TransactionStatus.RUN,\n          'Unexpected transaction status in abort'\n        );\n        // We can abort it immediately.\n        queue[i].unwatcher();\n        events = events.concat(\n          syncTreeAckUserWrite(\n            repo.serverSyncTree_,\n            queue[i].currentWriteId,\n            true\n          )\n        );\n        if (queue[i].onComplete) {\n          callbacks.push(\n            queue[i].onComplete.bind(null, new Error('set'), false, null)\n          );\n        }\n      }\n    }\n    if (lastSent === -1) {\n      // We're not waiting for any sent transactions.  We can clear the queue.\n      treeSetValue(node, undefined);\n    } else {\n      // Remove the transactions we aborted.\n      queue.length = lastSent + 1;\n    }\n\n    // Now fire the callbacks.\n    eventQueueRaiseEventsForChangedPath(\n      repo.eventQueue_,\n      treeGetPath(node),\n      events\n    );\n    for (let i = 0; i < callbacks.length; i++) {\n      exceptionGuard(callbacks[i]);\n    }\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { RepoInfo } from '../../RepoInfo';\nimport { Path } from '../Path';\nimport { warnIfPageIsSecure, warn, fatal } from '../util';\n\nfunction decodePath(pathString: string): string {\n  let pathStringDecoded = '';\n  const pieces = pathString.split('/');\n  for (let i = 0; i < pieces.length; i++) {\n    if (pieces[i].length > 0) {\n      let piece = pieces[i];\n      try {\n        piece = decodeURIComponent(piece.replace(/\\+/g, ' '));\n      } catch (e) {}\n      pathStringDecoded += '/' + piece;\n    }\n  }\n  return pathStringDecoded;\n}\n\n/**\n * @returns key value hash\n */\nfunction decodeQuery(queryString: string): { [key: string]: string } {\n  const results = {};\n  if (queryString.charAt(0) === '?') {\n    queryString = queryString.substring(1);\n  }\n  for (const segment of queryString.split('&')) {\n    if (segment.length === 0) {\n      continue;\n    }\n    const kv = segment.split('=');\n    if (kv.length === 2) {\n      results[decodeURIComponent(kv[0])] = decodeURIComponent(kv[1]);\n    } else {\n      warn(`Invalid query segment '${segment}' in query '${queryString}'`);\n    }\n  }\n  return results;\n}\n\nexport const parseRepoInfo = function (\n  dataURL: string,\n  nodeAdmin: boolean\n): { repoInfo: RepoInfo; path: Path } {\n  const parsedUrl = parseDatabaseURL(dataURL),\n    namespace = parsedUrl.namespace;\n\n  if (parsedUrl.domain === 'firebase.com') {\n    fatal(\n      parsedUrl.host +\n        ' is no longer supported. ' +\n        'Please use <YOUR FIREBASE>.firebaseio.com instead'\n    );\n  }\n\n  // Catch common error of uninitialized namespace value.\n  if (\n    (!namespace || namespace === 'undefined') &&\n    parsedUrl.domain !== 'localhost'\n  ) {\n    fatal(\n      'Cannot parse Firebase url. Please use https://<YOUR FIREBASE>.firebaseio.com'\n    );\n  }\n\n  if (!parsedUrl.secure) {\n    warnIfPageIsSecure();\n  }\n\n  const webSocketOnly = parsedUrl.scheme === 'ws' || parsedUrl.scheme === 'wss';\n\n  return {\n    repoInfo: new RepoInfo(\n      parsedUrl.host,\n      parsedUrl.secure,\n      namespace,\n      nodeAdmin,\n      webSocketOnly,\n      /*persistenceKey=*/ '',\n      /*includeNamespaceInQueryParams=*/ namespace !== parsedUrl.subdomain\n    ),\n    path: new Path(parsedUrl.pathString)\n  };\n};\n\nexport const parseDatabaseURL = function (\n  dataURL: string\n): {\n  host: string;\n  port: number;\n  domain: string;\n  subdomain: string;\n  secure: boolean;\n  scheme: string;\n  pathString: string;\n  namespace: string;\n} {\n  // Default to empty strings in the event of a malformed string.\n  let host = '',\n    domain = '',\n    subdomain = '',\n    pathString = '',\n    namespace = '';\n\n  // Always default to SSL, unless otherwise specified.\n  let secure = true,\n    scheme = 'https',\n    port = 443;\n\n  // Don't do any validation here. The caller is responsible for validating the result of parsing.\n  if (typeof dataURL === 'string') {\n    // Parse scheme.\n    let colonInd = dataURL.indexOf('//');\n    if (colonInd >= 0) {\n      scheme = dataURL.substring(0, colonInd - 1);\n      dataURL = dataURL.substring(colonInd + 2);\n    }\n\n    // Parse host, path, and query string.\n    let slashInd = dataURL.indexOf('/');\n    if (slashInd === -1) {\n      slashInd = dataURL.length;\n    }\n    let questionMarkInd = dataURL.indexOf('?');\n    if (questionMarkInd === -1) {\n      questionMarkInd = dataURL.length;\n    }\n    host = dataURL.substring(0, Math.min(slashInd, questionMarkInd));\n    if (slashInd < questionMarkInd) {\n      // For pathString, questionMarkInd will always come after slashInd\n      pathString = decodePath(dataURL.substring(slashInd, questionMarkInd));\n    }\n    const queryParams = decodeQuery(\n      dataURL.substring(Math.min(dataURL.length, questionMarkInd))\n    );\n\n    // If we have a port, use scheme for determining if it's secure.\n    colonInd = host.indexOf(':');\n    if (colonInd >= 0) {\n      secure = scheme === 'https' || scheme === 'wss';\n      port = parseInt(host.substring(colonInd + 1), 10);\n    } else {\n      colonInd = host.length;\n    }\n\n    const hostWithoutPort = host.slice(0, colonInd);\n    if (hostWithoutPort.toLowerCase() === 'localhost') {\n      domain = 'localhost';\n    } else if (hostWithoutPort.split('.').length <= 2) {\n      domain = hostWithoutPort;\n    } else {\n      // Interpret the subdomain of a 3 or more component URL as the namespace name.\n      const dotInd = host.indexOf('.');\n      subdomain = host.substring(0, dotInd).toLowerCase();\n      domain = host.substring(dotInd + 1);\n      // Normalize namespaces to lowercase to share storage / connection.\n      namespace = subdomain;\n    }\n    // Always treat the value of the `ns` as the namespace name if it is present.\n    if ('ns' in queryParams) {\n      namespace = queryParams['ns'];\n    }\n  }\n\n  return {\n    host,\n    port,\n    domain,\n    subdomain,\n    secure,\n    scheme,\n    pathString,\n    namespace\n  };\n};\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { stringify } from '@firebase/util';\n\nimport { DataSnapshot as ExpDataSnapshot } from '../../exp/Reference_impl';\nimport { Path } from '../util/Path';\n\nimport { EventRegistration } from './EventRegistration';\n\n/**\n * Encapsulates the data needed to raise an event\n * @interface\n */\nexport interface Event {\n  getPath(): Path;\n\n  getEventType(): string;\n\n  getEventRunner(): () => void;\n\n  toString(): string;\n}\n\n/**\n * One of the following strings: \"value\", \"child_added\", \"child_changed\",\n * \"child_removed\", or \"child_moved.\"\n */\nexport type EventType =\n  | 'value'\n  | 'child_added'\n  | 'child_changed'\n  | 'child_moved'\n  | 'child_removed';\n\n/**\n * Encapsulates the data needed to raise an event\n */\nexport class DataEvent implements Event {\n  /**\n   * @param eventType - One of: value, child_added, child_changed, child_moved, child_removed\n   * @param eventRegistration - The function to call to with the event data. User provided\n   * @param snapshot - The data backing the event\n   * @param prevName - Optional, the name of the previous child for child_* events.\n   */\n  constructor(\n    public eventType: EventType,\n    public eventRegistration: EventRegistration,\n    public snapshot: ExpDataSnapshot,\n    public prevName?: string | null\n  ) {}\n  getPath(): Path {\n    const ref = this.snapshot.ref;\n    if (this.eventType === 'value') {\n      return ref._path;\n    } else {\n      return ref.parent._path;\n    }\n  }\n  getEventType(): string {\n    return this.eventType;\n  }\n  getEventRunner(): () => void {\n    return this.eventRegistration.getEventRunner(this);\n  }\n  toString(): string {\n    return (\n      this.getPath().toString() +\n      ':' +\n      this.eventType +\n      ':' +\n      stringify(this.snapshot.exportVal())\n    );\n  }\n}\n\nexport class CancelEvent implements Event {\n  constructor(\n    public eventRegistration: EventRegistration,\n    public error: Error,\n    public path: Path\n  ) {}\n  getPath(): Path {\n    return this.path;\n  }\n  getEventType(): string {\n    return 'cancel';\n  }\n  getEventRunner(): () => void {\n    return this.eventRegistration.getEventRunner(this);\n  }\n  toString(): string {\n    return this.path.toString() + ':cancel';\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { assert } from '@firebase/util';\n\nimport { DataSnapshot } from '../../exp/Reference_impl';\nimport { Repo } from '../Repo';\nimport { Path } from '../util/Path';\n\nimport { Change } from './Change';\nimport { CancelEvent, Event } from './Event';\nimport { QueryParams } from './QueryParams';\n\n/**\n * A user callback. Callbacks issues from the Legacy SDK maintain references\n *  to the original user-issued callbacks, which allows equality\n * comparison by reference even though this callbacks are wrapped before\n * they can be passed to the firebase@exp SDK.\n */\nexport interface UserCallback {\n  (dataSnapshot: DataSnapshot, previousChildName?: string | null): unknown;\n  userCallback?: unknown;\n  context?: object | null;\n}\n\n/**\n * A wrapper class that converts events from the database@exp SDK to the legacy\n * Database SDK. Events are not converted directly as event registration relies\n * on reference comparison of the original user callback (see `matches()`) and\n * relies on equality of the legacy SDK's `context` object.\n */\nexport class CallbackContext {\n  constructor(\n    private readonly snapshotCallback: UserCallback,\n    private readonly cancelCallback?: (error: Error) => unknown\n  ) {}\n\n  onValue(\n    expDataSnapshot: DataSnapshot,\n    previousChildName?: string | null\n  ): void {\n    this.snapshotCallback.call(null, expDataSnapshot, previousChildName);\n  }\n\n  onCancel(error: Error): void {\n    assert(\n      this.hasCancelCallback,\n      'Raising a cancel event on a listener with no cancel callback'\n    );\n    return this.cancelCallback.call(null, error);\n  }\n\n  get hasCancelCallback(): boolean {\n    return !!this.cancelCallback;\n  }\n\n  matches(other: CallbackContext): boolean {\n    return (\n      this.snapshotCallback === other.snapshotCallback ||\n      (this.snapshotCallback.userCallback ===\n        other.snapshotCallback.userCallback &&\n        this.snapshotCallback.context === other.snapshotCallback.context)\n    );\n  }\n}\n\nexport interface QueryContext {\n  readonly _queryIdentifier: string;\n  readonly _queryObject: object;\n  readonly _repo: Repo;\n  readonly _path: Path;\n  readonly _queryParams: QueryParams;\n}\n\n/**\n * An EventRegistration is basically an event type ('value', 'child_added', etc.) and a callback\n * to be notified of that type of event.\n *\n * That said, it can also contain a cancel callback to be notified if the event is canceled.  And\n * currently, this code is organized around the idea that you would register multiple child_ callbacks\n * together, as a single EventRegistration.  Though currently we don't do that.\n */\nexport interface EventRegistration {\n  /**\n   * True if this container has a callback to trigger for this event type\n   */\n  respondsTo(eventType: string): boolean;\n\n  createEvent(change: Change, query: QueryContext): Event;\n\n  /**\n   * Given event data, return a function to trigger the user's callback\n   */\n  getEventRunner(eventData: Event): () => void;\n\n  createCancelEvent(error: Error, path: Path): CancelEvent | null;\n\n  matches(other: EventRegistration): boolean;\n\n  /**\n   * False basically means this is a \"dummy\" callback container being used as a sentinel\n   * to remove all callback containers of a particular type.  (e.g. if the user does\n   * ref.off('value') without specifying a specific callback).\n   *\n   * (TODO: Rework this, since it's hacky)\n   *\n   */\n  hasAnyCallback(): boolean;\n}\n","/**\n * @license\n * Copyright 2021 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Deferred } from '@firebase/util';\n\nimport {\n  Repo,\n  repoOnDisconnectCancel,\n  repoOnDisconnectSet,\n  repoOnDisconnectSetWithPriority,\n  repoOnDisconnectUpdate\n} from '../core/Repo';\nimport { Path } from '../core/util/Path';\nimport {\n  validateFirebaseDataArg,\n  validateFirebaseMergeDataArg,\n  validatePriority,\n  validateWritablePath\n} from '../core/util/validation';\n\n/**\n * The `onDisconnect` class allows you to write or clear data when your client\n * disconnects from the Database server. These updates occur whether your\n * client disconnects cleanly or not, so you can rely on them to clean up data\n * even if a connection is dropped or a client crashes.\n *\n * The `onDisconnect` class is most commonly used to manage presence in\n * applications where it is useful to detect how many clients are connected and\n * when other clients disconnect. See\n * {@link https://firebase.google.com/docs/database/web/offline-capabilities | Enabling Offline Capabilities in JavaScript}\n * for more information.\n *\n * To avoid problems when a connection is dropped before the requests can be\n * transferred to the Database server, these functions should be called before\n * writing any data.\n *\n * Note that `onDisconnect` operations are only triggered once. If you want an\n * operation to occur each time a disconnect occurs, you'll need to re-establish\n * the `onDisconnect` operations each time you reconnect.\n */\nexport class OnDisconnect {\n  /** @hideconstructor */\n  constructor(private _repo: Repo, private _path: Path) {}\n\n  /**\n   * Cancels all previously queued `onDisconnect()` set or update events for this\n   * location and all children.\n   *\n   * If a write has been queued for this location via a `set()` or `update()` at a\n   * parent location, the write at this location will be canceled, though writes\n   * to sibling locations will still occur.\n   *\n   * @returns Resolves when synchronization to the server is complete.\n   */\n  cancel(): Promise<void> {\n    const deferred = new Deferred<void>();\n    repoOnDisconnectCancel(\n      this._repo,\n      this._path,\n      deferred.wrapCallback(() => {})\n    );\n    return deferred.promise;\n  }\n\n  /**\n   * Ensures the data at this location is deleted when the client is disconnected\n   * (due to closing the browser, navigating to a new page, or network issues).\n   *\n   * @returns Resolves when synchronization to the server is complete.\n   */\n  remove(): Promise<void> {\n    validateWritablePath('OnDisconnect.remove', this._path);\n    const deferred = new Deferred<void>();\n    repoOnDisconnectSet(\n      this._repo,\n      this._path,\n      null,\n      deferred.wrapCallback(() => {})\n    );\n    return deferred.promise;\n  }\n\n  /**\n   * Ensures the data at this location is set to the specified value when the\n   * client is disconnected (due to closing the browser, navigating to a new page,\n   * or network issues).\n   *\n   * `set()` is especially useful for implementing \"presence\" systems, where a\n   * value should be changed or cleared when a user disconnects so that they\n   * appear \"offline\" to other users. See\n   * {@link https://firebase.google.com/docs/database/web/offline-capabilities | Enabling Offline Capabilities in JavaScript}\n   * for more information.\n   *\n   * Note that `onDisconnect` operations are only triggered once. If you want an\n   * operation to occur each time a disconnect occurs, you'll need to re-establish\n   * the `onDisconnect` operations each time.\n   *\n   * @param value - The value to be written to this location on disconnect (can\n   * be an object, array, string, number, boolean, or null).\n   * @returns Resolves when synchronization to the Database is complete.\n   */\n  set(value: unknown): Promise<void> {\n    validateWritablePath('OnDisconnect.set', this._path);\n    validateFirebaseDataArg('OnDisconnect.set', value, this._path, false);\n    const deferred = new Deferred<void>();\n    repoOnDisconnectSet(\n      this._repo,\n      this._path,\n      value,\n      deferred.wrapCallback(() => {})\n    );\n    return deferred.promise;\n  }\n\n  /**\n   * Ensures the data at this location is set to the specified value and priority\n   * when the client is disconnected (due to closing the browser, navigating to a\n   * new page, or network issues).\n   *\n   * @param value - The value to be written to this location on disconnect (can\n   * be an object, array, string, number, boolean, or null).\n   * @param priority - The priority to be written (string, number, or null).\n   * @returns Resolves when synchronization to the Database is complete.\n   */\n  setWithPriority(\n    value: unknown,\n    priority: number | string | null\n  ): Promise<void> {\n    validateWritablePath('OnDisconnect.setWithPriority', this._path);\n    validateFirebaseDataArg(\n      'OnDisconnect.setWithPriority',\n      value,\n      this._path,\n      false\n    );\n    validatePriority('OnDisconnect.setWithPriority', priority, false);\n\n    const deferred = new Deferred<void>();\n    repoOnDisconnectSetWithPriority(\n      this._repo,\n      this._path,\n      value,\n      priority,\n      deferred.wrapCallback(() => {})\n    );\n    return deferred.promise;\n  }\n\n  /**\n   * Writes multiple values at this location when the client is disconnected (due\n   * to closing the browser, navigating to a new page, or network issues).\n   *\n   * The `values` argument contains multiple property-value pairs that will be\n   * written to the Database together. Each child property can either be a simple\n   * property (for example, \"name\") or a relative path (for example, \"name/first\")\n   * from the current location to the data to update.\n   *\n   * As opposed to the `set()` method, `update()` can be use to selectively update\n   * only the referenced properties at the current location (instead of replacing\n   * all the child properties at the current location).\n   *\n   * @param values - Object containing multiple values.\n   * @returns Resolves when synchronization to the Database is complete.\n   */\n  update(values: object): Promise<void> {\n    validateWritablePath('OnDisconnect.update', this._path);\n    validateFirebaseMergeDataArg(\n      'OnDisconnect.update',\n      values,\n      this._path,\n      false\n    );\n    const deferred = new Deferred<void>();\n    repoOnDisconnectUpdate(\n      this._repo,\n      this._path,\n      values as Record<string, unknown>,\n      deferred.wrapCallback(() => {})\n    );\n    return deferred.promise;\n  }\n}\n","/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { assert, getModularInstance, Deferred } from '@firebase/util';\n\nimport {\n  Repo,\n  repoAddEventCallbackForQuery,\n  repoGetValue,\n  repoRemoveEventCallbackForQuery,\n  repoServerTime,\n  repoSetWithPriority,\n  repoUpdate\n} from '../core/Repo';\nimport { ChildrenNode } from '../core/snap/ChildrenNode';\nimport { Index } from '../core/snap/indexes/Index';\nimport { KEY_INDEX } from '../core/snap/indexes/KeyIndex';\nimport { PathIndex } from '../core/snap/indexes/PathIndex';\nimport { PRIORITY_INDEX } from '../core/snap/indexes/PriorityIndex';\nimport { VALUE_INDEX } from '../core/snap/indexes/ValueIndex';\nimport { Node } from '../core/snap/Node';\nimport { syncPointSetReferenceConstructor } from '../core/SyncPoint';\nimport { syncTreeSetReferenceConstructor } from '../core/SyncTree';\nimport { parseRepoInfo } from '../core/util/libs/parser';\nimport { nextPushId } from '../core/util/NextPushId';\nimport {\n  Path,\n  pathChild,\n  pathEquals,\n  pathGetBack,\n  pathGetFront,\n  pathIsEmpty,\n  pathParent,\n  pathToUrlEncodedString\n} from '../core/util/Path';\nimport {\n  fatal,\n  MAX_NAME,\n  MIN_NAME,\n  ObjectToUniqueKey\n} from '../core/util/util';\nimport {\n  isValidPriority,\n  validateFirebaseDataArg,\n  validateFirebaseMergeDataArg,\n  validateKey,\n  validatePathString,\n  validatePriority,\n  validateRootPathString,\n  validateUrl,\n  validateWritablePath\n} from '../core/util/validation';\nimport { Change } from '../core/view/Change';\nimport { CancelEvent, DataEvent, EventType } from '../core/view/Event';\nimport {\n  CallbackContext,\n  EventRegistration,\n  QueryContext,\n  UserCallback\n} from '../core/view/EventRegistration';\nimport {\n  QueryParams,\n  queryParamsEndAt,\n  queryParamsEndBefore,\n  queryParamsGetQueryObject,\n  queryParamsLimitToFirst,\n  queryParamsLimitToLast,\n  queryParamsOrderBy,\n  queryParamsStartAfter,\n  queryParamsStartAt\n} from '../core/view/QueryParams';\n\nimport { Database } from './Database';\nimport { OnDisconnect } from './OnDisconnect';\nimport {\n  ListenOptions,\n  Query as Query,\n  DatabaseReference,\n  Unsubscribe,\n  ThenableReference\n} from './Reference';\n\n/**\n * @internal\n */\nexport class QueryImpl implements Query, QueryContext {\n  /**\n   * @hideconstructor\n   */\n  constructor(\n    readonly _repo: Repo,\n    readonly _path: Path,\n    readonly _queryParams: QueryParams,\n    readonly _orderByCalled: boolean\n  ) {}\n\n  get key(): string | null {\n    if (pathIsEmpty(this._path)) {\n      return null;\n    } else {\n      return pathGetBack(this._path);\n    }\n  }\n\n  get ref(): DatabaseReference {\n    return new ReferenceImpl(this._repo, this._path);\n  }\n\n  get _queryIdentifier(): string {\n    const obj = queryParamsGetQueryObject(this._queryParams);\n    const id = ObjectToUniqueKey(obj);\n    return id === '{}' ? 'default' : id;\n  }\n\n  /**\n   * An object representation of the query parameters used by this Query.\n   */\n  get _queryObject(): object {\n    return queryParamsGetQueryObject(this._queryParams);\n  }\n\n  isEqual(other: QueryImpl | null): boolean {\n    other = getModularInstance(other);\n    if (!(other instanceof QueryImpl)) {\n      return false;\n    }\n\n    const sameRepo = this._repo === other._repo;\n    const samePath = pathEquals(this._path, other._path);\n    const sameQueryIdentifier =\n      this._queryIdentifier === other._queryIdentifier;\n\n    return sameRepo && samePath && sameQueryIdentifier;\n  }\n\n  toJSON(): string {\n    return this.toString();\n  }\n\n  toString(): string {\n    return this._repo.toString() + pathToUrlEncodedString(this._path);\n  }\n}\n\n/**\n * Validates that no other order by call has been made\n */\nfunction validateNoPreviousOrderByCall(query: QueryImpl, fnName: string) {\n  if (query._orderByCalled === true) {\n    throw new Error(fnName + \": You can't combine multiple orderBy calls.\");\n  }\n}\n\n/**\n * Validates start/end values for queries.\n */\nfunction validateQueryEndpoints(params: QueryParams) {\n  let startNode = null;\n  let endNode = null;\n  if (params.hasStart()) {\n    startNode = params.getIndexStartValue();\n  }\n  if (params.hasEnd()) {\n    endNode = params.getIndexEndValue();\n  }\n\n  if (params.getIndex() === KEY_INDEX) {\n    const tooManyArgsError =\n      'Query: When ordering by key, you may only pass one argument to ' +\n      'startAt(), endAt(), or equalTo().';\n    const wrongArgTypeError =\n      'Query: When ordering by key, the argument passed to startAt(), startAfter(), ' +\n      'endAt(), endBefore(), or equalTo() must be a string.';\n    if (params.hasStart()) {\n      const startName = params.getIndexStartName();\n      if (startName !== MIN_NAME) {\n        throw new Error(tooManyArgsError);\n      } else if (typeof startNode !== 'string') {\n        throw new Error(wrongArgTypeError);\n      }\n    }\n    if (params.hasEnd()) {\n      const endName = params.getIndexEndName();\n      if (endName !== MAX_NAME) {\n        throw new Error(tooManyArgsError);\n      } else if (typeof endNode !== 'string') {\n        throw new Error(wrongArgTypeError);\n      }\n    }\n  } else if (params.getIndex() === PRIORITY_INDEX) {\n    if (\n      (startNode != null && !isValidPriority(startNode)) ||\n      (endNode != null && !isValidPriority(endNode))\n    ) {\n      throw new Error(\n        'Query: When ordering by priority, the first argument passed to startAt(), ' +\n          'startAfter() endAt(), endBefore(), or equalTo() must be a valid priority value ' +\n          '(null, a number, or a string).'\n      );\n    }\n  } else {\n    assert(\n      params.getIndex() instanceof PathIndex ||\n        params.getIndex() === VALUE_INDEX,\n      'unknown index type.'\n    );\n    if (\n      (startNode != null && typeof startNode === 'object') ||\n      (endNode != null && typeof endNode === 'object')\n    ) {\n      throw new Error(\n        'Query: First argument passed to startAt(), startAfter(), endAt(), endBefore(), or ' +\n          'equalTo() cannot be an object.'\n      );\n    }\n  }\n}\n\n/**\n * Validates that limit* has been called with the correct combination of parameters\n */\nfunction validateLimit(params: QueryParams) {\n  if (\n    params.hasStart() &&\n    params.hasEnd() &&\n    params.hasLimit() &&\n    !params.hasAnchoredLimit()\n  ) {\n    throw new Error(\n      \"Query: Can't combine startAt(), startAfter(), endAt(), endBefore(), and limit(). Use \" +\n        'limitToFirst() or limitToLast() instead.'\n    );\n  }\n}\n\n/**\n * @internal\n */\nexport class ReferenceImpl extends QueryImpl implements DatabaseReference {\n  /** @hideconstructor */\n  constructor(repo: Repo, path: Path) {\n    super(repo, path, new QueryParams(), false);\n  }\n\n  get parent(): ReferenceImpl | null {\n    const parentPath = pathParent(this._path);\n    return parentPath === null\n      ? null\n      : new ReferenceImpl(this._repo, parentPath);\n  }\n\n  get root(): ReferenceImpl {\n    let ref: ReferenceImpl = this;\n    while (ref.parent !== null) {\n      ref = ref.parent;\n    }\n    return ref;\n  }\n}\n\n/**\n * A `DataSnapshot` contains data from a Database location.\n *\n * Any time you read data from the Database, you receive the data as a\n * `DataSnapshot`. A `DataSnapshot` is passed to the event callbacks you attach\n * with `on()` or `once()`. You can extract the contents of the snapshot as a\n * JavaScript object by calling the `val()` method. Alternatively, you can\n * traverse into the snapshot by calling `child()` to return child snapshots\n * (which you could then call `val()` on).\n *\n * A `DataSnapshot` is an efficiently generated, immutable copy of the data at\n * a Database location. It cannot be modified and will never change (to modify\n * data, you always call the `set()` method on a `Reference` directly).\n */\nexport class DataSnapshot {\n  /**\n   * @param _node - A SnapshotNode to wrap.\n   * @param ref - The location this snapshot came from.\n   * @param _index - The iteration order for this snapshot\n   * @hideconstructor\n   */\n  constructor(\n    readonly _node: Node,\n    /**\n     * The location of this DataSnapshot.\n     */\n    readonly ref: DatabaseReference,\n    readonly _index: Index\n  ) {}\n\n  /**\n   * Gets the priority value of the data in this `DataSnapshot`.\n   *\n   * Applications need not use priority but can order collections by\n   * ordinary properties (see\n   * {@link https://firebase.google.com/docs/database/web/lists-of-data#sorting_and_filtering_data |Sorting and filtering data}\n   * ).\n   */\n  get priority(): string | number | null {\n    // typecast here because we never return deferred values or internal priorities (MAX_PRIORITY)\n    return this._node.getPriority().val() as string | number | null;\n  }\n\n  /**\n   * The key (last part of the path) of the location of this `DataSnapshot`.\n   *\n   * The last token in a Database location is considered its key. For example,\n   * \"ada\" is the key for the /users/ada/ node. Accessing the key on any\n   * `DataSnapshot` will return the key for the location that generated it.\n   * However, accessing the key on the root URL of a Database will return\n   * `null`.\n   */\n  get key(): string | null {\n    return this.ref.key;\n  }\n\n  /** Returns the number of child properties of this `DataSnapshot`. */\n  get size(): number {\n    return this._node.numChildren();\n  }\n\n  /**\n   * Gets another `DataSnapshot` for the location at the specified relative path.\n   *\n   * Passing a relative path to the `child()` method of a DataSnapshot returns\n   * another `DataSnapshot` for the location at the specified relative path. The\n   * relative path can either be a simple child name (for example, \"ada\") or a\n   * deeper, slash-separated path (for example, \"ada/name/first\"). If the child\n   * location has no data, an empty `DataSnapshot` (that is, a `DataSnapshot`\n   * whose value is `null`) is returned.\n   *\n   * @param path - A relative path to the location of child data.\n   */\n  child(path: string): DataSnapshot {\n    const childPath = new Path(path);\n    const childRef = child(this.ref, path);\n    return new DataSnapshot(\n      this._node.getChild(childPath),\n      childRef,\n      PRIORITY_INDEX\n    );\n  }\n  /**\n   * Returns true if this `DataSnapshot` contains any data. It is slightly more\n   * efficient than using `snapshot.val() !== null`.\n   */\n  exists(): boolean {\n    return !this._node.isEmpty();\n  }\n\n  /**\n   * Exports the entire contents of the DataSnapshot as a JavaScript object.\n   *\n   * The `exportVal()` method is similar to `val()`, except priority information\n   * is included (if available), making it suitable for backing up your data.\n   *\n   * @returns The DataSnapshot's contents as a JavaScript value (Object,\n   *   Array, string, number, boolean, or `null`).\n   */\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  exportVal(): any {\n    return this._node.val(true);\n  }\n\n  /**\n   * Enumerates the top-level children in the `DataSnapshot`.\n   *\n   * Because of the way JavaScript objects work, the ordering of data in the\n   * JavaScript object returned by `val()` is not guaranteed to match the\n   * ordering on the server nor the ordering of `onChildAdded()` events. That is\n   * where `forEach()` comes in handy. It guarantees the children of a\n   * `DataSnapshot` will be iterated in their query order.\n   *\n   * If no explicit `orderBy*()` method is used, results are returned\n   * ordered by key (unless priorities are used, in which case, results are\n   * returned by priority).\n   *\n   * @param action - A function that will be called for each child DataSnapshot.\n   * The callback can return true to cancel further enumeration.\n   * @returns true if enumeration was canceled due to your callback returning\n   * true.\n   */\n  forEach(action: (child: DataSnapshot) => boolean | void): boolean {\n    if (this._node.isLeafNode()) {\n      return false;\n    }\n\n    const childrenNode = this._node as ChildrenNode;\n    // Sanitize the return value to a boolean. ChildrenNode.forEachChild has a weird return type...\n    return !!childrenNode.forEachChild(this._index, (key, node) => {\n      return action(\n        new DataSnapshot(node, child(this.ref, key), PRIORITY_INDEX)\n      );\n    });\n  }\n\n  /**\n   * Returns true if the specified child path has (non-null) data.\n   *\n   * @param path - A relative path to the location of a potential child.\n   * @returns `true` if data exists at the specified child path; else\n   *  `false`.\n   */\n  hasChild(path: string): boolean {\n    const childPath = new Path(path);\n    return !this._node.getChild(childPath).isEmpty();\n  }\n\n  /**\n   * Returns whether or not the `DataSnapshot` has any non-`null` child\n   * properties.\n   *\n   * You can use `hasChildren()` to determine if a `DataSnapshot` has any\n   * children. If it does, you can enumerate them using `forEach()`. If it\n   * doesn't, then either this snapshot contains a primitive value (which can be\n   * retrieved with `val()`) or it is empty (in which case, `val()` will return\n   * `null`).\n   *\n   * @returns true if this snapshot has any children; else false.\n   */\n  hasChildren(): boolean {\n    if (this._node.isLeafNode()) {\n      return false;\n    } else {\n      return !this._node.isEmpty();\n    }\n  }\n\n  /**\n   * Returns a JSON-serializable representation of this object.\n   */\n  toJSON(): object | null {\n    return this.exportVal();\n  }\n\n  /**\n   * Extracts a JavaScript value from a `DataSnapshot`.\n   *\n   * Depending on the data in a `DataSnapshot`, the `val()` method may return a\n   * scalar type (string, number, or boolean), an array, or an object. It may\n   * also return null, indicating that the `DataSnapshot` is empty (contains no\n   * data).\n   *\n   * @returns The DataSnapshot's contents as a JavaScript value (Object,\n   *   Array, string, number, boolean, or `null`).\n   */\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  val(): any {\n    return this._node.val();\n  }\n}\n/**\n *\n * Returns a `Reference` representing the location in the Database\n * corresponding to the provided path. If no path is provided, the `Reference`\n * will point to the root of the Database.\n *\n * @param db - The database instance to obtain a reference for.\n * @param path - Optional path representing the location the returned\n *   `Reference` will point. If not provided, the returned `Reference` will\n *   point to the root of the Database.\n * @returns If a path is provided, a `Reference`\n *   pointing to the provided path. Otherwise, a `Reference` pointing to the\n *   root of the Database.\n */\nexport function ref(db: Database, path?: string): DatabaseReference {\n  db = getModularInstance(db);\n  db._checkNotDeleted('ref');\n  return path !== undefined ? child(db._root, path) : db._root;\n}\n\n/**\n * Returns a `Reference` representing the location in the Database\n * corresponding to the provided Firebase URL.\n *\n * An exception is thrown if the URL is not a valid Firebase Database URL or it\n * has a different domain than the current `Database` instance.\n *\n * Note that all query parameters (`orderBy`, `limitToLast`, etc.) are ignored\n * and are not applied to the returned `Reference`.\n *\n * @param db - The database instance to obtain a reference for.\n * @param url - The Firebase URL at which the returned `Reference` will\n *   point.\n * @returns A `Reference` pointing to the provided\n *   Firebase URL.\n */\nexport function refFromURL(db: Database, url: string): DatabaseReference {\n  db = getModularInstance(db);\n  db._checkNotDeleted('refFromURL');\n  const parsedURL = parseRepoInfo(url, db._repo.repoInfo_.nodeAdmin);\n  validateUrl('refFromURL', parsedURL);\n\n  const repoInfo = parsedURL.repoInfo;\n  if (\n    !db._repo.repoInfo_.isCustomHost() &&\n    repoInfo.host !== db._repo.repoInfo_.host\n  ) {\n    fatal(\n      'refFromURL' +\n        ': Host name does not match the current database: ' +\n        '(found ' +\n        repoInfo.host +\n        ' but expected ' +\n        db._repo.repoInfo_.host +\n        ')'\n    );\n  }\n\n  return ref(db, parsedURL.path.toString());\n}\n\n/**\n * Gets a `Reference` for the location at the specified relative path.\n *\n * The relative path can either be a simple child name (for example, \"ada\") or\n * a deeper slash-separated path (for example, \"ada/name/first\").\n *\n * @param parent - The parent location.\n * @param path - A relative path from this location to the desired child\n *   location.\n * @returns The specified child location.\n */\nexport function child(\n  parent: DatabaseReference,\n  path: string\n): DatabaseReference {\n  parent = getModularInstance(parent);\n  if (pathGetFront(parent._path) === null) {\n    validateRootPathString('child', 'path', path, false);\n  } else {\n    validatePathString('child', 'path', path, false);\n  }\n  return new ReferenceImpl(parent._repo, pathChild(parent._path, path));\n}\n\n/**\n * Returns an `OnDisconnect` object - see\n * {@link https://firebase.google.com/docs/database/web/offline-capabilities | Enabling Offline Capabilities in JavaScript}\n * for more information on how to use it.\n *\n * @param ref - The reference to add OnDisconnect triggers for.\n */\nexport function onDisconnect(ref: DatabaseReference): OnDisconnect {\n  ref = getModularInstance(ref) as ReferenceImpl;\n  return new OnDisconnect(ref._repo, ref._path);\n}\n\nexport interface ThenableReferenceImpl\n  extends ReferenceImpl,\n    Pick<Promise<ReferenceImpl>, 'then' | 'catch'> {}\n\n/**\n * Generates a new child location using a unique key and returns its\n * `Reference`.\n *\n * This is the most common pattern for adding data to a collection of items.\n *\n * If you provide a value to `push()`, the value is written to the\n * generated location. If you don't pass a value, nothing is written to the\n * database and the child remains empty (but you can use the `Reference`\n * elsewhere).\n *\n * The unique keys generated by `push()` are ordered by the current time, so the\n * resulting list of items is chronologically sorted. The keys are also\n * designed to be unguessable (they contain 72 random bits of entropy).\n *\n * See {@link https://firebase.google.com/docs/database/web/lists-of-data#append_to_a_list_of_data | Append to a list of data}\n * </br>See {@link ttps://firebase.googleblog.com/2015/02/the-2120-ways-to-ensure-unique_68.html | The 2^120 Ways to Ensure Unique Identifiers}\n *\n * @param parent - The parent location.\n * @param value - Optional value to be written at the generated location.\n * @returns Combined `Promise` and `Reference`; resolves when write is complete,\n * but can be used immediately as the `Reference` to the child location.\n */\nexport function push(\n  parent: DatabaseReference,\n  value?: unknown\n): ThenableReference {\n  parent = getModularInstance(parent);\n  validateWritablePath('push', parent._path);\n  validateFirebaseDataArg('push', value, parent._path, true);\n  const now = repoServerTime(parent._repo);\n  const name = nextPushId(now);\n\n  // push() returns a ThennableReference whose promise is fulfilled with a\n  // regular Reference. We use child() to create handles to two different\n  // references. The first is turned into a ThennableReference below by adding\n  // then() and catch() methods and is used as the return value of push(). The\n  // second remains a regular Reference and is used as the fulfilled value of\n  // the first ThennableReference.\n  const thennablePushRef: Partial<ThenableReferenceImpl> = child(\n    parent,\n    name\n  ) as ReferenceImpl;\n  const pushRef = child(parent, name) as ReferenceImpl;\n\n  let promise: Promise<ReferenceImpl>;\n  if (value != null) {\n    promise = set(pushRef, value).then(() => pushRef);\n  } else {\n    promise = Promise.resolve(pushRef);\n  }\n\n  thennablePushRef.then = promise.then.bind(promise);\n  thennablePushRef.catch = promise.then.bind(promise, undefined);\n  return thennablePushRef as ThenableReferenceImpl;\n}\n\n/**\n * Removes the data at this Database location.\n *\n * Any data at child locations will also be deleted.\n *\n * The effect of the remove will be visible immediately and the corresponding\n * event 'value' will be triggered. Synchronization of the remove to the\n * Firebase servers will also be started, and the returned Promise will resolve\n * when complete. If provided, the onComplete callback will be called\n * asynchronously after synchronization has finished.\n *\n * @param ref - The location to remove.\n * @returns Resolves when remove on server is complete.\n */\nexport function remove(ref: DatabaseReference): Promise<void> {\n  validateWritablePath('remove', ref._path);\n  return set(ref, null);\n}\n\n/**\n * Writes data to this Database location.\n *\n * This will overwrite any data at this location and all child locations.\n *\n * The effect of the write will be visible immediately, and the corresponding\n * events (\"value\", \"child_added\", etc.) will be triggered. Synchronization of\n * the data to the Firebase servers will also be started, and the returned\n * Promise will resolve when complete. If provided, the `onComplete` callback\n * will be called asynchronously after synchronization has finished.\n *\n * Passing `null` for the new value is equivalent to calling `remove()`; namely,\n * all data at this location and all child locations will be deleted.\n *\n * `set()` will remove any priority stored at this location, so if priority is\n * meant to be preserved, you need to use `setWithPriority()` instead.\n *\n * Note that modifying data with `set()` will cancel any pending transactions\n * at that location, so extreme care should be taken if mixing `set()` and\n * `transaction()` to modify the same data.\n *\n * A single `set()` will generate a single \"value\" event at the location where\n * the `set()` was performed.\n *\n * @param ref - The location to write to.\n * @param value - The value to be written (string, number, boolean, object,\n *   array, or null).\n * @returns Resolves when write to server is complete.\n */\nexport function set(ref: DatabaseReference, value: unknown): Promise<void> {\n  ref = getModularInstance(ref);\n  validateWritablePath('set', ref._path);\n  validateFirebaseDataArg('set', value, ref._path, false);\n  const deferred = new Deferred<void>();\n  repoSetWithPriority(\n    ref._repo,\n    ref._path,\n    value,\n    /*priority=*/ null,\n    deferred.wrapCallback(() => {})\n  );\n  return deferred.promise;\n}\n\n/**\n * Sets a priority for the data at this Database location.\n *\n * Applications need not use priority but can order collections by\n * ordinary properties (see\n * {@link https://firebase.google.com/docs/database/web/lists-of-data#sorting_and_filtering_data | Sorting and filtering data}\n * ).\n *\n * @param ref - The location to write to.\n * @param priority - The priority to be written (string, number, or null).\n * @returns Resolves when write to server is complete.\n */\nexport function setPriority(\n  ref: DatabaseReference,\n  priority: string | number | null\n): Promise<void> {\n  ref = getModularInstance(ref);\n  validateWritablePath('setPriority', ref._path);\n  validatePriority('setPriority', priority, false);\n  const deferred = new Deferred<void>();\n  repoSetWithPriority(\n    ref._repo,\n    pathChild(ref._path, '.priority'),\n    priority,\n    null,\n    deferred.wrapCallback(() => {})\n  );\n  return deferred.promise;\n}\n\n/**\n * Writes data the Database location. Like `set()` but also specifies the\n * priority for that data.\n *\n * Applications need not use priority but can order collections by\n * ordinary properties (see\n * {@link https://firebase.google.com/docs/database/web/lists-of-data#sorting_and_filtering_data | Sorting and filtering data}\n * ).\n *\n * @param ref - The location to write to.\n * @param value - The value to be written (string, number, boolean, object,\n *   array, or null).\n * @param priority - The priority to be written (string, number, or null).\n * @returns Resolves when write to server is complete.\n */\nexport function setWithPriority(\n  ref: DatabaseReference,\n  value: unknown,\n  priority: string | number | null\n): Promise<void> {\n  validateWritablePath('setWithPriority', ref._path);\n  validateFirebaseDataArg('setWithPriority', value, ref._path, false);\n  validatePriority('setWithPriority', priority, false);\n  if (ref.key === '.length' || ref.key === '.keys') {\n    throw 'setWithPriority failed: ' + ref.key + ' is a read-only object.';\n  }\n\n  const deferred = new Deferred<void>();\n  repoSetWithPriority(\n    ref._repo,\n    ref._path,\n    value,\n    priority,\n    deferred.wrapCallback(() => {})\n  );\n  return deferred.promise;\n}\n\n/**\n * Writes multiple values to the Database at once.\n *\n * The `values` argument contains multiple property-value pairs that will be\n * written to the Database together. Each child property can either be a simple\n * property (for example, \"name\") or a relative path (for example,\n * \"name/first\") from the current location to the data to update.\n *\n * As opposed to the `set()` method, `update()` can be use to selectively update\n * only the referenced properties at the current location (instead of replacing\n * all the child properties at the current location).\n *\n * The effect of the write will be visible immediately, and the corresponding\n * events ('value', 'child_added', etc.) will be triggered. Synchronization of\n * the data to the Firebase servers will also be started, and the returned\n * Promise will resolve when complete. If provided, the `onComplete` callback\n * will be called asynchronously after synchronization has finished.\n *\n * A single `update()` will generate a single \"value\" event at the location\n * where the `update()` was performed, regardless of how many children were\n * modified.\n *\n * Note that modifying data with `update()` will cancel any pending\n * transactions at that location, so extreme care should be taken if mixing\n * `update()` and `transaction()` to modify the same data.\n *\n * Passing `null` to `update()` will remove the data at this location.\n *\n * See\n * {@link https://firebase.googleblog.com/2015/09/introducing-multi-location-updates-and_86.html | Introducing multi-location updates and more}.\n *\n * @param ref - The location to write to.\n * @param values - Object containing multiple values.\n * @returns Resolves when update on server is complete.\n */\nexport function update(ref: DatabaseReference, values: object): Promise<void> {\n  validateFirebaseMergeDataArg('update', values, ref._path, false);\n  const deferred = new Deferred<void>();\n  repoUpdate(\n    ref._repo,\n    ref._path,\n    values as Record<string, unknown>,\n    deferred.wrapCallback(() => {})\n  );\n  return deferred.promise;\n}\n\n/**\n * Gets the most up-to-date result for this query.\n *\n * @param query - The query to run.\n * @returns A promise which resolves to the resulting DataSnapshot if a value is\n * available, or rejects if the client is unable to return a value (e.g., if the\n * server is unreachable and there is nothing cached).\n */\nexport function get(query: Query): Promise<DataSnapshot> {\n  query = getModularInstance(query) as QueryImpl;\n  return repoGetValue(query._repo, query).then(node => {\n    return new DataSnapshot(\n      node,\n      new ReferenceImpl(query._repo, query._path),\n      query._queryParams.getIndex()\n    );\n  });\n}\n\n/**\n * Represents registration for 'value' events.\n */\nexport class ValueEventRegistration implements EventRegistration {\n  constructor(private callbackContext: CallbackContext) {}\n\n  respondsTo(eventType: string): boolean {\n    return eventType === 'value';\n  }\n\n  createEvent(change: Change, query: QueryContext): DataEvent {\n    const index = query._queryParams.getIndex();\n    return new DataEvent(\n      'value',\n      this,\n      new DataSnapshot(\n        change.snapshotNode,\n        new ReferenceImpl(query._repo, query._path),\n        index\n      )\n    );\n  }\n\n  getEventRunner(eventData: CancelEvent | DataEvent): () => void {\n    if (eventData.getEventType() === 'cancel') {\n      return () =>\n        this.callbackContext.onCancel((eventData as CancelEvent).error);\n    } else {\n      return () =>\n        this.callbackContext.onValue((eventData as DataEvent).snapshot, null);\n    }\n  }\n\n  createCancelEvent(error: Error, path: Path): CancelEvent | null {\n    if (this.callbackContext.hasCancelCallback) {\n      return new CancelEvent(this, error, path);\n    } else {\n      return null;\n    }\n  }\n\n  matches(other: EventRegistration): boolean {\n    if (!(other instanceof ValueEventRegistration)) {\n      return false;\n    } else if (!other.callbackContext || !this.callbackContext) {\n      // If no callback specified, we consider it to match any callback.\n      return true;\n    } else {\n      return other.callbackContext.matches(this.callbackContext);\n    }\n  }\n\n  hasAnyCallback(): boolean {\n    return this.callbackContext !== null;\n  }\n}\n\n/**\n * Represents the registration of a child_x event.\n */\nexport class ChildEventRegistration implements EventRegistration {\n  constructor(\n    private eventType: string,\n    private callbackContext: CallbackContext | null\n  ) {}\n\n  respondsTo(eventType: string): boolean {\n    let eventToCheck =\n      eventType === 'children_added' ? 'child_added' : eventType;\n    eventToCheck =\n      eventToCheck === 'children_removed' ? 'child_removed' : eventToCheck;\n    return this.eventType === eventToCheck;\n  }\n\n  createCancelEvent(error: Error, path: Path): CancelEvent | null {\n    if (this.callbackContext.hasCancelCallback) {\n      return new CancelEvent(this, error, path);\n    } else {\n      return null;\n    }\n  }\n\n  createEvent(change: Change, query: QueryContext): DataEvent {\n    assert(change.childName != null, 'Child events should have a childName.');\n    const childRef = child(\n      new ReferenceImpl(query._repo, query._path),\n      change.childName\n    );\n    const index = query._queryParams.getIndex();\n    return new DataEvent(\n      change.type as EventType,\n      this,\n      new DataSnapshot(change.snapshotNode, childRef, index),\n      change.prevName\n    );\n  }\n\n  getEventRunner(eventData: CancelEvent | DataEvent): () => void {\n    if (eventData.getEventType() === 'cancel') {\n      return () =>\n        this.callbackContext.onCancel((eventData as CancelEvent).error);\n    } else {\n      return () =>\n        this.callbackContext.onValue(\n          (eventData as DataEvent).snapshot,\n          (eventData as DataEvent).prevName\n        );\n    }\n  }\n\n  matches(other: EventRegistration): boolean {\n    if (other instanceof ChildEventRegistration) {\n      return (\n        this.eventType === other.eventType &&\n        (!this.callbackContext ||\n          !other.callbackContext ||\n          this.callbackContext.matches(other.callbackContext))\n      );\n    }\n\n    return false;\n  }\n\n  hasAnyCallback(): boolean {\n    return !!this.callbackContext;\n  }\n}\n\nfunction addEventListener(\n  query: Query,\n  eventType: EventType,\n  callback: UserCallback,\n  cancelCallbackOrListenOptions?: ((error: Error) => unknown) | ListenOptions,\n  options?: ListenOptions\n) {\n  let cancelCallback: ((error: Error) => unknown) | undefined;\n  if (typeof cancelCallbackOrListenOptions === 'object') {\n    cancelCallback = undefined;\n    options = cancelCallbackOrListenOptions;\n  }\n  if (typeof cancelCallbackOrListenOptions === 'function') {\n    cancelCallback = cancelCallbackOrListenOptions;\n  }\n\n  if (options && options.onlyOnce) {\n    const userCallback = callback;\n    const onceCallback: UserCallback = (dataSnapshot, previousChildName) => {\n      repoRemoveEventCallbackForQuery(query._repo, query, container);\n      userCallback(dataSnapshot, previousChildName);\n    };\n    onceCallback.userCallback = callback.userCallback;\n    onceCallback.context = callback.context;\n    callback = onceCallback;\n  }\n\n  const callbackContext = new CallbackContext(\n    callback,\n    cancelCallback || undefined\n  );\n  const container =\n    eventType === 'value'\n      ? new ValueEventRegistration(callbackContext)\n      : new ChildEventRegistration(eventType, callbackContext);\n  repoAddEventCallbackForQuery(query._repo, query, container);\n  return () => repoRemoveEventCallbackForQuery(query._repo, query, container);\n}\n\n/**\n * Listens for data changes at a particular location.\n *\n * This is the primary way to read data from a Database. Your callback\n * will be triggered for the initial data and again whenever the data changes.\n * Invoke the returned unsubscribe callback to stop receiving updates. See\n * {@link https://firebase.google.com/docs/database/web/retrieve-data | Retrieve Data on the Web}\n * for more details.\n *\n * An `onValue` event will trigger once with the initial data stored at this\n * location, and then trigger again each time the data changes. The\n * `DataSnapshot` passed to the callback will be for the location at which\n * `on()` was called. It won't trigger until the entire contents has been\n * synchronized. If the location has no data, it will be triggered with an empty\n * `DataSnapshot` (`val()` will return `null`).\n *\n * @param query - The query to run.\n * @param callback - A callback that fires when the specified event occurs. The\n * callback will be passed a DataSnapshot.\n * @param cancelCallback - An optional callback that will be notified if your\n * event subscription is ever canceled because your client does not have\n * permission to read this data (or it had permission but has now lost it).\n * This callback will be passed an `Error` object indicating why the failure\n * occurred.\n * @returns A function that can be invoked to remove the listener.\n */\nexport function onValue(\n  query: Query,\n  callback: (snapshot: DataSnapshot) => unknown,\n  cancelCallback?: (error: Error) => unknown\n): Unsubscribe;\n\n/**\n * Listens for data changes at a particular location.\n *\n * This is the primary way to read data from a Database. Your callback\n * will be triggered for the initial data and again whenever the data changes.\n * Invoke the returned unsubscribe callback to stop receiving updates. See\n * {@link https://firebase.google.com/docs/database/web/retrieve-data | Retrieve Data on the Web}\n * for more details.\n *\n * An `onValue` event will trigger once with the initial data stored at this\n * location, and then trigger again each time the data changes. The\n * `DataSnapshot` passed to the callback will be for the location at which\n * `on()` was called. It won't trigger until the entire contents has been\n * synchronized. If the location has no data, it will be triggered with an empty\n * `DataSnapshot` (`val()` will return `null`).\n *\n * @param query - The query to run.\n * @param callback - A callback that fires when the specified event occurs. The\n * callback will be passed a DataSnapshot.\n * @param options - An object that can be used to configure `onlyOnce`, which\n * then removes the listener after its first invocation.\n * @returns A function that can be invoked to remove the listener.\n */\nexport function onValue(\n  query: Query,\n  callback: (snapshot: DataSnapshot) => unknown,\n  options: ListenOptions\n): Unsubscribe;\n\n/**\n * Listens for data changes at a particular location.\n *\n * This is the primary way to read data from a Database. Your callback\n * will be triggered for the initial data and again whenever the data changes.\n * Invoke the returned unsubscribe callback to stop receiving updates. See\n * {@link https://firebase.google.com/docs/database/web/retrieve-data | Retrieve Data on the Web}\n * for more details.\n *\n * An `onValue` event will trigger once with the initial data stored at this\n * location, and then trigger again each time the data changes. The\n * `DataSnapshot` passed to the callback will be for the location at which\n * `on()` was called. It won't trigger until the entire contents has been\n * synchronized. If the location has no data, it will be triggered with an empty\n * `DataSnapshot` (`val()` will return `null`).\n *\n * @param query - The query to run.\n * @param callback - A callback that fires when the specified event occurs. The\n * callback will be passed a DataSnapshot.\n * @param cancelCallback - An optional callback that will be notified if your\n * event subscription is ever canceled because your client does not have\n * permission to read this data (or it had permission but has now lost it).\n * This callback will be passed an `Error` object indicating why the failure\n * occurred.\n * @param options - An object that can be used to configure `onlyOnce`, which\n * then removes the listener after its first invocation.\n * @returns A function that can be invoked to remove the listener.\n */\nexport function onValue(\n  query: Query,\n  callback: (snapshot: DataSnapshot) => unknown,\n  cancelCallback: (error: Error) => unknown,\n  options: ListenOptions\n): Unsubscribe;\n\nexport function onValue(\n  query: Query,\n  callback: (snapshot: DataSnapshot) => unknown,\n  cancelCallbackOrListenOptions?: ((error: Error) => unknown) | ListenOptions,\n  options?: ListenOptions\n): Unsubscribe {\n  return addEventListener(\n    query,\n    'value',\n    callback,\n    cancelCallbackOrListenOptions,\n    options\n  );\n}\n\n/**\n * Listens for data changes at a particular location.\n *\n * This is the primary way to read data from a Database. Your callback\n * will be triggered for the initial data and again whenever the data changes.\n * Invoke the returned unsubscribe callback to stop receiving updates. See\n * {@link https://firebase.google.com/docs/database/web/retrieve-data | Retrieve Data on the Web}\n * for more details.\n *\n * An `onChildAdded` event will be triggered once for each initial child at this\n * location, and it will be triggered again every time a new child is added. The\n * `DataSnapshot` passed into the callback will reflect the data for the\n * relevant child. For ordering purposes, it is passed a second argument which\n * is a string containing the key of the previous sibling child by sort order,\n * or `null` if it is the first child.\n *\n * @param query - The query to run.\n * @param callback - A callback that fires when the specified event occurs.\n * The callback will be passed a DataSnapshot and a string containing the key of\n * the previous child, by sort order, or `null` if it is the first child.\n * @param cancelCallback - An optional callback that will be notified if your\n * event subscription is ever canceled because your client does not have\n * permission to read this data (or it had permission but has now lost it).\n * This callback will be passed an `Error` object indicating why the failure\n * occurred.\n * @returns A function that can be invoked to remove the listener.\n */\nexport function onChildAdded(\n  query: Query,\n  callback: (\n    snapshot: DataSnapshot,\n    previousChildName?: string | null\n  ) => unknown,\n  cancelCallback?: (error: Error) => unknown\n): Unsubscribe;\n\n/**\n * Listens for data changes at a particular location.\n *\n * This is the primary way to read data from a Database. Your callback\n * will be triggered for the initial data and again whenever the data changes.\n * Invoke the returned unsubscribe callback to stop receiving updates. See\n * {@link https://firebase.google.com/docs/database/web/retrieve-data | Retrieve Data on the Web}\n * for more details.\n *\n * An `onChildAdded` event will be triggered once for each initial child at this\n * location, and it will be triggered again every time a new child is added. The\n * `DataSnapshot` passed into the callback will reflect the data for the\n * relevant child. For ordering purposes, it is passed a second argument which\n * is a string containing the key of the previous sibling child by sort order,\n * or `null` if it is the first child.\n *\n * @param query - The query to run.\n * @param callback - A callback that fires when the specified event occurs.\n * The callback will be passed a DataSnapshot and a string containing the key of\n * the previous child, by sort order, or `null` if it is the first child.\n * @param options - An object that can be used to configure `onlyOnce`, which\n * then removes the listener after its first invocation.\n * @returns A function that can be invoked to remove the listener.\n */\nexport function onChildAdded(\n  query: Query,\n  callback: (\n    snapshot: DataSnapshot,\n    previousChildName: string | null\n  ) => unknown,\n  options: ListenOptions\n): Unsubscribe;\n\n/**\n * Listens for data changes at a particular location.\n *\n * This is the primary way to read data from a Database. Your callback\n * will be triggered for the initial data and again whenever the data changes.\n * Invoke the returned unsubscribe callback to stop receiving updates. See\n * {@link https://firebase.google.com/docs/database/web/retrieve-data | Retrieve Data on the Web}\n * for more details.\n *\n * An `onChildAdded` event will be triggered once for each initial child at this\n * location, and it will be triggered again every time a new child is added. The\n * `DataSnapshot` passed into the callback will reflect the data for the\n * relevant child. For ordering purposes, it is passed a second argument which\n * is a string containing the key of the previous sibling child by sort order,\n * or `null` if it is the first child.\n *\n * @param query - The query to run.\n * @param callback - A callback that fires when the specified event occurs.\n * The callback will be passed a DataSnapshot and a string containing the key of\n * the previous child, by sort order, or `null` if it is the first child.\n * @param cancelCallback - An optional callback that will be notified if your\n * event subscription is ever canceled because your client does not have\n * permission to read this data (or it had permission but has now lost it).\n * This callback will be passed an `Error` object indicating why the failure\n * occurred.\n * @param options - An object that can be used to configure `onlyOnce`, which\n * then removes the listener after its first invocation.\n * @returns A function that can be invoked to remove the listener.\n */\nexport function onChildAdded(\n  query: Query,\n  callback: (\n    snapshot: DataSnapshot,\n    previousChildName: string | null\n  ) => unknown,\n  cancelCallback: (error: Error) => unknown,\n  options: ListenOptions\n): Unsubscribe;\n\nexport function onChildAdded(\n  query: Query,\n  callback: (\n    snapshot: DataSnapshot,\n    previousChildName: string | null\n  ) => unknown,\n  cancelCallbackOrListenOptions?: ((error: Error) => unknown) | ListenOptions,\n  options?: ListenOptions\n): Unsubscribe {\n  return addEventListener(\n    query,\n    'child_added',\n    callback,\n    cancelCallbackOrListenOptions,\n    options\n  );\n}\n\n/**\n * Listens for data changes at a particular location.\n *\n * This is the primary way to read data from a Database. Your callback\n * will be triggered for the initial data and again whenever the data changes.\n * Invoke the returned unsubscribe callback to stop receiving updates. See\n * {@link https://firebase.google.com/docs/database/web/retrieve-data | Retrieve Data on the Web}\n * for more details.\n *\n * An `onChildChanged` event will be triggered when the data stored in a child\n * (or any of its descendants) changes. Note that a single `child_changed` event\n * may represent multiple changes to the child. The `DataSnapshot` passed to the\n * callback will contain the new child contents. For ordering purposes, the\n * callback is also passed a second argument which is a string containing the\n * key of the previous sibling child by sort order, or `null` if it is the first\n * child.\n *\n * @param query - The query to run.\n * @param callback - A callback that fires when the specified event occurs.\n * The callback will be passed a DataSnapshot and a string containing the key of\n * the previous child, by sort order, or `null` if it is the first child.\n * @param cancelCallback - An optional callback that will be notified if your\n * event subscription is ever canceled because your client does not have\n * permission to read this data (or it had permission but has now lost it).\n * This callback will be passed an `Error` object indicating why the failure\n * occurred.\n * @returns A function that can be invoked to remove the listener.\n */\nexport function onChildChanged(\n  query: Query,\n  callback: (\n    snapshot: DataSnapshot,\n    previousChildName: string | null\n  ) => unknown,\n  cancelCallback?: (error: Error) => unknown\n): Unsubscribe;\n\n/**\n * Listens for data changes at a particular location.\n *\n * This is the primary way to read data from a Database. Your callback\n * will be triggered for the initial data and again whenever the data changes.\n * Invoke the returned unsubscribe callback to stop receiving updates. See\n * {@link https://firebase.google.com/docs/database/web/retrieve-data | Retrieve Data on the Web}\n * for more details.\n *\n * An `onChildChanged` event will be triggered when the data stored in a child\n * (or any of its descendants) changes. Note that a single `child_changed` event\n * may represent multiple changes to the child. The `DataSnapshot` passed to the\n * callback will contain the new child contents. For ordering purposes, the\n * callback is also passed a second argument which is a string containing the\n * key of the previous sibling child by sort order, or `null` if it is the first\n * child.\n *\n * @param query - The query to run.\n * @param callback - A callback that fires when the specified event occurs.\n * The callback will be passed a DataSnapshot and a string containing the key of\n * the previous child, by sort order, or `null` if it is the first child.\n * @param options - An object that can be used to configure `onlyOnce`, which\n * then removes the listener after its first invocation.\n * @returns A function that can be invoked to remove the listener.\n */\nexport function onChildChanged(\n  query: Query,\n  callback: (\n    snapshot: DataSnapshot,\n    previousChildName: string | null\n  ) => unknown,\n  options: ListenOptions\n): Unsubscribe;\n\n/**\n * Listens for data changes at a particular location.\n *\n * This is the primary way to read data from a Database. Your callback\n * will be triggered for the initial data and again whenever the data changes.\n * Invoke the returned unsubscribe callback to stop receiving updates. See\n * {@link https://firebase.google.com/docs/database/web/retrieve-data | Retrieve Data on the Web}\n * for more details.\n *\n * An `onChildChanged` event will be triggered when the data stored in a child\n * (or any of its descendants) changes. Note that a single `child_changed` event\n * may represent multiple changes to the child. The `DataSnapshot` passed to the\n * callback will contain the new child contents. For ordering purposes, the\n * callback is also passed a second argument which is a string containing the\n * key of the previous sibling child by sort order, or `null` if it is the first\n * child.\n *\n * @param query - The query to run.\n * @param callback - A callback that fires when the specified event occurs.\n * The callback will be passed a DataSnapshot and a string containing the key of\n * the previous child, by sort order, or `null` if it is the first child.\n * @param cancelCallback - An optional callback that will be notified if your\n * event subscription is ever canceled because your client does not have\n * permission to read this data (or it had permission but has now lost it).\n * This callback will be passed an `Error` object indicating why the failure\n * occurred.\n * @param options - An object that can be used to configure `onlyOnce`, which\n * then removes the listener after its first invocation.\n * @returns A function that can be invoked to remove the listener.\n */\nexport function onChildChanged(\n  query: Query,\n  callback: (\n    snapshot: DataSnapshot,\n    previousChildName: string | null\n  ) => unknown,\n  cancelCallback: (error: Error) => unknown,\n  options: ListenOptions\n): Unsubscribe;\n\nexport function onChildChanged(\n  query: Query,\n  callback: (\n    snapshot: DataSnapshot,\n    previousChildName: string | null\n  ) => unknown,\n  cancelCallbackOrListenOptions?: ((error: Error) => unknown) | ListenOptions,\n  options?: ListenOptions\n): Unsubscribe {\n  return addEventListener(\n    query,\n    'child_changed',\n    callback,\n    cancelCallbackOrListenOptions,\n    options\n  );\n}\n\n/**\n * Listens for data changes at a particular location.\n *\n * This is the primary way to read data from a Database. Your callback\n * will be triggered for the initial data and again whenever the data changes.\n * Invoke the returned unsubscribe callback to stop receiving updates. See\n * {@link https://firebase.google.com/docs/database/web/retrieve-data | Retrieve Data on the Web}\n * for more details.\n *\n * An `onChildMoved` event will be triggered when a child's sort order changes\n * such that its position relative to its siblings changes. The `DataSnapshot`\n * passed to the callback will be for the data of the child that has moved. It\n * is also passed a second argument which is a string containing the key of the\n * previous sibling child by sort order, or `null` if it is the first child.\n *\n * @param query - The query to run.\n * @param callback - A callback that fires when the specified event occurs.\n * The callback will be passed a DataSnapshot and a string containing the key of\n * the previous child, by sort order, or `null` if it is the first child.\n * @param cancelCallback - An optional callback that will be notified if your\n * event subscription is ever canceled because your client does not have\n * permission to read this data (or it had permission but has now lost it).\n * This callback will be passed an `Error` object indicating why the failure\n * occurred.\n * @returns A function that can be invoked to remove the listener.\n */\nexport function onChildMoved(\n  query: Query,\n  callback: (\n    snapshot: DataSnapshot,\n    previousChildName: string | null\n  ) => unknown,\n  cancelCallback?: (error: Error) => unknown\n): Unsubscribe;\n\n/**\n * Listens for data changes at a particular location.\n *\n * This is the primary way to read data from a Database. Your callback\n * will be triggered for the initial data and again whenever the data changes.\n * Invoke the returned unsubscribe callback to stop receiving updates. See\n * {@link https://firebase.google.com/docs/database/web/retrieve-data | Retrieve Data on the Web}\n * for more details.\n *\n * An `onChildMoved` event will be triggered when a child's sort order changes\n * such that its position relative to its siblings changes. The `DataSnapshot`\n * passed to the callback will be for the data of the child that has moved. It\n * is also passed a second argument which is a string containing the key of the\n * previous sibling child by sort order, or `null` if it is the first child.\n *\n * @param query - The query to run.\n * @param callback - A callback that fires when the specified event occurs.\n * The callback will be passed a DataSnapshot and a string containing the key of\n * the previous child, by sort order, or `null` if it is the first child.\n * @param options - An object that can be used to configure `onlyOnce`, which\n * then removes the listener after its first invocation.\n * @returns A function that can be invoked to remove the listener.\n */\nexport function onChildMoved(\n  query: Query,\n  callback: (\n    snapshot: DataSnapshot,\n    previousChildName: string | null\n  ) => unknown,\n  options: ListenOptions\n): Unsubscribe;\n\n/**\n * Listens for data changes at a particular location.\n *\n * This is the primary way to read data from a Database. Your callback\n * will be triggered for the initial data and again whenever the data changes.\n * Invoke the returned unsubscribe callback to stop receiving updates. See\n * {@link https://firebase.google.com/docs/database/web/retrieve-data | Retrieve Data on the Web}\n * for more details.\n *\n * An `onChildMoved` event will be triggered when a child's sort order changes\n * such that its position relative to its siblings changes. The `DataSnapshot`\n * passed to the callback will be for the data of the child that has moved. It\n * is also passed a second argument which is a string containing the key of the\n * previous sibling child by sort order, or `null` if it is the first child.\n *\n * @param query - The query to run.\n * @param callback - A callback that fires when the specified event occurs.\n * The callback will be passed a DataSnapshot and a string containing the key of\n * the previous child, by sort order, or `null` if it is the first child.\n * @param cancelCallback - An optional callback that will be notified if your\n * event subscription is ever canceled because your client does not have\n * permission to read this data (or it had permission but has now lost it).\n * This callback will be passed an `Error` object indicating why the failure\n * occurred.\n * @param options - An object that can be used to configure `onlyOnce`, which\n * then removes the listener after its first invocation.\n * @returns A function that can be invoked to remove the listener.\n */\nexport function onChildMoved(\n  query: Query,\n  callback: (\n    snapshot: DataSnapshot,\n    previousChildName: string | null\n  ) => unknown,\n  cancelCallback: (error: Error) => unknown,\n  options: ListenOptions\n): Unsubscribe;\n\nexport function onChildMoved(\n  query: Query,\n  callback: (\n    snapshot: DataSnapshot,\n    previousChildName: string | null\n  ) => unknown,\n  cancelCallbackOrListenOptions?: ((error: Error) => unknown) | ListenOptions,\n  options?: ListenOptions\n): Unsubscribe {\n  return addEventListener(\n    query,\n    'child_moved',\n    callback,\n    cancelCallbackOrListenOptions,\n    options\n  );\n}\n\n/**\n * Listens for data changes at a particular location.\n *\n * This is the primary way to read data from a Database. Your callback\n * will be triggered for the initial data and again whenever the data changes.\n * Invoke the returned unsubscribe callback to stop receiving updates. See\n * {@link https://firebase.google.com/docs/database/web/retrieve-data | Retrieve Data on the Web}\n * for more details.\n *\n * An `onChildRemoved` event will be triggered once every time a child is\n * removed. The `DataSnapshot` passed into the callback will be the old data for\n * the child that was removed. A child will get removed when either:\n *\n * - a client explicitly calls `remove()` on that child or one of its ancestors\n * - a client calls `set(null)` on that child or one of its ancestors\n * - that child has all of its children removed\n * - there is a query in effect which now filters out the child (because it's\n *   sort order changed or the max limit was hit)\n *\n * @param query - The query to run.\n * @param callback - A callback that fires when the specified event occurs.\n * The callback will be passed a DataSnapshot and a string containing the key of\n * the previous child, by sort order, or `null` if it is the first child.\n * @param cancelCallback - An optional callback that will be notified if your\n * event subscription is ever canceled because your client does not have\n * permission to read this data (or it had permission but has now lost it).\n * This callback will be passed an `Error` object indicating why the failure\n * occurred.\n * @returns A function that can be invoked to remove the listener.\n */\nexport function onChildRemoved(\n  query: Query,\n  callback: (snapshot: DataSnapshot) => unknown,\n  cancelCallback?: (error: Error) => unknown\n): Unsubscribe;\n\n/**\n * Listens for data changes at a particular location.\n *\n * This is the primary way to read data from a Database. Your callback\n * will be triggered for the initial data and again whenever the data changes.\n * Invoke the returned unsubscribe callback to stop receiving updates. See\n * {@link https://firebase.google.com/docs/database/web/retrieve-data | Retrieve Data on the Web}\n * for more details.\n *\n * An `onChildRemoved` event will be triggered once every time a child is\n * removed. The `DataSnapshot` passed into the callback will be the old data for\n * the child that was removed. A child will get removed when either:\n *\n * - a client explicitly calls `remove()` on that child or one of its ancestors\n * - a client calls `set(null)` on that child or one of its ancestors\n * - that child has all of its children removed\n * - there is a query in effect which now filters out the child (because it's\n *   sort order changed or the max limit was hit)\n *\n * @param query - The query to run.\n * @param callback - A callback that fires when the specified event occurs.\n * The callback will be passed a DataSnapshot and a string containing the key of\n * the previous child, by sort order, or `null` if it is the first child.\n * @param options - An object that can be used to configure `onlyOnce`, which\n * then removes the listener after its first invocation.\n * @returns A function that can be invoked to remove the listener.\n */\nexport function onChildRemoved(\n  query: Query,\n  callback: (snapshot: DataSnapshot) => unknown,\n  options: ListenOptions\n): Unsubscribe;\n\n/**\n * Listens for data changes at a particular location.\n *\n * This is the primary way to read data from a Database. Your callback\n * will be triggered for the initial data and again whenever the data changes.\n * Invoke the returned unsubscribe callback to stop receiving updates. See\n * {@link https://firebase.google.com/docs/database/web/retrieve-data | Retrieve Data on the Web}\n * for more details.\n *\n * An `onChildRemoved` event will be triggered once every time a child is\n * removed. The `DataSnapshot` passed into the callback will be the old data for\n * the child that was removed. A child will get removed when either:\n *\n * - a client explicitly calls `remove()` on that child or one of its ancestors\n * - a client calls `set(null)` on that child or one of its ancestors\n * - that child has all of its children removed\n * - there is a query in effect which now filters out the child (because it's\n *   sort order changed or the max limit was hit)\n *\n * @param query - The query to run.\n * @param callback - A callback that fires when the specified event occurs.\n * The callback will be passed a DataSnapshot and a string containing the key of\n * the previous child, by sort order, or `null` if it is the first child.\n * @param cancelCallback - An optional callback that will be notified if your\n * event subscription is ever canceled because your client does not have\n * permission to read this data (or it had permission but has now lost it).\n * This callback will be passed an `Error` object indicating why the failure\n * occurred.\n * @param options - An object that can be used to configure `onlyOnce`, which\n * then removes the listener after its first invocation.\n * @returns A function that can be invoked to remove the listener.\n */\nexport function onChildRemoved(\n  query: Query,\n  callback: (snapshot: DataSnapshot) => unknown,\n  cancelCallback: (error: Error) => unknown,\n  options: ListenOptions\n): Unsubscribe;\n\nexport function onChildRemoved(\n  query: Query,\n  callback: (snapshot: DataSnapshot) => unknown,\n  cancelCallbackOrListenOptions?: ((error: Error) => unknown) | ListenOptions,\n  options?: ListenOptions\n): Unsubscribe {\n  return addEventListener(\n    query,\n    'child_removed',\n    callback,\n    cancelCallbackOrListenOptions,\n    options\n  );\n}\n\nexport { EventType };\n\n/**\n * Detaches a callback previously attached with `on()`.\n *\n * Detach a callback previously attached with `on()`. Note that if `on()` was\n * called multiple times with the same eventType and callback, the callback\n * will be called multiple times for each event, and `off()` must be called\n * multiple times to remove the callback. Calling `off()` on a parent listener\n * will not automatically remove listeners registered on child nodes, `off()`\n * must also be called on any child listeners to remove the callback.\n *\n * If a callback is not specified, all callbacks for the specified eventType\n * will be removed. Similarly, if no eventType is specified, all callbacks\n * for the `Reference` will be removed.\n *\n * Individual listeners can also be removed by invoking their unsubscribe\n * callbacks.\n *\n * @param query - The query that the listener was registered with.\n * @param eventType - One of the following strings: \"value\", \"child_added\",\n * \"child_changed\", \"child_removed\", or \"child_moved.\" If omitted, all callbacks\n * for the `Reference` will be removed.\n * @param callback - The callback function that was passed to `on()` or\n * `undefined` to remove all callbacks.\n */\nexport function off(\n  query: Query,\n  eventType?: EventType,\n  callback?: (\n    snapshot: DataSnapshot,\n    previousChildName?: string | null\n  ) => unknown\n): void {\n  let container: EventRegistration | null = null;\n  const expCallback = callback ? new CallbackContext(callback) : null;\n  if (eventType === 'value') {\n    container = new ValueEventRegistration(expCallback);\n  } else if (eventType) {\n    container = new ChildEventRegistration(eventType, expCallback);\n  }\n  repoRemoveEventCallbackForQuery(query._repo, query, container);\n}\n\n/** Describes the different query constraints available in this SDK. */\nexport type QueryConstraintType =\n  | 'endAt'\n  | 'endBefore'\n  | 'startAt'\n  | 'startAfter'\n  | 'limitToFirst'\n  | 'limitToLast'\n  | 'orderByChild'\n  | 'orderByKey'\n  | 'orderByPriority'\n  | 'orderByValue'\n  | 'equalTo';\n\n/**\n * A `QueryConstraint` is used to narrow the set of documents returned by a\n * Database query. `QueryConstraint`s are created by invoking {@link endAt},\n * {@link endBefore}, {@link startAt}, {@link startAfter}, {@link\n * limitToFirst}, {@link limitToLast}, {@link orderByChild},\n * {@link orderByChild}, {@link orderByKey} , {@link orderByPriority} ,\n * {@link orderByValue}  or {@link equalTo} and\n * can then be passed to {@link query} to create a new query instance that\n * also contains this `QueryConstraint`.\n */\nexport abstract class QueryConstraint {\n  /** The type of this query constraints */\n  abstract readonly type: QueryConstraintType;\n\n  /**\n   * Takes the provided `Query` and returns a copy of the `Query` with this\n   * `QueryConstraint` applied.\n   */\n  abstract _apply<T>(query: QueryImpl): QueryImpl;\n}\n\nclass QueryEndAtConstraint extends QueryConstraint {\n  readonly type: 'endAt';\n\n  constructor(\n    private readonly _value: number | string | boolean | null,\n    private readonly _key?: string\n  ) {\n    super();\n  }\n\n  _apply<T>(query: QueryImpl): QueryImpl {\n    validateFirebaseDataArg('endAt', this._value, query._path, true);\n    const newParams = queryParamsEndAt(\n      query._queryParams,\n      this._value,\n      this._key\n    );\n    validateLimit(newParams);\n    validateQueryEndpoints(newParams);\n    if (query._queryParams.hasEnd()) {\n      throw new Error(\n        'endAt: Starting point was already set (by another call to endAt, ' +\n          'endBefore or equalTo).'\n      );\n    }\n    return new QueryImpl(\n      query._repo,\n      query._path,\n      newParams,\n      query._orderByCalled\n    );\n  }\n}\n\n/**\n * Creates a `QueryConstraint` with the specified ending point.\n *\n * Using `startAt()`, `startAfter()`, `endBefore()`, `endAt()` and `equalTo()`\n * allows you to choose arbitrary starting and ending points for your queries.\n *\n * The ending point is inclusive, so children with exactly the specified value\n * will be included in the query. The optional key argument can be used to\n * further limit the range of the query. If it is specified, then children that\n * have exactly the specified value must also have a key name less than or equal\n * to the specified key.\n *\n * You can read more about `endAt()` in\n * {@link https://firebase.google.com/docs/database/web/lists-of-data#filtering_data | Filtering data}.\n *\n * @param value - The value to end at. The argument type depends on which\n * `orderBy*()` function was used in this query. Specify a value that matches\n * the `orderBy*()` type. When used in combination with `orderByKey()`, the\n * value must be a string.\n * @param key - The child key to end at, among the children with the previously\n * specified priority. This argument is only allowed if ordering by child,\n * value, or priority.\n */\nexport function endAt(\n  value: number | string | boolean | null,\n  key?: string\n): QueryConstraint {\n  validateKey('endAt', 'key', key, true);\n  return new QueryEndAtConstraint(value, key);\n}\n\nclass QueryEndBeforeConstraint extends QueryConstraint {\n  readonly type: 'endBefore';\n\n  constructor(\n    private readonly _value: number | string | boolean | null,\n    private readonly _key?: string\n  ) {\n    super();\n  }\n\n  _apply<T>(query: QueryImpl): QueryImpl {\n    validateFirebaseDataArg('endBefore', this._value, query._path, false);\n    const newParams = queryParamsEndBefore(\n      query._queryParams,\n      this._value,\n      this._key\n    );\n    validateLimit(newParams);\n    validateQueryEndpoints(newParams);\n    if (query._queryParams.hasEnd()) {\n      throw new Error(\n        'endBefore: Starting point was already set (by another call to endAt, ' +\n          'endBefore or equalTo).'\n      );\n    }\n    return new QueryImpl(\n      query._repo,\n      query._path,\n      newParams,\n      query._orderByCalled\n    );\n  }\n}\n\n/**\n * Creates a `QueryConstraint` with the specified ending point (exclusive).\n *\n * Using `startAt()`, `startAfter()`, `endBefore()`, `endAt()` and `equalTo()`\n * allows you to choose arbitrary starting and ending points for your queries.\n *\n * The ending point is exclusive. If only a value is provided, children\n * with a value less than the specified value will be included in the query.\n * If a key is specified, then children must have a value lesss than or equal\n * to the specified value and a a key name less than the specified key.\n *\n * @param value - The value to end before. The argument type depends on which\n * `orderBy*()` function was used in this query. Specify a value that matches\n * the `orderBy*()` type. When used in combination with `orderByKey()`, the\n * value must be a string.\n * @param key - The child key to end before, among the children with the\n * previously specified priority. This argument is only allowed if ordering by\n * child, value, or priority.\n */\nexport function endBefore(\n  value: number | string | boolean | null,\n  key?: string\n): QueryConstraint {\n  validateKey('endBefore', 'key', key, true);\n  return new QueryEndBeforeConstraint(value, key);\n}\n\nclass QueryStartAtConstraint extends QueryConstraint {\n  readonly type: 'startAt';\n\n  constructor(\n    private readonly _value: number | string | boolean | null,\n    private readonly _key?: string\n  ) {\n    super();\n  }\n\n  _apply<T>(query: QueryImpl): QueryImpl {\n    validateFirebaseDataArg('startAt', this._value, query._path, true);\n    const newParams = queryParamsStartAt(\n      query._queryParams,\n      this._value,\n      this._key\n    );\n    validateLimit(newParams);\n    validateQueryEndpoints(newParams);\n    if (query._queryParams.hasStart()) {\n      throw new Error(\n        'startAt: Starting point was already set (by another call to startAt, ' +\n          'startBefore or equalTo).'\n      );\n    }\n    return new QueryImpl(\n      query._repo,\n      query._path,\n      newParams,\n      query._orderByCalled\n    );\n  }\n}\n\n/**\n * Creates a `QueryConstraint` with the specified starting point.\n *\n * Using `startAt()`, `startAfter()`, `endBefore()`, `endAt()` and `equalTo()`\n * allows you to choose arbitrary starting and ending points for your queries.\n *\n * The starting point is inclusive, so children with exactly the specified value\n * will be included in the query. The optional key argument can be used to\n * further limit the range of the query. If it is specified, then children that\n * have exactly the specified value must also have a key name greater than or\n * equal to the specified key.\n *\n * You can read more about `startAt()` in\n * {@link https://firebase.google.com/docs/database/web/lists-of-data#filtering_data | Filtering data}.\n *\n * @param value - The value to start at. The argument type depends on which\n * `orderBy*()` function was used in this query. Specify a value that matches\n * the `orderBy*()` type. When used in combination with `orderByKey()`, the\n * value must be a string.\n * @param key - The child key to start at. This argument is only allowed if\n * ordering by child, value, or priority.\n */\nexport function startAt(\n  value: number | string | boolean | null = null,\n  key?: string\n): QueryConstraint {\n  validateKey('startAt', 'key', key, true);\n  return new QueryStartAtConstraint(value, key);\n}\n\nclass QueryStartAfterConstraint extends QueryConstraint {\n  readonly type: 'startAfter';\n\n  constructor(\n    private readonly _value: number | string | boolean | null,\n    private readonly _key?: string\n  ) {\n    super();\n  }\n\n  _apply<T>(query: QueryImpl): QueryImpl {\n    validateFirebaseDataArg('startAfter', this._value, query._path, false);\n    const newParams = queryParamsStartAfter(\n      query._queryParams,\n      this._value,\n      this._key\n    );\n    validateLimit(newParams);\n    validateQueryEndpoints(newParams);\n    if (query._queryParams.hasStart()) {\n      throw new Error(\n        'startAfter: Starting point was already set (by another call to startAt, ' +\n          'startAfter, or equalTo).'\n      );\n    }\n    return new QueryImpl(\n      query._repo,\n      query._path,\n      newParams,\n      query._orderByCalled\n    );\n  }\n}\n\n/**\n * Creates a `QueryConstraint` with the specified starting point (exclusive).\n *\n * Using `startAt()`, `startAfter()`, `endBefore()`, `endAt()` and `equalTo()`\n * allows you to choose arbitrary starting and ending points for your queries.\n *\n * The starting point is exclusive. If only a value is provided, children\n * with a value greater than the specified value will be included in the query.\n * If a key is specified, then children must have a value greater than or equal\n * to the specified value and a a key name greater than the specified key.\n *\n * @param value - The value to start after. The argument type depends on which\n * `orderBy*()` function was used in this query. Specify a value that matches\n * the `orderBy*()` type. When used in combination with `orderByKey()`, the\n * value must be a string.\n * @param key - The child key to start after. This argument is only allowed if\n * ordering by child, value, or priority.\n */\nexport function startAfter(\n  value: number | string | boolean | null,\n  key?: string\n): QueryConstraint {\n  validateKey('startAfter', 'key', key, true);\n  return new QueryStartAfterConstraint(value, key);\n}\n\nclass QueryLimitToFirstConstraint extends QueryConstraint {\n  readonly type: 'limitToFirst';\n\n  constructor(private readonly _limit: number) {\n    super();\n  }\n\n  _apply<T>(query: QueryImpl): QueryImpl {\n    if (query._queryParams.hasLimit()) {\n      throw new Error(\n        'limitToFirst: Limit was already set (by another call to limitToFirst ' +\n          'or limitToLast).'\n      );\n    }\n    return new QueryImpl(\n      query._repo,\n      query._path,\n      queryParamsLimitToFirst(query._queryParams, this._limit),\n      query._orderByCalled\n    );\n  }\n}\n\n/**\n * Creates a new `QueryConstraint` that if limited to the first specific number\n * of children.\n *\n * The `limitToFirst()` method is used to set a maximum number of children to be\n * synced for a given callback. If we set a limit of 100, we will initially only\n * receive up to 100 `child_added` events. If we have fewer than 100 messages\n * stored in our Database, a `child_added` event will fire for each message.\n * However, if we have over 100 messages, we will only receive a `child_added`\n * event for the first 100 ordered messages. As items change, we will receive\n * `child_removed` events for each item that drops out of the active list so\n * that the total number stays at 100.\n *\n * You can read more about `limitToFirst()` in\n * {@link https://firebase.google.com/docs/database/web/lists-of-data#filtering_data | Filtering data}.\n *\n * @param limit - The maximum number of nodes to include in this query.\n */\nexport function limitToFirst(limit: number): QueryConstraint {\n  if (typeof limit !== 'number' || Math.floor(limit) !== limit || limit <= 0) {\n    throw new Error('limitToFirst: First argument must be a positive integer.');\n  }\n  return new QueryLimitToFirstConstraint(limit);\n}\n\nclass QueryLimitToLastConstraint extends QueryConstraint {\n  readonly type: 'limitToLast';\n\n  constructor(private readonly _limit: number) {\n    super();\n  }\n\n  _apply<T>(query: QueryImpl): QueryImpl {\n    if (query._queryParams.hasLimit()) {\n      throw new Error(\n        'limitToLast: Limit was already set (by another call to limitToFirst ' +\n          'or limitToLast).'\n      );\n    }\n    return new QueryImpl(\n      query._repo,\n      query._path,\n      queryParamsLimitToLast(query._queryParams, this._limit),\n      query._orderByCalled\n    );\n  }\n}\n\n/**\n * Creates a new `QueryConstraint` that is limited to return only the last\n * specified number of children.\n *\n * The `limitToLast()` method is used to set a maximum number of children to be\n * synced for a given callback. If we set a limit of 100, we will initially only\n * receive up to 100 `child_added` events. If we have fewer than 100 messages\n * stored in our Database, a `child_added` event will fire for each message.\n * However, if we have over 100 messages, we will only receive a `child_added`\n * event for the last 100 ordered messages. As items change, we will receive\n * `child_removed` events for each item that drops out of the active list so\n * that the total number stays at 100.\n *\n * You can read more about `limitToLast()` in\n * {@link https://firebase.google.com/docs/database/web/lists-of-data#filtering_data | Filtering data}.\n *\n * @param limit - The maximum number of nodes to include in this query.\n */\nexport function limitToLast(limit: number): QueryConstraint {\n  if (typeof limit !== 'number' || Math.floor(limit) !== limit || limit <= 0) {\n    throw new Error('limitToLast: First argument must be a positive integer.');\n  }\n\n  return new QueryLimitToLastConstraint(limit);\n}\n\nclass QueryOrderByChildConstraint extends QueryConstraint {\n  readonly type: 'orderByChild';\n\n  constructor(private readonly _path: string) {\n    super();\n  }\n\n  _apply<T>(query: QueryImpl): QueryImpl {\n    validateNoPreviousOrderByCall(query, 'orderByChild');\n    const parsedPath = new Path(this._path);\n    if (pathIsEmpty(parsedPath)) {\n      throw new Error(\n        'orderByChild: cannot pass in empty path. Use orderByValue() instead.'\n      );\n    }\n    const index = new PathIndex(parsedPath);\n    const newParams = queryParamsOrderBy(query._queryParams, index);\n    validateQueryEndpoints(newParams);\n\n    return new QueryImpl(\n      query._repo,\n      query._path,\n      newParams,\n      /*orderByCalled=*/ true\n    );\n  }\n}\n\n/**\n * Creates a new `QueryConstraint` that orders by the specified child key.\n *\n * Queries can only order by one key at a time. Calling `orderByChild()`\n * multiple times on the same query is an error.\n *\n * Firebase queries allow you to order your data by any child key on the fly.\n * However, if you know in advance what your indexes will be, you can define\n * them via the .indexOn rule in your Security Rules for better performance. See\n * the{@link https://firebase.google.com/docs/database/security/indexing-data}\n * rule for more information.\n *\n * You can read more about `orderByChild()` in\n * {@link https://firebase.google.com/docs/database/web/lists-of-data#sort_data | Sort data}.\n *\n * @param path - The path to order by.\n */\nexport function orderByChild(path: string): QueryConstraint {\n  if (path === '$key') {\n    throw new Error(\n      'orderByChild: \"$key\" is invalid.  Use orderByKey() instead.'\n    );\n  } else if (path === '$priority') {\n    throw new Error(\n      'orderByChild: \"$priority\" is invalid.  Use orderByPriority() instead.'\n    );\n  } else if (path === '$value') {\n    throw new Error(\n      'orderByChild: \"$value\" is invalid.  Use orderByValue() instead.'\n    );\n  }\n  validatePathString('orderByChild', 'path', path, false);\n  return new QueryOrderByChildConstraint(path);\n}\n\nclass QueryOrderByKeyConstraint extends QueryConstraint {\n  readonly type: 'orderByKey';\n\n  _apply<T>(query: QueryImpl): QueryImpl {\n    validateNoPreviousOrderByCall(query, 'orderByKey');\n    const newParams = queryParamsOrderBy(query._queryParams, KEY_INDEX);\n    validateQueryEndpoints(newParams);\n    return new QueryImpl(\n      query._repo,\n      query._path,\n      newParams,\n      /*orderByCalled=*/ true\n    );\n  }\n}\n\n/**\n * Creates a new `QueryConstraint` that orders by the key.\n *\n * Sorts the results of a query by their (ascending) key values.\n *\n * You can read more about `orderByKey()` in\n * {@link https://firebase.google.com/docs/database/web/lists-of-data#sort_data | Sort data}.\n */\nexport function orderByKey(): QueryConstraint {\n  return new QueryOrderByKeyConstraint();\n}\n\nclass QueryOrderByPriorityConstraint extends QueryConstraint {\n  readonly type: 'orderByPriority';\n\n  _apply<T>(query: QueryImpl): QueryImpl {\n    validateNoPreviousOrderByCall(query, 'orderByPriority');\n    const newParams = queryParamsOrderBy(query._queryParams, PRIORITY_INDEX);\n    validateQueryEndpoints(newParams);\n    return new QueryImpl(\n      query._repo,\n      query._path,\n      newParams,\n      /*orderByCalled=*/ true\n    );\n  }\n}\n\n/**\n * Creates a new `QueryConstraint` that orders by priority.\n *\n * Applications need not use priority but can order collections by\n * ordinary properties (see\n * {@link https://firebase.google.com/docs/database/web/lists-of-data#sort_data | Sort data}\n * for alternatives to priority.\n */\nexport function orderByPriority(): QueryConstraint {\n  return new QueryOrderByPriorityConstraint();\n}\n\nclass QueryOrderByValueConstraint extends QueryConstraint {\n  readonly type: 'orderByValue';\n\n  _apply<T>(query: QueryImpl): QueryImpl {\n    validateNoPreviousOrderByCall(query, 'orderByValue');\n    const newParams = queryParamsOrderBy(query._queryParams, VALUE_INDEX);\n    validateQueryEndpoints(newParams);\n    return new QueryImpl(\n      query._repo,\n      query._path,\n      newParams,\n      /*orderByCalled=*/ true\n    );\n  }\n}\n\n/**\n * Creates a new `QueryConstraint` that orders by value.\n *\n * If the children of a query are all scalar values (string, number, or\n * boolean), you can order the results by their (ascending) values.\n *\n * You can read more about `orderByValue()` in\n * {@link https://firebase.google.com/docs/database/web/lists-of-data#sort_data | Sort data}.\n */\nexport function orderByValue(): QueryConstraint {\n  return new QueryOrderByValueConstraint();\n}\n\nclass QueryEqualToValueConstraint extends QueryConstraint {\n  readonly type: 'equalTo';\n\n  constructor(\n    private readonly _value: number | string | boolean | null,\n    private readonly _key?: string\n  ) {\n    super();\n  }\n\n  _apply<T>(query: QueryImpl): QueryImpl {\n    validateFirebaseDataArg('equalTo', this._value, query._path, false);\n    if (query._queryParams.hasStart()) {\n      throw new Error(\n        'equalTo: Starting point was already set (by another call to startAt/startAfter or ' +\n          'equalTo).'\n      );\n    }\n    if (query._queryParams.hasEnd()) {\n      throw new Error(\n        'equalTo: Ending point was already set (by another call to endAt/endBefore or ' +\n          'equalTo).'\n      );\n    }\n    return new QueryEndAtConstraint(this._value, this._key)._apply(\n      new QueryStartAtConstraint(this._value, this._key)._apply(query)\n    );\n  }\n}\n\n/**\n * Creates a `QueryConstraint` that includes children that match the specified\n * value.\n *\n * Using `startAt()`, `startAfter()`, `endBefore()`, `endAt()` and `equalTo()`\n * allows you to choose arbitrary starting and ending points for your queries.\n *\n * The optional key argument can be used to further limit the range of the\n * query. If it is specified, then children that have exactly the specified\n * value must also have exactly the specified key as their key name. This can be\n * used to filter result sets with many matches for the same value.\n *\n * You can read more about `equalTo()` in\n * {@link https://firebase.google.com/docs/database/web/lists-of-data#filtering_data | Filtering data}.\n *\n * @param value - The value to match for. The argument type depends on which\n * `orderBy*()` function was used in this query. Specify a value that matches\n * the `orderBy*()` type. When used in combination with `orderByKey()`, the\n * value must be a string.\n * @param key - The child key to start at, among the children with the\n * previously specified priority. This argument is only allowed if ordering by\n * child, value, or priority.\n */\nexport function equalTo(\n  value: number | string | boolean | null,\n  key?: string\n): QueryConstraint {\n  validateKey('equalTo', 'key', key, true);\n  return new QueryEqualToValueConstraint(value, key);\n}\n\n/**\n * Creates a new immutable instance of `Query` that is extended to also include\n * additional query constraints.\n *\n * @param query - The Query instance to use as a base for the new constraints.\n * @param queryConstraints - The list of `QueryConstraint`s to apply.\n * @throws if any of the provided query constraints cannot be combined with the\n * existing or new constraints.\n */\nexport function query(\n  query: Query,\n  ...queryConstraints: QueryConstraint[]\n): Query {\n  let queryImpl = getModularInstance(query) as QueryImpl;\n  for (const constraint of queryConstraints) {\n    queryImpl = constraint._apply(queryImpl);\n  }\n  return queryImpl;\n}\n\n/**\n * Define reference constructor in various modules\n *\n * We are doing this here to avoid several circular\n * dependency issues\n */\nsyncPointSetReferenceConstructor(ReferenceImpl);\nsyncTreeSetReferenceConstructor(ReferenceImpl);\n","/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { AppCheckInternalComponentName } from '@firebase/app-check-interop-types';\n// eslint-disable-next-line import/no-extraneous-dependencies\nimport {\n  _FirebaseService,\n  _getProvider,\n  FirebaseApp,\n  getApp\n} from '@firebase/app-exp';\nimport { FirebaseAuthInternalName } from '@firebase/auth-interop-types';\nimport { Provider } from '@firebase/component';\nimport {\n  getModularInstance,\n  createMockUserToken,\n  EmulatorMockTokenOptions\n} from '@firebase/util';\n\nimport { AppCheckTokenProvider } from '../core/AppCheckTokenProvider';\nimport {\n  AuthTokenProvider,\n  EmulatorTokenProvider,\n  FirebaseAuthTokenProvider\n} from '../core/AuthTokenProvider';\nimport { Repo, repoInterrupt, repoResume, repoStart } from '../core/Repo';\nimport { RepoInfo } from '../core/RepoInfo';\nimport { parseRepoInfo } from '../core/util/libs/parser';\nimport { newEmptyPath, pathIsEmpty } from '../core/util/Path';\nimport {\n  fatal,\n  log,\n  enableLogging as enableLoggingImpl\n} from '../core/util/util';\nimport { validateUrl } from '../core/util/validation';\n\nimport { ReferenceImpl } from './Reference_impl';\n\n/**\n * This variable is also defined in the firebase node.js admin SDK. Before\n * modifying this definition, consult the definition in:\n *\n * https://github.com/firebase/firebase-admin-node\n *\n * and make sure the two are consistent.\n */\nconst FIREBASE_DATABASE_EMULATOR_HOST_VAR = 'FIREBASE_DATABASE_EMULATOR_HOST';\n\n/**\n * Creates and caches Repo instances.\n */\nconst repos: {\n  [appName: string]: {\n    [dbUrl: string]: Repo;\n  };\n} = {};\n\n/**\n * If true, new Repos will be created to use ReadonlyRestClient (for testing purposes).\n */\nlet useRestClient = false;\n\n/**\n * Update an existing repo in place to point to a new host/port.\n */\nfunction repoManagerApplyEmulatorSettings(\n  repo: Repo,\n  host: string,\n  port: number,\n  tokenProvider?: AuthTokenProvider\n): void {\n  repo.repoInfo_ = new RepoInfo(\n    `${host}:${port}`,\n    /* secure= */ false,\n    repo.repoInfo_.namespace,\n    repo.repoInfo_.webSocketOnly,\n    repo.repoInfo_.nodeAdmin,\n    repo.repoInfo_.persistenceKey,\n    repo.repoInfo_.includeNamespaceInQueryParams\n  );\n\n  if (tokenProvider) {\n    repo.authTokenProvider_ = tokenProvider;\n  }\n}\n\n/**\n * This function should only ever be called to CREATE a new database instance.\n * @internal\n */\nexport function repoManagerDatabaseFromApp(\n  app: FirebaseApp,\n  authProvider: Provider<FirebaseAuthInternalName>,\n  appCheckProvider?: Provider<AppCheckInternalComponentName>,\n  url?: string,\n  nodeAdmin?: boolean\n): Database {\n  let dbUrl: string | undefined = url || app.options.databaseURL;\n  if (dbUrl === undefined) {\n    if (!app.options.projectId) {\n      fatal(\n        \"Can't determine Firebase Database URL. Be sure to include \" +\n          ' a Project ID when calling firebase.initializeApp().'\n      );\n    }\n\n    log('Using default host for project ', app.options.projectId);\n    dbUrl = `${app.options.projectId}-default-rtdb.firebaseio.com`;\n  }\n\n  let parsedUrl = parseRepoInfo(dbUrl, nodeAdmin);\n  let repoInfo = parsedUrl.repoInfo;\n\n  let isEmulator: boolean;\n\n  let dbEmulatorHost: string | undefined = undefined;\n  if (typeof process !== 'undefined') {\n    dbEmulatorHost = process.env[FIREBASE_DATABASE_EMULATOR_HOST_VAR];\n  }\n\n  if (dbEmulatorHost) {\n    isEmulator = true;\n    dbUrl = `http://${dbEmulatorHost}?ns=${repoInfo.namespace}`;\n    parsedUrl = parseRepoInfo(dbUrl, nodeAdmin);\n    repoInfo = parsedUrl.repoInfo;\n  } else {\n    isEmulator = !parsedUrl.repoInfo.secure;\n  }\n\n  const authTokenProvider =\n    nodeAdmin && isEmulator\n      ? new EmulatorTokenProvider(EmulatorTokenProvider.OWNER)\n      : new FirebaseAuthTokenProvider(app.name, app.options, authProvider);\n\n  validateUrl('Invalid Firebase Database URL', parsedUrl);\n  if (!pathIsEmpty(parsedUrl.path)) {\n    fatal(\n      'Database URL must point to the root of a Firebase Database ' +\n        '(not including a child path).'\n    );\n  }\n\n  const repo = repoManagerCreateRepo(\n    repoInfo,\n    app,\n    authTokenProvider,\n    new AppCheckTokenProvider(app.name, appCheckProvider)\n  );\n  return new Database(repo, app);\n}\n\n/**\n * Remove the repo and make sure it is disconnected.\n *\n */\nfunction repoManagerDeleteRepo(repo: Repo, appName: string): void {\n  const appRepos = repos[appName];\n  // This should never happen...\n  if (!appRepos || appRepos[repo.key] !== repo) {\n    fatal(`Database ${appName}(${repo.repoInfo_}) has already been deleted.`);\n  }\n  repoInterrupt(repo);\n  delete appRepos[repo.key];\n}\n\n/**\n * Ensures a repo doesn't already exist and then creates one using the\n * provided app.\n *\n * @param repoInfo - The metadata about the Repo\n * @returns The Repo object for the specified server / repoName.\n */\nfunction repoManagerCreateRepo(\n  repoInfo: RepoInfo,\n  app: FirebaseApp,\n  authTokenProvider: AuthTokenProvider,\n  appCheckProvider: AppCheckTokenProvider\n): Repo {\n  let appRepos = repos[app.name];\n\n  if (!appRepos) {\n    appRepos = {};\n    repos[app.name] = appRepos;\n  }\n\n  let repo = appRepos[repoInfo.toURLString()];\n  if (repo) {\n    fatal(\n      'Database initialized multiple times. Please make sure the format of the database URL matches with each database() call.'\n    );\n  }\n  repo = new Repo(repoInfo, useRestClient, authTokenProvider, appCheckProvider);\n  appRepos[repoInfo.toURLString()] = repo;\n\n  return repo;\n}\n\n/**\n * Forces us to use ReadonlyRestClient instead of PersistentConnection for new Repos.\n */\nexport function repoManagerForceRestClient(forceRestClient: boolean): void {\n  useRestClient = forceRestClient;\n}\n\n/**\n * Class representing a Firebase Realtime Database.\n */\nexport class Database implements _FirebaseService {\n  /** Represents a database instance. */\n  readonly 'type' = 'database';\n\n  /** Track if the instance has been used (root or repo accessed) */\n  _instanceStarted: boolean = false;\n\n  /** Backing state for root_ */\n  private _rootInternal?: ReferenceImpl;\n\n  /** @hideconstructor */\n  constructor(\n    public _repoInternal: Repo,\n    /** The FirebaseApp associated with this Realtime Database instance. */\n    readonly app: FirebaseApp\n  ) {}\n\n  get _repo(): Repo {\n    if (!this._instanceStarted) {\n      repoStart(\n        this._repoInternal,\n        this.app.options.appId,\n        this.app.options['databaseAuthVariableOverride']\n      );\n      this._instanceStarted = true;\n    }\n    return this._repoInternal;\n  }\n\n  get _root(): ReferenceImpl {\n    if (!this._rootInternal) {\n      this._rootInternal = new ReferenceImpl(this._repo, newEmptyPath());\n    }\n    return this._rootInternal;\n  }\n\n  _delete(): Promise<void> {\n    if (this._rootInternal !== null) {\n      repoManagerDeleteRepo(this._repo, this.app.name);\n      this._repoInternal = null;\n      this._rootInternal = null;\n    }\n    return Promise.resolve();\n  }\n\n  _checkNotDeleted(apiName: string) {\n    if (this._rootInternal === null) {\n      fatal('Cannot call ' + apiName + ' on a deleted database.');\n    }\n  }\n}\n\n/**\n * Returns the instance of the Realtime Database SDK that is associated\n * with the provided {@link @firebase/app#FirebaseApp}. Initializes a new instance with\n * with default settings if no instance exists or if the existing instance uses\n * a custom database URL.\n *\n * @param app - The {@link @firebase/app#FirebaseApp} instance that the returned Realtime\n * Database instance is associated with.\n * @param url - The URL of the Realtime Database instance to connect to. If not\n * provided, the SDK connects to the default instance of the Firebase App.\n * @returns The `FirebaseDatabase` instance of the provided app.\n */\nexport function getDatabase(\n  app: FirebaseApp = getApp(),\n  url?: string\n): Database {\n  return _getProvider(app, 'database-exp').getImmediate({\n    identifier: url\n  }) as Database;\n}\n\n/**\n * Modify the provided instance to communicate with the Realtime Database\n * emulator.\n *\n * <p>Note: This method must be called before performing any other operation.\n *\n * @param db - The instance to modify.\n * @param host - The emulator host (ex: localhost)\n * @param port - The emulator port (ex: 8080)\n * @param options.mockUserToken - the mock auth token to use for unit testing Security Rules\n */\nexport function connectDatabaseEmulator(\n  db: Database,\n  host: string,\n  port: number,\n  options: {\n    mockUserToken?: EmulatorMockTokenOptions;\n  } = {}\n): void {\n  db = getModularInstance(db);\n  db._checkNotDeleted('useEmulator');\n  if (db._instanceStarted) {\n    fatal(\n      'Cannot call useEmulator() after instance has already been initialized.'\n    );\n  }\n\n  const repo = db._repoInternal;\n  let tokenProvider: EmulatorTokenProvider | undefined = undefined;\n  if (repo.repoInfo_.nodeAdmin) {\n    if (options.mockUserToken) {\n      fatal(\n        'mockUserToken is not supported by the Admin SDK. For client access with mock users, please use the \"firebase\" package instead of \"firebase-admin\".'\n      );\n    }\n    tokenProvider = new EmulatorTokenProvider(EmulatorTokenProvider.OWNER);\n  } else if (options.mockUserToken) {\n    const token = createMockUserToken(\n      options.mockUserToken,\n      db.app.options.projectId\n    );\n    tokenProvider = new EmulatorTokenProvider(token);\n  }\n\n  // Modify the repo to apply emulator settings\n  repoManagerApplyEmulatorSettings(repo, host, port, tokenProvider);\n}\n\n/**\n * Disconnects from the server (all Database operations will be completed\n * offline).\n *\n * The client automatically maintains a persistent connection to the Database\n * server, which will remain active indefinitely and reconnect when\n * disconnected. However, the `goOffline()` and `goOnline()` methods may be used\n * to control the client connection in cases where a persistent connection is\n * undesirable.\n *\n * While offline, the client will no longer receive data updates from the\n * Database. However, all Database operations performed locally will continue to\n * immediately fire events, allowing your application to continue behaving\n * normally. Additionally, each operation performed locally will automatically\n * be queued and retried upon reconnection to the Database server.\n *\n * To reconnect to the Database and begin receiving remote events, see\n * `goOnline()`.\n *\n * @param db - The instance to disconnect.\n */\nexport function goOffline(db: Database): void {\n  db = getModularInstance(db);\n  db._checkNotDeleted('goOffline');\n  repoInterrupt(db._repo);\n}\n\n/**\n * Reconnects to the server and synchronizes the offline Database state\n * with the server state.\n *\n * This method should be used after disabling the active connection with\n * `goOffline()`. Once reconnected, the client will transmit the proper data\n * and fire the appropriate events so that your client \"catches up\"\n * automatically.\n *\n * @param db - The instance to reconnect.\n */\nexport function goOnline(db: Database): void {\n  db = getModularInstance(db);\n  db._checkNotDeleted('goOnline');\n  repoResume(db._repo);\n}\n\n/**\n * Logs debugging information to the console.\n *\n * @param enabled - Enables logging if `true`, disables logging if `false`.\n * @param persistent - Remembers the logging state between page refreshes if\n * `true`.\n */\nexport function enableLogging(enabled: boolean, persistent?: boolean);\n\n/**\n * Logs debugging information to the console.\n *\n * @param logger - A custom logger function to control how things get logged.\n */\nexport function enableLogging(logger: (message: string) => unknown);\n\nexport function enableLogging(\n  logger: boolean | ((message: string) => unknown),\n  persistent?: boolean\n): void {\n  enableLoggingImpl(logger, persistent);\n}\n","/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nconst SERVER_TIMESTAMP = {\n  '.sv': 'timestamp'\n};\n\n/**\n * Returns a placeholder value for auto-populating the current timestamp (time\n * since the Unix epoch, in milliseconds) as determined by the Firebase\n * servers.\n */\nexport function serverTimestamp(): object {\n  return SERVER_TIMESTAMP;\n}\n\n/**\n * Returns a placeholder value that can be used to atomically increment the\n * current database value by the provided delta.\n *\n * @param delta - the amount to modify the current value atomically.\n * @returns A placeholder value for modifying data atomically server-side.\n */\nexport function increment(delta: number): object {\n  return {\n    '.sv': {\n      'increment': delta\n    }\n  };\n}\n","/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { getModularInstance, Deferred } from '@firebase/util';\n\nimport { repoStartTransaction } from '../core/Repo';\nimport { PRIORITY_INDEX } from '../core/snap/indexes/PriorityIndex';\nimport { Node } from '../core/snap/Node';\nimport { validateWritablePath } from '../core/util/validation';\n\nimport { DatabaseReference } from './Reference';\nimport { DataSnapshot, onValue, ReferenceImpl } from './Reference_impl';\n\n/** An options object to configure transactions. */\nexport interface TransactionOptions {\n  /**\n   * By default, events are raised each time the transaction update function\n   * runs. So if it is run multiple times, you may see intermediate states. You\n   * can set this to false to suppress these intermediate states and instead\n   * wait until the transaction has completed before events are raised.\n   */\n  readonly applyLocally?: boolean;\n}\n\n/**\n * A type for the resolve value of Firebase.transaction.\n */\nexport class TransactionResult {\n  /** @hideconstructor */\n  constructor(\n    /** Whether the transaction was successfully committed. */\n    readonly committed: boolean,\n    /** The resulting data snapshot. */\n    readonly snapshot: DataSnapshot\n  ) {}\n\n  /** Returns a JSON-serializable representation of this object. */\n  toJSON(): object {\n    return { committed: this.committed, snapshot: this.snapshot.toJSON() };\n  }\n}\n\n/**\n * Atomically modifies the data at this location.\n *\n * Atomically modify the data at this location. Unlike a normal `set()`, which\n * just overwrites the data regardless of its previous value, `transaction()` is\n * used to modify the existing value to a new value, ensuring there are no\n * conflicts with other clients writing to the same location at the same time.\n *\n * To accomplish this, you pass `runTransaction()` an update function which is\n * used to transform the current value into a new value. If another client\n * writes to the location before your new value is successfully written, your\n * update function will be called again with the new current value, and the\n * write will be retried. This will happen repeatedly until your write succeeds\n * without conflict or you abort the transaction by not returning a value from\n * your update function.\n *\n * Note: Modifying data with `set()` will cancel any pending transactions at\n * that location, so extreme care should be taken if mixing `set()` and\n * `transaction()` to update the same data.\n *\n * Note: When using transactions with Security and Firebase Rules in place, be\n * aware that a client needs `.read` access in addition to `.write` access in\n * order to perform a transaction. This is because the client-side nature of\n * transactions requires the client to read the data in order to transactionally\n * update it.\n *\n * @param ref - The location to atomically modify.\n * @param transactionUpdate - A developer-supplied function which will be passed\n * the current data stored at this location (as a JavaScript object). The\n * function should return the new value it would like written (as a JavaScript\n * object). If `undefined` is returned (i.e. you return with no arguments) the\n * transaction will be aborted and the data at this location will not be\n * modified.\n * @param options - An options object to configure transactions.\n * @returns A Promise that can optionally be used instead of the onComplete\n * callback to handle success and failure.\n */\nexport function runTransaction(\n  ref: DatabaseReference,\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  transactionUpdate: (currentData: any) => unknown,\n  options?: TransactionOptions\n): Promise<TransactionResult> {\n  ref = getModularInstance(ref);\n\n  validateWritablePath('Reference.transaction', ref._path);\n\n  if (ref.key === '.length' || ref.key === '.keys') {\n    throw (\n      'Reference.transaction failed: ' + ref.key + ' is a read-only object.'\n    );\n  }\n\n  const applyLocally = options?.applyLocally ?? true;\n  const deferred = new Deferred<TransactionResult>();\n\n  const promiseComplete = (\n    error: Error | null,\n    committed: boolean,\n    node: Node | null\n  ) => {\n    let dataSnapshot: DataSnapshot | null = null;\n    if (error) {\n      deferred.reject(error);\n    } else {\n      dataSnapshot = new DataSnapshot(\n        node,\n        new ReferenceImpl(ref._repo, ref._path),\n        PRIORITY_INDEX\n      );\n      deferred.resolve(new TransactionResult(committed, dataSnapshot));\n    }\n  };\n\n  // Add a watch to make sure we get server updates.\n  const unwatcher = onValue(ref, () => {});\n\n  repoStartTransaction(\n    ref._repo,\n    ref._path,\n    transactionUpdate,\n    promiseComplete,\n    unwatcher,\n    applyLocally\n  );\n\n  return deferred.promise;\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { validateArgCount, validateCallback, Compat } from '@firebase/util';\n\nimport { Indexable } from '../core/util/misc';\nimport { warn } from '../core/util/util';\n\n// TODO: revert to import { OnDisconnect as ExpOnDisconnect } from '../../exp/index'; once the modular SDK goes GA\n/**\n * This is a workaround for an issue in the no-modular '@firebase/database' where its typings\n * reference types from `@firebase/app-exp`.\n */\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\ntype ExpOnDisconnect = any;\n\nexport class OnDisconnect implements Compat<ExpOnDisconnect> {\n  constructor(readonly _delegate: ExpOnDisconnect) {}\n\n  cancel(onComplete?: (a: Error | null) => void): Promise<void> {\n    validateArgCount('OnDisconnect.cancel', 0, 1, arguments.length);\n    validateCallback('OnDisconnect.cancel', 'onComplete', onComplete, true);\n    const result = this._delegate.cancel();\n    if (onComplete) {\n      result.then(\n        () => onComplete(null),\n        error => onComplete(error)\n      );\n    }\n    return result;\n  }\n\n  remove(onComplete?: (a: Error | null) => void): Promise<void> {\n    validateArgCount('OnDisconnect.remove', 0, 1, arguments.length);\n    validateCallback('OnDisconnect.remove', 'onComplete', onComplete, true);\n    const result = this._delegate.remove();\n    if (onComplete) {\n      result.then(\n        () => onComplete(null),\n        error => onComplete(error)\n      );\n    }\n    return result;\n  }\n\n  set(value: unknown, onComplete?: (a: Error | null) => void): Promise<void> {\n    validateArgCount('OnDisconnect.set', 1, 2, arguments.length);\n    validateCallback('OnDisconnect.set', 'onComplete', onComplete, true);\n    const result = this._delegate.set(value);\n    if (onComplete) {\n      result.then(\n        () => onComplete(null),\n        error => onComplete(error)\n      );\n    }\n    return result;\n  }\n\n  setWithPriority(\n    value: unknown,\n    priority: number | string | null,\n    onComplete?: (a: Error | null) => void\n  ): Promise<void> {\n    validateArgCount('OnDisconnect.setWithPriority', 2, 3, arguments.length);\n    validateCallback(\n      'OnDisconnect.setWithPriority',\n      'onComplete',\n      onComplete,\n      true\n    );\n    const result = this._delegate.setWithPriority(value, priority);\n    if (onComplete) {\n      result.then(\n        () => onComplete(null),\n        error => onComplete(error)\n      );\n    }\n    return result;\n  }\n\n  update(\n    objectToMerge: Indexable,\n    onComplete?: (a: Error | null) => void\n  ): Promise<void> {\n    validateArgCount('OnDisconnect.update', 1, 2, arguments.length);\n    if (Array.isArray(objectToMerge)) {\n      const newObjectToMerge: { [k: string]: unknown } = {};\n      for (let i = 0; i < objectToMerge.length; ++i) {\n        newObjectToMerge['' + i] = objectToMerge[i];\n      }\n      objectToMerge = newObjectToMerge;\n      warn(\n        'Passing an Array to firebase.database.onDisconnect().update() is deprecated. Use set() if you want to overwrite the ' +\n          'existing data, or an Object with integer keys if you really do want to only update some of the children.'\n      );\n    }\n    validateCallback('OnDisconnect.update', 'onComplete', onComplete, true);\n    const result = this._delegate.update(objectToMerge);\n    if (onComplete) {\n      result.then(\n        () => onComplete(null),\n        error => onComplete(error)\n      );\n    }\n    return result;\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { validateArgCount } from '@firebase/util';\n\nimport { DataSnapshot } from './Reference';\n\nexport class TransactionResult {\n  /**\n   * A type for the resolve value of Firebase.transaction.\n   */\n  constructor(public committed: boolean, public snapshot: DataSnapshot) {}\n\n  // Do not create public documentation. This is intended to make JSON serialization work but is otherwise unnecessary\n  // for end-users\n  toJSON(): object {\n    validateArgCount('TransactionResult.toJSON', 0, 1, arguments.length);\n    return { committed: this.committed, snapshot: this.snapshot.toJSON() };\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {\n  Compat,\n  Deferred,\n  errorPrefix,\n  validateArgCount,\n  validateCallback,\n  validateContextObject\n} from '@firebase/util';\n\nimport {\n  OnDisconnect as ExpOnDisconnect,\n  off,\n  onChildAdded,\n  onChildChanged,\n  onChildMoved,\n  onChildRemoved,\n  onValue,\n  EventType,\n  limitToFirst,\n  query,\n  limitToLast,\n  orderByChild,\n  orderByKey,\n  orderByValue,\n  orderByPriority,\n  startAt,\n  startAfter,\n  endAt,\n  endBefore,\n  equalTo,\n  get,\n  set,\n  update,\n  setWithPriority,\n  remove,\n  setPriority,\n  push,\n  runTransaction,\n  _QueryImpl,\n  _ReferenceImpl,\n  child\n} from '../../exp/index'; // import from the exp public API\nimport { warn } from '../core/util/util';\nimport {\n  validateBoolean,\n  validateEventType,\n  validatePathString,\n  validateWritablePath\n} from '../core/util/validation';\nimport { UserCallback } from '../core/view/EventRegistration';\nimport { QueryParams } from '../core/view/QueryParams';\nimport { ThenableReferenceImpl } from '../exp/Reference_impl';\n\nimport { Database } from './Database';\nimport { OnDisconnect } from './onDisconnect';\nimport { TransactionResult } from './TransactionResult';\n\n// TODO: revert to import {  DataSnapshot as ExpDataSnapshot, Query as ExpQuery,\n// Reference as ExpReference,} from '../../exp/index'; once the modular SDK goes GA\n/**\n * This is part of a workaround for an issue in the no-modular '@firebase/database' where its typings\n * reference types from `@firebase/app-exp`.\n */\n\n/* eslint-disable @typescript-eslint/no-explicit-any */\ntype ExpDataSnapshot = any;\ntype ExpQuery = any;\ntype ExpReference = any;\n/* eslint-enable @typescript-eslint/no-explicit-any */\n\n/**\n * Class representing a firebase data snapshot.  It wraps a SnapshotNode and\n * surfaces the public methods (val, forEach, etc.) we want to expose.\n */\nexport class DataSnapshot implements Compat<ExpDataSnapshot> {\n  constructor(\n    readonly _database: Database,\n    readonly _delegate: ExpDataSnapshot\n  ) {}\n\n  /**\n   * Retrieves the snapshot contents as JSON.  Returns null if the snapshot is\n   * empty.\n   *\n   * @returns JSON representation of the DataSnapshot contents, or null if empty.\n   */\n  val(): unknown {\n    validateArgCount('DataSnapshot.val', 0, 0, arguments.length);\n    return this._delegate.val();\n  }\n\n  /**\n   * Returns the snapshot contents as JSON, including priorities of node.  Suitable for exporting\n   * the entire node contents.\n   * @returns JSON representation of the DataSnapshot contents, or null if empty.\n   */\n  exportVal(): unknown {\n    validateArgCount('DataSnapshot.exportVal', 0, 0, arguments.length);\n    return this._delegate.exportVal();\n  }\n\n  // Do not create public documentation. This is intended to make JSON serialization work but is otherwise unnecessary\n  // for end-users\n  toJSON(): unknown {\n    // Optional spacer argument is unnecessary because we're depending on recursion rather than stringifying the content\n    validateArgCount('DataSnapshot.toJSON', 0, 1, arguments.length);\n    return this._delegate.toJSON();\n  }\n\n  /**\n   * Returns whether the snapshot contains a non-null value.\n   *\n   * @returns Whether the snapshot contains a non-null value, or is empty.\n   */\n  exists(): boolean {\n    validateArgCount('DataSnapshot.exists', 0, 0, arguments.length);\n    return this._delegate.exists();\n  }\n\n  /**\n   * Returns a DataSnapshot of the specified child node's contents.\n   *\n   * @param path - Path to a child.\n   * @returns DataSnapshot for child node.\n   */\n  child(path: string): DataSnapshot {\n    validateArgCount('DataSnapshot.child', 0, 1, arguments.length);\n    // Ensure the childPath is a string (can be a number)\n    path = String(path);\n    validatePathString('DataSnapshot.child', 'path', path, false);\n    return new DataSnapshot(this._database, this._delegate.child(path));\n  }\n\n  /**\n   * Returns whether the snapshot contains a child at the specified path.\n   *\n   * @param path - Path to a child.\n   * @returns Whether the child exists.\n   */\n  hasChild(path: string): boolean {\n    validateArgCount('DataSnapshot.hasChild', 1, 1, arguments.length);\n    validatePathString('DataSnapshot.hasChild', 'path', path, false);\n    return this._delegate.hasChild(path);\n  }\n\n  /**\n   * Returns the priority of the object, or null if no priority was set.\n   *\n   * @returns The priority.\n   */\n  getPriority(): string | number | null {\n    validateArgCount('DataSnapshot.getPriority', 0, 0, arguments.length);\n    return this._delegate.priority;\n  }\n\n  /**\n   * Iterates through child nodes and calls the specified action for each one.\n   *\n   * @param action - Callback function to be called\n   * for each child.\n   * @returns True if forEach was canceled by action returning true for\n   * one of the child nodes.\n   */\n  forEach(action: (snapshot: DataSnapshot) => boolean | void): boolean {\n    validateArgCount('DataSnapshot.forEach', 1, 1, arguments.length);\n    validateCallback('DataSnapshot.forEach', 'action', action, false);\n    return this._delegate.forEach(expDataSnapshot =>\n      action(new DataSnapshot(this._database, expDataSnapshot))\n    );\n  }\n\n  /**\n   * Returns whether this DataSnapshot has children.\n   * @returns True if the DataSnapshot contains 1 or more child nodes.\n   */\n  hasChildren(): boolean {\n    validateArgCount('DataSnapshot.hasChildren', 0, 0, arguments.length);\n    return this._delegate.hasChildren();\n  }\n\n  get key() {\n    return this._delegate.key;\n  }\n\n  /**\n   * Returns the number of children for this DataSnapshot.\n   * @returns The number of children that this DataSnapshot contains.\n   */\n  numChildren(): number {\n    validateArgCount('DataSnapshot.numChildren', 0, 0, arguments.length);\n    return this._delegate.size;\n  }\n\n  /**\n   * @returns The Firebase reference for the location this snapshot's data came\n   * from.\n   */\n  getRef(): Reference {\n    validateArgCount('DataSnapshot.ref', 0, 0, arguments.length);\n    return new Reference(this._database, this._delegate.ref);\n  }\n\n  get ref(): Reference {\n    return this.getRef();\n  }\n}\n\nexport interface SnapshotCallback {\n  (dataSnapshot: DataSnapshot, previousChildName?: string | null): unknown;\n}\n\n/**\n * A Query represents a filter to be applied to a firebase location.  This object purely represents the\n * query expression (and exposes our public API to build the query).  The actual query logic is in ViewBase.js.\n *\n * Since every Firebase reference is a query, Firebase inherits from this object.\n */\nexport class Query implements Compat<ExpQuery> {\n  constructor(readonly database: Database, readonly _delegate: ExpQuery) {}\n\n  on(\n    eventType: string,\n    callback: SnapshotCallback,\n    cancelCallbackOrContext?: ((a: Error) => unknown) | object | null,\n    context?: object | null\n  ): SnapshotCallback {\n    validateArgCount('Query.on', 2, 4, arguments.length);\n    validateCallback('Query.on', 'callback', callback, false);\n\n    const ret = Query.getCancelAndContextArgs_(\n      'Query.on',\n      cancelCallbackOrContext,\n      context\n    );\n    const valueCallback: UserCallback = (expSnapshot, previousChildName?) => {\n      callback.call(\n        ret.context,\n        new DataSnapshot(this.database, expSnapshot),\n        previousChildName\n      );\n    };\n    valueCallback.userCallback = callback;\n    valueCallback.context = ret.context;\n    const cancelCallback = ret.cancel?.bind(ret.context);\n\n    switch (eventType) {\n      case 'value':\n        onValue(this._delegate, valueCallback, cancelCallback);\n        return callback;\n      case 'child_added':\n        onChildAdded(this._delegate, valueCallback, cancelCallback);\n        return callback;\n      case 'child_removed':\n        onChildRemoved(this._delegate, valueCallback, cancelCallback);\n        return callback;\n      case 'child_changed':\n        onChildChanged(this._delegate, valueCallback, cancelCallback);\n        return callback;\n      case 'child_moved':\n        onChildMoved(this._delegate, valueCallback, cancelCallback);\n        return callback;\n      default:\n        throw new Error(\n          errorPrefix('Query.on', 'eventType') +\n            'must be a valid event type = \"value\", \"child_added\", \"child_removed\", ' +\n            '\"child_changed\", or \"child_moved\".'\n        );\n    }\n  }\n\n  off(\n    eventType?: string,\n    callback?: SnapshotCallback,\n    context?: object | null\n  ): void {\n    validateArgCount('Query.off', 0, 3, arguments.length);\n    validateEventType('Query.off', eventType, true);\n    validateCallback('Query.off', 'callback', callback, true);\n    validateContextObject('Query.off', 'context', context, true);\n    if (callback) {\n      const valueCallback: UserCallback = () => {};\n      valueCallback.userCallback = callback;\n      valueCallback.context = context;\n      off(this._delegate, eventType as EventType, valueCallback);\n    } else {\n      off(this._delegate, eventType as EventType | undefined);\n    }\n  }\n\n  /**\n   * Get the server-value for this query, or return a cached value if not connected.\n   */\n  get(): Promise<DataSnapshot> {\n    return get(this._delegate).then(expSnapshot => {\n      return new DataSnapshot(this.database, expSnapshot);\n    });\n  }\n\n  /**\n   * Attaches a listener, waits for the first event, and then removes the listener\n   */\n  once(\n    eventType: string,\n    callback?: SnapshotCallback,\n    failureCallbackOrContext?: ((a: Error) => void) | object | null,\n    context?: object | null\n  ): Promise<DataSnapshot> {\n    validateArgCount('Query.once', 1, 4, arguments.length);\n    validateCallback('Query.once', 'callback', callback, true);\n\n    const ret = Query.getCancelAndContextArgs_(\n      'Query.once',\n      failureCallbackOrContext,\n      context\n    );\n    const deferred = new Deferred<DataSnapshot>();\n    const valueCallback: UserCallback = (expSnapshot, previousChildName?) => {\n      const result = new DataSnapshot(this.database, expSnapshot);\n      if (callback) {\n        callback.call(ret.context, result, previousChildName);\n      }\n      deferred.resolve(result);\n    };\n    valueCallback.userCallback = callback;\n    valueCallback.context = ret.context;\n    const cancelCallback = (error: Error) => {\n      if (ret.cancel) {\n        ret.cancel.call(ret.context, error);\n      }\n      deferred.reject(error);\n    };\n\n    switch (eventType) {\n      case 'value':\n        onValue(this._delegate, valueCallback, cancelCallback, {\n          onlyOnce: true\n        });\n        break;\n      case 'child_added':\n        onChildAdded(this._delegate, valueCallback, cancelCallback, {\n          onlyOnce: true\n        });\n        break;\n      case 'child_removed':\n        onChildRemoved(this._delegate, valueCallback, cancelCallback, {\n          onlyOnce: true\n        });\n        break;\n      case 'child_changed':\n        onChildChanged(this._delegate, valueCallback, cancelCallback, {\n          onlyOnce: true\n        });\n        break;\n      case 'child_moved':\n        onChildMoved(this._delegate, valueCallback, cancelCallback, {\n          onlyOnce: true\n        });\n        break;\n      default:\n        throw new Error(\n          errorPrefix('Query.once', 'eventType') +\n            'must be a valid event type = \"value\", \"child_added\", \"child_removed\", ' +\n            '\"child_changed\", or \"child_moved\".'\n        );\n    }\n\n    return deferred.promise;\n  }\n\n  /**\n   * Set a limit and anchor it to the start of the window.\n   */\n  limitToFirst(limit: number): Query {\n    validateArgCount('Query.limitToFirst', 1, 1, arguments.length);\n    return new Query(this.database, query(this._delegate, limitToFirst(limit)));\n  }\n\n  /**\n   * Set a limit and anchor it to the end of the window.\n   */\n  limitToLast(limit: number): Query {\n    validateArgCount('Query.limitToLast', 1, 1, arguments.length);\n    return new Query(this.database, query(this._delegate, limitToLast(limit)));\n  }\n\n  /**\n   * Given a child path, return a new query ordered by the specified grandchild path.\n   */\n  orderByChild(path: string): Query {\n    validateArgCount('Query.orderByChild', 1, 1, arguments.length);\n    return new Query(this.database, query(this._delegate, orderByChild(path)));\n  }\n\n  /**\n   * Return a new query ordered by the KeyIndex\n   */\n  orderByKey(): Query {\n    validateArgCount('Query.orderByKey', 0, 0, arguments.length);\n    return new Query(this.database, query(this._delegate, orderByKey()));\n  }\n\n  /**\n   * Return a new query ordered by the PriorityIndex\n   */\n  orderByPriority(): Query {\n    validateArgCount('Query.orderByPriority', 0, 0, arguments.length);\n    return new Query(this.database, query(this._delegate, orderByPriority()));\n  }\n\n  /**\n   * Return a new query ordered by the ValueIndex\n   */\n  orderByValue(): Query {\n    validateArgCount('Query.orderByValue', 0, 0, arguments.length);\n    return new Query(this.database, query(this._delegate, orderByValue()));\n  }\n\n  startAt(\n    value: number | string | boolean | null = null,\n    name?: string | null\n  ): Query {\n    validateArgCount('Query.startAt', 0, 2, arguments.length);\n    return new Query(\n      this.database,\n      query(this._delegate, startAt(value, name))\n    );\n  }\n\n  startAfter(\n    value: number | string | boolean | null = null,\n    name?: string | null\n  ): Query {\n    validateArgCount('Query.startAfter', 0, 2, arguments.length);\n    return new Query(\n      this.database,\n      query(this._delegate, startAfter(value, name))\n    );\n  }\n\n  endAt(\n    value: number | string | boolean | null = null,\n    name?: string | null\n  ): Query {\n    validateArgCount('Query.endAt', 0, 2, arguments.length);\n    return new Query(this.database, query(this._delegate, endAt(value, name)));\n  }\n\n  endBefore(\n    value: number | string | boolean | null = null,\n    name?: string | null\n  ): Query {\n    validateArgCount('Query.endBefore', 0, 2, arguments.length);\n    return new Query(\n      this.database,\n      query(this._delegate, endBefore(value, name))\n    );\n  }\n\n  /**\n   * Load the selection of children with exactly the specified value, and, optionally,\n   * the specified name.\n   */\n  equalTo(value: number | string | boolean | null, name?: string) {\n    validateArgCount('Query.equalTo', 1, 2, arguments.length);\n    return new Query(\n      this.database,\n      query(this._delegate, equalTo(value, name))\n    );\n  }\n\n  /**\n   * @returns URL for this location.\n   */\n  toString(): string {\n    validateArgCount('Query.toString', 0, 0, arguments.length);\n    return this._delegate.toString();\n  }\n\n  // Do not create public documentation. This is intended to make JSON serialization work but is otherwise unnecessary\n  // for end-users.\n  toJSON() {\n    // An optional spacer argument is unnecessary for a string.\n    validateArgCount('Query.toJSON', 0, 1, arguments.length);\n    return this._delegate.toJSON();\n  }\n\n  /**\n   * Return true if this query and the provided query are equivalent; otherwise, return false.\n   */\n  isEqual(other: Query): boolean {\n    validateArgCount('Query.isEqual', 1, 1, arguments.length);\n    if (!(other instanceof Query)) {\n      const error =\n        'Query.isEqual failed: First argument must be an instance of firebase.database.Query.';\n      throw new Error(error);\n    }\n    return this._delegate.isEqual(other._delegate);\n  }\n\n  /**\n   * Helper used by .on and .once to extract the context and or cancel arguments.\n   * @param fnName - The function name (on or once)\n   *\n   */\n  private static getCancelAndContextArgs_(\n    fnName: string,\n    cancelOrContext?: ((a: Error) => void) | object | null,\n    context?: object | null\n  ): { cancel: ((a: Error) => void) | undefined; context: object | undefined } {\n    const ret: {\n      cancel: ((a: Error) => void) | null;\n      context: object | null;\n    } = { cancel: undefined, context: undefined };\n    if (cancelOrContext && context) {\n      ret.cancel = cancelOrContext as (a: Error) => void;\n      validateCallback(fnName, 'cancel', ret.cancel, true);\n\n      ret.context = context;\n      validateContextObject(fnName, 'context', ret.context, true);\n    } else if (cancelOrContext) {\n      // we have either a cancel callback or a context.\n      if (typeof cancelOrContext === 'object' && cancelOrContext !== null) {\n        // it's a context!\n        ret.context = cancelOrContext;\n      } else if (typeof cancelOrContext === 'function') {\n        ret.cancel = cancelOrContext as (a: Error) => void;\n      } else {\n        throw new Error(\n          errorPrefix(fnName, 'cancelOrContext') +\n            ' must either be a cancel callback or a context object.'\n        );\n      }\n    }\n    return ret;\n  }\n\n  get ref(): Reference {\n    return new Reference(\n      this.database,\n      new _ReferenceImpl(this._delegate._repo, this._delegate._path)\n    );\n  }\n}\n\nexport class Reference extends Query implements Compat<ExpReference> {\n  then: Promise<Reference>['then'];\n  catch: Promise<Reference>['catch'];\n\n  /**\n   * Call options:\n   *   new Reference(Repo, Path) or\n   *   new Reference(url: string, string|RepoManager)\n   *\n   * Externally - this is the firebase.database.Reference type.\n   */\n  constructor(readonly database: Database, readonly _delegate: ExpReference) {\n    super(\n      database,\n      new _QueryImpl(_delegate._repo, _delegate._path, new QueryParams(), false)\n    );\n  }\n\n  /** @returns {?string} */\n  getKey(): string | null {\n    validateArgCount('Reference.key', 0, 0, arguments.length);\n    return this._delegate.key;\n  }\n\n  child(pathString: string): Reference {\n    validateArgCount('Reference.child', 1, 1, arguments.length);\n    if (typeof pathString === 'number') {\n      pathString = String(pathString);\n    }\n    return new Reference(this.database, child(this._delegate, pathString));\n  }\n\n  /** @returns {?Reference} */\n  getParent(): Reference | null {\n    validateArgCount('Reference.parent', 0, 0, arguments.length);\n    const parent = this._delegate.parent;\n    return parent ? new Reference(this.database, parent) : null;\n  }\n\n  /** @returns {!Reference} */\n  getRoot(): Reference {\n    validateArgCount('Reference.root', 0, 0, arguments.length);\n    return new Reference(this.database, this._delegate.root);\n  }\n\n  set(\n    newVal: unknown,\n    onComplete?: (error: Error | null) => void\n  ): Promise<unknown> {\n    validateArgCount('Reference.set', 1, 2, arguments.length);\n    validateCallback('Reference.set', 'onComplete', onComplete, true);\n    const result = set(this._delegate, newVal);\n    if (onComplete) {\n      result.then(\n        () => onComplete(null),\n        error => onComplete(error)\n      );\n    }\n    return result;\n  }\n\n  update(\n    values: object,\n    onComplete?: (a: Error | null) => void\n  ): Promise<unknown> {\n    validateArgCount('Reference.update', 1, 2, arguments.length);\n\n    if (Array.isArray(values)) {\n      const newObjectToMerge: { [k: string]: unknown } = {};\n      for (let i = 0; i < values.length; ++i) {\n        newObjectToMerge['' + i] = values[i];\n      }\n      values = newObjectToMerge;\n      warn(\n        'Passing an Array to Firebase.update() is deprecated. ' +\n          'Use set() if you want to overwrite the existing data, or ' +\n          'an Object with integer keys if you really do want to ' +\n          'only update some of the children.'\n      );\n    }\n    validateWritablePath('Reference.update', this._delegate._path);\n    validateCallback('Reference.update', 'onComplete', onComplete, true);\n\n    const result = update(this._delegate, values);\n    if (onComplete) {\n      result.then(\n        () => onComplete(null),\n        error => onComplete(error)\n      );\n    }\n    return result;\n  }\n\n  setWithPriority(\n    newVal: unknown,\n    newPriority: string | number | null,\n    onComplete?: (a: Error | null) => void\n  ): Promise<unknown> {\n    validateArgCount('Reference.setWithPriority', 2, 3, arguments.length);\n    validateCallback(\n      'Reference.setWithPriority',\n      'onComplete',\n      onComplete,\n      true\n    );\n\n    const result = setWithPriority(this._delegate, newVal, newPriority);\n    if (onComplete) {\n      result.then(\n        () => onComplete(null),\n        error => onComplete(error)\n      );\n    }\n    return result;\n  }\n\n  remove(onComplete?: (a: Error | null) => void): Promise<unknown> {\n    validateArgCount('Reference.remove', 0, 1, arguments.length);\n    validateCallback('Reference.remove', 'onComplete', onComplete, true);\n\n    const result = remove(this._delegate);\n    if (onComplete) {\n      result.then(\n        () => onComplete(null),\n        error => onComplete(error)\n      );\n    }\n    return result;\n  }\n\n  transaction(\n    transactionUpdate: (currentData: unknown) => unknown,\n    onComplete?: (\n      error: Error | null,\n      committed: boolean,\n      dataSnapshot: DataSnapshot | null\n    ) => void,\n    applyLocally?: boolean\n  ): Promise<TransactionResult> {\n    validateArgCount('Reference.transaction', 1, 3, arguments.length);\n    validateCallback(\n      'Reference.transaction',\n      'transactionUpdate',\n      transactionUpdate,\n      false\n    );\n    validateCallback('Reference.transaction', 'onComplete', onComplete, true);\n    validateBoolean(\n      'Reference.transaction',\n      'applyLocally',\n      applyLocally,\n      true\n    );\n\n    const result = runTransaction(this._delegate, transactionUpdate, {\n      applyLocally\n    }).then(\n      transactionResult =>\n        new TransactionResult(\n          transactionResult.committed,\n          new DataSnapshot(this.database, transactionResult.snapshot)\n        )\n    );\n    if (onComplete) {\n      result.then(\n        transactionResult =>\n          onComplete(\n            null,\n            transactionResult.committed,\n            transactionResult.snapshot\n          ),\n        error => onComplete(error, false, null)\n      );\n    }\n    return result;\n  }\n\n  setPriority(\n    priority: string | number | null,\n    onComplete?: (a: Error | null) => void\n  ): Promise<unknown> {\n    validateArgCount('Reference.setPriority', 1, 2, arguments.length);\n    validateCallback('Reference.setPriority', 'onComplete', onComplete, true);\n\n    const result = setPriority(this._delegate, priority);\n    if (onComplete) {\n      result.then(\n        () => onComplete(null),\n        error => onComplete(error)\n      );\n    }\n    return result;\n  }\n\n  push(value?: unknown, onComplete?: (a: Error | null) => void): Reference {\n    validateArgCount('Reference.push', 0, 2, arguments.length);\n    validateCallback('Reference.push', 'onComplete', onComplete, true);\n\n    const expPromise = push(this._delegate, value) as ThenableReferenceImpl;\n    const promise = expPromise.then(\n      expRef => new Reference(this.database, expRef)\n    );\n\n    if (onComplete) {\n      promise.then(\n        () => onComplete(null),\n        error => onComplete(error)\n      );\n    }\n\n    const result = new Reference(this.database, expPromise);\n    result.then = promise.then.bind(promise);\n    result.catch = promise.catch.bind(promise, undefined);\n    return result;\n  }\n\n  onDisconnect(): OnDisconnect {\n    validateWritablePath('Reference.onDisconnect', this._delegate._path);\n    return new OnDisconnect(\n      new ExpOnDisconnect(this._delegate._repo, this._delegate._path)\n    );\n  }\n\n  get key(): string | null {\n    return this.getKey();\n  }\n\n  get parent(): Reference | null {\n    return this.getParent();\n  }\n\n  get root(): Reference {\n    return this.getRoot();\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n// eslint-disable-next-line import/no-extraneous-dependencies\n\nimport { FirebaseApp } from '@firebase/app-types';\nimport { FirebaseService } from '@firebase/app-types/private';\nimport {\n  validateArgCount,\n  Compat,\n  EmulatorMockTokenOptions\n} from '@firebase/util';\n\nimport {\n  goOnline,\n  connectDatabaseEmulator,\n  goOffline,\n  ref,\n  refFromURL,\n  increment,\n  serverTimestamp\n} from '../../exp/index'; // import from the exp public API\n\nimport { Reference } from './Reference';\n\n// TODO: revert to import {FirebaseDatabase as ExpDatabase} from '@firebase/database' once modular SDK goes GA\n/**\n * This is a workaround for an issue in the no-modular '@firebase/database' where its typings\n * reference types from `@firebase/app-exp`.\n */\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\ntype ExpDatabase = any;\n\n/**\n * Class representing a firebase database.\n */\nexport class Database implements FirebaseService, Compat<ExpDatabase> {\n  static readonly ServerValue = {\n    TIMESTAMP: serverTimestamp(),\n    increment: (delta: number) => increment(delta)\n  };\n\n  /**\n   * The constructor should not be called by users of our public API.\n   */\n  constructor(readonly _delegate: ExpDatabase, readonly app: FirebaseApp) {}\n\n  INTERNAL = {\n    delete: () => this._delegate._delete()\n  };\n\n  /**\n   * Modify this instance to communicate with the Realtime Database emulator.\n   *\n   * <p>Note: This method must be called before performing any other operation.\n   *\n   * @param host - the emulator host (ex: localhost)\n   * @param port - the emulator port (ex: 8080)\n   * @param options.mockUserToken - the mock auth token to use for unit testing Security Rules\n   */\n  useEmulator(\n    host: string,\n    port: number,\n    options: {\n      mockUserToken?: EmulatorMockTokenOptions;\n    } = {}\n  ): void {\n    connectDatabaseEmulator(this._delegate, host, port, options);\n  }\n\n  /**\n   * Returns a reference to the root or to the path specified in the provided\n   * argument.\n   *\n   * @param path - The relative string path or an existing Reference to a database\n   * location.\n   * @throws If a Reference is provided, throws if it does not belong to the\n   * same project.\n   * @returns Firebase reference.\n   */\n  ref(path?: string): Reference;\n  ref(path?: Reference): Reference;\n  ref(path?: string | Reference): Reference {\n    validateArgCount('database.ref', 0, 1, arguments.length);\n    if (path instanceof Reference) {\n      const childRef = refFromURL(this._delegate, path.toString());\n      return new Reference(this, childRef);\n    } else {\n      const childRef = ref(this._delegate, path);\n      return new Reference(this, childRef);\n    }\n  }\n\n  /**\n   * Returns a reference to the root or the path specified in url.\n   * We throw a exception if the url is not in the same domain as the\n   * current repo.\n   * @returns Firebase reference.\n   */\n  refFromURL(url: string): Reference {\n    const apiName = 'database.refFromURL';\n    validateArgCount(apiName, 1, 1, arguments.length);\n    const childRef = refFromURL(this._delegate, url);\n    return new Reference(this, childRef);\n  }\n\n  // Make individual repo go offline.\n  goOffline(): void {\n    validateArgCount('database.goOffline', 0, 0, arguments.length);\n    return goOffline(this._delegate);\n  }\n\n  goOnline(): void {\n    validateArgCount('database.goOnline', 0, 0, arguments.length);\n    return goOnline(this._delegate);\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { FirebaseApp } from '@firebase/app-types';\nimport {\n  FirebaseAuthInternal,\n  FirebaseAuthInternalName\n} from '@firebase/auth-interop-types';\nimport {\n  Component,\n  ComponentContainer,\n  ComponentType,\n  Provider\n} from '@firebase/component';\nimport * as types from '@firebase/database-types';\n\nimport { _repoManagerDatabaseFromApp } from '../../exp/index';\nimport {\n  repoInterceptServerData,\n  repoStats,\n  repoStatsIncrementCounter\n} from '../core/Repo';\nimport { setSDKVersion } from '../core/version';\nimport { BrowserPollConnection } from '../realtime/BrowserPollConnection';\nimport { WebSocketConnection } from '../realtime/WebSocketConnection';\n\nimport { Database } from './Database';\nimport { Reference } from './Reference';\n\n/**\n * INTERNAL methods for internal-use only (tests, etc.).\n *\n * Customers shouldn't use these or else should be aware that they could break at any time.\n */\n\nexport const forceLongPolling = function () {\n  WebSocketConnection.forceDisallow();\n  BrowserPollConnection.forceAllow();\n};\n\nexport const forceWebSockets = function () {\n  BrowserPollConnection.forceDisallow();\n};\n\n/* Used by App Manager */\nexport const isWebSocketsAvailable = function (): boolean {\n  return WebSocketConnection['isAvailable']();\n};\n\nexport const setSecurityDebugCallback = function (\n  ref: Reference,\n  callback: (a: object) => void\n) {\n  const connection = ref._delegate._repo.persistentConnection_;\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  (connection as any).securityDebugCallback_ = callback;\n};\n\nexport const stats = function (ref: Reference, showDelta?: boolean) {\n  repoStats(ref._delegate._repo, showDelta);\n};\n\nexport const statsIncrementCounter = function (ref: Reference, metric: string) {\n  repoStatsIncrementCounter(ref._delegate._repo, metric);\n};\n\nexport const dataUpdateCount = function (ref: Reference): number {\n  return ref._delegate._repo.dataUpdateCount;\n};\n\nexport const interceptServerData = function (\n  ref: Reference,\n  callback: ((a: string, b: unknown) => void) | null\n) {\n  return repoInterceptServerData(ref._delegate._repo, callback);\n};\n\n/**\n * Used by console to create a database based on the app,\n * passed database URL and a custom auth implementation.\n *\n * @param app - A valid FirebaseApp-like object\n * @param url - A valid Firebase databaseURL\n * @param version - custom version e.g. firebase-admin version\n * @param customAuthImpl - custom auth implementation\n */\nexport function initStandalone<T>({\n  app,\n  url,\n  version,\n  customAuthImpl,\n  namespace,\n  nodeAdmin = false\n}: {\n  app: FirebaseApp;\n  url: string;\n  version: string;\n  customAuthImpl: FirebaseAuthInternal;\n  namespace: T;\n  nodeAdmin?: boolean;\n}): {\n  instance: types.Database;\n  namespace: T;\n} {\n  setSDKVersion(version);\n\n  /**\n   * ComponentContainer('database-standalone') is just a placeholder that doesn't perform\n   * any actual function.\n   */\n  const authProvider = new Provider<FirebaseAuthInternalName>(\n    'auth-internal',\n    new ComponentContainer('database-standalone')\n  );\n  authProvider.setComponent(\n    new Component('auth-internal', () => customAuthImpl, ComponentType.PRIVATE)\n  );\n\n  return {\n    instance: new Database(\n      _repoManagerDatabaseFromApp(\n        app,\n        authProvider,\n        /* appCheckProvider= */ undefined,\n        url,\n        nodeAdmin\n      ),\n      app\n    ) as types.Database,\n    namespace\n  };\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { PersistentConnection } from '../core/PersistentConnection';\nimport { RepoInfo } from '../core/RepoInfo';\nimport { repoManagerForceRestClient } from '../exp/Database';\nimport { Connection } from '../realtime/Connection';\n\nimport { Query } from './Reference';\n\nexport const DataConnection = PersistentConnection;\n\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\n(PersistentConnection.prototype as any).simpleListen = function (\n  pathString: string,\n  onComplete: (a: unknown) => void\n) {\n  this.sendRequest('q', { p: pathString }, onComplete);\n};\n\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\n(PersistentConnection.prototype as any).echo = function (\n  data: unknown,\n  onEcho: (a: unknown) => void\n) {\n  this.sendRequest('echo', { d: data }, onEcho);\n};\n\n// RealTimeConnection properties that we use in tests.\nexport const RealTimeConnection = Connection;\n\nexport const hijackHash = function (newHash: () => string) {\n  const oldPut = PersistentConnection.prototype.put;\n  PersistentConnection.prototype.put = function (\n    pathString,\n    data,\n    onComplete,\n    hash\n  ) {\n    if (hash !== undefined) {\n      hash = newHash();\n    }\n    oldPut.call(this, pathString, data, onComplete, hash);\n  };\n  return function () {\n    PersistentConnection.prototype.put = oldPut;\n  };\n};\n\nexport const ConnectionTarget = RepoInfo;\n\nexport const queryIdentifier = function (query: Query) {\n  return query._delegate._queryIdentifier;\n};\n\n/**\n * Forces the RepoManager to create Repos that use ReadonlyRestClient instead of PersistentConnection.\n */\nexport const forceRestClient = function (forceRestClient: boolean) {\n  repoManagerForceRestClient(forceRestClient);\n};\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n// eslint-disable-next-line import/no-extraneous-dependencies\nimport firebase from '@firebase/app';\nimport { FirebaseNamespace } from '@firebase/app-types';\nimport { _FirebaseNamespace } from '@firebase/app-types/private';\nimport { Component, ComponentType } from '@firebase/component';\nimport * as types from '@firebase/database-types';\nimport { isNodeSdk } from '@firebase/util';\n\nimport { name, version } from './package.json';\nimport { Database } from './src/api/Database';\nimport * as INTERNAL from './src/api/internal';\nimport { DataSnapshot, Query, Reference } from './src/api/Reference';\nimport * as TEST_ACCESS from './src/api/test_access';\nimport { enableLogging } from './src/core/util/util';\nimport { setSDKVersion } from './src/core/version';\nimport { repoManagerDatabaseFromApp } from './src/exp/Database';\n\nconst ServerValue = Database.ServerValue;\n\nexport function registerDatabase(instance: FirebaseNamespace) {\n  // set SDK_VERSION\n  setSDKVersion(instance.SDK_VERSION);\n\n  // Register the Database Service with the 'firebase' namespace.\n  const namespace = (instance as _FirebaseNamespace).INTERNAL.registerComponent(\n    new Component(\n      'database',\n      (container, { instanceIdentifier: url }) => {\n        /* Dependencies */\n        // getImmediate for FirebaseApp will always succeed\n        const app = container.getProvider('app').getImmediate();\n        const authProvider = container.getProvider('auth-internal');\n        const appCheckProvider = container.getProvider('app-check-internal');\n\n        return new Database(\n          repoManagerDatabaseFromApp(app, authProvider, appCheckProvider, url),\n          app\n        );\n      },\n      ComponentType.PUBLIC\n    )\n      .setServiceProps(\n        // firebase.database namespace properties\n        {\n          Reference,\n          Query,\n          Database,\n          DataSnapshot,\n          enableLogging,\n          INTERNAL,\n          ServerValue,\n          TEST_ACCESS\n        }\n      )\n      .setMultipleInstances(true)\n  );\n\n  instance.registerVersion(name, version);\n\n  if (isNodeSdk()) {\n    module.exports = namespace;\n  }\n}\n\nregisterDatabase(firebase);\n\n// Types to export for the admin SDK\nexport { Database, Query, Reference, enableLogging, ServerValue };\n\nexport { DataSnapshot } from './src/api/Reference';\nexport { OnDisconnect } from './src/api/onDisconnect';\n\ndeclare module '@firebase/app-types' {\n  interface FirebaseNamespace {\n    database?: {\n      (app?: FirebaseApp): types.FirebaseDatabase;\n      enableLogging: typeof types.enableLogging;\n      ServerValue: types.ServerValue;\n      Database: typeof types.FirebaseDatabase;\n    };\n  }\n  interface FirebaseApp {\n    database?(databaseURL?: string): types.FirebaseDatabase;\n  }\n}\n"]},"metadata":{},"sourceType":"module"}