{"ast":null,"code":"'use strict';\n\nvar firebase = require('@firebase/app');\n\nvar component = require('@firebase/component');\n\nvar tslib = require('tslib');\n\nvar util = require('@firebase/util');\n\nvar logger$1 = require('@firebase/logger');\n\nfunction _interopDefaultLegacy(e) {\n  return e && typeof e === 'object' && 'default' in e ? e : {\n    'default': e\n  };\n}\n\nvar firebase__default = /*#__PURE__*/_interopDefaultLegacy(firebase);\n/**\r\n * @license\r\n * Copyright 2020 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\n\nvar _a;\n\nvar ERRORS = (_a = {}, _a[\"already-activated\"\n/* ALREADY_ACTIVATED */\n] = 'You are trying to activate AppCheck for FirebaseApp {$appName}, ' + 'while it is already activated. ' + 'AppCheck can only be activated once.', _a[\"use-before-activation\"\n/* USE_BEFORE_ACTIVATION */\n] = 'AppCheck is being used before activate() is called for FirebaseApp {$appName}. ' + 'Please make sure you call activate() before instantiating other Firebase services.', _a[\"fetch-network-error\"\n/* FETCH_NETWORK_ERROR */\n] = 'Fetch failed to connect to a network. Check Internet connection. ' + 'Original error: {$originalErrorMessage}.', _a[\"fetch-parse-error\"\n/* FETCH_PARSE_ERROR */\n] = 'Fetch client could not parse response.' + ' Original error: {$originalErrorMessage}.', _a[\"fetch-status-error\"\n/* FETCH_STATUS_ERROR */\n] = 'Fetch server returned an HTTP error status. HTTP status: {$httpStatus}.', _a[\"storage-open\"\n/* STORAGE_OPEN */\n] = 'Error thrown when opening storage. Original error: {$originalErrorMessage}.', _a[\"storage-get\"\n/* STORAGE_GET */\n] = 'Error thrown when reading from storage. Original error: {$originalErrorMessage}.', _a[\"storage-set\"\n/* STORAGE_WRITE */\n] = 'Error thrown when writing to storage. Original error: {$originalErrorMessage}.', _a[\"recaptcha-error\"\n/* RECAPTCHA_ERROR */\n] = 'ReCAPTCHA error.', _a);\nvar ERROR_FACTORY = new util.ErrorFactory('appCheck', 'AppCheck', ERRORS);\n/**\r\n * @license\r\n * Copyright 2020 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\nvar APP_CHECK_STATES = new Map();\nvar DEFAULT_STATE = {\n  activated: false,\n  tokenObservers: []\n};\nvar DEBUG_STATE = {\n  enabled: false\n};\n\nfunction getState(app) {\n  return APP_CHECK_STATES.get(app) || DEFAULT_STATE;\n}\n\nfunction setState(app, state) {\n  APP_CHECK_STATES.set(app, state);\n}\n\nfunction getDebugState() {\n  return DEBUG_STATE;\n}\n/**\r\n * @license\r\n * Copyright 2020 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\n\nvar BASE_ENDPOINT = 'https://content-firebaseappcheck.googleapis.com/v1beta';\nvar EXCHANGE_RECAPTCHA_TOKEN_METHOD = 'exchangeRecaptchaToken';\nvar EXCHANGE_DEBUG_TOKEN_METHOD = 'exchangeDebugToken';\nvar TOKEN_REFRESH_TIME = {\n  /**\r\n   * The offset time before token natural expiration to run the refresh.\r\n   * This is currently 5 minutes.\r\n   */\n  OFFSET_DURATION: 5 * 60 * 1000,\n\n  /**\r\n   * This is the first retrial wait after an error. This is currently\r\n   * 30 seconds.\r\n   */\n  RETRIAL_MIN_WAIT: 30 * 1000,\n\n  /**\r\n   * This is the maximum retrial wait, currently 16 minutes.\r\n   */\n  RETRIAL_MAX_WAIT: 16 * 60 * 1000\n};\n/**\r\n * @license\r\n * Copyright 2020 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\n/**\r\n * Port from auth proactiverefresh.js\r\n *\r\n */\n// TODO: move it to @firebase/util?\n// TODO: allow to config whether refresh should happen in the background\n\nvar Refresher =\n/** @class */\nfunction () {\n  function Refresher(operation, retryPolicy, getWaitDuration, lowerBound, upperBound) {\n    this.operation = operation;\n    this.retryPolicy = retryPolicy;\n    this.getWaitDuration = getWaitDuration;\n    this.lowerBound = lowerBound;\n    this.upperBound = upperBound;\n    this.pending = null;\n    this.nextErrorWaitInterval = lowerBound;\n\n    if (lowerBound > upperBound) {\n      throw new Error('Proactive refresh lower bound greater than upper bound!');\n    }\n  }\n\n  Refresher.prototype.start = function () {\n    this.nextErrorWaitInterval = this.lowerBound;\n    this.process(true).catch(function () {\n      /* we don't care about the result */\n    });\n  };\n\n  Refresher.prototype.stop = function () {\n    if (this.pending) {\n      this.pending.reject('cancelled');\n      this.pending = null;\n    }\n  };\n\n  Refresher.prototype.isRunning = function () {\n    return !!this.pending;\n  };\n\n  Refresher.prototype.process = function (hasSucceeded) {\n    return tslib.__awaiter(this, void 0, void 0, function () {\n      var error_1;\n      return tslib.__generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            this.stop();\n            _a.label = 1;\n\n          case 1:\n            _a.trys.push([1, 6,, 7]);\n\n            this.pending = new util.Deferred();\n            return [4\n            /*yield*/\n            , sleep(this.getNextRun(hasSucceeded))];\n\n          case 2:\n            _a.sent(); // Why do we resolve a promise, then immediate wait for it?\n            // We do it to make the promise chain cancellable.\n            // We can call stop() which rejects the promise before the following line execute, which makes\n            // the code jump to the catch block.\n            // TODO: unit test this\n\n\n            this.pending.resolve();\n            return [4\n            /*yield*/\n            , this.pending.promise];\n\n          case 3:\n            _a.sent();\n\n            this.pending = new util.Deferred();\n            return [4\n            /*yield*/\n            , this.operation()];\n\n          case 4:\n            _a.sent();\n\n            this.pending.resolve();\n            return [4\n            /*yield*/\n            , this.pending.promise];\n\n          case 5:\n            _a.sent();\n\n            this.process(true).catch(function () {\n              /* we don't care about the result */\n            });\n            return [3\n            /*break*/\n            , 7];\n\n          case 6:\n            error_1 = _a.sent();\n\n            if (this.retryPolicy(error_1)) {\n              this.process(false).catch(function () {\n                /* we don't care about the result */\n              });\n            } else {\n              this.stop();\n            }\n\n            return [3\n            /*break*/\n            , 7];\n\n          case 7:\n            return [2\n            /*return*/\n            ];\n        }\n      });\n    });\n  };\n\n  Refresher.prototype.getNextRun = function (hasSucceeded) {\n    if (hasSucceeded) {\n      // If last operation succeeded, reset next error wait interval and return\n      // the default wait duration.\n      this.nextErrorWaitInterval = this.lowerBound; // Return typical wait duration interval after a successful operation.\n\n      return this.getWaitDuration();\n    } else {\n      // Get next error wait interval.\n      var currentErrorWaitInterval = this.nextErrorWaitInterval; // Double interval for next consecutive error.\n\n      this.nextErrorWaitInterval *= 2; // Make sure next wait interval does not exceed the maximum upper bound.\n\n      if (this.nextErrorWaitInterval > this.upperBound) {\n        this.nextErrorWaitInterval = this.upperBound;\n      }\n\n      return currentErrorWaitInterval;\n    }\n  };\n\n  return Refresher;\n}();\n\nfunction sleep(ms) {\n  return new Promise(function (resolve) {\n    setTimeout(resolve, ms);\n  });\n}\n/**\r\n * @license\r\n * Copyright 2020 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\n\nfunction getRecaptcha() {\n  return self.grecaptcha;\n}\n\nfunction ensureActivated(app) {\n  if (!getState(app).activated) {\n    throw ERROR_FACTORY.create(\"use-before-activation\"\n    /* USE_BEFORE_ACTIVATION */\n    , {\n      appName: app.name\n    });\n  }\n}\n/**\r\n * Copied from https://stackoverflow.com/a/2117523\r\n */\n\n\nfunction uuidv4() {\n  return 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, function (c) {\n    var r = Math.random() * 16 | 0,\n        v = c === 'x' ? r : r & 0x3 | 0x8;\n    return v.toString(16);\n  });\n}\n/**\r\n * Stringify and base64 encode token error data.\r\n *\r\n * @param tokenError Error data, currently hardcoded.\r\n */\n\n\nfunction formatDummyToken(tokenErrorData) {\n  return util.base64.encodeString(JSON.stringify(tokenErrorData),\n  /* webSafe= */\n  false);\n}\n/**\r\n * @license\r\n * Copyright 2020 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\n\nfunction exchangeToken(_a, platformLoggerProvider) {\n  var url = _a.url,\n      body = _a.body;\n  return tslib.__awaiter(this, void 0, void 0, function () {\n    var headers, platformLogger, options, response, originalError_1, responseBody, originalError_2, match, timeToLiveAsNumber, now;\n    return tslib.__generator(this, function (_b) {\n      switch (_b.label) {\n        case 0:\n          headers = {\n            'Content-Type': 'application/json'\n          };\n          platformLogger = platformLoggerProvider.getImmediate({\n            optional: true\n          });\n\n          if (platformLogger) {\n            headers['X-Firebase-Client'] = platformLogger.getPlatformInfoString();\n          }\n\n          options = {\n            method: 'POST',\n            body: JSON.stringify(body),\n            headers: headers\n          };\n          _b.label = 1;\n\n        case 1:\n          _b.trys.push([1, 3,, 4]);\n\n          return [4\n          /*yield*/\n          , fetch(url, options)];\n\n        case 2:\n          response = _b.sent();\n          return [3\n          /*break*/\n          , 4];\n\n        case 3:\n          originalError_1 = _b.sent();\n          throw ERROR_FACTORY.create(\"fetch-network-error\"\n          /* FETCH_NETWORK_ERROR */\n          , {\n            originalErrorMessage: originalError_1.message\n          });\n\n        case 4:\n          if (response.status !== 200) {\n            throw ERROR_FACTORY.create(\"fetch-status-error\"\n            /* FETCH_STATUS_ERROR */\n            , {\n              httpStatus: response.status\n            });\n          }\n\n          _b.label = 5;\n\n        case 5:\n          _b.trys.push([5, 7,, 8]);\n\n          return [4\n          /*yield*/\n          , response.json()];\n\n        case 6:\n          // JSON parsing throws SyntaxError if the response body isn't a JSON string.\n          responseBody = _b.sent();\n          return [3\n          /*break*/\n          , 8];\n\n        case 7:\n          originalError_2 = _b.sent();\n          throw ERROR_FACTORY.create(\"fetch-parse-error\"\n          /* FETCH_PARSE_ERROR */\n          , {\n            originalErrorMessage: originalError_2.message\n          });\n\n        case 8:\n          match = responseBody.ttl.match(/^([\\d.]+)(s)$/);\n\n          if (!match || !match[2] || isNaN(Number(match[1]))) {\n            throw ERROR_FACTORY.create(\"fetch-parse-error\"\n            /* FETCH_PARSE_ERROR */\n            , {\n              originalErrorMessage: \"ttl field (timeToLive) is not in standard Protobuf Duration \" + (\"format: \" + responseBody.ttl)\n            });\n          }\n\n          timeToLiveAsNumber = Number(match[1]) * 1000;\n          now = Date.now();\n          return [2\n          /*return*/\n          , {\n            token: responseBody.attestationToken,\n            expireTimeMillis: now + timeToLiveAsNumber,\n            issuedAtTimeMillis: now\n          }];\n      }\n    });\n  });\n}\n\nfunction getExchangeRecaptchaTokenRequest(app, reCAPTCHAToken) {\n  var _a = app.options,\n      projectId = _a.projectId,\n      appId = _a.appId,\n      apiKey = _a.apiKey;\n  return {\n    url: BASE_ENDPOINT + \"/projects/\" + projectId + \"/apps/\" + appId + \":\" + EXCHANGE_RECAPTCHA_TOKEN_METHOD + \"?key=\" + apiKey,\n    body: {\n      // eslint-disable-next-line\n      recaptcha_token: reCAPTCHAToken\n    }\n  };\n}\n\nfunction getExchangeDebugTokenRequest(app, debugToken) {\n  var _a = app.options,\n      projectId = _a.projectId,\n      appId = _a.appId,\n      apiKey = _a.apiKey;\n  return {\n    url: BASE_ENDPOINT + \"/projects/\" + projectId + \"/apps/\" + appId + \":\" + EXCHANGE_DEBUG_TOKEN_METHOD + \"?key=\" + apiKey,\n    body: {\n      // eslint-disable-next-line\n      debug_token: debugToken\n    }\n  };\n}\n/**\r\n * @license\r\n * Copyright 2020 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\n\nvar DB_NAME = 'firebase-app-check-database';\nvar DB_VERSION = 1;\nvar STORE_NAME = 'firebase-app-check-store';\nvar DEBUG_TOKEN_KEY = 'debug-token';\nvar dbPromise = null;\n\nfunction getDBPromise() {\n  if (dbPromise) {\n    return dbPromise;\n  }\n\n  dbPromise = new Promise(function (resolve, reject) {\n    try {\n      var request = indexedDB.open(DB_NAME, DB_VERSION);\n\n      request.onsuccess = function (event) {\n        resolve(event.target.result);\n      };\n\n      request.onerror = function (event) {\n        var _a;\n\n        reject(ERROR_FACTORY.create(\"storage-open\"\n        /* STORAGE_OPEN */\n        , {\n          originalErrorMessage: (_a = event.target.error) === null || _a === void 0 ? void 0 : _a.message\n        }));\n      };\n\n      request.onupgradeneeded = function (event) {\n        var db = event.target.result; // We don't use 'break' in this switch statement, the fall-through\n        // behavior is what we want, because if there are multiple versions between\n        // the old version and the current version, we want ALL the migrations\n        // that correspond to those versions to run, not only the last one.\n        // eslint-disable-next-line default-case\n\n        switch (event.oldVersion) {\n          case 0:\n            db.createObjectStore(STORE_NAME, {\n              keyPath: 'compositeKey'\n            });\n        }\n      };\n    } catch (e) {\n      reject(ERROR_FACTORY.create(\"storage-open\"\n      /* STORAGE_OPEN */\n      , {\n        originalErrorMessage: e.message\n      }));\n    }\n  });\n  return dbPromise;\n}\n\nfunction readTokenFromIndexedDB(app) {\n  return read(computeKey(app));\n}\n\nfunction writeTokenToIndexedDB(app, token) {\n  return write(computeKey(app), token);\n}\n\nfunction writeDebugTokenToIndexedDB(token) {\n  return write(DEBUG_TOKEN_KEY, token);\n}\n\nfunction readDebugTokenFromIndexedDB() {\n  return read(DEBUG_TOKEN_KEY);\n}\n\nfunction write(key, value) {\n  return tslib.__awaiter(this, void 0, void 0, function () {\n    var db, transaction, store, request;\n    return tslib.__generator(this, function (_a) {\n      switch (_a.label) {\n        case 0:\n          return [4\n          /*yield*/\n          , getDBPromise()];\n\n        case 1:\n          db = _a.sent();\n          transaction = db.transaction(STORE_NAME, 'readwrite');\n          store = transaction.objectStore(STORE_NAME);\n          request = store.put({\n            compositeKey: key,\n            value: value\n          });\n          return [2\n          /*return*/\n          , new Promise(function (resolve, reject) {\n            request.onsuccess = function (_event) {\n              resolve();\n            };\n\n            transaction.onerror = function (event) {\n              var _a;\n\n              reject(ERROR_FACTORY.create(\"storage-set\"\n              /* STORAGE_WRITE */\n              , {\n                originalErrorMessage: (_a = event.target.error) === null || _a === void 0 ? void 0 : _a.message\n              }));\n            };\n          })];\n      }\n    });\n  });\n}\n\nfunction read(key) {\n  return tslib.__awaiter(this, void 0, void 0, function () {\n    var db, transaction, store, request;\n    return tslib.__generator(this, function (_a) {\n      switch (_a.label) {\n        case 0:\n          return [4\n          /*yield*/\n          , getDBPromise()];\n\n        case 1:\n          db = _a.sent();\n          transaction = db.transaction(STORE_NAME, 'readonly');\n          store = transaction.objectStore(STORE_NAME);\n          request = store.get(key);\n          return [2\n          /*return*/\n          , new Promise(function (resolve, reject) {\n            request.onsuccess = function (event) {\n              var result = event.target.result;\n\n              if (result) {\n                resolve(result.value);\n              } else {\n                resolve(undefined);\n              }\n            };\n\n            transaction.onerror = function (event) {\n              var _a;\n\n              reject(ERROR_FACTORY.create(\"storage-get\"\n              /* STORAGE_GET */\n              , {\n                originalErrorMessage: (_a = event.target.error) === null || _a === void 0 ? void 0 : _a.message\n              }));\n            };\n          })];\n      }\n    });\n  });\n}\n\nfunction computeKey(app) {\n  return app.options.appId + \"-\" + app.name;\n}\n/**\r\n * @license\r\n * Copyright 2020 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\n\nvar logger = new logger$1.Logger('@firebase/app-check');\n/**\r\n * @license\r\n * Copyright 2020 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\n/**\r\n * Always resolves. In case of an error reading from indexeddb, resolve with undefined\r\n */\n\nfunction readTokenFromStorage(app) {\n  return tslib.__awaiter(this, void 0, void 0, function () {\n    var token, e_1;\n    return tslib.__generator(this, function (_a) {\n      switch (_a.label) {\n        case 0:\n          if (!util.isIndexedDBAvailable()) return [3\n          /*break*/\n          , 5];\n          token = undefined;\n          _a.label = 1;\n\n        case 1:\n          _a.trys.push([1, 3,, 4]);\n\n          return [4\n          /*yield*/\n          , readTokenFromIndexedDB(app)];\n\n        case 2:\n          token = _a.sent();\n          return [3\n          /*break*/\n          , 4];\n\n        case 3:\n          e_1 = _a.sent(); // swallow the error and return undefined\n\n          logger.warn(\"Failed to read token from indexeddb. Error: \" + e_1);\n          return [3\n          /*break*/\n          , 4];\n\n        case 4:\n          return [2\n          /*return*/\n          , token];\n\n        case 5:\n          return [2\n          /*return*/\n          , undefined];\n      }\n    });\n  });\n}\n/**\r\n * Always resolves. In case of an error writing to indexeddb, print a warning and resolve the promise\r\n */\n\n\nfunction writeTokenToStorage(app, token) {\n  if (util.isIndexedDBAvailable()) {\n    return writeTokenToIndexedDB(app, token).catch(function (e) {\n      // swallow the error and resolve the promise\n      logger.warn(\"Failed to write token to indexeddb. Error: \" + e);\n    });\n  }\n\n  return Promise.resolve();\n}\n\nfunction readOrCreateDebugTokenFromStorage() {\n  return tslib.__awaiter(this, void 0, void 0, function () {\n    var existingDebugToken, newToken;\n    return tslib.__generator(this, function (_a) {\n      switch (_a.label) {\n        case 0:\n          existingDebugToken = undefined;\n          _a.label = 1;\n\n        case 1:\n          _a.trys.push([1, 3,, 4]);\n\n          return [4\n          /*yield*/\n          , readDebugTokenFromIndexedDB()];\n\n        case 2:\n          existingDebugToken = _a.sent();\n          return [3\n          /*break*/\n          , 4];\n\n        case 3:\n          _a.sent();\n\n          return [3\n          /*break*/\n          , 4];\n\n        case 4:\n          if (!existingDebugToken) {\n            newToken = uuidv4(); // We don't need to block on writing to indexeddb\n            // In case persistence failed, a new debug token will be generated everytime the page is refreshed.\n            // It renders the debug token useless because you have to manually register(whitelist) the new token in the firebase console again and again.\n            // If you see this error trying to use debug token, it probably means you are using a browser that doesn't support indexeddb.\n            // You should switch to a different browser that supports indexeddb\n\n            writeDebugTokenToIndexedDB(newToken).catch(function (e) {\n              return logger.warn(\"Failed to persist debug token to indexeddb. Error: \" + e);\n            }); // Not using logger because I don't think we ever want this accidentally hidden?\n\n            console.log(\"AppCheck debug token: \" + newToken + \". You will need to whitelist it in the Firebase console for it to work\");\n            return [2\n            /*return*/\n            , newToken];\n          } else {\n            return [2\n            /*return*/\n            , existingDebugToken];\n          }\n\n      }\n    });\n  });\n}\n/**\r\n * @license\r\n * Copyright 2020 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\n\nfunction isDebugMode() {\n  var debugState = getDebugState();\n  return debugState.enabled;\n}\n\nfunction getDebugToken() {\n  return tslib.__awaiter(this, void 0, void 0, function () {\n    var state;\n    return tslib.__generator(this, function (_a) {\n      state = getDebugState();\n\n      if (state.enabled && state.token) {\n        return [2\n        /*return*/\n        , state.token.promise];\n      } else {\n        // should not happen!\n        throw Error(\"\\n            Can't get debug token in production mode.\\n        \");\n      }\n    });\n  });\n}\n\nfunction initializeDebugMode() {\n  var globals = util.getGlobal();\n\n  if (typeof globals.FIREBASE_APPCHECK_DEBUG_TOKEN !== 'string' && globals.FIREBASE_APPCHECK_DEBUG_TOKEN !== true) {\n    return;\n  }\n\n  var debugState = getDebugState();\n  debugState.enabled = true;\n  var deferredToken = new util.Deferred();\n  debugState.token = deferredToken;\n\n  if (typeof globals.FIREBASE_APPCHECK_DEBUG_TOKEN === 'string') {\n    deferredToken.resolve(globals.FIREBASE_APPCHECK_DEBUG_TOKEN);\n  } else {\n    deferredToken.resolve(readOrCreateDebugTokenFromStorage());\n  }\n}\n/**\r\n * @license\r\n * Copyright 2020 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n// Initial hardcoded value agreed upon across platforms for initial launch.\n// Format left open for possible dynamic error values and other fields in the future.\n\n\nvar defaultTokenErrorData = {\n  error: 'UNKNOWN_ERROR'\n};\n/**\r\n * This function will always resolve.\r\n * The result will contain an error field if there is any error.\r\n * In case there is an error, the token field in the result will be populated with a dummy value\r\n */\n\nfunction getToken$2(app, platformLoggerProvider, forceRefresh) {\n  if (forceRefresh === void 0) {\n    forceRefresh = false;\n  }\n\n  return tslib.__awaiter(this, void 0, void 0, function () {\n    var state, token, error, cachedToken, tokenFromDebugExchange, _a, _b, _c, e_1, interopTokenResult;\n\n    return tslib.__generator(this, function (_d) {\n      switch (_d.label) {\n        case 0:\n          ensureActivated(app);\n          state = getState(app);\n          token = state.token;\n          error = undefined;\n          if (!!token) return [3\n          /*break*/\n          , 2];\n          return [4\n          /*yield*/\n          , state.cachedTokenPromise];\n\n        case 1:\n          cachedToken = _d.sent();\n\n          if (cachedToken && isValid(cachedToken)) {\n            token = cachedToken;\n            setState(app, tslib.__assign(tslib.__assign({}, state), {\n              token: token\n            })); // notify all listeners with the cached token\n\n            notifyTokenListeners(app, {\n              token: token.token\n            });\n          }\n\n          _d.label = 2;\n\n        case 2:\n          // Return the cached token (from either memory or indexedDB) if it's valid\n          if (!forceRefresh && token && isValid(token)) {\n            return [2\n            /*return*/\n            , {\n              token: token.token\n            }];\n          }\n\n          if (!isDebugMode()) return [3\n          /*break*/\n          , 6];\n          _a = exchangeToken;\n          _b = getExchangeDebugTokenRequest;\n          _c = [app];\n          return [4\n          /*yield*/\n          , getDebugToken()];\n\n        case 3:\n          return [4\n          /*yield*/\n          , _a.apply(void 0, [_b.apply(void 0, _c.concat([_d.sent()])), platformLoggerProvider])];\n\n        case 4:\n          tokenFromDebugExchange = _d.sent(); // Write debug token to indexedDB.\n\n          return [4\n          /*yield*/\n          , writeTokenToStorage(app, tokenFromDebugExchange)];\n\n        case 5:\n          // Write debug token to indexedDB.\n          _d.sent(); // Write debug token to state.\n\n\n          setState(app, tslib.__assign(tslib.__assign({}, state), {\n            token: tokenFromDebugExchange\n          }));\n          return [2\n          /*return*/\n          , {\n            token: tokenFromDebugExchange.token\n          }];\n\n        case 6:\n          _d.trys.push([6, 8,, 9]);\n\n          return [4\n          /*yield*/\n          , state.provider.getToken()];\n\n        case 7:\n          // state.provider is populated in initializeAppCheck()\n          // ensureActivated() at the top of this function checks that\n          // initializeAppCheck() has been called.\n          token = _d.sent();\n          return [3\n          /*break*/\n          , 9];\n\n        case 8:\n          e_1 = _d.sent(); // `getToken()` should never throw, but logging error text to console will aid debugging.\n\n          logger.error(e_1);\n          error = e_1;\n          return [3\n          /*break*/\n          , 9];\n\n        case 9:\n          if (!!token) return [3\n          /*break*/\n          , 10]; // if token is undefined, there must be an error.\n          // we return a dummy token along with the error\n\n          interopTokenResult = makeDummyTokenResult(error);\n          return [3\n          /*break*/\n          , 12];\n\n        case 10:\n          interopTokenResult = {\n            token: token.token\n          }; // write the new token to the memory state as well as the persistent storage.\n          // Only do it if we got a valid new token\n\n          setState(app, tslib.__assign(tslib.__assign({}, state), {\n            token: token\n          }));\n          return [4\n          /*yield*/\n          , writeTokenToStorage(app, token)];\n\n        case 11:\n          _d.sent();\n\n          _d.label = 12;\n\n        case 12:\n          notifyTokenListeners(app, interopTokenResult);\n          return [2\n          /*return*/\n          , interopTokenResult];\n      }\n    });\n  });\n}\n\nfunction addTokenListener(app, platformLoggerProvider, type, listener, onError) {\n  var state = getState(app);\n  var tokenListener = {\n    next: listener,\n    error: onError,\n    type: type\n  };\n\n  var newState = tslib.__assign(tslib.__assign({}, state), {\n    tokenObservers: tslib.__spreadArray(tslib.__spreadArray([], state.tokenObservers), [tokenListener])\n  });\n  /**\r\n   * Invoke the listener with the valid token, then start the token refresher\r\n   */\n\n\n  if (!newState.tokenRefresher) {\n    var tokenRefresher = createTokenRefresher(app, platformLoggerProvider);\n    newState.tokenRefresher = tokenRefresher;\n  } // Create the refresher but don't start it if `isTokenAutoRefreshEnabled`\n  // is not true.\n\n\n  if (!newState.tokenRefresher.isRunning() && state.isTokenAutoRefreshEnabled) {\n    newState.tokenRefresher.start();\n  } // Invoke the listener async immediately if there is a valid token\n  // in memory.\n\n\n  if (state.token && isValid(state.token)) {\n    var validToken_1 = state.token;\n    Promise.resolve().then(function () {\n      return listener({\n        token: validToken_1.token\n      });\n    }).catch(function () {\n      /** Ignore errors in listeners. */\n    });\n  } else if (state.token == null) {\n    // Only check cache if there was no token. If the token was invalid,\n    // skip this and rely on exchange endpoint.\n    void state.cachedTokenPromise // Storage token promise. Always populated in `activate()`.\n    .then(function (cachedToken) {\n      if (cachedToken && isValid(cachedToken)) {\n        listener({\n          token: cachedToken.token\n        });\n      }\n    }).catch(function () {\n      /** Ignore errors in listeners. */\n    });\n  }\n\n  setState(app, newState);\n}\n\nfunction removeTokenListener(app, listener) {\n  var state = getState(app);\n  var newObservers = state.tokenObservers.filter(function (tokenObserver) {\n    return tokenObserver.next !== listener;\n  });\n\n  if (newObservers.length === 0 && state.tokenRefresher && state.tokenRefresher.isRunning()) {\n    state.tokenRefresher.stop();\n  }\n\n  setState(app, tslib.__assign(tslib.__assign({}, state), {\n    tokenObservers: newObservers\n  }));\n}\n\nfunction createTokenRefresher(app, platformLoggerProvider) {\n  var _this = this;\n\n  return new Refresher( // Keep in mind when this fails for any reason other than the ones\n  // for which we should retry, it will effectively stop the proactive refresh.\n  function () {\n    return tslib.__awaiter(_this, void 0, void 0, function () {\n      var state, result;\n      return tslib.__generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            state = getState(app);\n            if (!!state.token) return [3\n            /*break*/\n            , 2];\n            return [4\n            /*yield*/\n            , getToken$2(app, platformLoggerProvider)];\n\n          case 1:\n            result = _a.sent();\n            return [3\n            /*break*/\n            , 4];\n\n          case 2:\n            return [4\n            /*yield*/\n            , getToken$2(app, platformLoggerProvider, true)];\n\n          case 3:\n            result = _a.sent();\n            _a.label = 4;\n\n          case 4:\n            // getToken() always resolves. In case the result has an error field defined, it means the operation failed, and we should retry.\n            if (result.error) {\n              throw result.error;\n            }\n\n            return [2\n            /*return*/\n            ];\n        }\n      });\n    });\n  }, function () {\n    // TODO: when should we retry?\n    return true;\n  }, function () {\n    var state = getState(app);\n\n    if (state.token) {\n      // issuedAtTime + (50% * total TTL) + 5 minutes\n      var nextRefreshTimeMillis = state.token.issuedAtTimeMillis + (state.token.expireTimeMillis - state.token.issuedAtTimeMillis) * 0.5 + 5 * 60 * 1000; // Do not allow refresh time to be past (expireTime - 5 minutes)\n\n      var latestAllowableRefresh = state.token.expireTimeMillis - 5 * 60 * 1000;\n      nextRefreshTimeMillis = Math.min(nextRefreshTimeMillis, latestAllowableRefresh);\n      return Math.max(0, nextRefreshTimeMillis - Date.now());\n    } else {\n      return 0;\n    }\n  }, TOKEN_REFRESH_TIME.RETRIAL_MIN_WAIT, TOKEN_REFRESH_TIME.RETRIAL_MAX_WAIT);\n}\n\nfunction notifyTokenListeners(app, token) {\n  var observers = getState(app).tokenObservers;\n\n  for (var _i = 0, observers_1 = observers; _i < observers_1.length; _i++) {\n    var observer = observers_1[_i];\n\n    try {\n      if (observer.type === \"EXTERNAL\"\n      /* EXTERNAL */\n      && token.error != null) {\n        // If this listener was added by a 3P call, send any token error to\n        // the supplied error handler. A 3P observer always has an error\n        // handler.\n        observer.error(token.error);\n      } else {\n        // If the token has no error field, always return the token.\n        // If this is a 2P listener, return the token, whether or not it\n        // has an error field.\n        observer.next(token);\n      }\n    } catch (ignored) {// Errors in the listener function itself are always ignored.\n    }\n  }\n}\n\nfunction isValid(token) {\n  return token.expireTimeMillis - Date.now() > 0;\n}\n\nfunction makeDummyTokenResult(error) {\n  return {\n    token: formatDummyToken(defaultTokenErrorData),\n    error: error\n  };\n}\n/**\r\n * @license\r\n * Copyright 2020 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\n\nvar RECAPTCHA_URL = 'https://www.google.com/recaptcha/api.js';\n\nfunction initialize(app, siteKey) {\n  var state = getState(app);\n  var initialized = new util.Deferred();\n  setState(app, tslib.__assign(tslib.__assign({}, state), {\n    reCAPTCHAState: {\n      initialized: initialized\n    }\n  }));\n  var divId = \"fire_app_check_\" + app.name;\n  var invisibleDiv = document.createElement('div');\n  invisibleDiv.id = divId;\n  invisibleDiv.style.display = 'none';\n  document.body.appendChild(invisibleDiv);\n  var grecaptcha = getRecaptcha();\n\n  if (!grecaptcha) {\n    loadReCAPTCHAScript(function () {\n      var grecaptcha = getRecaptcha();\n\n      if (!grecaptcha) {\n        // it shouldn't happen.\n        throw new Error('no recaptcha');\n      }\n\n      grecaptcha.ready(function () {\n        // Invisible widgets allow us to set a different siteKey for each widget, so we use them to support multiple apps\n        renderInvisibleWidget(app, siteKey, grecaptcha, divId);\n        initialized.resolve(grecaptcha);\n      });\n    });\n  } else {\n    grecaptcha.ready(function () {\n      renderInvisibleWidget(app, siteKey, grecaptcha, divId);\n      initialized.resolve(grecaptcha);\n    });\n  }\n\n  return initialized.promise;\n}\n\nfunction getToken$1(app) {\n  return tslib.__awaiter(this, void 0, void 0, function () {\n    var reCAPTCHAState, recaptcha;\n    return tslib.__generator(this, function (_a) {\n      switch (_a.label) {\n        case 0:\n          ensureActivated(app);\n          reCAPTCHAState = getState(app).reCAPTCHAState;\n          return [4\n          /*yield*/\n          , reCAPTCHAState.initialized.promise];\n\n        case 1:\n          recaptcha = _a.sent();\n          return [2\n          /*return*/\n          , new Promise(function (resolve, _reject) {\n            // Updated after initialization is complete.\n            var reCAPTCHAState = getState(app).reCAPTCHAState;\n            recaptcha.ready(function () {\n              resolve( // widgetId is guaranteed to be available if reCAPTCHAState.initialized.promise resolved.\n              recaptcha.execute(reCAPTCHAState.widgetId, {\n                action: 'fire_app_check'\n              }));\n            });\n          })];\n      }\n    });\n  });\n}\n/**\r\n *\r\n * @param app\r\n * @param container - Id of a HTML element.\r\n */\n\n\nfunction renderInvisibleWidget(app, siteKey, grecaptcha, container) {\n  var widgetId = grecaptcha.render(container, {\n    sitekey: siteKey,\n    size: 'invisible'\n  });\n  var state = getState(app);\n  setState(app, tslib.__assign(tslib.__assign({}, state), {\n    reCAPTCHAState: tslib.__assign(tslib.__assign({}, state.reCAPTCHAState), {\n      // state.reCAPTCHAState is set in the initialize()\n      widgetId: widgetId\n    })\n  }));\n}\n\nfunction loadReCAPTCHAScript(onload) {\n  var script = document.createElement('script');\n  script.src = \"\" + RECAPTCHA_URL;\n  script.onload = onload;\n  document.head.appendChild(script);\n}\n/**\r\n * @license\r\n * Copyright 2021 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\n/**\r\n * App Check provider that can obtain a reCAPTCHA V3 token and exchange it\r\n * for an App Check token.\r\n */\n\n\nvar ReCaptchaV3Provider =\n/** @class */\nfunction () {\n  /**\r\n   * Create a ReCaptchaV3Provider instance.\r\n   * @param siteKey - ReCAPTCHA V3 siteKey.\r\n   */\n  function ReCaptchaV3Provider(_siteKey) {\n    this._siteKey = _siteKey;\n  }\n  /**\r\n   * Returns an App Check token.\r\n   * @internal\r\n   */\n\n\n  ReCaptchaV3Provider.prototype.getToken = function () {\n    return tslib.__awaiter(this, void 0, void 0, function () {\n      var attestedClaimsToken;\n      return tslib.__generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            if (!this._app || !this._platformLoggerProvider) {\n              // This should only occur if user has not called initializeAppCheck().\n              // We don't have an appName to provide if so.\n              // This should already be caught in the top level `getToken()` function.\n              throw ERROR_FACTORY.create(\"use-before-activation\"\n              /* USE_BEFORE_ACTIVATION */\n              , {\n                appName: ''\n              });\n            }\n\n            _a.label = 1;\n\n          case 1:\n            _a.trys.push([1, 3,, 4]);\n\n            return [4\n            /*yield*/\n            , getToken$1(this._app)];\n\n          case 2:\n            attestedClaimsToken = _a.sent();\n            return [3\n            /*break*/\n            , 4];\n\n          case 3:\n            _a.sent(); // reCaptcha.execute() throws null which is not very descriptive.\n\n\n            throw ERROR_FACTORY.create(\"recaptcha-error\"\n            /* RECAPTCHA_ERROR */\n            );\n\n          case 4:\n            return [2\n            /*return*/\n            , exchangeToken(getExchangeRecaptchaTokenRequest(this._app, attestedClaimsToken), this._platformLoggerProvider)];\n        }\n      });\n    });\n  };\n\n  ReCaptchaV3Provider.prototype.initialize = function (app, platformLoggerProvider) {\n    this._app = app;\n    this._platformLoggerProvider = platformLoggerProvider;\n    initialize(app, this._siteKey).catch(function () {\n      /* we don't care about the initialization result */\n    });\n  };\n\n  return ReCaptchaV3Provider;\n}();\n/**\r\n * Custom provider class.\r\n */\n\n\nvar CustomProvider =\n/** @class */\nfunction () {\n  function CustomProvider(_customProviderOptions) {\n    this._customProviderOptions = _customProviderOptions;\n  }\n  /**\r\n   * @internal\r\n   */\n\n\n  CustomProvider.prototype.getToken = function () {\n    return tslib.__awaiter(this, void 0, void 0, function () {\n      var customToken, issuedAtTimeSeconds, issuedAtTimeMillis;\n      return tslib.__generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            if (!this._app) {\n              // This should only occur if user has not called initializeAppCheck().\n              // We don't have an appName to provide if so.\n              // This should already be caught in the top level `getToken()` function.\n              throw ERROR_FACTORY.create(\"use-before-activation\"\n              /* USE_BEFORE_ACTIVATION */\n              , {\n                appName: ''\n              });\n            }\n\n            return [4\n            /*yield*/\n            , this._customProviderOptions.getToken()];\n\n          case 1:\n            customToken = _a.sent();\n            issuedAtTimeSeconds = util.issuedAtTime(customToken.token);\n            issuedAtTimeMillis = issuedAtTimeSeconds !== null && issuedAtTimeSeconds < Date.now() && issuedAtTimeSeconds > 0 ? issuedAtTimeSeconds * 1000 : Date.now();\n            return [2\n            /*return*/\n            , tslib.__assign(tslib.__assign({}, customToken), {\n              issuedAtTimeMillis: issuedAtTimeMillis\n            })];\n        }\n      });\n    });\n  };\n  /**\r\n   * @internal\r\n   */\n\n\n  CustomProvider.prototype.initialize = function (app) {\n    this._app = app;\n  };\n\n  return CustomProvider;\n}();\n/**\r\n * @license\r\n * Copyright 2020 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\n/**\r\n *\r\n * @param app\r\n * @param siteKeyOrProvider - optional custom attestation provider\r\n * or reCAPTCHA provider\r\n * @param isTokenAutoRefreshEnabled - if true, enables auto refresh\r\n * of appCheck token.\r\n */\n\n\nfunction activate(app, siteKeyOrProvider, platformLoggerProvider, isTokenAutoRefreshEnabled) {\n  var state = getState(app);\n\n  if (state.activated) {\n    throw ERROR_FACTORY.create(\"already-activated\"\n    /* ALREADY_ACTIVATED */\n    , {\n      appName: app.name\n    });\n  }\n\n  var newState = tslib.__assign(tslib.__assign({}, state), {\n    activated: true\n  }); // Read cached token from storage if it exists and store it in memory.\n\n\n  newState.cachedTokenPromise = readTokenFromStorage(app).then(function (cachedToken) {\n    if (cachedToken && isValid(cachedToken)) {\n      setState(app, tslib.__assign(tslib.__assign({}, getState(app)), {\n        token: cachedToken\n      }));\n    }\n\n    return cachedToken;\n  });\n\n  if (typeof siteKeyOrProvider === 'string') {\n    newState.provider = new ReCaptchaV3Provider(siteKeyOrProvider);\n  } else if (siteKeyOrProvider instanceof ReCaptchaV3Provider || siteKeyOrProvider instanceof CustomProvider) {\n    newState.provider = siteKeyOrProvider;\n  } else {\n    // Process \"old\" custom provider to avoid breaking previous users.\n    // This was defined at beta release as simply an object with a\n    // getToken() method.\n    newState.provider = new CustomProvider({\n      getToken: siteKeyOrProvider.getToken\n    });\n  } // Use value of global `automaticDataCollectionEnabled` (which\n  // itself defaults to false if not specified in config) if\n  // `isTokenAutoRefreshEnabled` param was not provided by user.\n\n\n  newState.isTokenAutoRefreshEnabled = isTokenAutoRefreshEnabled === undefined ? app.automaticDataCollectionEnabled : isTokenAutoRefreshEnabled;\n  setState(app, newState);\n  newState.provider.initialize(app, platformLoggerProvider);\n}\n\nfunction setTokenAutoRefreshEnabled(app, isTokenAutoRefreshEnabled) {\n  var state = getState(app); // This will exist if any product libraries have called\n  // `addTokenListener()`\n\n  if (state.tokenRefresher) {\n    if (isTokenAutoRefreshEnabled === true) {\n      state.tokenRefresher.start();\n    } else {\n      state.tokenRefresher.stop();\n    }\n  }\n\n  setState(app, tslib.__assign(tslib.__assign({}, state), {\n    isTokenAutoRefreshEnabled: isTokenAutoRefreshEnabled\n  }));\n}\n/**\r\n * Differs from internal getToken in that it throws the error.\r\n */\n\n\nfunction getToken(app, platformLoggerProvider, forceRefresh) {\n  return tslib.__awaiter(this, void 0, void 0, function () {\n    var result;\n    return tslib.__generator(this, function (_a) {\n      switch (_a.label) {\n        case 0:\n          return [4\n          /*yield*/\n          , getToken$2(app, platformLoggerProvider, forceRefresh)];\n\n        case 1:\n          result = _a.sent();\n\n          if (result.error) {\n            throw result.error;\n          }\n\n          return [2\n          /*return*/\n          , {\n            token: result.token\n          }];\n      }\n    });\n  });\n}\n\nfunction onTokenChanged(app, platformLoggerProvider, onNextOrObserver, onError,\n/**\r\n * NOTE: Although an `onCompletion` callback can be provided, it will\r\n * never be called because the token stream is never-ending.\r\n * It is added only for API consistency with the observer pattern, which\r\n * we follow in JS APIs.\r\n */\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\nonCompletion) {\n  var nextFn = function () {};\n\n  var errorFn = function () {};\n\n  if (onNextOrObserver.next != null) {\n    nextFn = onNextOrObserver.next.bind(onNextOrObserver);\n  } else {\n    nextFn = onNextOrObserver;\n  }\n\n  if (onNextOrObserver.error != null) {\n    errorFn = onNextOrObserver.error.bind(onNextOrObserver);\n  } else if (onError) {\n    errorFn = onError;\n  }\n\n  addTokenListener(app, platformLoggerProvider, \"EXTERNAL\"\n  /* EXTERNAL */\n  , nextFn, errorFn);\n  return function () {\n    return removeTokenListener(app, nextFn);\n  };\n}\n/**\r\n * @license\r\n * Copyright 2020 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\n\nfunction factory(app, platformLoggerProvider) {\n  return {\n    app: app,\n    activate: function (siteKeyOrProvider, isTokenAutoRefreshEnabled) {\n      return activate(app, // Public types of ReCaptchaV3Provider/CustomProvider don't\n      // expose getToken() and aren't recognized as the internal\n      // class version of themselves.\n      siteKeyOrProvider, platformLoggerProvider, isTokenAutoRefreshEnabled);\n    },\n    setTokenAutoRefreshEnabled: function (isTokenAutoRefreshEnabled) {\n      return setTokenAutoRefreshEnabled(app, isTokenAutoRefreshEnabled);\n    },\n    getToken: function (forceRefresh) {\n      return getToken(app, platformLoggerProvider, forceRefresh);\n    },\n    onTokenChanged: function (onNextOrObserver, onError, onCompletion) {\n      return onTokenChanged(app, platformLoggerProvider,\n      /**\r\n       * This can still be an observer. Need to do this casting because\r\n       * according to Typescript: \"Implementation signatures of overloads\r\n       * are not externally visible\"\r\n       */\n      onNextOrObserver, onError);\n    },\n    INTERNAL: {\n      delete: function () {\n        var tokenObservers = getState(app).tokenObservers;\n\n        for (var _i = 0, tokenObservers_1 = tokenObservers; _i < tokenObservers_1.length; _i++) {\n          var tokenObserver = tokenObservers_1[_i];\n          removeTokenListener(app, tokenObserver.next);\n        }\n\n        return Promise.resolve();\n      }\n    }\n  };\n}\n\nfunction internalFactory(app, platformLoggerProvider) {\n  return {\n    getToken: function (forceRefresh) {\n      return getToken$2(app, platformLoggerProvider, forceRefresh);\n    },\n    addTokenListener: function (listener) {\n      return addTokenListener(app, platformLoggerProvider, \"INTERNAL\"\n      /* INTERNAL */\n      , listener);\n    },\n    removeTokenListener: function (listener) {\n      return removeTokenListener(app, listener);\n    }\n  };\n}\n\nvar name = \"@firebase/app-check\";\nvar version = \"0.3.1\";\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\nvar APP_CHECK_NAME = 'appCheck';\nvar APP_CHECK_NAME_INTERNAL = 'app-check-internal';\n\nfunction registerAppCheck(firebase) {\n  // The public interface\n  firebase.INTERNAL.registerComponent(new component.Component(APP_CHECK_NAME, function (container) {\n    // getImmediate for FirebaseApp will always succeed\n    var app = container.getProvider('app').getImmediate();\n    var platformLoggerProvider = container.getProvider('platform-logger');\n    return factory(app, platformLoggerProvider);\n  }, \"PUBLIC\"\n  /* PUBLIC */\n  ).setServiceProps({\n    ReCaptchaV3Provider: ReCaptchaV3Provider,\n    CustomProvider: CustomProvider\n  })\n  /**\r\n   * AppCheck can only be initialized by explicitly calling firebase.appCheck()\r\n   * We don't want firebase products that consume AppCheck to gate on AppCheck\r\n   * if the user doesn't intend them to, just because the AppCheck component\r\n   * is registered.\r\n   */\n  .setInstantiationMode(\"EXPLICIT\"\n  /* EXPLICIT */\n  )\n  /**\r\n   * Because all firebase products that depend on app-check depend on app-check-internal directly,\r\n   * we need to initialize app-check-internal after app-check is initialized to make it\r\n   * available to other firebase products.\r\n   */\n  .setInstanceCreatedCallback(function (container, _instanceIdentifier, _instance) {\n    var appCheckInternalProvider = container.getProvider(APP_CHECK_NAME_INTERNAL);\n    appCheckInternalProvider.initialize();\n  })); // The internal interface used by other Firebase products\n\n  firebase.INTERNAL.registerComponent(new component.Component(APP_CHECK_NAME_INTERNAL, function (container) {\n    // getImmediate for FirebaseApp will always succeed\n    var app = container.getProvider('app').getImmediate();\n    var platformLoggerProvider = container.getProvider('platform-logger');\n    return internalFactory(app, platformLoggerProvider);\n  }, \"PUBLIC\"\n  /* PUBLIC */\n  ).setInstantiationMode(\"EXPLICIT\"\n  /* EXPLICIT */\n  ));\n  firebase.registerVersion(name, version);\n}\n\nregisterAppCheck(firebase__default['default']);\ninitializeDebugMode();","map":{"version":3,"mappings":";;;;;;;;;;;;;;;;;;;AAAA;;;;;;;;;;;;;;;;;;;;AA+BA,IAAMA,MAAM,aACVC;AAAA;AAAA,IACE,qEACA,iCADA,GAEA,sCAJQ,EAKVA;AAAA;AAAA,IACE,oFACA,oFAPQ,EAQVA;AAAA;AAAA,IACE,sEACA,0CAVQ,EAWVA;AAAA;AAAA,IACE,2CACA,2CAbQ,EAcVA;AAAA;AAAA,IACE,yEAfQ,EAgBVA;AAAA;AAAA,IACE,6EAjBQ,EAkBVA;AAAA;AAAA,IACE,kFAnBQ,EAoBVA;AAAA;AAAA,IACE,gFArBQ,EAsBVA;AAAA;AAAA,IAAiC,kBAtBvB,KAAZ;AAoCO,IAAMC,aAAa,GAAG,IAAIC,iBAAJ,CAC3B,UAD2B,EAE3B,UAF2B,EAG3BH,MAH2B,CAAtB;ACnEP;;;;;;;;;;;;;;;;;AAgEA,IAAMI,gBAAgB,GAAG,IAAIC,GAAJ,EAAzB;AACO,IAAMC,aAAa,GAAkB;AAC1CC,WAAS,EAAE,KAD+B;AAE1CC,gBAAc,EAAE;AAF0B,CAArC;AAKP,IAAMC,WAAW,GAAe;AAC9BC,SAAO,EAAE;AADqB,CAAhC;;SAIgBC,SAASC,KAAgB;AACvC,SAAOR,gBAAgB,CAACS,GAAjB,CAAqBD,GAArB,KAA6BN,aAApC;AACD;;SAEeQ,SAASF,KAAkBG,OAAoB;AAC7DX,kBAAgB,CAACY,GAAjB,CAAqBJ,GAArB,EAA0BG,KAA1B;AACD;;SASeE,gBAAa;AAC3B,SAAOR,WAAP;AACF;AC3FA;;;;;;;;;;;;;;;;;;AAgBO,IAAMS,aAAa,GACxB,wDADK;AAGA,IAAMC,+BAA+B,GAAG,wBAAxC;AACA,IAAMC,2BAA2B,GAAG,oBAApC;AAEA,IAAMC,kBAAkB,GAAG;;;;;AAKhCC,iBAAe,EAAE,IAAI,EAAJ,GAAS,IALM;;;;;;AAUhCC,kBAAgB,EAAE,KAAK,IAVS;;;;;AAchCC,kBAAgB,EAAE,KAAK,EAAL,GAAU;AAdI,CAA3B;ACtBP;;;;;;;;;;;;;;;;;AAmBA;;;;AAIA;AACA;;AACA;AAAA;AAAA;AAGE,qBACmBC,SADnB,EAEmBC,WAFnB,EAGmBC,eAHnB,EAImBC,UAJnB,EAKmBC,UALnB,EAKqC;AAJlB;AACA;AACA;AACA;AACA;AAPX,mBAAoC,IAApC;AASN,SAAKC,qBAAL,GAA6BF,UAA7B;;AAEA,QAAIA,UAAU,GAAGC,UAAjB,EAA6B;AAC3B,YAAM,IAAIE,KAAJ,CACJ,yDADI,CAAN;AAGD;AACF;;AAEDC;AACE,SAAKF,qBAAL,GAA6B,KAAKF,UAAlC;AACA,SAAKK,OAAL,CAAa,IAAb,EAAmBC,KAAnB,CAAyB;;AAExB,KAFD;AAGD,GALD;;AAOAF;AACE,QAAI,KAAKG,OAAT,EAAkB;AAChB,WAAKA,OAAL,CAAaC,MAAb,CAAoB,WAApB;AACA,WAAKD,OAAL,GAAe,IAAf;AACD;AACF,GALD;;AAOAH;AACE,WAAO,CAAC,CAAC,KAAKG,OAAd;AACD,GAFD;;AAIcH,gCAAd,UAAsBK,YAAtB,EAA2C;;;;;;AACzC,iBAAKC,IAAL;;;;;;AAEE,iBAAKH,OAAL,GAAe,IAAII,aAAJ,EAAf;AACA;AAAA;AAAA,cAAMC,KAAK,CAAC,KAAKC,UAAL,CAAgBJ,YAAhB,CAAD,CAAX;;;AAAApC;;;;;;;AAOA,iBAAKkC,OAAL,CAAaO,OAAb;AACA;AAAA;AAAA,cAAM,KAAKP,OAAL,CAAaQ,OAAnB;;;AAAA1C;;AACA,iBAAKkC,OAAL,GAAe,IAAII,aAAJ,EAAf;AACA;AAAA;AAAA,cAAM,KAAKd,SAAL,EAAN;;;AAAAxB;;AAEA,iBAAKkC,OAAL,CAAaO,OAAb;AACA;AAAA;AAAA,cAAM,KAAKP,OAAL,CAAaQ,OAAnB;;;AAAA1C;;AAEA,iBAAKgC,OAAL,CAAa,IAAb,EAAmBC,KAAnB,CAAyB;;AAExB,aAFD;;;;;;;;AAIA,gBAAI,KAAKR,WAAL,CAAiBkB,OAAjB,CAAJ,EAA6B;AAC3B,mBAAKX,OAAL,CAAa,KAAb,EAAoBC,KAApB,CAA0B;;AAEzB,eAFD;AAGD,aAJD,MAIO;AACL,mBAAKI,IAAL;AACD;;;;;;;;;;;;;AAEJ,GA/Ba;;AAiCNN,mCAAR,UAAmBK,YAAnB,EAAwC;AACtC,QAAIA,YAAJ,EAAkB;;;AAGhB,WAAKP,qBAAL,GAA6B,KAAKF,UAAlC,CAHgB;;AAKhB,aAAO,KAAKD,eAAL,EAAP;AACD,KAND,MAMO;;AAEL,UAAMkB,wBAAwB,GAAG,KAAKf,qBAAtC,CAFK;;AAIL,WAAKA,qBAAL,IAA8B,CAA9B,CAJK;;AAML,UAAI,KAAKA,qBAAL,GAA6B,KAAKD,UAAtC,EAAkD;AAChD,aAAKC,qBAAL,GAA6B,KAAKD,UAAlC;AACD;;AACD,aAAOgB,wBAAP;AACD;AACF,GAlBO;;AAmBV;AAAC,CAzFD;;AA2FA,SAASL,KAAT,CAAeM,EAAf,EAAyB;AACvB,SAAO,IAAIC,OAAJ,CAAkB,mBAAO;AAC9BC,cAAU,CAACN,OAAD,EAAUI,EAAV,CAAV;AACD,GAFM,CAAP;AAGF;ACxHA;;;;;;;;;;;;;;;;;;SAuBgBG,eAAY;AAC1B,SAAOC,IAAI,CAACC,UAAZ;AACD;;SAEeC,gBAAgBxC,KAAgB;AAC9C,MAAI,CAACD,QAAQ,CAACC,GAAD,CAAR,CAAcL,SAAnB,EAA8B;AAC5B,UAAML,aAAa,CAACmD,MAAd,CAAoB;AAAA;AAApB,MAA0D;AAC9DC,aAAO,EAAE1C,GAAG,CAAC2C;AADiD,KAA1D,CAAN;AAGD;AACF;AAED;;;;;SAGgBC,SAAM;AACpB,SAAO,uCAAuCC,OAAvC,CAA+C,OAA/C,EAAwD,aAAC;AAC9D,QAAMC,CAAC,GAAIC,IAAI,CAACC,MAAL,KAAgB,EAAjB,GAAuB,CAAjC;AAAA,QACEC,CAAC,GAAGC,CAAC,KAAK,GAAN,GAAYJ,CAAZ,GAAiBA,CAAC,GAAG,GAAL,GAAY,GADlC;AAEA,WAAOG,CAAC,CAACE,QAAF,CAAW,EAAX,CAAP;AACD,GAJM,CAAP;AAKD;AAED;;;;;;;SAKgBC,iBACdC,gBAAsC;AAEtC,SAAOC,YAAOC,YAAPD,CACLE,IAAI,CAACC,SAAL,CAAeJ,cAAf,CADKC;;AAEU,OAFVA,CAAP;AAIF;AC1DA;;;;;;;;;;;;;;;;;;SAyCsBI,cACpBrE,IACAsE,wBAAmD;MADjDC,GAAG;MAAEC,IAAI;;;;;;AAGLC,iBAAO,GAAgB;AAC3B,4BAAgB;AADW,WAAvB;AAIAC,wBAAc,GAAGJ,sBAAsB,CAACK,YAAvB,CAAoC;AACzDC,oBAAQ,EAAE;AAD+C,WAApC,CAAjB;;AAGN,cAAIF,cAAJ,EAAoB;AAClBD,mBAAO,CAAC,mBAAD,CAAP,GAA+BC,cAAc,CAACG,qBAAf,EAA/B;AACD;;AACKC,iBAAO,GAAgB;AAC3BC,kBAAM,EAAE,MADmB;AAE3BP,gBAAI,EAAEL,IAAI,CAACC,SAAL,CAAeI,IAAf,CAFqB;AAG3BC,mBAAO;AAHoB,WAAvB;;;;;;AAOO;AAAA;AAAA,YAAMO,KAAK,CAACT,GAAD,EAAMO,OAAN,CAAX;;;AAAXG,kBAAQ,GAAGC,SAAX;;;;;;;AAEA,gBAAMjF,aAAa,CAACmD,MAAd,CAAoB;AAAA;AAApB,YAAwD;AAC5D+B,gCAAoB,EAAEC,eAAa,CAACC;AADwB,WAAxD,CAAN;;;AAKF,cAAIJ,QAAQ,CAACK,MAAT,KAAoB,GAAxB,EAA6B;AAC3B,kBAAMrF,aAAa,CAACmD,MAAd,CAAoB;AAAA;AAApB,cAAuD;AAC3DmC,wBAAU,EAAEN,QAAQ,CAACK;AADsC,aAAvD,CAAN;AAGD;;;;;;;AAKgB;AAAA;AAAA,YAAML,QAAQ,CAACO,IAAT,EAAN;;;;AAAfC,sBAAY,GAAGP,SAAf;;;;;;;AAEA,gBAAMjF,aAAa,CAACmD,MAAd,CAAoB;AAAA;AAApB,YAAsD;AAC1D+B,gCAAoB,EAAEO,eAAa,CAACL;AADsB,WAAtD,CAAN;;;AAOIM,eAAK,GAAGF,YAAY,CAACG,GAAb,CAAiBD,KAAjB,CAAuB,eAAvB,CAAR;;AACN,cAAI,CAACA,KAAD,IAAU,CAACA,KAAK,CAAC,CAAD,CAAhB,IAAuBE,KAAK,CAACC,MAAM,CAACH,KAAK,CAAC,CAAD,CAAN,CAAP,CAAhC,EAAoD;AAClD,kBAAM1F,aAAa,CAACmD,MAAd,CAAoB;AAAA;AAApB,cAAsD;AAC1D+B,kCAAoB,EAClB,kEACA,aAAWM,YAAY,CAACG,GADxB;AAFwD,aAAtD,CAAN;AAKD;;AACKG,4BAAkB,GAAGD,MAAM,CAACH,KAAK,CAAC,CAAD,CAAN,CAAN,GAAmB,IAAxC;AAEAK,aAAG,GAAGC,IAAI,CAACD,GAAL,EAAN;AACN;AAAA;AAAA,YAAO;AACLE,iBAAK,EAAET,YAAY,CAACU,gBADf;AAELC,4BAAgB,EAAEJ,GAAG,GAAGD,kBAFnB;AAGLM,8BAAkB,EAAEL;AAHf,WAAP;;;;AAKD;;SAEeM,iCACd3F,KACA4F,gBAAsB;AAEhB,WAA+B5F,GAAG,CAACmE,OAAnC;AAAA,MAAE0B,SAAS,eAAX;AAAA,MAAaC,KAAK,WAAlB;AAAA,MAAoBC,MAAM,YAA1B;AAEN,SAAO;AACLnC,OAAG,EAAKtD,aAAa,eAAb,GAA0BuF,SAA1B,GAAmC,QAAnC,GAA4CC,KAA5C,GAAiD,GAAjD,GAAqDvF,+BAArD,GAAoF,OAApF,GAA4FwF,MAD/F;AAELlC,QAAI,EAAE;;AAEJmC,qBAAe,EAAEJ;AAFb;AAFD,GAAP;AAOD;;SAEeK,6BACdjG,KACAkG,YAAkB;AAEZ,WAA+BlG,GAAG,CAACmE,OAAnC;AAAA,MAAE0B,SAAS,eAAX;AAAA,MAAaC,KAAK,WAAlB;AAAA,MAAoBC,MAAM,YAA1B;AAEN,SAAO;AACLnC,OAAG,EAAKtD,aAAa,eAAb,GAA0BuF,SAA1B,GAAmC,QAAnC,GAA4CC,KAA5C,GAAiD,GAAjD,GAAqDtF,2BAArD,GAAgF,OAAhF,GAAwFuF,MAD3F;AAELlC,QAAI,EAAE;;AAEJsC,iBAAW,EAAED;AAFT;AAFD,GAAP;AAOF;ACrIA;;;;;;;;;;;;;;;;;;AAoBA,IAAME,OAAO,GAAG,6BAAhB;AACA,IAAMC,UAAU,GAAG,CAAnB;AACA,IAAMC,UAAU,GAAG,0BAAnB;AACA,IAAMC,eAAe,GAAG,aAAxB;AAEA,IAAIC,SAAS,GAAgC,IAA7C;;AACA,SAASC,YAAT,GAAqB;AACnB,MAAID,SAAJ,EAAe;AACb,WAAOA,SAAP;AACD;;AAEDA,WAAS,GAAG,IAAIrE,OAAJ,CAAY,UAACL,OAAD,EAAUN,MAAV,EAAgB;AACtC,QAAI;AACF,UAAMkF,OAAO,GAAGC,SAAS,CAACC,IAAV,CAAeR,OAAf,EAAwBC,UAAxB,CAAhB;;AAEAK,aAAO,CAACG,SAAR,GAAoB,iBAAK;AACvB/E,eAAO,CAAEgF,KAAK,CAACC,MAAN,CAAkCC,MAApC,CAAP;AACD,OAFD;;AAIAN,aAAO,CAACO,OAAR,GAAkB,iBAAK;;;AACrBzF,cAAM,CACJlC,aAAa,CAACmD,MAAd,CAAoB;AAAA;AAApB,UAAiD;AAC/C+B,8BAAoB,EAAE,MAACsC,KAAK,CAACC,MAAN,CAA4BG,KAA7B,MAAkC,IAAlC,IAAkC7H,aAAlC,GAAkC,MAAlC,GAAkCA,GAAEqF;AADX,SAAjD,CADI,CAAN;AAKD,OAND;;AAQAgC,aAAO,CAACS,eAAR,GAA0B,iBAAK;AAC7B,YAAMC,EAAE,GAAIN,KAAK,CAACC,MAAN,CAAkCC,MAA9C,CAD6B;;;;;;AAQ7B,gBAAQF,KAAK,CAACO,UAAd;AACE,eAAK,CAAL;AACED,cAAE,CAACE,iBAAH,CAAqBhB,UAArB,EAAiC;AAC/BiB,qBAAO,EAAE;AADsB,aAAjC;AAFJ;AAMD,OAdD;AAeD,KA9BD,CA8BE,OAAOC,CAAP,EAAU;AACVhG,YAAM,CACJlC,aAAa,CAACmD,MAAd,CAAoB;AAAA;AAApB,QAAiD;AAC/C+B,4BAAoB,EAAEgD,CAAC,CAAC9C;AADuB,OAAjD,CADI,CAAN;AAKD;AACF,GAtCW,CAAZ;AAwCA,SAAO8B,SAAP;AACD;;SAEeiB,uBACdzH,KAAgB;AAEhB,SAAO0H,IAAI,CAACC,UAAU,CAAC3H,GAAD,CAAX,CAAX;AACD;;SAEe4H,sBACd5H,KACAuF,OAA4B;AAE5B,SAAOsC,KAAK,CAACF,UAAU,CAAC3H,GAAD,CAAX,EAAkBuF,KAAlB,CAAZ;AACD;;SAEeuC,2BAA2BvC,OAAa;AACtD,SAAOsC,KAAK,CAACtB,eAAD,EAAkBhB,KAAlB,CAAZ;AACD;;SAEewC,8BAA2B;AACzC,SAAOL,IAAI,CAACnB,eAAD,CAAX;AACD;;AAED,SAAesB,KAAf,CAAqBG,GAArB,EAAkCC,KAAlC,EAAgD;;;;;;AACnC;AAAA;AAAA,YAAMxB,YAAY,EAAlB;;;AAALW,YAAE,GAAG/H,SAAL;AAEA6I,qBAAW,GAAGd,EAAE,CAACc,WAAH,CAAe5B,UAAf,EAA2B,WAA3B,CAAd;AACA6B,eAAK,GAAGD,WAAW,CAACE,WAAZ,CAAwB9B,UAAxB,CAAR;AACAI,iBAAO,GAAGyB,KAAK,CAACE,GAAN,CAAU;AACxBC,wBAAY,EAAEN,GADU;AAExBC,iBAAK;AAFmB,WAAV,CAAV;AAKN;AAAA;AAAA,YAAO,IAAI9F,OAAJ,CAAY,UAACL,OAAD,EAAUN,MAAV,EAAgB;AACjCkF,mBAAO,CAACG,SAAR,GAAoB,kBAAM;AACxB/E,qBAAO;AACR,aAFD;;AAIAoG,uBAAW,CAACjB,OAAZ,GAAsB,iBAAK;;;AACzBzF,oBAAM,CACJlC,aAAa,CAACmD,MAAd,CAAoB;AAAA;AAApB,gBAAkD;AAChD+B,oCAAoB,EAAE,MAACsC,KAAK,CAACC,MAAN,CAA4BG,KAA7B,MAAkC,IAAlC,IAAkC7H,aAAlC,GAAkC,MAAlC,GAAkCA,GAAEqF;AADV,eAAlD,CADI,CAAN;AAKD,aAND;AAOD,WAZM,CAAP;;;;AAaD;;AAED,SAAegD,IAAf,CAAoBM,GAApB,EAA+B;;;;;;AAClB;AAAA;AAAA,YAAMvB,YAAY,EAAlB;;;AAALW,YAAE,GAAG/H,SAAL;AAEA6I,qBAAW,GAAGd,EAAE,CAACc,WAAH,CAAe5B,UAAf,EAA2B,UAA3B,CAAd;AACA6B,eAAK,GAAGD,WAAW,CAACE,WAAZ,CAAwB9B,UAAxB,CAAR;AACAI,iBAAO,GAAGyB,KAAK,CAAClI,GAAN,CAAU+H,GAAV,CAAV;AAEN;AAAA;AAAA,YAAO,IAAI7F,OAAJ,CAAY,UAACL,OAAD,EAAUN,MAAV,EAAgB;AACjCkF,mBAAO,CAACG,SAAR,GAAoB,iBAAK;AACvB,kBAAMG,MAAM,GAAIF,KAAK,CAACC,MAAN,CAA4BC,MAA5C;;AAEA,kBAAIA,MAAJ,EAAY;AACVlF,uBAAO,CAACkF,MAAM,CAACiB,KAAR,CAAP;AACD,eAFD,MAEO;AACLnG,uBAAO,CAACyG,SAAD,CAAP;AACD;AACF,aARD;;AAUAL,uBAAW,CAACjB,OAAZ,GAAsB,iBAAK;;;AACzBzF,oBAAM,CACJlC,aAAa,CAACmD,MAAd,CAAoB;AAAA;AAApB,gBAAgD;AAC9C+B,oCAAoB,EAAE,MAACsC,KAAK,CAACC,MAAN,CAA4BG,KAA7B,MAAkC,IAAlC,IAAkC7H,aAAlC,GAAkC,MAAlC,GAAkCA,GAAEqF;AADZ,eAAhD,CADI,CAAN;AAKD,aAND;AAOD,WAlBM,CAAP;;;;AAmBD;;AAED,SAASiD,UAAT,CAAoB3H,GAApB,EAAoC;AAClC,SAAUA,GAAG,CAACmE,OAAJ,CAAY2B,KAAZ,GAAiB,GAAjB,GAAqB9F,GAAG,CAAC2C,IAAnC;AACF;ACtJA;;;;;;;;;;;;;;;;;;AAmBO,IAAM6F,MAAM,GAAG,IAAIC,eAAJ,CAAW,qBAAX,CAAf;ACnBP;;;;;;;;;;;;;;;;;AA6BA;;;;SAGsBC,qBACpB1I,KAAgB;;;;;;eAEZ2I;AAAA;AAAA;AACEpD,eAAK,GAAGgD,SAAR;;;;;;AAEM;AAAA;AAAA,YAAMd,sBAAsB,CAACzH,GAAD,CAA5B;;;AAARuF,eAAK,GAAGlG,SAAR;;;;;;;;AAGAmJ,gBAAM,CAACI,IAAP,CAAY,iDAA+CC,GAA3D;;;;;;AAEF;AAAA;AAAA,YAAOtD,KAAP;;;AAGF;AAAA;AAAA,YAAOgD,SAAP;;;;AACD;AAED;;;;;SAGgBO,oBACd9I,KACAuF,OAA4B;AAE5B,MAAIoD,2BAAJ,EAA4B;AAC1B,WAAOf,qBAAqB,CAAC5H,GAAD,EAAMuF,KAAN,CAArB,CAAkCjE,KAAlC,CAAwC,aAAC;;AAE9CkH,YAAM,CAACI,IAAP,CAAY,gDAA8CpB,CAA1D;AACD,KAHM,CAAP;AAID;;AAED,SAAOrF,OAAO,CAACL,OAAR,EAAP;AACD;;SAEqBiH,oCAAiC;;;;;;AAKjDC,4BAAkB,GAAuBT,SAAzC;;;;;;AAEmB;AAAA;AAAA,YAAMR,2BAA2B,EAAjC;;;AAArBiB,4BAAkB,GAAG3J,SAArB;;;;;;;;;;;;;AAKF,cAAI,CAAC2J,kBAAL,EAAyB;AAEjBC,oBAAQ,GAAGrG,MAAM,EAAjB,CAFiB;;;;;;AAQvBkF,sCAA0B,CAACmB,QAAD,CAA1B,CAAqC3H,KAArC,CAA2C,aAAC;AAC1C,2BAAM,CAACsH,IAAP,CAAY,wDAAsDpB,CAAlE;AAAsE,aADxE,EARuB;;AAYvB0B,mBAAO,CAACC,GAAR,CACE,2BAAyBF,QAAzB,GAAiC,wEADnC;AAGA;AAAA;AAAA,cAAOA,QAAP;AACD,WAhBD,MAgBO;AACL;AAAA;AAAA,cAAOD,kBAAP;AACD;;;;;;AChGH;;;;;;;;;;;;;;;;;;SA4BgBI,cAAW;AACzB,MAAMC,UAAU,GAAGhJ,aAAa,EAAhC;AACA,SAAOgJ,UAAU,CAACvJ,OAAlB;AACD;;SAEqBwJ,gBAAa;;;;AAC3BnJ,WAAK,GAAGE,aAAa,EAArB;;AAEN,UAAIF,KAAK,CAACL,OAAN,IAAiBK,KAAK,CAACoF,KAA3B,EAAkC;AAChC;AAAA;AAAA,UAAOpF,KAAK,CAACoF,KAAN,CAAYxD,OAAnB;AACD,OAFD,MAEO;;AAEL,cAAMZ,KAAK,CAAC,mEAAD,CAAX;AAGD;;;AACF;;SAEeoI,sBAAmB;AACjC,MAAMC,OAAO,GAAGC,gBAAhB;;AACA,MACE,OAAOD,OAAO,CAACE,6BAAf,KAAiD,QAAjD,IACAF,OAAO,CAACE,6BAAR,KAA0C,IAF5C,EAGE;AACA;AACD;;AAED,MAAML,UAAU,GAAGhJ,aAAa,EAAhC;AACAgJ,YAAU,CAACvJ,OAAX,GAAqB,IAArB;AACA,MAAM6J,aAAa,GAAG,IAAIhI,aAAJ,EAAtB;AACA0H,YAAU,CAAC9D,KAAX,GAAmBoE,aAAnB;;AAEA,MAAI,OAAOH,OAAO,CAACE,6BAAf,KAAiD,QAArD,EAA+D;AAC7DC,iBAAa,CAAC7H,OAAd,CAAsB0H,OAAO,CAACE,6BAA9B;AACD,GAFD,MAEO;AACLC,iBAAa,CAAC7H,OAAd,CAAsBiH,iCAAiC,EAAvD;AACD;AACH;ACjEA;;;;;;;;;;;;;;;;AAsCA;AACA;;;AACO,IAAMa,qBAAqB,GAAG;AAAE1C,OAAK,EAAE;AAAT,CAA9B;AAEP;;;;;;SAKsB2C,WACpB7J,KACA2D,wBACAmG,cAAoB;AAApB;AAAAA;AAAoB;;;;;;;;AAEpBtH,yBAAe,CAACxC,GAAD,CAAf;AAEMG,eAAK,GAAGJ,QAAQ,CAACC,GAAD,CAAhB;AAKFuF,eAAK,GAAsCpF,KAAK,CAACoF,KAAjD;AACA2B,eAAK,GAAsBqB,SAA3B;eAKA,CAAChD,OAAD;AAAA;AAAA;AAEkB;AAAA;AAAA,YAAMpF,KAAK,CAAC4J,kBAAZ;;;AAAdC,qBAAW,GAAGC,SAAd;;AACN,cAAID,WAAW,IAAIE,OAAO,CAACF,WAAD,CAA1B,EAAyC;AACvCzE,iBAAK,GAAGyE,WAAR;AAEA9J,oBAAQ,CAACF,GAAD,EAAImK,kCAAOhK,KAAP,GAAY;AAAEoF,mBAAK;AAAP,aAAZ,CAAJ,CAAR,CAHuC;;AAKvC6E,gCAAoB,CAACpK,GAAD,EAAM;AAAEuF,mBAAK,EAAEA,KAAK,CAACA;AAAf,aAAN,CAApB;AACD;;;;;;AAIH,cAAI,CAACuE,YAAD,IAAiBvE,KAAjB,IAA0B2E,OAAO,CAAC3E,KAAD,CAArC,EAA8C;AAC5C;AAAA;AAAA,cAAO;AACLA,mBAAK,EAAEA,KAAK,CAACA;AADR,aAAP;AAGD;;eAOG6D,WAAW,IAAX;AAAA;AAAA;AAC0D/J;AAC1DkF;gBAA6BvE;AAAK;AAAA;AAAA,YAAMsJ,aAAa,EAAnB;;;AADkB;AAAA;AAAA,YAAMjK,kBAC1DkF,4BAAkC0F,SAAlC,GAD0D,EAE1DtG,sBAF0D,EAAN;;;AAAhD0G,gCAAsB,GAA0BJ,SAAhD;;AAKN;AAAA;AAAA,YAAMnB,mBAAmB,CAAC9I,GAAD,EAAMqK,sBAAN,CAAzB;;;;AAAAJ;;;AAEA/J,kBAAQ,CAACF,GAAD,EAAImK,kCAAOhK,KAAP,GAAY;AAAEoF,iBAAK,EAAE8E;AAAT,WAAZ,CAAJ,CAAR;AACA;AAAA;AAAA,YAAO;AAAE9E,iBAAK,EAAE8E,sBAAsB,CAAC9E;AAAhC,WAAP;;;;;AAUQ;AAAA;AAAA,YAAMpF,KAAK,CAACmK,QAAN,CAAgBT,QAAhB,EAAN;;;;;;AAARtE,eAAK,GAAG0E,SAAR;;;;;;;;AAGAzB,gBAAM,CAACtB,KAAP,CAAa2B,GAAb;AACA3B,eAAK,GAAG2B,GAAR;;;;;;eAIE,CAACtD,OAAD;AAAA;AAAA;;;AAGFgF,4BAAkB,GAAGC,oBAAoB,CAACtD,KAAD,CAAzC;;;;;;AAEAqD,4BAAkB,GAAG;AACnBhF,iBAAK,EAAEA,KAAK,CAACA;AADM,WAArB;;;AAKArF,kBAAQ,CAACF,GAAD,EAAImK,kCAAOhK,KAAP,GAAY;AAAEoF,iBAAK;AAAP,WAAZ,CAAJ,CAAR;AACA;AAAA;AAAA,YAAMuD,mBAAmB,CAAC9I,GAAD,EAAMuF,KAAN,CAAzB;;;AAAA0E;;;;;AAGFG,8BAAoB,CAACpK,GAAD,EAAMuK,kBAAN,CAApB;AACA;AAAA;AAAA,YAAOA,kBAAP;;;;AACD;;SAEeE,iBACdzK,KACA2D,wBACA+G,MACAC,UACAC,SAAgC;AAEhC,MAAMzK,KAAK,GAAGJ,QAAQ,CAACC,GAAD,CAAtB;AACA,MAAM6K,aAAa,GAA0B;AAC3CC,QAAI,EAAEH,QADqC;AAE3CzD,SAAK,EAAE0D,OAFoC;AAG3CF,QAAI;AAHuC,GAA7C;;AAKA,MAAMK,QAAQ,qCACT5K,KADS,GACJ;AACRP,kBAAc,8CAAMO,KAAK,CAACP,cAAZ,GAA0B,CAAEiL,aAAF,CAA1B;AADN,GADI,CAAd;;;;;;AAQA,MAAI,CAACE,QAAQ,CAACC,cAAd,EAA8B;AAC5B,QAAMA,cAAc,GAAGC,oBAAoB,CAACjL,GAAD,EAAM2D,sBAAN,CAA3C;AACAoH,YAAQ,CAACC,cAAT,GAA0BA,cAA1B;AACD,GAnB+B;;;;AAuBhC,MAAI,CAACD,QAAQ,CAACC,cAAT,CAAwBE,SAAxB,EAAD,IAAwC/K,KAAK,CAACgL,yBAAlD,EAA6E;AAC3EJ,YAAQ,CAACC,cAAT,CAAwBI,KAAxB;AACD,GAzB+B;;;;AA6BhC,MAAIjL,KAAK,CAACoF,KAAN,IAAe2E,OAAO,CAAC/J,KAAK,CAACoF,KAAP,CAA1B,EAAyC;AACvC,QAAM8F,YAAU,GAAGlL,KAAK,CAACoF,KAAzB;AACApD,WAAO,CAACL,OAAR,GACGwJ,IADH,CACQ;AAAM,qBAAQ,CAAC;AAAE/F,aAAK,EAAE8F,YAAU,CAAC9F;AAApB,OAAD,CAAR;AAAqC,KADnD,EAEGjE,KAFH,CAES;;AAEN,KAJH;AAKD,GAPD,MAOO,IAAInB,KAAK,CAACoF,KAAN,IAAe,IAAnB,EAAyB;;;AAG9B,SAAKpF,KAAK,CACP4J,kBADE,CACiB;AADjB,KAEFuB,IAFE,CAEG,uBAAW;AACf,UAAItB,WAAW,IAAIE,OAAO,CAACF,WAAD,CAA1B,EAAyC;AACvCW,gBAAQ,CAAC;AAAEpF,eAAK,EAAEyE,WAAW,CAACzE;AAArB,SAAD,CAAR;AACD;AACF,KANE,EAOFjE,KAPE,CAOI;;AAEN,KATE,CAAL;AAUD;;AAEDpB,UAAQ,CAACF,GAAD,EAAM+K,QAAN,CAAR;AACD;;SAEeQ,oBACdvL,KACA2K,UAA8C;AAE9C,MAAMxK,KAAK,GAAGJ,QAAQ,CAACC,GAAD,CAAtB;AAEA,MAAMwL,YAAY,GAAGrL,KAAK,CAACP,cAAN,CAAqB6L,MAArB,CACnB,yBAAa;AAAI,wBAAa,CAACX,IAAd,KAAuBH,QAAvB;AAA+B,GAD7B,CAArB;;AAGA,MACEa,YAAY,CAACE,MAAb,KAAwB,CAAxB,IACAvL,KAAK,CAAC6K,cADN,IAEA7K,KAAK,CAAC6K,cAAN,CAAqBE,SAArB,EAHF,EAIE;AACA/K,SAAK,CAAC6K,cAAN,CAAqBtJ,IAArB;AACD;;AAEDxB,UAAQ,CAACF,GAAD,EAAImK,kCACPhK,KADO,GACF;AACRP,kBAAc,EAAE4L;AADR,GADE,CAAJ,CAAR;AAID;;AAED,SAASP,oBAAT,CACEjL,GADF,EAEE2D,sBAFF,EAEqD;AAFrD;;AAIE,SAAO,IAAIvC,SAAJ;;AAGL;AAAA;;;;;AACQjB,iBAAK,GAAGJ,QAAQ,CAACC,GAAD,CAAhB;iBAIF,CAACG,KAAK,CAACoF,OAAP;AAAA;AAAA;AACO;AAAA;AAAA,cAAMsE,UAAQ,CAAC7J,GAAD,EAAM2D,sBAAN,CAAd;;;AAATqD,kBAAM,GAAG3H,SAAT;;;;;;AAES;AAAA;AAAA,cAAMwK,UAAQ,CAAC7J,GAAD,EAAM2D,sBAAN,EAA8B,IAA9B,CAAd;;;AAATqD,kBAAM,GAAG3H,SAAT;;;;;AAIF,gBAAI2H,MAAM,CAACE,KAAX,EAAkB;AAChB,oBAAMF,MAAM,CAACE,KAAb;AACD;;;;;;;KAdH;AAeC,GAlBI,EAmBL;;AAEE,WAAO,IAAP;AACD,GAtBI,EAuBL;AACE,QAAM/G,KAAK,GAAGJ,QAAQ,CAACC,GAAD,CAAtB;;AAEA,QAAIG,KAAK,CAACoF,KAAV,EAAiB;;AAEf,UAAIoG,qBAAqB,GACvBxL,KAAK,CAACoF,KAAN,CAAYG,kBAAZ,GACA,CAACvF,KAAK,CAACoF,KAAN,CAAYE,gBAAZ,GAA+BtF,KAAK,CAACoF,KAAN,CAAYG,kBAA5C,IACE,GAFF,GAGA,IAAI,EAAJ,GAAS,IAJX,CAFe;;AAQf,UAAMkG,sBAAsB,GAC1BzL,KAAK,CAACoF,KAAN,CAAYE,gBAAZ,GAA+B,IAAI,EAAJ,GAAS,IAD1C;AAEAkG,2BAAqB,GAAG5I,IAAI,CAAC8I,GAAL,CACtBF,qBADsB,EAEtBC,sBAFsB,CAAxB;AAIA,aAAO7I,IAAI,CAAC+I,GAAL,CAAS,CAAT,EAAYH,qBAAqB,GAAGrG,IAAI,CAACD,GAAL,EAApC,CAAP;AACD,KAfD,MAeO;AACL,aAAO,CAAP;AACD;AACF,GA5CI,EA6CL5E,kBAAkB,CAACE,gBA7Cd,EA8CLF,kBAAkB,CAACG,gBA9Cd,CAAP;AAgDD;;AAED,SAASwJ,oBAAT,CACEpK,GADF,EAEEuF,KAFF,EAE4B;AAE1B,MAAMwG,SAAS,GAAGhM,QAAQ,CAACC,GAAD,CAAR,CAAcJ,cAAhC;;AAEA,OAAuB,mCAAvB,EAAuBoM,uBAAvB,EAAuBA,IAAvB,EAAkC;AAA7B,QAAMC,QAAQ,kBAAd;;AACH,QAAI;AACF,UAAIA,QAAQ,CAACvB,IAAT,KAAa;AAAA;AAAb,SAA2CnF,KAAK,CAAC2B,KAAN,IAAe,IAA9D,EAAoE;;;;AAIlE+E,gBAAQ,CAAC/E,KAAT,CAAgB3B,KAAK,CAAC2B,KAAtB;AACD,OALD,MAKO;;;;AAIL+E,gBAAQ,CAACnB,IAAT,CAAcvF,KAAd;AACD;AACF,KAZD,CAYE,OAAO2G,OAAP,EAAgB;AAEjB;AACF;AACF;;SAEehC,QAAQ3E,OAA4B;AAClD,SAAOA,KAAK,CAACE,gBAAN,GAAyBH,IAAI,CAACD,GAAL,EAAzB,GAAsC,CAA7C;AACD;;AAED,SAASmF,oBAAT,CAA8BtD,KAA9B,EAA0C;AACxC,SAAO;AACL3B,SAAK,EAAEnC,gBAAgB,CAACwG,qBAAD,CADlB;AAEL1C,SAAK;AAFA,GAAP;AAIF;AChTA;;;;;;;;;;;;;;;;;;AAsBO,IAAMiF,aAAa,GAAG,yCAAtB;;SAESC,WACdpM,KACAqM,SAAe;AAEf,MAAMlM,KAAK,GAAGJ,QAAQ,CAACC,GAAD,CAAtB;AACA,MAAMsM,WAAW,GAAG,IAAI3K,aAAJ,EAApB;AAEAzB,UAAQ,CAACF,GAAD,EAAImK,kCAAOhK,KAAP,GAAY;AAAEoM,kBAAc,EAAE;AAAED,iBAAW;AAAb;AAAlB,GAAZ,CAAJ,CAAR;AAEA,MAAME,KAAK,GAAG,oBAAkBxM,GAAG,CAAC2C,IAApC;AACA,MAAM8J,YAAY,GAAGC,QAAQ,CAACC,aAAT,CAAuB,KAAvB,CAArB;AACAF,cAAY,CAACG,EAAb,GAAkBJ,KAAlB;AACAC,cAAY,CAACI,KAAb,CAAmBC,OAAnB,GAA6B,MAA7B;AAEAJ,UAAQ,CAAC7I,IAAT,CAAckJ,WAAd,CAA0BN,YAA1B;AAEA,MAAMlK,UAAU,GAAGF,YAAY,EAA/B;;AACA,MAAI,CAACE,UAAL,EAAiB;AACfyK,uBAAmB,CAAC;AAClB,UAAMzK,UAAU,GAAGF,YAAY,EAA/B;;AAEA,UAAI,CAACE,UAAL,EAAiB;;AAEf,cAAM,IAAIpB,KAAJ,CAAU,cAAV,CAAN;AACD;;AACDoB,gBAAU,CAAC0K,KAAX,CAAiB;;AAEfC,6BAAqB,CAAClN,GAAD,EAAMqM,OAAN,EAAe9J,UAAf,EAA2BiK,KAA3B,CAArB;AACAF,mBAAW,CAACxK,OAAZ,CAAoBS,UAApB;AACD,OAJD;AAKD,KAZkB,CAAnB;AAaD,GAdD,MAcO;AACLA,cAAU,CAAC0K,KAAX,CAAiB;AACfC,2BAAqB,CAAClN,GAAD,EAAMqM,OAAN,EAAe9J,UAAf,EAA2BiK,KAA3B,CAArB;AACAF,iBAAW,CAACxK,OAAZ,CAAoBS,UAApB;AACD,KAHD;AAID;;AAED,SAAO+J,WAAW,CAACvK,OAAnB;AACD;;SAEqB8H,WAAS7J,KAAgB;;;;;;AAC7CwC,yBAAe,CAACxC,GAAD,CAAf;AAGMuM,wBAAc,GAAGxM,QAAQ,CAACC,GAAD,CAAR,CAAcuM,cAA/B;AACY;AAAA;AAAA,YAAMA,cAAc,CAACD,WAAf,CAA2BvK,OAAjC;;;AAAZoL,mBAAS,GAAG9N,SAAZ;AAEN;AAAA;AAAA,YAAO,IAAI8C,OAAJ,CAAY,UAACL,OAAD,EAAUsL,OAAV,EAAiB;;AAElC,gBAAMb,cAAc,GAAGxM,QAAQ,CAACC,GAAD,CAAR,CAAcuM,cAArC;AACAY,qBAAS,CAACF,KAAV,CAAgB;AACdnL,qBAAO;AAELqL,uBAAS,CAACE,OAAV,CAAkBd,cAAc,CAACe,QAAjC,EAA4C;AAC1CC,sBAAM,EAAE;AADkC,eAA5C,CAFK,CAAP;AAMD,aAPD;AAQD,WAXM,CAAP;;;;AAYD;AAED;;;;;;;AAKA,SAASL,qBAAT,CACElN,GADF,EAEEqM,OAFF,EAGE9J,UAHF,EAIEiL,SAJF,EAImB;AAEjB,MAAMF,QAAQ,GAAG/K,UAAU,CAACkL,MAAX,CAAkBD,SAAlB,EAA6B;AAC5CE,WAAO,EAAErB,OADmC;AAE5CsB,QAAI,EAAE;AAFsC,GAA7B,CAAjB;AAKA,MAAMxN,KAAK,GAAGJ,QAAQ,CAACC,GAAD,CAAtB;AAEAE,UAAQ,CAACF,GAAD,EAAImK,kCACPhK,KADO,GACF;AACRoM,kBAAc,oCACTpM,KAAK,CAACoM,cADG,GACY;AAAA;AACxBe,cAAQ;AADgB,KADZ;AADN,GADE,CAAJ,CAAR;AAOD;;AAED,SAASN,mBAAT,CAA6BY,MAA7B,EAA+C;AAC7C,MAAMC,MAAM,GAAGnB,QAAQ,CAACC,aAAT,CAAuB,QAAvB,CAAf;AACAkB,QAAM,CAACC,GAAP,GAAa,KAAG3B,aAAhB;AACA0B,QAAM,CAACD,MAAP,GAAgBA,MAAhB;AACAlB,UAAQ,CAACqB,IAAT,CAAchB,WAAd,CAA0Bc,MAA1B;AACF;ACtHA;;;;;;;;;;;;;;;;;AA2CA;;;;;;AAIA;AAAA;AAAA;;;;;AAOE,+BAAoBG,QAApB,EAAoC;AAAhB;AAAoB;;;;;;;AAKlCC,2CAAN;;;;;;AACE,gBAAI,CAAC,KAAKC,IAAN,IAAc,CAAC,KAAKC,uBAAxB,EAAiD;;;;AAI/C,oBAAM7O,aAAa,CAACmD,MAAd,CAAoB;AAAA;AAApB,gBAA0D;AAC9DC,uBAAO,EAAE;AADqD,eAA1D,CAAN;AAGD;;;;;;;AAGuB;AAAA;AAAA,cAAM0L,UAAiB,CAAC,KAAKF,IAAN,CAAvB;;;AAAtBG,+BAAmB,GAAGhP,SAAtB;;;;;;;;;AAGA,kBAAMC,aAAa,CAACmD,MAAd,CAAoB;AAAA;AAApB,aAAN;;;AAEF;AAAA;AAAA,cAAOiB,aAAa,CAClBiC,gCAAgC,CAAC,KAAKuI,IAAN,EAAYG,mBAAZ,CADd,EAElB,KAAKF,uBAFa,CAApB;;;;AAID,GApBK;;AAsBNF,uDACEjO,GADF,EAEE2D,sBAFF,EAEqD;AAEnD,SAAKuK,IAAL,GAAYlO,GAAZ;AACA,SAAKmO,uBAAL,GAA+BxK,sBAA/B;AACA2K,cAAmB,CAACtO,GAAD,EAAM,KAAKgO,QAAX,CAAnBM,CAAwChN,KAAxCgN,CAA8C;;AAE7C,KAFDA;AAGD,GATD;;AAUF;AAAC,CA5CD;AA8CA;;;;;AAGA;AAAA;AAAA;AAGE,0BAAoBC,sBAApB,EAAiE;AAA7C;AAAiD;;;;;;AAK/DC,sCAAN;;;;;;AACE,gBAAI,CAAC,KAAKN,IAAV,EAAgB;;;;AAId,oBAAM5O,aAAa,CAACmD,MAAd,CAAoB;AAAA;AAApB,gBAA0D;AAC9DC,uBAAO,EAAE;AADqD,eAA1D,CAAN;AAGD;;AAEmB;AAAA;AAAA,cAAM,KAAK6L,sBAAL,CAA4B1E,QAA5B,EAAN;;;AAAd4E,uBAAW,GAAGpP,SAAd;AAGAqP,+BAAmB,GAAGC,kBAAaF,WAAW,CAAClJ,KAAzBoJ,CAAtB;AAGAjJ,8BAAkB,GACtBgJ,mBAAmB,KAAK,IAAxB,IACAA,mBAAmB,GAAGpJ,IAAI,CAACD,GAAL,EADtB,IAEAqJ,mBAAmB,GAAG,CAFtB,GAGIA,mBAAmB,GAAG,IAH1B,GAIIpJ,IAAI,CAACD,GAAL,EALA;AAON;AAAA;AAAA,gDAAYoJ,WAAZ,GAAuB;AAAE/I,gCAAkB;AAApB,aAAvB;;;;AACD,GAxBK;;;;;;AA6BN8I,kDAAWxO,GAAX,EAA2B;AACzB,SAAKkO,IAAL,GAAYlO,GAAZ;AACD,GAFD;;AAGF;AAAC,CAxCD;AChGA;;;;;;;;;;;;;;;;;AAmCA;;;;;;;;;;SAQgB4O,SACd5O,KACA6O,mBAMAlL,wBACAwH,2BAAmC;AAEnC,MAAMhL,KAAK,GAAGJ,QAAQ,CAACC,GAAD,CAAtB;;AACA,MAAIG,KAAK,CAACR,SAAV,EAAqB;AACnB,UAAML,aAAa,CAACmD,MAAd,CAAoB;AAAA;AAApB,MAAsD;AAC1DC,aAAO,EAAE1C,GAAG,CAAC2C;AAD6C,KAAtD,CAAN;AAGD;;AAED,MAAMoI,QAAQ,qCAAuB5K,KAAvB,GAA4B;AAAER,aAAS,EAAE;AAAb,GAA5B,CAAd,CATmC;;;AAYnCoL,UAAQ,CAAChB,kBAAT,GAA8BrB,oBAAoB,CAAC1I,GAAD,CAApB,CAA0BsL,IAA1B,CAA+B,uBAAW;AACtE,QAAItB,WAAW,IAAIE,OAAO,CAACF,WAAD,CAA1B,EAAyC;AACvC9J,cAAQ,CAACF,GAAD,EAAImK,kCAAOpK,QAAQ,CAACC,GAAD,CAAf,GAAoB;AAAEuF,aAAK,EAAEyE;AAAT,OAApB,CAAJ,CAAR;AACD;;AACD,WAAOA,WAAP;AACD,GAL6B,CAA9B;;AAOA,MAAI,OAAO6E,iBAAP,KAA6B,QAAjC,EAA2C;AACzC9D,YAAQ,CAACT,QAAT,GAAoB,IAAI2D,mBAAJ,CAAwBY,iBAAxB,CAApB;AACD,GAFD,MAEO,IACLA,iBAAiB,YAAYZ,mBAA7B,IACAY,iBAAiB,YAAYL,cAFxB,EAGL;AACAzD,YAAQ,CAACT,QAAT,GAAoBuE,iBAApB;AACD,GALM,MAKA;;;;AAIL9D,YAAQ,CAACT,QAAT,GAAoB,IAAIkE,cAAJ,CAAmB;AACrC3E,cAAQ,EAAEgF,iBAAiB,CAAChF;AADS,KAAnB,CAApB;AAGD,GAjCkC;;;;;AAsCnCkB,UAAQ,CAACI,yBAAT,GACEA,yBAAyB,KAAK5C,SAA9B,GACIvI,GAAG,CAAC8O,8BADR,GAEI3D,yBAHN;AAKAjL,UAAQ,CAACF,GAAD,EAAM+K,QAAN,CAAR;AAEAA,UAAQ,CAACT,QAAT,CAAkB8B,UAAlB,CAA6BpM,GAA7B,EAAkC2D,sBAAlC;AACD;;SAEeoL,2BACd/O,KACAmL,2BAAkC;AAElC,MAAMhL,KAAK,GAAGJ,QAAQ,CAACC,GAAD,CAAtB,CAFkC;;;AAKlC,MAAIG,KAAK,CAAC6K,cAAV,EAA0B;AACxB,QAAIG,yBAAyB,KAAK,IAAlC,EAAwC;AACtChL,WAAK,CAAC6K,cAAN,CAAqBI,KAArB;AACD,KAFD,MAEO;AACLjL,WAAK,CAAC6K,cAAN,CAAqBtJ,IAArB;AACD;AACF;;AACDxB,UAAQ,CAACF,GAAD,EAAImK,kCAAOhK,KAAP,GAAY;AAAEgL,6BAAyB;AAA3B,GAAZ,CAAJ,CAAR;AACD;AAED;;;;;SAGsBtB,SACpB7J,KACA2D,wBACAmG,cAAsB;;;;;;AAEP;AAAA;AAAA,YAAMkF,UAAgB,CACnChP,GADmC,EAEnC2D,sBAFmC,EAGnCmG,YAHmC,CAAtB;;;AAAT9C,gBAAM,GAAG3H,SAAT;;AAKN,cAAI2H,MAAM,CAACE,KAAX,EAAkB;AAChB,kBAAMF,MAAM,CAACE,KAAb;AACD;;AACD;AAAA;AAAA,YAAO;AAAE3B,iBAAK,EAAEyB,MAAM,CAACzB;AAAhB,WAAP;;;;AACD;;SAkBe0J,eACdjP,KACA2D,wBACAuL,kBAGAtE;AACA;;;;;;AAMA;AACAuE,cAAyB;AAEzB,MAAIC,MAAM,GAAgC,aAAQ,CAAlD;;AACA,MAAIC,OAAO,GAAY,aAAQ,CAA/B;;AACA,MAAKH,gBAAyD,CAACpE,IAA1D,IAAkE,IAAvE,EAA6E;AAC3EsE,UAAM,GACJF,gBACD,CAACpE,IADA,CACMwE,IADN,CACWJ,gBADX,CADF;AAGD,GAJD,MAIO;AACLE,UAAM,GAAGF,gBAAT;AACD;;AACD,MACGA,gBAAyD,CAAChI,KAA1D,IAAmE,IADtE,EAEE;AACAmI,WAAO,GACLH,gBACD,CAAChI,KADA,CACOoI,IADP,CACYJ,gBADZ,CADF;AAGD,GAND,MAMO,IAAItE,OAAJ,EAAa;AAClByE,WAAO,GAAGzE,OAAV;AACD;;AACDH,kBAAgB,CACdzK,GADc,EAEd2D,sBAFc,EAEQ;AAAA;AAFR,IAIdyL,MAJc,EAKdC,OALc,CAAhB;AAOA,SAAO;AAAM,8BAAmB,CAACrP,GAAD,EAAMoP,MAAN,CAAnB;AAAgC,GAA7C;AACF;AClMA;;;;;;;;;;;;;;;;;;SA+CgBG,QACdvP,KACA2D,wBAAmD;AAEnD,SAAO;AACL3D,OAAG,KADE;AAEL4O,YAAQ,EAAE,UACRC,iBADQ,EAMR1D,yBANQ,EAM2B;AAEnC,qBAAQ,CACNnL,GADM;;;AAKN6O,uBALM,EAUNlL,sBAVM,EAWNwH,yBAXM,CAAR;AAYC,KAtBE;AAuBL4D,8BAA0B,EAAE,UAAC5D,yBAAD,EAAmC;AAC7D,uCAA0B,CAACnL,GAAD,EAAMmL,yBAAN,CAA1B;AAA0D,KAxBvD;AAyBLtB,YAAQ,EAAE,wBAAY;AACpB,qBAAQ,CAAC7J,GAAD,EAAM2D,sBAAN,EAA8BmG,YAA9B,CAAR;AAAmD,KA1BhD;AA2BLmF,kBAAc,EAAE,UACdC,gBADc,EAIdtE,OAJc,EAKduE,YALc,EAKW;AAEzB,2BAAc,CACZnP,GADY,EAEZ2D,sBAFY;;;;;;AAQZuL,sBARY,EASZtE,OATY,CAAd;AAWC,KA7CE;AA8CL4E,YAAQ,EAAE;AACRC,YAAM,EAAE;AACE,0BAAc,GAAK1P,QAAQ,CAACC,GAAD,CAAR,CAAaJ,cAAhC;;AACR,aAA4B,6CAA5B,EAA4BoM,4BAA5B,EAA4BA,IAA5B,EAA4C;AAAvC,cAAM0D,aAAa,uBAAnB;AACHnE,6BAAmB,CAACvL,GAAD,EAAM0P,aAAa,CAAC5E,IAApB,CAAnB;AACD;;AACD,eAAO3I,OAAO,CAACL,OAAR,EAAP;AACD;AAPO;AA9CL,GAAP;AAwDD;;SAEe6N,gBACd3P,KACA2D,wBAAmD;AAEnD,SAAO;AACLkG,YAAQ,EAAE,wBAAY;AACpB,uBAAgB,CAAC7J,GAAD,EAAM2D,sBAAN,EAA8BmG,YAA9B,CAAhB;AAA2D,KAFxD;AAGLW,oBAAgB,EAAE,oBAAQ;AACxB,6BAAgB,CACdzK,GADc,EAEd2D,sBAFc,EAEQ;AAAA;AAFR,QAIdgH,QAJc,CAAhB;AAKC,KATE;AAULY,uBAAmB,EAAE,oBAAQ;AAAI,gCAAmB,CAACvL,GAAD,EAAM2K,QAAN,CAAnB;AAAkC;AAV9D,GAAP;AAYF;;;;AC7HA;;;;;;;;;;;;;;;;;AAsCA,IAAMiF,cAAc,GAA0B,UAA9C;AACA,IAAMC,uBAAuB,GAC3B,oBADF;;AAEA,SAASC,gBAAT,CAA0BC,QAA1B,EAAsD;;AAEpDA,UAAQ,CAACP,QAAT,CAAkBQ,iBAAlB,CACE,IAAIC,mBAAJ,CACEL,cADF,EAEE,qBAAS;;AAEP,QAAM5P,GAAG,GAAGwN,SAAS,CAAC0C,WAAV,CAAsB,KAAtB,EAA6BlM,YAA7B,EAAZ;AACA,QAAML,sBAAsB,GAAG6J,SAAS,CAAC0C,WAAV,CAAsB,iBAAtB,CAA/B;AACA,WAAOX,OAAO,CAACvP,GAAD,EAAM2D,sBAAN,CAAd;AACD,GAPH,EAOG;AAAA;AAPH,IAUGwM,eAVH,CAUmB;AACflC,uBAAmB,EAAEmC,mBADN;AAEf5B,kBAAc,EAAE6B;AAFD,GAVnB;;;;;;;AAAA,GAoBGC,oBApBH,CAoBuB;AAAA;AApBvB;;;;;;AAAA,GA0BGC,0BA1BH,CA2BI,UAAC/C,SAAD,EAAYgD,mBAAZ,EAAiCC,SAAjC,EAA0C;AACxC,QAAMC,wBAAwB,GAAGlD,SAAS,CAAC0C,WAAV,CAC/BL,uBAD+B,CAAjC;AAGAa,4BAAwB,CAACtE,UAAzB;AACD,GAhCL,CADF,EAFoD;;AAwCpD2D,UAAQ,CAACP,QAAT,CAAkBQ,iBAAlB,CACE,IAAIC,mBAAJ,CACEJ,uBADF,EAEE,qBAAS;;AAEP,QAAM7P,GAAG,GAAGwN,SAAS,CAAC0C,WAAV,CAAsB,KAAtB,EAA6BlM,YAA7B,EAAZ;AACA,QAAML,sBAAsB,GAAG6J,SAAS,CAAC0C,WAAV,CAAsB,iBAAtB,CAA/B;AACA,WAAOP,eAAe,CAAC3P,GAAD,EAAM2D,sBAAN,CAAtB;AACD,GAPH,EAOG;AAAA;AAPH,IASE2M,oBATF,CASsB;AAAA;AATtB,GADF;AAaAP,UAAQ,CAACY,eAAT,CAAyBhO,IAAzB,EAA+BiO,OAA/B;AACD;;AAEDd,gBAAgB,CAACC,4BAAD,CAAhB;AACAxG,mBAAmB","names":["ERRORS","_a","ERROR_FACTORY","ErrorFactory","APP_CHECK_STATES","Map","DEFAULT_STATE","activated","tokenObservers","DEBUG_STATE","enabled","getState","app","get","setState","state","set","getDebugState","BASE_ENDPOINT","EXCHANGE_RECAPTCHA_TOKEN_METHOD","EXCHANGE_DEBUG_TOKEN_METHOD","TOKEN_REFRESH_TIME","OFFSET_DURATION","RETRIAL_MIN_WAIT","RETRIAL_MAX_WAIT","operation","retryPolicy","getWaitDuration","lowerBound","upperBound","nextErrorWaitInterval","Error","Refresher","process","catch","pending","reject","hasSucceeded","stop","Deferred","sleep","getNextRun","resolve","promise","error_1","currentErrorWaitInterval","ms","Promise","setTimeout","getRecaptcha","self","grecaptcha","ensureActivated","create","appName","name","uuidv4","replace","r","Math","random","v","c","toString","formatDummyToken","tokenErrorData","base64","encodeString","JSON","stringify","exchangeToken","platformLoggerProvider","url","body","headers","platformLogger","getImmediate","optional","getPlatformInfoString","options","method","fetch","response","_b","originalErrorMessage","originalError_1","message","status","httpStatus","json","responseBody","originalError_2","match","ttl","isNaN","Number","timeToLiveAsNumber","now","Date","token","attestationToken","expireTimeMillis","issuedAtTimeMillis","getExchangeRecaptchaTokenRequest","reCAPTCHAToken","projectId","appId","apiKey","recaptcha_token","getExchangeDebugTokenRequest","debugToken","debug_token","DB_NAME","DB_VERSION","STORE_NAME","DEBUG_TOKEN_KEY","dbPromise","getDBPromise","request","indexedDB","open","onsuccess","event","target","result","onerror","error","onupgradeneeded","db","oldVersion","createObjectStore","keyPath","e","readTokenFromIndexedDB","read","computeKey","writeTokenToIndexedDB","write","writeDebugTokenToIndexedDB","readDebugTokenFromIndexedDB","key","value","transaction","store","objectStore","put","compositeKey","undefined","logger","Logger","readTokenFromStorage","isIndexedDBAvailable","warn","e_1","writeTokenToStorage","readOrCreateDebugTokenFromStorage","existingDebugToken","newToken","console","log","isDebugMode","debugState","getDebugToken","initializeDebugMode","globals","getGlobal","FIREBASE_APPCHECK_DEBUG_TOKEN","deferredToken","defaultTokenErrorData","getToken","forceRefresh","cachedTokenPromise","cachedToken","_d","isValid","tslib","notifyTokenListeners","tokenFromDebugExchange","provider","interopTokenResult","makeDummyTokenResult","addTokenListener","type","listener","onError","tokenListener","next","newState","tokenRefresher","createTokenRefresher","isRunning","isTokenAutoRefreshEnabled","start","validToken_1","then","removeTokenListener","newObservers","filter","length","nextRefreshTimeMillis","latestAllowableRefresh","min","max","observers","_i","observer","ignored","RECAPTCHA_URL","initialize","siteKey","initialized","reCAPTCHAState","divId","invisibleDiv","document","createElement","id","style","display","appendChild","loadReCAPTCHAScript","ready","renderInvisibleWidget","recaptcha","_reject","execute","widgetId","action","container","render","sitekey","size","onload","script","src","head","_siteKey","ReCaptchaV3Provider","_app","_platformLoggerProvider","getReCAPTCHAToken","attestedClaimsToken","initializeRecaptcha","_customProviderOptions","CustomProvider","customToken","issuedAtTimeSeconds","issuedAtTime","activate","siteKeyOrProvider","automaticDataCollectionEnabled","setTokenAutoRefreshEnabled","getTokenInternal","onTokenChanged","onNextOrObserver","onCompletion","nextFn","errorFn","bind","factory","INTERNAL","delete","tokenObserver","internalFactory","APP_CHECK_NAME","APP_CHECK_NAME_INTERNAL","registerAppCheck","firebase","registerComponent","Component","getProvider","setServiceProps","ReCaptchaV3ProviderImpl","CustomProviderImpl","setInstantiationMode","setInstanceCreatedCallback","_instanceIdentifier","_instance","appCheckInternalProvider","registerVersion","version"],"sources":["E:\\FYP\\HospitalAid\\Implementation\\Web App\\Website\\node_modules\\@firebase\\app-check\\src\\errors.ts","E:\\FYP\\HospitalAid\\Implementation\\Web App\\Website\\node_modules\\@firebase\\app-check\\src\\state.ts","E:\\FYP\\HospitalAid\\Implementation\\Web App\\Website\\node_modules\\@firebase\\app-check\\src\\constants.ts","E:\\FYP\\HospitalAid\\Implementation\\Web App\\Website\\node_modules\\@firebase\\app-check\\src\\proactive-refresh.ts","E:\\FYP\\HospitalAid\\Implementation\\Web App\\Website\\node_modules\\@firebase\\app-check\\src\\util.ts","E:\\FYP\\HospitalAid\\Implementation\\Web App\\Website\\node_modules\\@firebase\\app-check\\src\\client.ts","E:\\FYP\\HospitalAid\\Implementation\\Web App\\Website\\node_modules\\@firebase\\app-check\\src\\indexeddb.ts","E:\\FYP\\HospitalAid\\Implementation\\Web App\\Website\\node_modules\\@firebase\\app-check\\src\\logger.ts","E:\\FYP\\HospitalAid\\Implementation\\Web App\\Website\\node_modules\\@firebase\\app-check\\src\\storage.ts","E:\\FYP\\HospitalAid\\Implementation\\Web App\\Website\\node_modules\\@firebase\\app-check\\src\\debug.ts","E:\\FYP\\HospitalAid\\Implementation\\Web App\\Website\\node_modules\\@firebase\\app-check\\src\\internal-api.ts","E:\\FYP\\HospitalAid\\Implementation\\Web App\\Website\\node_modules\\@firebase\\app-check\\src\\recaptcha.ts","E:\\FYP\\HospitalAid\\Implementation\\Web App\\Website\\node_modules\\@firebase\\app-check\\src\\providers.ts","E:\\FYP\\HospitalAid\\Implementation\\Web App\\Website\\node_modules\\@firebase\\app-check\\src\\api.ts","E:\\FYP\\HospitalAid\\Implementation\\Web App\\Website\\node_modules\\@firebase\\app-check\\src\\factory.ts","E:\\FYP\\HospitalAid\\Implementation\\Web App\\Website\\node_modules\\@firebase\\app-check\\src\\index.ts"],"sourcesContent":["/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { ErrorFactory, ErrorMap } from '@firebase/util';\n\nexport const enum AppCheckError {\n  ALREADY_ACTIVATED = 'already-activated',\n  USE_BEFORE_ACTIVATION = 'use-before-activation',\n  FETCH_NETWORK_ERROR = 'fetch-network-error',\n  FETCH_PARSE_ERROR = 'fetch-parse-error',\n  FETCH_STATUS_ERROR = 'fetch-status-error',\n  STORAGE_OPEN = 'storage-open',\n  STORAGE_GET = 'storage-get',\n  STORAGE_WRITE = 'storage-set',\n  RECAPTCHA_ERROR = 'recaptcha-error'\n}\n\nconst ERRORS: ErrorMap<AppCheckError> = {\n  [AppCheckError.ALREADY_ACTIVATED]:\n    'You are trying to activate AppCheck for FirebaseApp {$appName}, ' +\n    'while it is already activated. ' +\n    'AppCheck can only be activated once.',\n  [AppCheckError.USE_BEFORE_ACTIVATION]:\n    'AppCheck is being used before activate() is called for FirebaseApp {$appName}. ' +\n    'Please make sure you call activate() before instantiating other Firebase services.',\n  [AppCheckError.FETCH_NETWORK_ERROR]:\n    'Fetch failed to connect to a network. Check Internet connection. ' +\n    'Original error: {$originalErrorMessage}.',\n  [AppCheckError.FETCH_PARSE_ERROR]:\n    'Fetch client could not parse response.' +\n    ' Original error: {$originalErrorMessage}.',\n  [AppCheckError.FETCH_STATUS_ERROR]:\n    'Fetch server returned an HTTP error status. HTTP status: {$httpStatus}.',\n  [AppCheckError.STORAGE_OPEN]:\n    'Error thrown when opening storage. Original error: {$originalErrorMessage}.',\n  [AppCheckError.STORAGE_GET]:\n    'Error thrown when reading from storage. Original error: {$originalErrorMessage}.',\n  [AppCheckError.STORAGE_WRITE]:\n    'Error thrown when writing to storage. Original error: {$originalErrorMessage}.',\n  [AppCheckError.RECAPTCHA_ERROR]: 'ReCAPTCHA error.'\n};\n\ninterface ErrorParams {\n  [AppCheckError.ALREADY_ACTIVATED]: { appName: string };\n  [AppCheckError.USE_BEFORE_ACTIVATION]: { appName: string };\n  [AppCheckError.FETCH_NETWORK_ERROR]: { originalErrorMessage: string };\n  [AppCheckError.FETCH_PARSE_ERROR]: { originalErrorMessage: string };\n  [AppCheckError.FETCH_STATUS_ERROR]: { httpStatus: number };\n  [AppCheckError.STORAGE_OPEN]: { originalErrorMessage?: string };\n  [AppCheckError.STORAGE_GET]: { originalErrorMessage?: string };\n  [AppCheckError.STORAGE_WRITE]: { originalErrorMessage?: string };\n}\n\nexport const ERROR_FACTORY = new ErrorFactory<AppCheckError, ErrorParams>(\n  'appCheck',\n  'AppCheck',\n  ERRORS\n);\n","/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { FirebaseApp } from '@firebase/app-types';\nimport { AppCheckToken, AppCheckTokenResult } from '@firebase/app-check-types';\nimport { AppCheckTokenListener } from '@firebase/app-check-interop-types';\nimport { Refresher } from './proactive-refresh';\nimport { Deferred, PartialObserver } from '@firebase/util';\nimport { GreCAPTCHA } from './recaptcha';\nimport { AppCheckProviderInternal } from './providers';\n\nexport interface AppCheckTokenInternal extends AppCheckToken {\n  issuedAtTimeMillis: number;\n}\n\nexport interface AppCheckTokenObserver\n  extends PartialObserver<AppCheckTokenResult> {\n  // required\n  next: AppCheckTokenListener;\n  type: ListenerType;\n}\n\nexport const enum ListenerType {\n  'INTERNAL' = 'INTERNAL',\n  'EXTERNAL' = 'EXTERNAL'\n}\n\nexport interface AppCheckState {\n  activated: boolean;\n  tokenObservers: AppCheckTokenObserver[];\n  provider?: AppCheckProviderInternal;\n  siteKey?: string;\n  token?: AppCheckTokenInternal;\n  cachedTokenPromise?: Promise<AppCheckTokenInternal | undefined>;\n  tokenRefresher?: Refresher;\n  reCAPTCHAState?: ReCAPTCHAState;\n  isTokenAutoRefreshEnabled?: boolean;\n}\n\nexport interface ReCAPTCHAState {\n  initialized: Deferred<GreCAPTCHA>;\n  widgetId?: string;\n}\n\nexport interface DebugState {\n  enabled: boolean;\n  // This is the debug token string the user interacts with.\n  token?: Deferred<string>;\n}\n\nconst APP_CHECK_STATES = new Map<FirebaseApp, AppCheckState>();\nexport const DEFAULT_STATE: AppCheckState = {\n  activated: false,\n  tokenObservers: []\n};\n\nconst DEBUG_STATE: DebugState = {\n  enabled: false\n};\n\nexport function getState(app: FirebaseApp): AppCheckState {\n  return APP_CHECK_STATES.get(app) || DEFAULT_STATE;\n}\n\nexport function setState(app: FirebaseApp, state: AppCheckState): void {\n  APP_CHECK_STATES.set(app, state);\n}\n\n// for testing only\nexport function clearState(): void {\n  APP_CHECK_STATES.clear();\n  DEBUG_STATE.enabled = false;\n  DEBUG_STATE.token = undefined;\n}\n\nexport function getDebugState(): DebugState {\n  return DEBUG_STATE;\n}\n","/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nexport const BASE_ENDPOINT =\n  'https://content-firebaseappcheck.googleapis.com/v1beta';\n\nexport const EXCHANGE_RECAPTCHA_TOKEN_METHOD = 'exchangeRecaptchaToken';\nexport const EXCHANGE_DEBUG_TOKEN_METHOD = 'exchangeDebugToken';\n\nexport const TOKEN_REFRESH_TIME = {\n  /**\n   * The offset time before token natural expiration to run the refresh.\n   * This is currently 5 minutes.\n   */\n  OFFSET_DURATION: 5 * 60 * 1000,\n  /**\n   * This is the first retrial wait after an error. This is currently\n   * 30 seconds.\n   */\n  RETRIAL_MIN_WAIT: 30 * 1000,\n  /**\n   * This is the maximum retrial wait, currently 16 minutes.\n   */\n  RETRIAL_MAX_WAIT: 16 * 60 * 1000\n};\n","/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Deferred } from '@firebase/util';\n\n/**\n * Port from auth proactiverefresh.js\n *\n */\n// TODO: move it to @firebase/util?\n// TODO: allow to config whether refresh should happen in the background\nexport class Refresher {\n  private pending: Deferred<unknown> | null = null;\n  private nextErrorWaitInterval: number;\n  constructor(\n    private readonly operation: () => Promise<unknown>,\n    private readonly retryPolicy: (error: unknown) => boolean,\n    private readonly getWaitDuration: () => number,\n    private readonly lowerBound: number,\n    private readonly upperBound: number\n  ) {\n    this.nextErrorWaitInterval = lowerBound;\n\n    if (lowerBound > upperBound) {\n      throw new Error(\n        'Proactive refresh lower bound greater than upper bound!'\n      );\n    }\n  }\n\n  start(): void {\n    this.nextErrorWaitInterval = this.lowerBound;\n    this.process(true).catch(() => {\n      /* we don't care about the result */\n    });\n  }\n\n  stop(): void {\n    if (this.pending) {\n      this.pending.reject('cancelled');\n      this.pending = null;\n    }\n  }\n\n  isRunning(): boolean {\n    return !!this.pending;\n  }\n\n  private async process(hasSucceeded: boolean): Promise<void> {\n    this.stop();\n    try {\n      this.pending = new Deferred();\n      await sleep(this.getNextRun(hasSucceeded));\n\n      // Why do we resolve a promise, then immediate wait for it?\n      // We do it to make the promise chain cancellable.\n      // We can call stop() which rejects the promise before the following line execute, which makes\n      // the code jump to the catch block.\n      // TODO: unit test this\n      this.pending.resolve();\n      await this.pending.promise;\n      this.pending = new Deferred();\n      await this.operation();\n\n      this.pending.resolve();\n      await this.pending.promise;\n\n      this.process(true).catch(() => {\n        /* we don't care about the result */\n      });\n    } catch (error) {\n      if (this.retryPolicy(error)) {\n        this.process(false).catch(() => {\n          /* we don't care about the result */\n        });\n      } else {\n        this.stop();\n      }\n    }\n  }\n\n  private getNextRun(hasSucceeded: boolean): number {\n    if (hasSucceeded) {\n      // If last operation succeeded, reset next error wait interval and return\n      // the default wait duration.\n      this.nextErrorWaitInterval = this.lowerBound;\n      // Return typical wait duration interval after a successful operation.\n      return this.getWaitDuration();\n    } else {\n      // Get next error wait interval.\n      const currentErrorWaitInterval = this.nextErrorWaitInterval;\n      // Double interval for next consecutive error.\n      this.nextErrorWaitInterval *= 2;\n      // Make sure next wait interval does not exceed the maximum upper bound.\n      if (this.nextErrorWaitInterval > this.upperBound) {\n        this.nextErrorWaitInterval = this.upperBound;\n      }\n      return currentErrorWaitInterval;\n    }\n  }\n}\n\nfunction sleep(ms: number): Promise<void> {\n  return new Promise<void>(resolve => {\n    setTimeout(resolve, ms);\n  });\n}\n","/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { GreCAPTCHA } from './recaptcha';\nimport { getState } from './state';\nimport { ERROR_FACTORY, AppCheckError } from './errors';\nimport { FirebaseApp } from '@firebase/app-types';\nimport { base64 } from '@firebase/util';\n\nexport function getRecaptcha(): GreCAPTCHA | undefined {\n  return self.grecaptcha;\n}\n\nexport function ensureActivated(app: FirebaseApp): void {\n  if (!getState(app).activated) {\n    throw ERROR_FACTORY.create(AppCheckError.USE_BEFORE_ACTIVATION, {\n      appName: app.name\n    });\n  }\n}\n\n/**\n * Copied from https://stackoverflow.com/a/2117523\n */\nexport function uuidv4(): string {\n  return 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, c => {\n    const r = (Math.random() * 16) | 0,\n      v = c === 'x' ? r : (r & 0x3) | 0x8;\n    return v.toString(16);\n  });\n}\n\n/**\n * Stringify and base64 encode token error data.\n *\n * @param tokenError Error data, currently hardcoded.\n */\nexport function formatDummyToken(\n  tokenErrorData: Record<string, string>\n): string {\n  return base64.encodeString(\n    JSON.stringify(tokenErrorData),\n    /* webSafe= */ false\n  );\n}\n","/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {\n  BASE_ENDPOINT,\n  EXCHANGE_DEBUG_TOKEN_METHOD,\n  EXCHANGE_RECAPTCHA_TOKEN_METHOD\n} from './constants';\nimport { FirebaseApp } from '@firebase/app-types';\nimport { ERROR_FACTORY, AppCheckError } from './errors';\nimport { Provider } from '@firebase/component';\nimport { AppCheckTokenInternal } from './state';\n\n/**\n * Response JSON returned from AppCheck server endpoint.\n */\ninterface AppCheckResponse {\n  attestationToken: string;\n  // timeToLive\n  ttl: string;\n}\n\ninterface AppCheckRequest {\n  url: string;\n  body: { [key: string]: string };\n}\n\nexport async function exchangeToken(\n  { url, body }: AppCheckRequest,\n  platformLoggerProvider: Provider<'platform-logger'>\n): Promise<AppCheckTokenInternal> {\n  const headers: HeadersInit = {\n    'Content-Type': 'application/json'\n  };\n  // If platform logger exists, add the platform info string to the header.\n  const platformLogger = platformLoggerProvider.getImmediate({\n    optional: true\n  });\n  if (platformLogger) {\n    headers['X-Firebase-Client'] = platformLogger.getPlatformInfoString();\n  }\n  const options: RequestInit = {\n    method: 'POST',\n    body: JSON.stringify(body),\n    headers\n  };\n  let response;\n  try {\n    response = await fetch(url, options);\n  } catch (originalError) {\n    throw ERROR_FACTORY.create(AppCheckError.FETCH_NETWORK_ERROR, {\n      originalErrorMessage: originalError.message\n    });\n  }\n\n  if (response.status !== 200) {\n    throw ERROR_FACTORY.create(AppCheckError.FETCH_STATUS_ERROR, {\n      httpStatus: response.status\n    });\n  }\n\n  let responseBody: AppCheckResponse;\n  try {\n    // JSON parsing throws SyntaxError if the response body isn't a JSON string.\n    responseBody = await response.json();\n  } catch (originalError) {\n    throw ERROR_FACTORY.create(AppCheckError.FETCH_PARSE_ERROR, {\n      originalErrorMessage: originalError.message\n    });\n  }\n\n  // Protobuf duration format.\n  // https://developers.google.com/protocol-buffers/docs/reference/java/com/google/protobuf/Duration\n  const match = responseBody.ttl.match(/^([\\d.]+)(s)$/);\n  if (!match || !match[2] || isNaN(Number(match[1]))) {\n    throw ERROR_FACTORY.create(AppCheckError.FETCH_PARSE_ERROR, {\n      originalErrorMessage:\n        `ttl field (timeToLive) is not in standard Protobuf Duration ` +\n        `format: ${responseBody.ttl}`\n    });\n  }\n  const timeToLiveAsNumber = Number(match[1]) * 1000;\n\n  const now = Date.now();\n  return {\n    token: responseBody.attestationToken,\n    expireTimeMillis: now + timeToLiveAsNumber,\n    issuedAtTimeMillis: now\n  };\n}\n\nexport function getExchangeRecaptchaTokenRequest(\n  app: FirebaseApp,\n  reCAPTCHAToken: string\n): AppCheckRequest {\n  const { projectId, appId, apiKey } = app.options;\n\n  return {\n    url: `${BASE_ENDPOINT}/projects/${projectId}/apps/${appId}:${EXCHANGE_RECAPTCHA_TOKEN_METHOD}?key=${apiKey}`,\n    body: {\n      // eslint-disable-next-line\n      recaptcha_token: reCAPTCHAToken\n    }\n  };\n}\n\nexport function getExchangeDebugTokenRequest(\n  app: FirebaseApp,\n  debugToken: string\n): AppCheckRequest {\n  const { projectId, appId, apiKey } = app.options;\n\n  return {\n    url: `${BASE_ENDPOINT}/projects/${projectId}/apps/${appId}:${EXCHANGE_DEBUG_TOKEN_METHOD}?key=${apiKey}`,\n    body: {\n      // eslint-disable-next-line\n      debug_token: debugToken\n    }\n  };\n}\n","/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { FirebaseApp } from '@firebase/app-types';\nimport { ERROR_FACTORY, AppCheckError } from './errors';\nimport { AppCheckTokenInternal } from './state';\nconst DB_NAME = 'firebase-app-check-database';\nconst DB_VERSION = 1;\nconst STORE_NAME = 'firebase-app-check-store';\nconst DEBUG_TOKEN_KEY = 'debug-token';\n\nlet dbPromise: Promise<IDBDatabase> | null = null;\nfunction getDBPromise(): Promise<IDBDatabase> {\n  if (dbPromise) {\n    return dbPromise;\n  }\n\n  dbPromise = new Promise((resolve, reject) => {\n    try {\n      const request = indexedDB.open(DB_NAME, DB_VERSION);\n\n      request.onsuccess = event => {\n        resolve((event.target as IDBOpenDBRequest).result);\n      };\n\n      request.onerror = event => {\n        reject(\n          ERROR_FACTORY.create(AppCheckError.STORAGE_OPEN, {\n            originalErrorMessage: (event.target as IDBRequest).error?.message\n          })\n        );\n      };\n\n      request.onupgradeneeded = event => {\n        const db = (event.target as IDBOpenDBRequest).result;\n\n        // We don't use 'break' in this switch statement, the fall-through\n        // behavior is what we want, because if there are multiple versions between\n        // the old version and the current version, we want ALL the migrations\n        // that correspond to those versions to run, not only the last one.\n        // eslint-disable-next-line default-case\n        switch (event.oldVersion) {\n          case 0:\n            db.createObjectStore(STORE_NAME, {\n              keyPath: 'compositeKey'\n            });\n        }\n      };\n    } catch (e) {\n      reject(\n        ERROR_FACTORY.create(AppCheckError.STORAGE_OPEN, {\n          originalErrorMessage: e.message\n        })\n      );\n    }\n  });\n\n  return dbPromise;\n}\n\nexport function readTokenFromIndexedDB(\n  app: FirebaseApp\n): Promise<AppCheckTokenInternal | undefined> {\n  return read(computeKey(app)) as Promise<AppCheckTokenInternal | undefined>;\n}\n\nexport function writeTokenToIndexedDB(\n  app: FirebaseApp,\n  token: AppCheckTokenInternal\n): Promise<void> {\n  return write(computeKey(app), token);\n}\n\nexport function writeDebugTokenToIndexedDB(token: string): Promise<void> {\n  return write(DEBUG_TOKEN_KEY, token);\n}\n\nexport function readDebugTokenFromIndexedDB(): Promise<string | undefined> {\n  return read(DEBUG_TOKEN_KEY) as Promise<string | undefined>;\n}\n\nasync function write(key: string, value: unknown): Promise<void> {\n  const db = await getDBPromise();\n\n  const transaction = db.transaction(STORE_NAME, 'readwrite');\n  const store = transaction.objectStore(STORE_NAME);\n  const request = store.put({\n    compositeKey: key,\n    value\n  });\n\n  return new Promise((resolve, reject) => {\n    request.onsuccess = _event => {\n      resolve();\n    };\n\n    transaction.onerror = event => {\n      reject(\n        ERROR_FACTORY.create(AppCheckError.STORAGE_WRITE, {\n          originalErrorMessage: (event.target as IDBRequest).error?.message\n        })\n      );\n    };\n  });\n}\n\nasync function read(key: string): Promise<unknown> {\n  const db = await getDBPromise();\n\n  const transaction = db.transaction(STORE_NAME, 'readonly');\n  const store = transaction.objectStore(STORE_NAME);\n  const request = store.get(key);\n\n  return new Promise((resolve, reject) => {\n    request.onsuccess = event => {\n      const result = (event.target as IDBRequest).result;\n\n      if (result) {\n        resolve(result.value);\n      } else {\n        resolve(undefined);\n      }\n    };\n\n    transaction.onerror = event => {\n      reject(\n        ERROR_FACTORY.create(AppCheckError.STORAGE_GET, {\n          originalErrorMessage: (event.target as IDBRequest).error?.message\n        })\n      );\n    };\n  });\n}\n\nfunction computeKey(app: FirebaseApp): string {\n  return `${app.options.appId}-${app.name}`;\n}\n","/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Logger } from '@firebase/logger';\n\nexport const logger = new Logger('@firebase/app-check');\n","/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { uuidv4 } from './util';\nimport { FirebaseApp } from '@firebase/app-types';\nimport { isIndexedDBAvailable } from '@firebase/util';\nimport {\n  readDebugTokenFromIndexedDB,\n  readTokenFromIndexedDB,\n  writeDebugTokenToIndexedDB,\n  writeTokenToIndexedDB\n} from './indexeddb';\nimport { logger } from './logger';\nimport { AppCheckTokenInternal } from './state';\n\n/**\n * Always resolves. In case of an error reading from indexeddb, resolve with undefined\n */\nexport async function readTokenFromStorage(\n  app: FirebaseApp\n): Promise<AppCheckTokenInternal | undefined> {\n  if (isIndexedDBAvailable()) {\n    let token = undefined;\n    try {\n      token = await readTokenFromIndexedDB(app);\n    } catch (e) {\n      // swallow the error and return undefined\n      logger.warn(`Failed to read token from indexeddb. Error: ${e}`);\n    }\n    return token;\n  }\n\n  return undefined;\n}\n\n/**\n * Always resolves. In case of an error writing to indexeddb, print a warning and resolve the promise\n */\nexport function writeTokenToStorage(\n  app: FirebaseApp,\n  token: AppCheckTokenInternal\n): Promise<void> {\n  if (isIndexedDBAvailable()) {\n    return writeTokenToIndexedDB(app, token).catch(e => {\n      // swallow the error and resolve the promise\n      logger.warn(`Failed to write token to indexeddb. Error: ${e}`);\n    });\n  }\n\n  return Promise.resolve();\n}\n\nexport async function readOrCreateDebugTokenFromStorage(): Promise<string> {\n  /**\n   * Theoretically race condition can happen if we read, then write in 2 separate transactions.\n   * But it won't happen here, because this function will be called exactly once.\n   */\n  let existingDebugToken: string | undefined = undefined;\n  try {\n    existingDebugToken = await readDebugTokenFromIndexedDB();\n  } catch (_e) {\n    // failed to read from indexeddb. We assume there is no existing debug token, and generate a new one.\n  }\n\n  if (!existingDebugToken) {\n    // create a new debug token\n    const newToken = uuidv4();\n    // We don't need to block on writing to indexeddb\n    // In case persistence failed, a new debug token will be generated everytime the page is refreshed.\n    // It renders the debug token useless because you have to manually register(whitelist) the new token in the firebase console again and again.\n    // If you see this error trying to use debug token, it probably means you are using a browser that doesn't support indexeddb.\n    // You should switch to a different browser that supports indexeddb\n    writeDebugTokenToIndexedDB(newToken).catch(e =>\n      logger.warn(`Failed to persist debug token to indexeddb. Error: ${e}`)\n    );\n    // Not using logger because I don't think we ever want this accidentally hidden?\n    console.log(\n      `AppCheck debug token: ${newToken}. You will need to whitelist it in the Firebase console for it to work`\n    );\n    return newToken;\n  } else {\n    return existingDebugToken;\n  }\n}\n","/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { getDebugState } from './state';\nimport { readOrCreateDebugTokenFromStorage } from './storage';\nimport { Deferred, getGlobal } from '@firebase/util';\n\ndeclare global {\n  // var must be used for global scopes\n  // https://www.typescriptlang.org/docs/handbook/release-notes/typescript-3-4.html#type-checking-for-globalthis\n  // eslint-disable-next-line no-var\n  var FIREBASE_APPCHECK_DEBUG_TOKEN: boolean | string | undefined;\n}\n\nexport function isDebugMode(): boolean {\n  const debugState = getDebugState();\n  return debugState.enabled;\n}\n\nexport async function getDebugToken(): Promise<string> {\n  const state = getDebugState();\n\n  if (state.enabled && state.token) {\n    return state.token.promise;\n  } else {\n    // should not happen!\n    throw Error(`\n            Can't get debug token in production mode.\n        `);\n  }\n}\n\nexport function initializeDebugMode(): void {\n  const globals = getGlobal();\n  if (\n    typeof globals.FIREBASE_APPCHECK_DEBUG_TOKEN !== 'string' &&\n    globals.FIREBASE_APPCHECK_DEBUG_TOKEN !== true\n  ) {\n    return;\n  }\n\n  const debugState = getDebugState();\n  debugState.enabled = true;\n  const deferredToken = new Deferred<string>();\n  debugState.token = deferredToken;\n\n  if (typeof globals.FIREBASE_APPCHECK_DEBUG_TOKEN === 'string') {\n    deferredToken.resolve(globals.FIREBASE_APPCHECK_DEBUG_TOKEN);\n  } else {\n    deferredToken.resolve(readOrCreateDebugTokenFromStorage());\n  }\n}\n","/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { FirebaseApp } from '@firebase/app-types';\nimport {\n  AppCheckTokenListener,\n  AppCheckTokenResult\n} from '@firebase/app-check-interop-types';\nimport {\n  AppCheckTokenInternal,\n  AppCheckTokenObserver,\n  getState,\n  ListenerType,\n  setState\n} from './state';\nimport { TOKEN_REFRESH_TIME } from './constants';\nimport { Refresher } from './proactive-refresh';\nimport { ensureActivated, formatDummyToken } from './util';\nimport { exchangeToken, getExchangeDebugTokenRequest } from './client';\nimport { writeTokenToStorage } from './storage';\nimport { getDebugToken, isDebugMode } from './debug';\nimport { logger } from './logger';\nimport { Provider } from '@firebase/component';\n\n// Initial hardcoded value agreed upon across platforms for initial launch.\n// Format left open for possible dynamic error values and other fields in the future.\nexport const defaultTokenErrorData = { error: 'UNKNOWN_ERROR' };\n\n/**\n * This function will always resolve.\n * The result will contain an error field if there is any error.\n * In case there is an error, the token field in the result will be populated with a dummy value\n */\nexport async function getToken(\n  app: FirebaseApp,\n  platformLoggerProvider: Provider<'platform-logger'>,\n  forceRefresh = false\n): Promise<AppCheckTokenResult> {\n  ensureActivated(app);\n\n  const state = getState(app);\n\n  /**\n   * First check if there is a token in memory from a previous `getToken()` call.\n   */\n  let token: AppCheckTokenInternal | undefined = state.token;\n  let error: Error | undefined = undefined;\n\n  /**\n   * If there is no token in memory, try to load token from indexedDB.\n   */\n  if (!token) {\n    // cachedTokenPromise contains the token found in IndexedDB or undefined if not found.\n    const cachedToken = await state.cachedTokenPromise;\n    if (cachedToken && isValid(cachedToken)) {\n      token = cachedToken;\n\n      setState(app, { ...state, token });\n      // notify all listeners with the cached token\n      notifyTokenListeners(app, { token: token.token });\n    }\n  }\n\n  // Return the cached token (from either memory or indexedDB) if it's valid\n  if (!forceRefresh && token && isValid(token)) {\n    return {\n      token: token.token\n    };\n  }\n\n  /**\n   * DEBUG MODE\n   * If debug mode is set, and there is no cached token, fetch a new App\n   * Check token using the debug token, and return it directly.\n   */\n  if (isDebugMode()) {\n    const tokenFromDebugExchange: AppCheckTokenInternal = await exchangeToken(\n      getExchangeDebugTokenRequest(app, await getDebugToken()),\n      platformLoggerProvider\n    );\n    // Write debug token to indexedDB.\n    await writeTokenToStorage(app, tokenFromDebugExchange);\n    // Write debug token to state.\n    setState(app, { ...state, token: tokenFromDebugExchange });\n    return { token: tokenFromDebugExchange.token };\n  }\n\n  /**\n   * request a new token\n   */\n  try {\n    // state.provider is populated in initializeAppCheck()\n    // ensureActivated() at the top of this function checks that\n    // initializeAppCheck() has been called.\n    token = await state.provider!.getToken();\n  } catch (e) {\n    // `getToken()` should never throw, but logging error text to console will aid debugging.\n    logger.error(e);\n    error = e;\n  }\n\n  let interopTokenResult: AppCheckTokenResult | undefined;\n  if (!token) {\n    // if token is undefined, there must be an error.\n    // we return a dummy token along with the error\n    interopTokenResult = makeDummyTokenResult(error!);\n  } else {\n    interopTokenResult = {\n      token: token.token\n    };\n    // write the new token to the memory state as well as the persistent storage.\n    // Only do it if we got a valid new token\n    setState(app, { ...state, token });\n    await writeTokenToStorage(app, token);\n  }\n\n  notifyTokenListeners(app, interopTokenResult);\n  return interopTokenResult;\n}\n\nexport function addTokenListener(\n  app: FirebaseApp,\n  platformLoggerProvider: Provider<'platform-logger'>,\n  type: ListenerType,\n  listener: AppCheckTokenListener,\n  onError?: (error: Error) => void\n): void {\n  const state = getState(app);\n  const tokenListener: AppCheckTokenObserver = {\n    next: listener,\n    error: onError,\n    type\n  };\n  const newState = {\n    ...state,\n    tokenObservers: [...state.tokenObservers, tokenListener]\n  };\n\n  /**\n   * Invoke the listener with the valid token, then start the token refresher\n   */\n  if (!newState.tokenRefresher) {\n    const tokenRefresher = createTokenRefresher(app, platformLoggerProvider);\n    newState.tokenRefresher = tokenRefresher;\n  }\n\n  // Create the refresher but don't start it if `isTokenAutoRefreshEnabled`\n  // is not true.\n  if (!newState.tokenRefresher.isRunning() && state.isTokenAutoRefreshEnabled) {\n    newState.tokenRefresher.start();\n  }\n\n  // Invoke the listener async immediately if there is a valid token\n  // in memory.\n  if (state.token && isValid(state.token)) {\n    const validToken = state.token;\n    Promise.resolve()\n      .then(() => listener({ token: validToken.token }))\n      .catch(() => {\n        /** Ignore errors in listeners. */\n      });\n  } else if (state.token == null) {\n    // Only check cache if there was no token. If the token was invalid,\n    // skip this and rely on exchange endpoint.\n    void state\n      .cachedTokenPromise! // Storage token promise. Always populated in `activate()`.\n      .then(cachedToken => {\n        if (cachedToken && isValid(cachedToken)) {\n          listener({ token: cachedToken.token });\n        }\n      })\n      .catch(() => {\n        /** Ignore errors in listeners. */\n      });\n  }\n\n  setState(app, newState);\n}\n\nexport function removeTokenListener(\n  app: FirebaseApp,\n  listener: (token: AppCheckTokenResult) => void\n): void {\n  const state = getState(app);\n\n  const newObservers = state.tokenObservers.filter(\n    tokenObserver => tokenObserver.next !== listener\n  );\n  if (\n    newObservers.length === 0 &&\n    state.tokenRefresher &&\n    state.tokenRefresher.isRunning()\n  ) {\n    state.tokenRefresher.stop();\n  }\n\n  setState(app, {\n    ...state,\n    tokenObservers: newObservers\n  });\n}\n\nfunction createTokenRefresher(\n  app: FirebaseApp,\n  platformLoggerProvider: Provider<'platform-logger'>\n): Refresher {\n  return new Refresher(\n    // Keep in mind when this fails for any reason other than the ones\n    // for which we should retry, it will effectively stop the proactive refresh.\n    async () => {\n      const state = getState(app);\n      // If there is no token, we will try to load it from storage and use it\n      // If there is a token, we force refresh it because we know it's going to expire soon\n      let result;\n      if (!state.token) {\n        result = await getToken(app, platformLoggerProvider);\n      } else {\n        result = await getToken(app, platformLoggerProvider, true);\n      }\n\n      // getToken() always resolves. In case the result has an error field defined, it means the operation failed, and we should retry.\n      if (result.error) {\n        throw result.error;\n      }\n    },\n    () => {\n      // TODO: when should we retry?\n      return true;\n    },\n    () => {\n      const state = getState(app);\n\n      if (state.token) {\n        // issuedAtTime + (50% * total TTL) + 5 minutes\n        let nextRefreshTimeMillis =\n          state.token.issuedAtTimeMillis +\n          (state.token.expireTimeMillis - state.token.issuedAtTimeMillis) *\n            0.5 +\n          5 * 60 * 1000;\n        // Do not allow refresh time to be past (expireTime - 5 minutes)\n        const latestAllowableRefresh =\n          state.token.expireTimeMillis - 5 * 60 * 1000;\n        nextRefreshTimeMillis = Math.min(\n          nextRefreshTimeMillis,\n          latestAllowableRefresh\n        );\n        return Math.max(0, nextRefreshTimeMillis - Date.now());\n      } else {\n        return 0;\n      }\n    },\n    TOKEN_REFRESH_TIME.RETRIAL_MIN_WAIT,\n    TOKEN_REFRESH_TIME.RETRIAL_MAX_WAIT\n  );\n}\n\nfunction notifyTokenListeners(\n  app: FirebaseApp,\n  token: AppCheckTokenResult\n): void {\n  const observers = getState(app).tokenObservers;\n\n  for (const observer of observers) {\n    try {\n      if (observer.type === ListenerType.EXTERNAL && token.error != null) {\n        // If this listener was added by a 3P call, send any token error to\n        // the supplied error handler. A 3P observer always has an error\n        // handler.\n        observer.error!(token.error);\n      } else {\n        // If the token has no error field, always return the token.\n        // If this is a 2P listener, return the token, whether or not it\n        // has an error field.\n        observer.next(token);\n      }\n    } catch (ignored) {\n      // Errors in the listener function itself are always ignored.\n    }\n  }\n}\n\nexport function isValid(token: AppCheckTokenInternal): boolean {\n  return token.expireTimeMillis - Date.now() > 0;\n}\n\nfunction makeDummyTokenResult(error: Error): AppCheckTokenResult {\n  return {\n    token: formatDummyToken(defaultTokenErrorData),\n    error\n  };\n}\n","/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { FirebaseApp } from '@firebase/app-types';\nimport { getState, setState } from './state';\nimport { Deferred } from '@firebase/util';\nimport { getRecaptcha, ensureActivated } from './util';\n\nexport const RECAPTCHA_URL = 'https://www.google.com/recaptcha/api.js';\n\nexport function initialize(\n  app: FirebaseApp,\n  siteKey: string\n): Promise<GreCAPTCHA> {\n  const state = getState(app);\n  const initialized = new Deferred<GreCAPTCHA>();\n\n  setState(app, { ...state, reCAPTCHAState: { initialized } });\n\n  const divId = `fire_app_check_${app.name}`;\n  const invisibleDiv = document.createElement('div');\n  invisibleDiv.id = divId;\n  invisibleDiv.style.display = 'none';\n\n  document.body.appendChild(invisibleDiv);\n\n  const grecaptcha = getRecaptcha();\n  if (!grecaptcha) {\n    loadReCAPTCHAScript(() => {\n      const grecaptcha = getRecaptcha();\n\n      if (!grecaptcha) {\n        // it shouldn't happen.\n        throw new Error('no recaptcha');\n      }\n      grecaptcha.ready(() => {\n        // Invisible widgets allow us to set a different siteKey for each widget, so we use them to support multiple apps\n        renderInvisibleWidget(app, siteKey, grecaptcha, divId);\n        initialized.resolve(grecaptcha);\n      });\n    });\n  } else {\n    grecaptcha.ready(() => {\n      renderInvisibleWidget(app, siteKey, grecaptcha, divId);\n      initialized.resolve(grecaptcha);\n    });\n  }\n\n  return initialized.promise;\n}\n\nexport async function getToken(app: FirebaseApp): Promise<string> {\n  ensureActivated(app);\n\n  // ensureActivated() guarantees that reCAPTCHAState is set\n  const reCAPTCHAState = getState(app).reCAPTCHAState!;\n  const recaptcha = await reCAPTCHAState.initialized.promise;\n\n  return new Promise((resolve, _reject) => {\n    // Updated after initialization is complete.\n    const reCAPTCHAState = getState(app).reCAPTCHAState!;\n    recaptcha.ready(() => {\n      resolve(\n        // widgetId is guaranteed to be available if reCAPTCHAState.initialized.promise resolved.\n        recaptcha.execute(reCAPTCHAState.widgetId!, {\n          action: 'fire_app_check'\n        })\n      );\n    });\n  });\n}\n\n/**\n *\n * @param app\n * @param container - Id of a HTML element.\n */\nfunction renderInvisibleWidget(\n  app: FirebaseApp,\n  siteKey: string,\n  grecaptcha: GreCAPTCHA,\n  container: string\n): void {\n  const widgetId = grecaptcha.render(container, {\n    sitekey: siteKey,\n    size: 'invisible'\n  });\n\n  const state = getState(app);\n\n  setState(app, {\n    ...state,\n    reCAPTCHAState: {\n      ...state.reCAPTCHAState!, // state.reCAPTCHAState is set in the initialize()\n      widgetId\n    }\n  });\n}\n\nfunction loadReCAPTCHAScript(onload: () => void): void {\n  const script = document.createElement('script');\n  script.src = `${RECAPTCHA_URL}`;\n  script.onload = onload;\n  document.head.appendChild(script);\n}\n\ndeclare global {\n  interface Window {\n    grecaptcha: GreCAPTCHA | undefined;\n  }\n}\n\nexport interface GreCAPTCHA {\n  ready: (callback: () => void) => void;\n  execute: (siteKey: string, options: { action: string }) => Promise<string>;\n  render: (\n    container: string | HTMLElement,\n    parameters: GreCAPTCHARenderOption\n  ) => string;\n}\n\nexport interface GreCAPTCHARenderOption {\n  sitekey: string;\n  size: 'invisible';\n}\n","/**\n * @license\n * Copyright 2021 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { FirebaseApp } from '@firebase/app-types';\nimport { Provider } from '@firebase/component';\nimport { issuedAtTime } from '@firebase/util';\nimport { CustomProviderOptions } from '../../app-check-types';\nimport { exchangeToken, getExchangeRecaptchaTokenRequest } from './client';\nimport { ERROR_FACTORY, AppCheckError } from './errors';\nimport {\n  getToken as getReCAPTCHAToken,\n  initialize as initializeRecaptcha\n} from './recaptcha';\nimport { AppCheckTokenInternal } from './state';\n\nexport interface AppCheckProviderInternal {\n  /**\n   * Returns an AppCheck token.\n   */\n  getToken(): Promise<AppCheckTokenInternal>;\n  /**\n   * Initialize the class once app and platformLoggerProvider are available.\n   */\n  initialize(\n    app: FirebaseApp,\n    platformLoggerProvider: Provider<'platform-logger'>\n  ): void;\n}\n\n/**\n * App Check provider that can obtain a reCAPTCHA V3 token and exchange it\n * for an App Check token.\n */\nexport class ReCaptchaV3Provider implements AppCheckProviderInternal {\n  private _app?: FirebaseApp;\n  private _platformLoggerProvider?: Provider<'platform-logger'>;\n  /**\n   * Create a ReCaptchaV3Provider instance.\n   * @param siteKey - ReCAPTCHA V3 siteKey.\n   */\n  constructor(private _siteKey: string) {}\n  /**\n   * Returns an App Check token.\n   * @internal\n   */\n  async getToken(): Promise<AppCheckTokenInternal> {\n    if (!this._app || !this._platformLoggerProvider) {\n      // This should only occur if user has not called initializeAppCheck().\n      // We don't have an appName to provide if so.\n      // This should already be caught in the top level `getToken()` function.\n      throw ERROR_FACTORY.create(AppCheckError.USE_BEFORE_ACTIVATION, {\n        appName: ''\n      });\n    }\n    let attestedClaimsToken;\n    try {\n      attestedClaimsToken = await getReCAPTCHAToken(this._app);\n    } catch (e) {\n      // reCaptcha.execute() throws null which is not very descriptive.\n      throw ERROR_FACTORY.create(AppCheckError.RECAPTCHA_ERROR);\n    }\n    return exchangeToken(\n      getExchangeRecaptchaTokenRequest(this._app, attestedClaimsToken),\n      this._platformLoggerProvider\n    );\n  }\n\n  initialize(\n    app: FirebaseApp,\n    platformLoggerProvider: Provider<'platform-logger'>\n  ): void {\n    this._app = app;\n    this._platformLoggerProvider = platformLoggerProvider;\n    initializeRecaptcha(app, this._siteKey).catch(() => {\n      /* we don't care about the initialization result */\n    });\n  }\n}\n\n/**\n * Custom provider class.\n */\nexport class CustomProvider implements AppCheckProviderInternal {\n  private _app?: FirebaseApp;\n\n  constructor(private _customProviderOptions: CustomProviderOptions) {}\n\n  /**\n   * @internal\n   */\n  async getToken(): Promise<AppCheckTokenInternal> {\n    if (!this._app) {\n      // This should only occur if user has not called initializeAppCheck().\n      // We don't have an appName to provide if so.\n      // This should already be caught in the top level `getToken()` function.\n      throw ERROR_FACTORY.create(AppCheckError.USE_BEFORE_ACTIVATION, {\n        appName: ''\n      });\n    }\n    // custom provider\n    const customToken = await this._customProviderOptions.getToken();\n    // Try to extract IAT from custom token, in case this token is not\n    // being newly issued. JWT timestamps are in seconds since epoch.\n    const issuedAtTimeSeconds = issuedAtTime(customToken.token);\n    // Very basic validation, use current timestamp as IAT if JWT\n    // has no `iat` field or value is out of bounds.\n    const issuedAtTimeMillis =\n      issuedAtTimeSeconds !== null &&\n      issuedAtTimeSeconds < Date.now() &&\n      issuedAtTimeSeconds > 0\n        ? issuedAtTimeSeconds * 1000\n        : Date.now();\n\n    return { ...customToken, issuedAtTimeMillis };\n  }\n\n  /**\n   * @internal\n   */\n  initialize(app: FirebaseApp): void {\n    this._app = app;\n  }\n}\n","/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {\n  AppCheckProvider,\n  AppCheckTokenResult\n} from '@firebase/app-check-types';\nimport { FirebaseApp } from '@firebase/app-types';\nimport { ERROR_FACTORY, AppCheckError } from './errors';\nimport { getState, setState, AppCheckState, ListenerType } from './state';\nimport {\n  getToken as getTokenInternal,\n  addTokenListener,\n  removeTokenListener,\n  isValid\n} from './internal-api';\nimport { Provider } from '@firebase/component';\nimport { ErrorFn, NextFn, PartialObserver, Unsubscribe } from '@firebase/util';\nimport { CustomProvider, ReCaptchaV3Provider } from './providers';\nimport { readTokenFromStorage } from './storage';\n\n/**\n *\n * @param app\n * @param siteKeyOrProvider - optional custom attestation provider\n * or reCAPTCHA provider\n * @param isTokenAutoRefreshEnabled - if true, enables auto refresh\n * of appCheck token.\n */\nexport function activate(\n  app: FirebaseApp,\n  siteKeyOrProvider:\n    | ReCaptchaV3Provider\n    | CustomProvider\n    // This is the old interface for users to supply a custom provider.\n    | AppCheckProvider\n    | string,\n  platformLoggerProvider: Provider<'platform-logger'>,\n  isTokenAutoRefreshEnabled?: boolean\n): void {\n  const state = getState(app);\n  if (state.activated) {\n    throw ERROR_FACTORY.create(AppCheckError.ALREADY_ACTIVATED, {\n      appName: app.name\n    });\n  }\n\n  const newState: AppCheckState = { ...state, activated: true };\n\n  // Read cached token from storage if it exists and store it in memory.\n  newState.cachedTokenPromise = readTokenFromStorage(app).then(cachedToken => {\n    if (cachedToken && isValid(cachedToken)) {\n      setState(app, { ...getState(app), token: cachedToken });\n    }\n    return cachedToken;\n  });\n\n  if (typeof siteKeyOrProvider === 'string') {\n    newState.provider = new ReCaptchaV3Provider(siteKeyOrProvider);\n  } else if (\n    siteKeyOrProvider instanceof ReCaptchaV3Provider ||\n    siteKeyOrProvider instanceof CustomProvider\n  ) {\n    newState.provider = siteKeyOrProvider;\n  } else {\n    // Process \"old\" custom provider to avoid breaking previous users.\n    // This was defined at beta release as simply an object with a\n    // getToken() method.\n    newState.provider = new CustomProvider({\n      getToken: siteKeyOrProvider.getToken\n    });\n  }\n\n  // Use value of global `automaticDataCollectionEnabled` (which\n  // itself defaults to false if not specified in config) if\n  // `isTokenAutoRefreshEnabled` param was not provided by user.\n  newState.isTokenAutoRefreshEnabled =\n    isTokenAutoRefreshEnabled === undefined\n      ? app.automaticDataCollectionEnabled\n      : isTokenAutoRefreshEnabled;\n\n  setState(app, newState);\n\n  newState.provider.initialize(app, platformLoggerProvider);\n}\n\nexport function setTokenAutoRefreshEnabled(\n  app: FirebaseApp,\n  isTokenAutoRefreshEnabled: boolean\n): void {\n  const state = getState(app);\n  // This will exist if any product libraries have called\n  // `addTokenListener()`\n  if (state.tokenRefresher) {\n    if (isTokenAutoRefreshEnabled === true) {\n      state.tokenRefresher.start();\n    } else {\n      state.tokenRefresher.stop();\n    }\n  }\n  setState(app, { ...state, isTokenAutoRefreshEnabled });\n}\n\n/**\n * Differs from internal getToken in that it throws the error.\n */\nexport async function getToken(\n  app: FirebaseApp,\n  platformLoggerProvider: Provider<'platform-logger'>,\n  forceRefresh?: boolean\n): Promise<AppCheckTokenResult> {\n  const result = await getTokenInternal(\n    app,\n    platformLoggerProvider,\n    forceRefresh\n  );\n  if (result.error) {\n    throw result.error;\n  }\n  return { token: result.token };\n}\n\n/**\n * Wraps addTokenListener/removeTokenListener methods in an Observer\n * pattern for public use.\n */\nexport function onTokenChanged(\n  app: FirebaseApp,\n  platformLoggerProvider: Provider<'platform-logger'>,\n  observer: PartialObserver<AppCheckTokenResult>\n): Unsubscribe;\nexport function onTokenChanged(\n  app: FirebaseApp,\n  platformLoggerProvider: Provider<'platform-logger'>,\n  onNext: (tokenResult: AppCheckTokenResult) => void,\n  onError?: (error: Error) => void,\n  onCompletion?: () => void\n): Unsubscribe;\nexport function onTokenChanged(\n  app: FirebaseApp,\n  platformLoggerProvider: Provider<'platform-logger'>,\n  onNextOrObserver:\n    | ((tokenResult: AppCheckTokenResult) => void)\n    | PartialObserver<AppCheckTokenResult>,\n  onError?: (error: Error) => void,\n  /**\n   * NOTE: Although an `onCompletion` callback can be provided, it will\n   * never be called because the token stream is never-ending.\n   * It is added only for API consistency with the observer pattern, which\n   * we follow in JS APIs.\n   */\n  // eslint-disable-next-line @typescript-eslint/no-unused-vars\n  onCompletion?: () => void\n): Unsubscribe {\n  let nextFn: NextFn<AppCheckTokenResult> = () => {};\n  let errorFn: ErrorFn = () => {};\n  if ((onNextOrObserver as PartialObserver<AppCheckTokenResult>).next != null) {\n    nextFn = (\n      onNextOrObserver as PartialObserver<AppCheckTokenResult>\n    ).next!.bind(onNextOrObserver);\n  } else {\n    nextFn = onNextOrObserver as NextFn<AppCheckTokenResult>;\n  }\n  if (\n    (onNextOrObserver as PartialObserver<AppCheckTokenResult>).error != null\n  ) {\n    errorFn = (\n      onNextOrObserver as PartialObserver<AppCheckTokenResult>\n    ).error!.bind(onNextOrObserver);\n  } else if (onError) {\n    errorFn = onError;\n  }\n  addTokenListener(\n    app,\n    platformLoggerProvider,\n    ListenerType.EXTERNAL,\n    nextFn,\n    errorFn\n  );\n  return () => removeTokenListener(app, nextFn);\n}\n","/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {\n  FirebaseAppCheck,\n  AppCheckProvider,\n  AppCheckTokenResult,\n  ReCaptchaV3Provider,\n  CustomProvider\n} from '@firebase/app-check-types';\nimport {\n  activate,\n  setTokenAutoRefreshEnabled,\n  getToken,\n  onTokenChanged\n} from './api';\nimport { FirebaseApp } from '@firebase/app-types';\nimport { FirebaseAppCheckInternal } from '@firebase/app-check-interop-types';\nimport {\n  getToken as getTokenInternal,\n  addTokenListener,\n  removeTokenListener\n} from './internal-api';\nimport {\n  ReCaptchaV3Provider as ReCaptchaV3ProviderImpl,\n  CustomProvider as CustomProviderImpl\n} from './providers';\nimport { Provider } from '@firebase/component';\nimport { PartialObserver } from '@firebase/util';\n\nimport { FirebaseService } from '@firebase/app-types/private';\nimport { getState, ListenerType } from './state';\n\nexport function factory(\n  app: FirebaseApp,\n  platformLoggerProvider: Provider<'platform-logger'>\n): FirebaseAppCheck & FirebaseService {\n  return {\n    app,\n    activate: (\n      siteKeyOrProvider:\n        | ReCaptchaV3Provider\n        | CustomProvider\n        | AppCheckProvider\n        | string,\n      isTokenAutoRefreshEnabled?: boolean\n    ) =>\n      activate(\n        app,\n        // Public types of ReCaptchaV3Provider/CustomProvider don't\n        // expose getToken() and aren't recognized as the internal\n        // class version of themselves.\n        siteKeyOrProvider as\n          | ReCaptchaV3ProviderImpl\n          | CustomProviderImpl\n          | AppCheckProvider\n          | string,\n        platformLoggerProvider,\n        isTokenAutoRefreshEnabled\n      ),\n    setTokenAutoRefreshEnabled: (isTokenAutoRefreshEnabled: boolean) =>\n      setTokenAutoRefreshEnabled(app, isTokenAutoRefreshEnabled),\n    getToken: forceRefresh =>\n      getToken(app, platformLoggerProvider, forceRefresh),\n    onTokenChanged: (\n      onNextOrObserver:\n        | ((tokenResult: AppCheckTokenResult) => void)\n        | PartialObserver<AppCheckTokenResult>,\n      onError?: (error: Error) => void,\n      onCompletion?: () => void\n    ) =>\n      onTokenChanged(\n        app,\n        platformLoggerProvider,\n        /**\n         * This can still be an observer. Need to do this casting because\n         * according to Typescript: \"Implementation signatures of overloads\n         * are not externally visible\"\n         */\n        onNextOrObserver as (tokenResult: AppCheckTokenResult) => void,\n        onError,\n        onCompletion\n      ),\n    INTERNAL: {\n      delete: () => {\n        const { tokenObservers } = getState(app);\n        for (const tokenObserver of tokenObservers) {\n          removeTokenListener(app, tokenObserver.next);\n        }\n        return Promise.resolve();\n      }\n    }\n  };\n}\n\nexport function internalFactory(\n  app: FirebaseApp,\n  platformLoggerProvider: Provider<'platform-logger'>\n): FirebaseAppCheckInternal {\n  return {\n    getToken: forceRefresh =>\n      getTokenInternal(app, platformLoggerProvider, forceRefresh),\n    addTokenListener: listener =>\n      addTokenListener(\n        app,\n        platformLoggerProvider,\n        ListenerType.INTERNAL,\n        listener\n      ),\n    removeTokenListener: listener => removeTokenListener(app, listener)\n  };\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport firebase from '@firebase/app';\nimport { _FirebaseNamespace } from '@firebase/app-types/private';\nimport {\n  Component,\n  ComponentType,\n  InstantiationMode\n} from '@firebase/component';\nimport {\n  FirebaseAppCheck,\n  AppCheckComponentName,\n  ReCaptchaV3Provider,\n  CustomProvider\n} from '@firebase/app-check-types';\nimport { factory, internalFactory } from './factory';\nimport {\n  ReCaptchaV3Provider as ReCaptchaV3ProviderImpl,\n  CustomProvider as CustomProviderImpl\n} from './providers';\nimport { initializeDebugMode } from './debug';\nimport { AppCheckInternalComponentName } from '@firebase/app-check-interop-types';\nimport { name, version } from '../package.json';\n\nconst APP_CHECK_NAME: AppCheckComponentName = 'appCheck';\nconst APP_CHECK_NAME_INTERNAL: AppCheckInternalComponentName =\n  'app-check-internal';\nfunction registerAppCheck(firebase: _FirebaseNamespace): void {\n  // The public interface\n  firebase.INTERNAL.registerComponent(\n    new Component(\n      APP_CHECK_NAME,\n      container => {\n        // getImmediate for FirebaseApp will always succeed\n        const app = container.getProvider('app').getImmediate();\n        const platformLoggerProvider = container.getProvider('platform-logger');\n        return factory(app, platformLoggerProvider);\n      },\n      ComponentType.PUBLIC\n    )\n      .setServiceProps({\n        ReCaptchaV3Provider: ReCaptchaV3ProviderImpl,\n        CustomProvider: CustomProviderImpl\n      })\n      /**\n       * AppCheck can only be initialized by explicitly calling firebase.appCheck()\n       * We don't want firebase products that consume AppCheck to gate on AppCheck\n       * if the user doesn't intend them to, just because the AppCheck component\n       * is registered.\n       */\n      .setInstantiationMode(InstantiationMode.EXPLICIT)\n      /**\n       * Because all firebase products that depend on app-check depend on app-check-internal directly,\n       * we need to initialize app-check-internal after app-check is initialized to make it\n       * available to other firebase products.\n       */\n      .setInstanceCreatedCallback(\n        (container, _instanceIdentifier, _instance) => {\n          const appCheckInternalProvider = container.getProvider(\n            APP_CHECK_NAME_INTERNAL\n          );\n          appCheckInternalProvider.initialize();\n        }\n      )\n  );\n\n  // The internal interface used by other Firebase products\n  firebase.INTERNAL.registerComponent(\n    new Component(\n      APP_CHECK_NAME_INTERNAL,\n      container => {\n        // getImmediate for FirebaseApp will always succeed\n        const app = container.getProvider('app').getImmediate();\n        const platformLoggerProvider = container.getProvider('platform-logger');\n        return internalFactory(app, platformLoggerProvider);\n      },\n      ComponentType.PUBLIC\n    ).setInstantiationMode(InstantiationMode.EXPLICIT)\n  );\n\n  firebase.registerVersion(name, version);\n}\n\nregisterAppCheck(firebase as _FirebaseNamespace);\ninitializeDebugMode();\n\n/**\n * Define extension behavior of `registerAnalytics`\n */\ndeclare module '@firebase/app-types' {\n  interface FirebaseNamespace {\n    appCheck(app?: FirebaseApp): FirebaseAppCheck;\n    ReCaptchaV3Provider: typeof ReCaptchaV3Provider;\n    CustomProvider: typeof CustomProvider;\n  }\n  interface FirebaseApp {\n    appCheck(): FirebaseAppCheck;\n  }\n}\n"]},"metadata":{},"sourceType":"script"}