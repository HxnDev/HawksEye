{"ast":null,"code":"import firebase from '@firebase/app';\nimport { Component } from '@firebase/component';\nimport { __awaiter, __generator, __spreadArray, __read, __values, __assign } from 'tslib';\nimport { ErrorFactory, FirebaseError } from '@firebase/util';\nimport { openDb } from 'idb';\nvar name = \"@firebase/installations\";\nvar version = \"0.4.31\";\n/**\r\n * @license\r\n * Copyright 2019 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\nvar PENDING_TIMEOUT_MS = 10000;\nvar PACKAGE_VERSION = \"w:\" + version;\nvar INTERNAL_AUTH_VERSION = 'FIS_v2';\nvar INSTALLATIONS_API_URL = 'https://firebaseinstallations.googleapis.com/v1';\nvar TOKEN_EXPIRATION_BUFFER = 60 * 60 * 1000; // One hour\n\nvar SERVICE = 'installations';\nvar SERVICE_NAME = 'Installations';\n/**\r\n * @license\r\n * Copyright 2019 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\nvar _a;\n\nvar ERROR_DESCRIPTION_MAP = (_a = {}, _a[\"missing-app-config-values\"\n/* MISSING_APP_CONFIG_VALUES */\n] = 'Missing App configuration value: \"{$valueName}\"', _a[\"not-registered\"\n/* NOT_REGISTERED */\n] = 'Firebase Installation is not registered.', _a[\"installation-not-found\"\n/* INSTALLATION_NOT_FOUND */\n] = 'Firebase Installation not found.', _a[\"request-failed\"\n/* REQUEST_FAILED */\n] = '{$requestName} request failed with error \"{$serverCode} {$serverStatus}: {$serverMessage}\"', _a[\"app-offline\"\n/* APP_OFFLINE */\n] = 'Could not process request. Application offline.', _a[\"delete-pending-registration\"\n/* DELETE_PENDING_REGISTRATION */\n] = \"Can't delete installation while there is a pending registration request.\", _a);\nvar ERROR_FACTORY = new ErrorFactory(SERVICE, SERVICE_NAME, ERROR_DESCRIPTION_MAP);\n/** Returns true if error is a FirebaseError that is based on an error from the server. */\n\nfunction isServerError(error) {\n  return error instanceof FirebaseError && error.code.includes(\"request-failed\"\n  /* REQUEST_FAILED */\n  );\n}\n/**\r\n * @license\r\n * Copyright 2019 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\n\nfunction getInstallationsEndpoint(_a) {\n  var projectId = _a.projectId;\n  return INSTALLATIONS_API_URL + \"/projects/\" + projectId + \"/installations\";\n}\n\nfunction extractAuthTokenInfoFromResponse(response) {\n  return {\n    token: response.token,\n    requestStatus: 2\n    /* COMPLETED */\n    ,\n    expiresIn: getExpiresInFromResponseExpiresIn(response.expiresIn),\n    creationTime: Date.now()\n  };\n}\n\nfunction getErrorFromResponse(requestName, response) {\n  return __awaiter(this, void 0, void 0, function () {\n    var responseJson, errorData;\n    return __generator(this, function (_a) {\n      switch (_a.label) {\n        case 0:\n          return [4\n          /*yield*/\n          , response.json()];\n\n        case 1:\n          responseJson = _a.sent();\n          errorData = responseJson.error;\n          return [2\n          /*return*/\n          , ERROR_FACTORY.create(\"request-failed\"\n          /* REQUEST_FAILED */\n          , {\n            requestName: requestName,\n            serverCode: errorData.code,\n            serverMessage: errorData.message,\n            serverStatus: errorData.status\n          })];\n      }\n    });\n  });\n}\n\nfunction getHeaders(_a) {\n  var apiKey = _a.apiKey;\n  return new Headers({\n    'Content-Type': 'application/json',\n    Accept: 'application/json',\n    'x-goog-api-key': apiKey\n  });\n}\n\nfunction getHeadersWithAuth(appConfig, _a) {\n  var refreshToken = _a.refreshToken;\n  var headers = getHeaders(appConfig);\n  headers.append('Authorization', getAuthorizationHeader(refreshToken));\n  return headers;\n}\n/**\r\n * Calls the passed in fetch wrapper and returns the response.\r\n * If the returned response has a status of 5xx, re-runs the function once and\r\n * returns the response.\r\n */\n\n\nfunction retryIfServerError(fn) {\n  return __awaiter(this, void 0, void 0, function () {\n    var result;\n    return __generator(this, function (_a) {\n      switch (_a.label) {\n        case 0:\n          return [4\n          /*yield*/\n          , fn()];\n\n        case 1:\n          result = _a.sent();\n\n          if (result.status >= 500 && result.status < 600) {\n            // Internal Server Error. Retry request.\n            return [2\n            /*return*/\n            , fn()];\n          }\n\n          return [2\n          /*return*/\n          , result];\n      }\n    });\n  });\n}\n\nfunction getExpiresInFromResponseExpiresIn(responseExpiresIn) {\n  // This works because the server will never respond with fractions of a second.\n  return Number(responseExpiresIn.replace('s', '000'));\n}\n\nfunction getAuthorizationHeader(refreshToken) {\n  return INTERNAL_AUTH_VERSION + \" \" + refreshToken;\n}\n/**\r\n * @license\r\n * Copyright 2019 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\n\nfunction createInstallationRequest(appConfig, _a) {\n  var fid = _a.fid;\n  return __awaiter(this, void 0, void 0, function () {\n    var endpoint, headers, body, request, response, responseValue, registeredInstallationEntry;\n    return __generator(this, function (_b) {\n      switch (_b.label) {\n        case 0:\n          endpoint = getInstallationsEndpoint(appConfig);\n          headers = getHeaders(appConfig);\n          body = {\n            fid: fid,\n            authVersion: INTERNAL_AUTH_VERSION,\n            appId: appConfig.appId,\n            sdkVersion: PACKAGE_VERSION\n          };\n          request = {\n            method: 'POST',\n            headers: headers,\n            body: JSON.stringify(body)\n          };\n          return [4\n          /*yield*/\n          , retryIfServerError(function () {\n            return fetch(endpoint, request);\n          })];\n\n        case 1:\n          response = _b.sent();\n          if (!response.ok) return [3\n          /*break*/\n          , 3];\n          return [4\n          /*yield*/\n          , response.json()];\n\n        case 2:\n          responseValue = _b.sent();\n          registeredInstallationEntry = {\n            fid: responseValue.fid || fid,\n            registrationStatus: 2\n            /* COMPLETED */\n            ,\n            refreshToken: responseValue.refreshToken,\n            authToken: extractAuthTokenInfoFromResponse(responseValue.authToken)\n          };\n          return [2\n          /*return*/\n          , registeredInstallationEntry];\n\n        case 3:\n          return [4\n          /*yield*/\n          , getErrorFromResponse('Create Installation', response)];\n\n        case 4:\n          throw _b.sent();\n      }\n    });\n  });\n}\n/**\r\n * @license\r\n * Copyright 2020 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\n/** Returns a promise that resolves after given time passes. */\n\n\nfunction sleep(ms) {\n  return new Promise(function (resolve) {\n    setTimeout(resolve, ms);\n  });\n}\n/**\r\n * @license\r\n * Copyright 2019 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\n\nfunction bufferToBase64UrlSafe(array) {\n  var b64 = btoa(String.fromCharCode.apply(String, __spreadArray([], __read(array))));\n  return b64.replace(/\\+/g, '-').replace(/\\//g, '_');\n}\n/**\r\n * @license\r\n * Copyright 2019 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\n\nvar VALID_FID_PATTERN = /^[cdef][\\w-]{21}$/;\nvar INVALID_FID = '';\n/**\r\n * Generates a new FID using random values from Web Crypto API.\r\n * Returns an empty string if FID generation fails for any reason.\r\n */\n\nfunction generateFid() {\n  try {\n    // A valid FID has exactly 22 base64 characters, which is 132 bits, or 16.5\n    // bytes. our implementation generates a 17 byte array instead.\n    var fidByteArray = new Uint8Array(17);\n    var crypto_1 = self.crypto || self.msCrypto;\n    crypto_1.getRandomValues(fidByteArray); // Replace the first 4 random bits with the constant FID header of 0b0111.\n\n    fidByteArray[0] = 112 + fidByteArray[0] % 16;\n    var fid = encode(fidByteArray);\n    return VALID_FID_PATTERN.test(fid) ? fid : INVALID_FID;\n  } catch (_a) {\n    // FID generation errored\n    return INVALID_FID;\n  }\n}\n/** Converts a FID Uint8Array to a base64 string representation. */\n\n\nfunction encode(fidByteArray) {\n  var b64String = bufferToBase64UrlSafe(fidByteArray); // Remove the 23rd character that was added because of the extra 4 bits at the\n  // end of our 17 byte array, and the '=' padding.\n\n  return b64String.substr(0, 22);\n}\n/**\r\n * @license\r\n * Copyright 2019 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\n/** Returns a string key that can be used to identify the app. */\n\n\nfunction getKey(appConfig) {\n  return appConfig.appName + \"!\" + appConfig.appId;\n}\n/**\r\n * @license\r\n * Copyright 2019 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\n\nvar fidChangeCallbacks = new Map();\n/**\r\n * Calls the onIdChange callbacks with the new FID value, and broadcasts the\r\n * change to other tabs.\r\n */\n\nfunction fidChanged(appConfig, fid) {\n  var key = getKey(appConfig);\n  callFidChangeCallbacks(key, fid);\n  broadcastFidChange(key, fid);\n}\n\nfunction addCallback(appConfig, callback) {\n  // Open the broadcast channel if it's not already open,\n  // to be able to listen to change events from other tabs.\n  getBroadcastChannel();\n  var key = getKey(appConfig);\n  var callbackSet = fidChangeCallbacks.get(key);\n\n  if (!callbackSet) {\n    callbackSet = new Set();\n    fidChangeCallbacks.set(key, callbackSet);\n  }\n\n  callbackSet.add(callback);\n}\n\nfunction removeCallback(appConfig, callback) {\n  var key = getKey(appConfig);\n  var callbackSet = fidChangeCallbacks.get(key);\n\n  if (!callbackSet) {\n    return;\n  }\n\n  callbackSet.delete(callback);\n\n  if (callbackSet.size === 0) {\n    fidChangeCallbacks.delete(key);\n  } // Close broadcast channel if there are no more callbacks.\n\n\n  closeBroadcastChannel();\n}\n\nfunction callFidChangeCallbacks(key, fid) {\n  var e_1, _a;\n\n  var callbacks = fidChangeCallbacks.get(key);\n\n  if (!callbacks) {\n    return;\n  }\n\n  try {\n    for (var callbacks_1 = __values(callbacks), callbacks_1_1 = callbacks_1.next(); !callbacks_1_1.done; callbacks_1_1 = callbacks_1.next()) {\n      var callback = callbacks_1_1.value;\n      callback(fid);\n    }\n  } catch (e_1_1) {\n    e_1 = {\n      error: e_1_1\n    };\n  } finally {\n    try {\n      if (callbacks_1_1 && !callbacks_1_1.done && (_a = callbacks_1.return)) _a.call(callbacks_1);\n    } finally {\n      if (e_1) throw e_1.error;\n    }\n  }\n}\n\nfunction broadcastFidChange(key, fid) {\n  var channel = getBroadcastChannel();\n\n  if (channel) {\n    channel.postMessage({\n      key: key,\n      fid: fid\n    });\n  }\n\n  closeBroadcastChannel();\n}\n\nvar broadcastChannel = null;\n/** Opens and returns a BroadcastChannel if it is supported by the browser. */\n\nfunction getBroadcastChannel() {\n  if (!broadcastChannel && 'BroadcastChannel' in self) {\n    broadcastChannel = new BroadcastChannel('[Firebase] FID Change');\n\n    broadcastChannel.onmessage = function (e) {\n      callFidChangeCallbacks(e.data.key, e.data.fid);\n    };\n  }\n\n  return broadcastChannel;\n}\n\nfunction closeBroadcastChannel() {\n  if (fidChangeCallbacks.size === 0 && broadcastChannel) {\n    broadcastChannel.close();\n    broadcastChannel = null;\n  }\n}\n/**\r\n * @license\r\n * Copyright 2019 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\n\nvar DATABASE_NAME = 'firebase-installations-database';\nvar DATABASE_VERSION = 1;\nvar OBJECT_STORE_NAME = 'firebase-installations-store';\nvar dbPromise = null;\n\nfunction getDbPromise() {\n  if (!dbPromise) {\n    dbPromise = openDb(DATABASE_NAME, DATABASE_VERSION, function (upgradeDB) {\n      // We don't use 'break' in this switch statement, the fall-through\n      // behavior is what we want, because if there are multiple versions between\n      // the old version and the current version, we want ALL the migrations\n      // that correspond to those versions to run, not only the last one.\n      // eslint-disable-next-line default-case\n      switch (upgradeDB.oldVersion) {\n        case 0:\n          upgradeDB.createObjectStore(OBJECT_STORE_NAME);\n      }\n    });\n  }\n\n  return dbPromise;\n}\n/** Assigns or overwrites the record for the given key with the given value. */\n\n\nfunction set(appConfig, value) {\n  return __awaiter(this, void 0, void 0, function () {\n    var key, db, tx, objectStore, oldValue;\n    return __generator(this, function (_a) {\n      switch (_a.label) {\n        case 0:\n          key = getKey(appConfig);\n          return [4\n          /*yield*/\n          , getDbPromise()];\n\n        case 1:\n          db = _a.sent();\n          tx = db.transaction(OBJECT_STORE_NAME, 'readwrite');\n          objectStore = tx.objectStore(OBJECT_STORE_NAME);\n          return [4\n          /*yield*/\n          , objectStore.get(key)];\n\n        case 2:\n          oldValue = _a.sent();\n          return [4\n          /*yield*/\n          , objectStore.put(value, key)];\n\n        case 3:\n          _a.sent();\n\n          return [4\n          /*yield*/\n          , tx.complete];\n\n        case 4:\n          _a.sent();\n\n          if (!oldValue || oldValue.fid !== value.fid) {\n            fidChanged(appConfig, value.fid);\n          }\n\n          return [2\n          /*return*/\n          , value];\n      }\n    });\n  });\n}\n/** Removes record(s) from the objectStore that match the given key. */\n\n\nfunction remove(appConfig) {\n  return __awaiter(this, void 0, void 0, function () {\n    var key, db, tx;\n    return __generator(this, function (_a) {\n      switch (_a.label) {\n        case 0:\n          key = getKey(appConfig);\n          return [4\n          /*yield*/\n          , getDbPromise()];\n\n        case 1:\n          db = _a.sent();\n          tx = db.transaction(OBJECT_STORE_NAME, 'readwrite');\n          return [4\n          /*yield*/\n          , tx.objectStore(OBJECT_STORE_NAME).delete(key)];\n\n        case 2:\n          _a.sent();\n\n          return [4\n          /*yield*/\n          , tx.complete];\n\n        case 3:\n          _a.sent();\n\n          return [2\n          /*return*/\n          ];\n      }\n    });\n  });\n}\n/**\r\n * Atomically updates a record with the result of updateFn, which gets\r\n * called with the current value. If newValue is undefined, the record is\r\n * deleted instead.\r\n * @return Updated value\r\n */\n\n\nfunction update(appConfig, updateFn) {\n  return __awaiter(this, void 0, void 0, function () {\n    var key, db, tx, store, oldValue, newValue;\n    return __generator(this, function (_a) {\n      switch (_a.label) {\n        case 0:\n          key = getKey(appConfig);\n          return [4\n          /*yield*/\n          , getDbPromise()];\n\n        case 1:\n          db = _a.sent();\n          tx = db.transaction(OBJECT_STORE_NAME, 'readwrite');\n          store = tx.objectStore(OBJECT_STORE_NAME);\n          return [4\n          /*yield*/\n          , store.get(key)];\n\n        case 2:\n          oldValue = _a.sent();\n          newValue = updateFn(oldValue);\n          if (!(newValue === undefined)) return [3\n          /*break*/\n          , 4];\n          return [4\n          /*yield*/\n          , store.delete(key)];\n\n        case 3:\n          _a.sent();\n\n          return [3\n          /*break*/\n          , 6];\n\n        case 4:\n          return [4\n          /*yield*/\n          , store.put(newValue, key)];\n\n        case 5:\n          _a.sent();\n\n          _a.label = 6;\n\n        case 6:\n          return [4\n          /*yield*/\n          , tx.complete];\n\n        case 7:\n          _a.sent();\n\n          if (newValue && (!oldValue || oldValue.fid !== newValue.fid)) {\n            fidChanged(appConfig, newValue.fid);\n          }\n\n          return [2\n          /*return*/\n          , newValue];\n      }\n    });\n  });\n}\n/**\r\n * @license\r\n * Copyright 2019 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\n/**\r\n * Updates and returns the InstallationEntry from the database.\r\n * Also triggers a registration request if it is necessary and possible.\r\n */\n\n\nfunction getInstallationEntry(appConfig) {\n  return __awaiter(this, void 0, void 0, function () {\n    var registrationPromise, installationEntry;\n\n    var _a;\n\n    return __generator(this, function (_b) {\n      switch (_b.label) {\n        case 0:\n          return [4\n          /*yield*/\n          , update(appConfig, function (oldEntry) {\n            var installationEntry = updateOrCreateInstallationEntry(oldEntry);\n            var entryWithPromise = triggerRegistrationIfNecessary(appConfig, installationEntry);\n            registrationPromise = entryWithPromise.registrationPromise;\n            return entryWithPromise.installationEntry;\n          })];\n\n        case 1:\n          installationEntry = _b.sent();\n          if (!(installationEntry.fid === INVALID_FID)) return [3\n          /*break*/\n          , 3];\n          _a = {};\n          return [4\n          /*yield*/\n          , registrationPromise];\n\n        case 2:\n          // FID generation failed. Waiting for the FID from the server.\n          return [2\n          /*return*/\n          , (_a.installationEntry = _b.sent(), _a)];\n\n        case 3:\n          return [2\n          /*return*/\n          , {\n            installationEntry: installationEntry,\n            registrationPromise: registrationPromise\n          }];\n      }\n    });\n  });\n}\n/**\r\n * Creates a new Installation Entry if one does not exist.\r\n * Also clears timed out pending requests.\r\n */\n\n\nfunction updateOrCreateInstallationEntry(oldEntry) {\n  var entry = oldEntry || {\n    fid: generateFid(),\n    registrationStatus: 0\n    /* NOT_STARTED */\n\n  };\n  return clearTimedOutRequest(entry);\n}\n/**\r\n * If the Firebase Installation is not registered yet, this will trigger the\r\n * registration and return an InProgressInstallationEntry.\r\n *\r\n * If registrationPromise does not exist, the installationEntry is guaranteed\r\n * to be registered.\r\n */\n\n\nfunction triggerRegistrationIfNecessary(appConfig, installationEntry) {\n  if (installationEntry.registrationStatus === 0\n  /* NOT_STARTED */\n  ) {\n    if (!navigator.onLine) {\n      // Registration required but app is offline.\n      var registrationPromiseWithError = Promise.reject(ERROR_FACTORY.create(\"app-offline\"\n      /* APP_OFFLINE */\n      ));\n      return {\n        installationEntry: installationEntry,\n        registrationPromise: registrationPromiseWithError\n      };\n    } // Try registering. Change status to IN_PROGRESS.\n\n\n    var inProgressEntry = {\n      fid: installationEntry.fid,\n      registrationStatus: 1\n      /* IN_PROGRESS */\n      ,\n      registrationTime: Date.now()\n    };\n    var registrationPromise = registerInstallation(appConfig, inProgressEntry);\n    return {\n      installationEntry: inProgressEntry,\n      registrationPromise: registrationPromise\n    };\n  } else if (installationEntry.registrationStatus === 1\n  /* IN_PROGRESS */\n  ) {\n    return {\n      installationEntry: installationEntry,\n      registrationPromise: waitUntilFidRegistration(appConfig)\n    };\n  } else {\n    return {\n      installationEntry: installationEntry\n    };\n  }\n}\n/** This will be executed only once for each new Firebase Installation. */\n\n\nfunction registerInstallation(appConfig, installationEntry) {\n  return __awaiter(this, void 0, void 0, function () {\n    var registeredInstallationEntry, e_1;\n    return __generator(this, function (_a) {\n      switch (_a.label) {\n        case 0:\n          _a.trys.push([0, 2,, 7]);\n\n          return [4\n          /*yield*/\n          , createInstallationRequest(appConfig, installationEntry)];\n\n        case 1:\n          registeredInstallationEntry = _a.sent();\n          return [2\n          /*return*/\n          , set(appConfig, registeredInstallationEntry)];\n\n        case 2:\n          e_1 = _a.sent();\n          if (!(isServerError(e_1) && e_1.customData.serverCode === 409)) return [3\n          /*break*/\n          , 4]; // Server returned a \"FID can not be used\" error.\n          // Generate a new ID next time.\n\n          return [4\n          /*yield*/\n          , remove(appConfig)];\n\n        case 3:\n          // Server returned a \"FID can not be used\" error.\n          // Generate a new ID next time.\n          _a.sent();\n\n          return [3\n          /*break*/\n          , 6];\n\n        case 4:\n          // Registration failed. Set FID as not registered.\n          return [4\n          /*yield*/\n          , set(appConfig, {\n            fid: installationEntry.fid,\n            registrationStatus: 0\n            /* NOT_STARTED */\n\n          })];\n\n        case 5:\n          // Registration failed. Set FID as not registered.\n          _a.sent();\n\n          _a.label = 6;\n\n        case 6:\n          throw e_1;\n\n        case 7:\n          return [2\n          /*return*/\n          ];\n      }\n    });\n  });\n}\n/** Call if FID registration is pending in another request. */\n\n\nfunction waitUntilFidRegistration(appConfig) {\n  return __awaiter(this, void 0, void 0, function () {\n    var entry, _a, installationEntry, registrationPromise;\n\n    return __generator(this, function (_b) {\n      switch (_b.label) {\n        case 0:\n          return [4\n          /*yield*/\n          , updateInstallationRequest(appConfig)];\n\n        case 1:\n          entry = _b.sent();\n          _b.label = 2;\n\n        case 2:\n          if (!(entry.registrationStatus === 1\n          /* IN_PROGRESS */\n          )) return [3\n          /*break*/\n          , 5]; // createInstallation request still in progress.\n\n          return [4\n          /*yield*/\n          , sleep(100)];\n\n        case 3:\n          // createInstallation request still in progress.\n          _b.sent();\n\n          return [4\n          /*yield*/\n          , updateInstallationRequest(appConfig)];\n\n        case 4:\n          entry = _b.sent();\n          return [3\n          /*break*/\n          , 2];\n\n        case 5:\n          if (!(entry.registrationStatus === 0\n          /* NOT_STARTED */\n          )) return [3\n          /*break*/\n          , 7];\n          return [4\n          /*yield*/\n          , getInstallationEntry(appConfig)];\n\n        case 6:\n          _a = _b.sent(), installationEntry = _a.installationEntry, registrationPromise = _a.registrationPromise;\n\n          if (registrationPromise) {\n            return [2\n            /*return*/\n            , registrationPromise];\n          } else {\n            // if there is no registrationPromise, entry is registered.\n            return [2\n            /*return*/\n            , installationEntry];\n          }\n\n        case 7:\n          return [2\n          /*return*/\n          , entry];\n      }\n    });\n  });\n}\n/**\r\n * Called only if there is a CreateInstallation request in progress.\r\n *\r\n * Updates the InstallationEntry in the DB based on the status of the\r\n * CreateInstallation request.\r\n *\r\n * Returns the updated InstallationEntry.\r\n */\n\n\nfunction updateInstallationRequest(appConfig) {\n  return update(appConfig, function (oldEntry) {\n    if (!oldEntry) {\n      throw ERROR_FACTORY.create(\"installation-not-found\"\n      /* INSTALLATION_NOT_FOUND */\n      );\n    }\n\n    return clearTimedOutRequest(oldEntry);\n  });\n}\n\nfunction clearTimedOutRequest(entry) {\n  if (hasInstallationRequestTimedOut(entry)) {\n    return {\n      fid: entry.fid,\n      registrationStatus: 0\n      /* NOT_STARTED */\n\n    };\n  }\n\n  return entry;\n}\n\nfunction hasInstallationRequestTimedOut(installationEntry) {\n  return installationEntry.registrationStatus === 1\n  /* IN_PROGRESS */\n  && installationEntry.registrationTime + PENDING_TIMEOUT_MS < Date.now();\n}\n/**\r\n * @license\r\n * Copyright 2019 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\n\nfunction generateAuthTokenRequest(_a, installationEntry) {\n  var appConfig = _a.appConfig,\n      platformLoggerProvider = _a.platformLoggerProvider;\n  return __awaiter(this, void 0, void 0, function () {\n    var endpoint, headers, platformLogger, body, request, response, responseValue, completedAuthToken;\n    return __generator(this, function (_b) {\n      switch (_b.label) {\n        case 0:\n          endpoint = getGenerateAuthTokenEndpoint(appConfig, installationEntry);\n          headers = getHeadersWithAuth(appConfig, installationEntry);\n          platformLogger = platformLoggerProvider.getImmediate({\n            optional: true\n          });\n\n          if (platformLogger) {\n            headers.append('x-firebase-client', platformLogger.getPlatformInfoString());\n          }\n\n          body = {\n            installation: {\n              sdkVersion: PACKAGE_VERSION\n            }\n          };\n          request = {\n            method: 'POST',\n            headers: headers,\n            body: JSON.stringify(body)\n          };\n          return [4\n          /*yield*/\n          , retryIfServerError(function () {\n            return fetch(endpoint, request);\n          })];\n\n        case 1:\n          response = _b.sent();\n          if (!response.ok) return [3\n          /*break*/\n          , 3];\n          return [4\n          /*yield*/\n          , response.json()];\n\n        case 2:\n          responseValue = _b.sent();\n          completedAuthToken = extractAuthTokenInfoFromResponse(responseValue);\n          return [2\n          /*return*/\n          , completedAuthToken];\n\n        case 3:\n          return [4\n          /*yield*/\n          , getErrorFromResponse('Generate Auth Token', response)];\n\n        case 4:\n          throw _b.sent();\n      }\n    });\n  });\n}\n\nfunction getGenerateAuthTokenEndpoint(appConfig, _a) {\n  var fid = _a.fid;\n  return getInstallationsEndpoint(appConfig) + \"/\" + fid + \"/authTokens:generate\";\n}\n/**\r\n * @license\r\n * Copyright 2019 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\n/**\r\n * Returns a valid authentication token for the installation. Generates a new\r\n * token if one doesn't exist, is expired or about to expire.\r\n *\r\n * Should only be called if the Firebase Installation is registered.\r\n */\n\n\nfunction refreshAuthToken(dependencies, forceRefresh) {\n  if (forceRefresh === void 0) {\n    forceRefresh = false;\n  }\n\n  return __awaiter(this, void 0, void 0, function () {\n    var tokenPromise, entry, authToken, _a;\n\n    return __generator(this, function (_b) {\n      switch (_b.label) {\n        case 0:\n          return [4\n          /*yield*/\n          , update(dependencies.appConfig, function (oldEntry) {\n            if (!isEntryRegistered(oldEntry)) {\n              throw ERROR_FACTORY.create(\"not-registered\"\n              /* NOT_REGISTERED */\n              );\n            }\n\n            var oldAuthToken = oldEntry.authToken;\n\n            if (!forceRefresh && isAuthTokenValid(oldAuthToken)) {\n              // There is a valid token in the DB.\n              return oldEntry;\n            } else if (oldAuthToken.requestStatus === 1\n            /* IN_PROGRESS */\n            ) {\n              // There already is a token request in progress.\n              tokenPromise = waitUntilAuthTokenRequest(dependencies, forceRefresh);\n              return oldEntry;\n            } else {\n              // No token or token expired.\n              if (!navigator.onLine) {\n                throw ERROR_FACTORY.create(\"app-offline\"\n                /* APP_OFFLINE */\n                );\n              }\n\n              var inProgressEntry = makeAuthTokenRequestInProgressEntry(oldEntry);\n              tokenPromise = fetchAuthTokenFromServer(dependencies, inProgressEntry);\n              return inProgressEntry;\n            }\n          })];\n\n        case 1:\n          entry = _b.sent();\n          if (!tokenPromise) return [3\n          /*break*/\n          , 3];\n          return [4\n          /*yield*/\n          , tokenPromise];\n\n        case 2:\n          _a = _b.sent();\n          return [3\n          /*break*/\n          , 4];\n\n        case 3:\n          _a = entry.authToken;\n          _b.label = 4;\n\n        case 4:\n          authToken = _a;\n          return [2\n          /*return*/\n          , authToken];\n      }\n    });\n  });\n}\n/**\r\n * Call only if FID is registered and Auth Token request is in progress.\r\n *\r\n * Waits until the current pending request finishes. If the request times out,\r\n * tries once in this thread as well.\r\n */\n\n\nfunction waitUntilAuthTokenRequest(dependencies, forceRefresh) {\n  return __awaiter(this, void 0, void 0, function () {\n    var entry, authToken;\n    return __generator(this, function (_a) {\n      switch (_a.label) {\n        case 0:\n          return [4\n          /*yield*/\n          , updateAuthTokenRequest(dependencies.appConfig)];\n\n        case 1:\n          entry = _a.sent();\n          _a.label = 2;\n\n        case 2:\n          if (!(entry.authToken.requestStatus === 1\n          /* IN_PROGRESS */\n          )) return [3\n          /*break*/\n          , 5]; // generateAuthToken still in progress.\n\n          return [4\n          /*yield*/\n          , sleep(100)];\n\n        case 3:\n          // generateAuthToken still in progress.\n          _a.sent();\n\n          return [4\n          /*yield*/\n          , updateAuthTokenRequest(dependencies.appConfig)];\n\n        case 4:\n          entry = _a.sent();\n          return [3\n          /*break*/\n          , 2];\n\n        case 5:\n          authToken = entry.authToken;\n\n          if (authToken.requestStatus === 0\n          /* NOT_STARTED */\n          ) {\n            // The request timed out or failed in a different call. Try again.\n            return [2\n            /*return*/\n            , refreshAuthToken(dependencies, forceRefresh)];\n          } else {\n            return [2\n            /*return*/\n            , authToken];\n          }\n\n      }\n    });\n  });\n}\n/**\r\n * Called only if there is a GenerateAuthToken request in progress.\r\n *\r\n * Updates the InstallationEntry in the DB based on the status of the\r\n * GenerateAuthToken request.\r\n *\r\n * Returns the updated InstallationEntry.\r\n */\n\n\nfunction updateAuthTokenRequest(appConfig) {\n  return update(appConfig, function (oldEntry) {\n    if (!isEntryRegistered(oldEntry)) {\n      throw ERROR_FACTORY.create(\"not-registered\"\n      /* NOT_REGISTERED */\n      );\n    }\n\n    var oldAuthToken = oldEntry.authToken;\n\n    if (hasAuthTokenRequestTimedOut(oldAuthToken)) {\n      return __assign(__assign({}, oldEntry), {\n        authToken: {\n          requestStatus: 0\n          /* NOT_STARTED */\n\n        }\n      });\n    }\n\n    return oldEntry;\n  });\n}\n\nfunction fetchAuthTokenFromServer(dependencies, installationEntry) {\n  return __awaiter(this, void 0, void 0, function () {\n    var authToken, updatedInstallationEntry, e_1, updatedInstallationEntry;\n    return __generator(this, function (_a) {\n      switch (_a.label) {\n        case 0:\n          _a.trys.push([0, 3,, 8]);\n\n          return [4\n          /*yield*/\n          , generateAuthTokenRequest(dependencies, installationEntry)];\n\n        case 1:\n          authToken = _a.sent();\n          updatedInstallationEntry = __assign(__assign({}, installationEntry), {\n            authToken: authToken\n          });\n          return [4\n          /*yield*/\n          , set(dependencies.appConfig, updatedInstallationEntry)];\n\n        case 2:\n          _a.sent();\n\n          return [2\n          /*return*/\n          , authToken];\n\n        case 3:\n          e_1 = _a.sent();\n          if (!(isServerError(e_1) && (e_1.customData.serverCode === 401 || e_1.customData.serverCode === 404))) return [3\n          /*break*/\n          , 5]; // Server returned a \"FID not found\" or a \"Invalid authentication\" error.\n          // Generate a new ID next time.\n\n          return [4\n          /*yield*/\n          , remove(dependencies.appConfig)];\n\n        case 4:\n          // Server returned a \"FID not found\" or a \"Invalid authentication\" error.\n          // Generate a new ID next time.\n          _a.sent();\n\n          return [3\n          /*break*/\n          , 7];\n\n        case 5:\n          updatedInstallationEntry = __assign(__assign({}, installationEntry), {\n            authToken: {\n              requestStatus: 0\n              /* NOT_STARTED */\n\n            }\n          });\n          return [4\n          /*yield*/\n          , set(dependencies.appConfig, updatedInstallationEntry)];\n\n        case 6:\n          _a.sent();\n\n          _a.label = 7;\n\n        case 7:\n          throw e_1;\n\n        case 8:\n          return [2\n          /*return*/\n          ];\n      }\n    });\n  });\n}\n\nfunction isEntryRegistered(installationEntry) {\n  return installationEntry !== undefined && installationEntry.registrationStatus === 2\n  /* COMPLETED */\n  ;\n}\n\nfunction isAuthTokenValid(authToken) {\n  return authToken.requestStatus === 2\n  /* COMPLETED */\n  && !isAuthTokenExpired(authToken);\n}\n\nfunction isAuthTokenExpired(authToken) {\n  var now = Date.now();\n  return now < authToken.creationTime || authToken.creationTime + authToken.expiresIn < now + TOKEN_EXPIRATION_BUFFER;\n}\n/** Returns an updated InstallationEntry with an InProgressAuthToken. */\n\n\nfunction makeAuthTokenRequestInProgressEntry(oldEntry) {\n  var inProgressAuthToken = {\n    requestStatus: 1\n    /* IN_PROGRESS */\n    ,\n    requestTime: Date.now()\n  };\n  return __assign(__assign({}, oldEntry), {\n    authToken: inProgressAuthToken\n  });\n}\n\nfunction hasAuthTokenRequestTimedOut(authToken) {\n  return authToken.requestStatus === 1\n  /* IN_PROGRESS */\n  && authToken.requestTime + PENDING_TIMEOUT_MS < Date.now();\n}\n/**\r\n * @license\r\n * Copyright 2019 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\n\nfunction getId(dependencies) {\n  return __awaiter(this, void 0, void 0, function () {\n    var _a, installationEntry, registrationPromise;\n\n    return __generator(this, function (_b) {\n      switch (_b.label) {\n        case 0:\n          return [4\n          /*yield*/\n          , getInstallationEntry(dependencies.appConfig)];\n\n        case 1:\n          _a = _b.sent(), installationEntry = _a.installationEntry, registrationPromise = _a.registrationPromise;\n\n          if (registrationPromise) {\n            registrationPromise.catch(console.error);\n          } else {\n            // If the installation is already registered, update the authentication\n            // token if needed.\n            refreshAuthToken(dependencies).catch(console.error);\n          }\n\n          return [2\n          /*return*/\n          , installationEntry.fid];\n      }\n    });\n  });\n}\n/**\r\n * @license\r\n * Copyright 2019 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\n\nfunction getToken(dependencies, forceRefresh) {\n  if (forceRefresh === void 0) {\n    forceRefresh = false;\n  }\n\n  return __awaiter(this, void 0, void 0, function () {\n    var authToken;\n    return __generator(this, function (_a) {\n      switch (_a.label) {\n        case 0:\n          return [4\n          /*yield*/\n          , completeInstallationRegistration(dependencies.appConfig)];\n\n        case 1:\n          _a.sent();\n\n          return [4\n          /*yield*/\n          , refreshAuthToken(dependencies, forceRefresh)];\n\n        case 2:\n          authToken = _a.sent();\n          return [2\n          /*return*/\n          , authToken.token];\n      }\n    });\n  });\n}\n\nfunction completeInstallationRegistration(appConfig) {\n  return __awaiter(this, void 0, void 0, function () {\n    var registrationPromise;\n    return __generator(this, function (_a) {\n      switch (_a.label) {\n        case 0:\n          return [4\n          /*yield*/\n          , getInstallationEntry(appConfig)];\n\n        case 1:\n          registrationPromise = _a.sent().registrationPromise;\n          if (!registrationPromise) return [3\n          /*break*/\n          , 3]; // A createInstallation request is in progress. Wait until it finishes.\n\n          return [4\n          /*yield*/\n          , registrationPromise];\n\n        case 2:\n          // A createInstallation request is in progress. Wait until it finishes.\n          _a.sent();\n\n          _a.label = 3;\n\n        case 3:\n          return [2\n          /*return*/\n          ];\n      }\n    });\n  });\n}\n/**\r\n * @license\r\n * Copyright 2019 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\n\nfunction deleteInstallationRequest(appConfig, installationEntry) {\n  return __awaiter(this, void 0, void 0, function () {\n    var endpoint, headers, request, response;\n    return __generator(this, function (_a) {\n      switch (_a.label) {\n        case 0:\n          endpoint = getDeleteEndpoint(appConfig, installationEntry);\n          headers = getHeadersWithAuth(appConfig, installationEntry);\n          request = {\n            method: 'DELETE',\n            headers: headers\n          };\n          return [4\n          /*yield*/\n          , retryIfServerError(function () {\n            return fetch(endpoint, request);\n          })];\n\n        case 1:\n          response = _a.sent();\n          if (!!response.ok) return [3\n          /*break*/\n          , 3];\n          return [4\n          /*yield*/\n          , getErrorFromResponse('Delete Installation', response)];\n\n        case 2:\n          throw _a.sent();\n\n        case 3:\n          return [2\n          /*return*/\n          ];\n      }\n    });\n  });\n}\n\nfunction getDeleteEndpoint(appConfig, _a) {\n  var fid = _a.fid;\n  return getInstallationsEndpoint(appConfig) + \"/\" + fid;\n}\n/**\r\n * @license\r\n * Copyright 2019 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\n\nfunction deleteInstallation(dependencies) {\n  return __awaiter(this, void 0, void 0, function () {\n    var appConfig, entry;\n    return __generator(this, function (_a) {\n      switch (_a.label) {\n        case 0:\n          appConfig = dependencies.appConfig;\n          return [4\n          /*yield*/\n          , update(appConfig, function (oldEntry) {\n            if (oldEntry && oldEntry.registrationStatus === 0\n            /* NOT_STARTED */\n            ) {\n              // Delete the unregistered entry without sending a deleteInstallation request.\n              return undefined;\n            }\n\n            return oldEntry;\n          })];\n\n        case 1:\n          entry = _a.sent();\n          if (!entry) return [3\n          /*break*/\n          , 6];\n          if (!(entry.registrationStatus === 1\n          /* IN_PROGRESS */\n          )) return [3\n          /*break*/\n          , 2]; // Can't delete while trying to register.\n\n          throw ERROR_FACTORY.create(\"delete-pending-registration\"\n          /* DELETE_PENDING_REGISTRATION */\n          );\n\n        case 2:\n          if (!(entry.registrationStatus === 2\n          /* COMPLETED */\n          )) return [3\n          /*break*/\n          , 6];\n          if (!!navigator.onLine) return [3\n          /*break*/\n          , 3];\n          throw ERROR_FACTORY.create(\"app-offline\"\n          /* APP_OFFLINE */\n          );\n\n        case 3:\n          return [4\n          /*yield*/\n          , deleteInstallationRequest(appConfig, entry)];\n\n        case 4:\n          _a.sent();\n\n          return [4\n          /*yield*/\n          , remove(appConfig)];\n\n        case 5:\n          _a.sent();\n\n          _a.label = 6;\n\n        case 6:\n          return [2\n          /*return*/\n          ];\n      }\n    });\n  });\n}\n/**\r\n * @license\r\n * Copyright 2019 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\n/**\r\n * Sets a new callback that will get called when Installation ID changes.\r\n * Returns an unsubscribe function that will remove the callback when called.\r\n */\n\n\nfunction onIdChange(_a, callback) {\n  var appConfig = _a.appConfig;\n  addCallback(appConfig, callback);\n  return function () {\n    removeCallback(appConfig, callback);\n  };\n}\n/**\r\n * @license\r\n * Copyright 2019 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\n\nfunction extractAppConfig(app) {\n  var e_1, _a;\n\n  if (!app || !app.options) {\n    throw getMissingValueError('App Configuration');\n  }\n\n  if (!app.name) {\n    throw getMissingValueError('App Name');\n  } // Required app config keys\n\n\n  var configKeys = ['projectId', 'apiKey', 'appId'];\n\n  try {\n    for (var configKeys_1 = __values(configKeys), configKeys_1_1 = configKeys_1.next(); !configKeys_1_1.done; configKeys_1_1 = configKeys_1.next()) {\n      var keyName = configKeys_1_1.value;\n\n      if (!app.options[keyName]) {\n        throw getMissingValueError(keyName);\n      }\n    }\n  } catch (e_1_1) {\n    e_1 = {\n      error: e_1_1\n    };\n  } finally {\n    try {\n      if (configKeys_1_1 && !configKeys_1_1.done && (_a = configKeys_1.return)) _a.call(configKeys_1);\n    } finally {\n      if (e_1) throw e_1.error;\n    }\n  }\n\n  return {\n    appName: app.name,\n    projectId: app.options.projectId,\n    apiKey: app.options.apiKey,\n    appId: app.options.appId\n  };\n}\n\nfunction getMissingValueError(valueName) {\n  return ERROR_FACTORY.create(\"missing-app-config-values\"\n  /* MISSING_APP_CONFIG_VALUES */\n  , {\n    valueName: valueName\n  });\n}\n/**\r\n * @license\r\n * Copyright 2019 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\n\nfunction registerInstallations(instance) {\n  var installationsName = 'installations';\n  instance.INTERNAL.registerComponent(new Component(installationsName, function (container) {\n    var app = container.getProvider('app').getImmediate(); // Throws if app isn't configured properly.\n\n    var appConfig = extractAppConfig(app);\n    var platformLoggerProvider = container.getProvider('platform-logger');\n    var dependencies = {\n      appConfig: appConfig,\n      platformLoggerProvider: platformLoggerProvider\n    };\n    var installations = {\n      app: app,\n      getId: function () {\n        return getId(dependencies);\n      },\n      getToken: function (forceRefresh) {\n        return getToken(dependencies, forceRefresh);\n      },\n      delete: function () {\n        return deleteInstallation(dependencies);\n      },\n      onIdChange: function (callback) {\n        return onIdChange(dependencies, callback);\n      }\n    };\n    return installations;\n  }, \"PUBLIC\"\n  /* PUBLIC */\n  ));\n  instance.registerVersion(name, version);\n}\n\nregisterInstallations(firebase);\nexport { registerInstallations };","map":{"version":3,"mappings":"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","names":["PENDING_TIMEOUT_MS","PACKAGE_VERSION","version","INTERNAL_AUTH_VERSION","INSTALLATIONS_API_URL","TOKEN_EXPIRATION_BUFFER","SERVICE","SERVICE_NAME","ERROR_DESCRIPTION_MAP","_a","ERROR_FACTORY","ErrorFactory","isServerError","error","FirebaseError","code","includes","getInstallationsEndpoint","projectId","extractAuthTokenInfoFromResponse","response","token","requestStatus","expiresIn","getExpiresInFromResponseExpiresIn","creationTime","Date","now","getErrorFromResponse","requestName","json","responseJson","errorData","create","serverCode","serverMessage","message","serverStatus","status","getHeaders","apiKey","Headers","Accept","getHeadersWithAuth","appConfig","refreshToken","headers","append","getAuthorizationHeader","retryIfServerError","fn","result","responseExpiresIn","Number","replace","createInstallationRequest","fid","endpoint","body","authVersion","appId","sdkVersion","request","method","JSON","stringify","_b","ok","responseValue","registeredInstallationEntry","registrationStatus","authToken","sleep","ms","Promise","setTimeout","resolve","bufferToBase64UrlSafe","array","b64","btoa","String","fromCharCode","apply","__spreadArray","VALID_FID_PATTERN","INVALID_FID","generateFid","fidByteArray","Uint8Array","crypto_1","self","crypto","msCrypto","getRandomValues","encode","test","b64String","substr","getKey","appName","fidChangeCallbacks","Map","fidChanged","key","callFidChangeCallbacks","broadcastFidChange","addCallback","callback","getBroadcastChannel","callbackSet","get","Set","set","add","removeCallback","delete","size","closeBroadcastChannel","callbacks","callbacks_1_1","channel","postMessage","broadcastChannel","BroadcastChannel","onmessage","e","data","close","DATABASE_NAME","DATABASE_VERSION","OBJECT_STORE_NAME","dbPromise","getDbPromise","openDb","upgradeDB","oldVersion","createObjectStore","value","db","tx","transaction","objectStore","oldValue","put","complete","remove","update","updateFn","store","newValue","undefined","getInstallationEntry","installationEntry","updateOrCreateInstallationEntry","oldEntry","entryWithPromise","triggerRegistrationIfNecessary","registrationPromise","entry","clearTimedOutRequest","navigator","onLine","registrationPromiseWithError","reject","inProgressEntry","registrationTime","registerInstallation","waitUntilFidRegistration","e_1","customData","updateInstallationRequest","hasInstallationRequestTimedOut","generateAuthTokenRequest","platformLoggerProvider","getGenerateAuthTokenEndpoint","platformLogger","getImmediate","optional","getPlatformInfoString","installation","completedAuthToken","refreshAuthToken","dependencies","forceRefresh","isEntryRegistered","oldAuthToken","isAuthTokenValid","tokenPromise","waitUntilAuthTokenRequest","makeAuthTokenRequestInProgressEntry","fetchAuthTokenFromServer","updateAuthTokenRequest","hasAuthTokenRequestTimedOut","updatedInstallationEntry","isAuthTokenExpired","inProgressAuthToken","requestTime","getId","catch","console","getToken","completeInstallationRegistration","deleteInstallationRequest","getDeleteEndpoint","deleteInstallation","onIdChange","extractAppConfig","app","options","getMissingValueError","name","configKeys","configKeys_1_1","keyName","valueName","registerInstallations","instance","installationsName","INTERNAL","registerComponent","Component","container","getProvider","installations","registerVersion","firebase"],"sources":["E:\\FYP\\HospitalAid\\Implementation\\Web App\\Website\\node_modules\\@firebase\\installations\\src\\util\\constants.ts","E:\\FYP\\HospitalAid\\Implementation\\Web App\\Website\\node_modules\\@firebase\\installations\\src\\util\\errors.ts","E:\\FYP\\HospitalAid\\Implementation\\Web App\\Website\\node_modules\\@firebase\\installations\\src\\api\\common.ts","E:\\FYP\\HospitalAid\\Implementation\\Web App\\Website\\node_modules\\@firebase\\installations\\src\\api\\create-installation-request.ts","E:\\FYP\\HospitalAid\\Implementation\\Web App\\Website\\node_modules\\@firebase\\installations\\src\\util\\sleep.ts","E:\\FYP\\HospitalAid\\Implementation\\Web App\\Website\\node_modules\\@firebase\\installations\\src\\helpers\\buffer-to-base64-url-safe.ts","E:\\FYP\\HospitalAid\\Implementation\\Web App\\Website\\node_modules\\@firebase\\installations\\src\\helpers\\generate-fid.ts","E:\\FYP\\HospitalAid\\Implementation\\Web App\\Website\\node_modules\\@firebase\\installations\\src\\util\\get-key.ts","E:\\FYP\\HospitalAid\\Implementation\\Web App\\Website\\node_modules\\@firebase\\installations\\src\\helpers\\fid-changed.ts","E:\\FYP\\HospitalAid\\Implementation\\Web App\\Website\\node_modules\\@firebase\\installations\\src\\helpers\\idb-manager.ts","E:\\FYP\\HospitalAid\\Implementation\\Web App\\Website\\node_modules\\@firebase\\installations\\src\\helpers\\get-installation-entry.ts","E:\\FYP\\HospitalAid\\Implementation\\Web App\\Website\\node_modules\\@firebase\\installations\\src\\api\\generate-auth-token-request.ts","E:\\FYP\\HospitalAid\\Implementation\\Web App\\Website\\node_modules\\@firebase\\installations\\src\\helpers\\refresh-auth-token.ts","E:\\FYP\\HospitalAid\\Implementation\\Web App\\Website\\node_modules\\@firebase\\installations\\src\\functions\\get-id.ts","E:\\FYP\\HospitalAid\\Implementation\\Web App\\Website\\node_modules\\@firebase\\installations\\src\\functions\\get-token.ts","E:\\FYP\\HospitalAid\\Implementation\\Web App\\Website\\node_modules\\@firebase\\installations\\src\\api\\delete-installation-request.ts","E:\\FYP\\HospitalAid\\Implementation\\Web App\\Website\\node_modules\\@firebase\\installations\\src\\functions\\delete-installation.ts","E:\\FYP\\HospitalAid\\Implementation\\Web App\\Website\\node_modules\\@firebase\\installations\\src\\functions\\on-id-change.ts","E:\\FYP\\HospitalAid\\Implementation\\Web App\\Website\\node_modules\\@firebase\\installations\\src\\helpers\\extract-app-config.ts","E:\\FYP\\HospitalAid\\Implementation\\Web App\\Website\\node_modules\\@firebase\\installations\\src\\index.ts"],"sourcesContent":["/**\n * @license\n * Copyright 2019 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { version } from '../../package.json';\n\nexport const PENDING_TIMEOUT_MS = 10000;\n\nexport const PACKAGE_VERSION = `w:${version}`;\nexport const INTERNAL_AUTH_VERSION = 'FIS_v2';\n\nexport const INSTALLATIONS_API_URL =\n  'https://firebaseinstallations.googleapis.com/v1';\n\nexport const TOKEN_EXPIRATION_BUFFER = 60 * 60 * 1000; // One hour\n\nexport const SERVICE = 'installations';\nexport const SERVICE_NAME = 'Installations';\n","/**\n * @license\n * Copyright 2019 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { ErrorFactory, FirebaseError } from '@firebase/util';\nimport { SERVICE, SERVICE_NAME } from './constants';\n\nexport const enum ErrorCode {\n  MISSING_APP_CONFIG_VALUES = 'missing-app-config-values',\n  NOT_REGISTERED = 'not-registered',\n  INSTALLATION_NOT_FOUND = 'installation-not-found',\n  REQUEST_FAILED = 'request-failed',\n  APP_OFFLINE = 'app-offline',\n  DELETE_PENDING_REGISTRATION = 'delete-pending-registration'\n}\n\nconst ERROR_DESCRIPTION_MAP: { readonly [key in ErrorCode]: string } = {\n  [ErrorCode.MISSING_APP_CONFIG_VALUES]:\n    'Missing App configuration value: \"{$valueName}\"',\n  [ErrorCode.NOT_REGISTERED]: 'Firebase Installation is not registered.',\n  [ErrorCode.INSTALLATION_NOT_FOUND]: 'Firebase Installation not found.',\n  [ErrorCode.REQUEST_FAILED]:\n    '{$requestName} request failed with error \"{$serverCode} {$serverStatus}: {$serverMessage}\"',\n  [ErrorCode.APP_OFFLINE]: 'Could not process request. Application offline.',\n  [ErrorCode.DELETE_PENDING_REGISTRATION]:\n    \"Can't delete installation while there is a pending registration request.\"\n};\n\ninterface ErrorParams {\n  [ErrorCode.MISSING_APP_CONFIG_VALUES]: {\n    valueName: string;\n  };\n  [ErrorCode.REQUEST_FAILED]: {\n    requestName: string;\n    [index: string]: string | number; // to make Typescript 3.8 happy\n  } & ServerErrorData;\n}\n\nexport const ERROR_FACTORY = new ErrorFactory<ErrorCode, ErrorParams>(\n  SERVICE,\n  SERVICE_NAME,\n  ERROR_DESCRIPTION_MAP\n);\n\nexport interface ServerErrorData {\n  serverCode: number;\n  serverMessage: string;\n  serverStatus: string;\n}\n\nexport type ServerError = FirebaseError & { customData: ServerErrorData };\n\n/** Returns true if error is a FirebaseError that is based on an error from the server. */\nexport function isServerError(error: unknown): error is ServerError {\n  return (\n    error instanceof FirebaseError &&\n    error.code.includes(ErrorCode.REQUEST_FAILED)\n  );\n}\n","/**\n * @license\n * Copyright 2019 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { FirebaseError } from '@firebase/util';\nimport { GenerateAuthTokenResponse } from '../interfaces/api-response';\nimport { AppConfig } from '../interfaces/app-config';\nimport {\n  CompletedAuthToken,\n  RegisteredInstallationEntry,\n  RequestStatus\n} from '../interfaces/installation-entry';\nimport {\n  INSTALLATIONS_API_URL,\n  INTERNAL_AUTH_VERSION\n} from '../util/constants';\nimport { ERROR_FACTORY, ErrorCode } from '../util/errors';\n\nexport function getInstallationsEndpoint({ projectId }: AppConfig): string {\n  return `${INSTALLATIONS_API_URL}/projects/${projectId}/installations`;\n}\n\nexport function extractAuthTokenInfoFromResponse(\n  response: GenerateAuthTokenResponse\n): CompletedAuthToken {\n  return {\n    token: response.token,\n    requestStatus: RequestStatus.COMPLETED,\n    expiresIn: getExpiresInFromResponseExpiresIn(response.expiresIn),\n    creationTime: Date.now()\n  };\n}\n\nexport async function getErrorFromResponse(\n  requestName: string,\n  response: Response\n): Promise<FirebaseError> {\n  const responseJson: ErrorResponse = await response.json();\n  const errorData = responseJson.error;\n  return ERROR_FACTORY.create(ErrorCode.REQUEST_FAILED, {\n    requestName,\n    serverCode: errorData.code,\n    serverMessage: errorData.message,\n    serverStatus: errorData.status\n  });\n}\n\nexport function getHeaders({ apiKey }: AppConfig): Headers {\n  return new Headers({\n    'Content-Type': 'application/json',\n    Accept: 'application/json',\n    'x-goog-api-key': apiKey\n  });\n}\n\nexport function getHeadersWithAuth(\n  appConfig: AppConfig,\n  { refreshToken }: RegisteredInstallationEntry\n): Headers {\n  const headers = getHeaders(appConfig);\n  headers.append('Authorization', getAuthorizationHeader(refreshToken));\n  return headers;\n}\n\nexport interface ErrorResponse {\n  error: {\n    code: number;\n    message: string;\n    status: string;\n  };\n}\n\n/**\n * Calls the passed in fetch wrapper and returns the response.\n * If the returned response has a status of 5xx, re-runs the function once and\n * returns the response.\n */\nexport async function retryIfServerError(\n  fn: () => Promise<Response>\n): Promise<Response> {\n  const result = await fn();\n\n  if (result.status >= 500 && result.status < 600) {\n    // Internal Server Error. Retry request.\n    return fn();\n  }\n\n  return result;\n}\n\nfunction getExpiresInFromResponseExpiresIn(responseExpiresIn: string): number {\n  // This works because the server will never respond with fractions of a second.\n  return Number(responseExpiresIn.replace('s', '000'));\n}\n\nfunction getAuthorizationHeader(refreshToken: string): string {\n  return `${INTERNAL_AUTH_VERSION} ${refreshToken}`;\n}\n","/**\n * @license\n * Copyright 2019 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { CreateInstallationResponse } from '../interfaces/api-response';\nimport { AppConfig } from '../interfaces/app-config';\nimport {\n  InProgressInstallationEntry,\n  RegisteredInstallationEntry,\n  RequestStatus\n} from '../interfaces/installation-entry';\nimport { INTERNAL_AUTH_VERSION, PACKAGE_VERSION } from '../util/constants';\nimport {\n  extractAuthTokenInfoFromResponse,\n  getErrorFromResponse,\n  getHeaders,\n  getInstallationsEndpoint,\n  retryIfServerError\n} from './common';\n\nexport async function createInstallationRequest(\n  appConfig: AppConfig,\n  { fid }: InProgressInstallationEntry\n): Promise<RegisteredInstallationEntry> {\n  const endpoint = getInstallationsEndpoint(appConfig);\n\n  const headers = getHeaders(appConfig);\n  const body = {\n    fid,\n    authVersion: INTERNAL_AUTH_VERSION,\n    appId: appConfig.appId,\n    sdkVersion: PACKAGE_VERSION\n  };\n\n  const request: RequestInit = {\n    method: 'POST',\n    headers,\n    body: JSON.stringify(body)\n  };\n\n  const response = await retryIfServerError(() => fetch(endpoint, request));\n  if (response.ok) {\n    const responseValue: CreateInstallationResponse = await response.json();\n    const registeredInstallationEntry: RegisteredInstallationEntry = {\n      fid: responseValue.fid || fid,\n      registrationStatus: RequestStatus.COMPLETED,\n      refreshToken: responseValue.refreshToken,\n      authToken: extractAuthTokenInfoFromResponse(responseValue.authToken)\n    };\n    return registeredInstallationEntry;\n  } else {\n    throw await getErrorFromResponse('Create Installation', response);\n  }\n}\n","/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/** Returns a promise that resolves after given time passes. */\nexport function sleep(ms: number): Promise<void> {\n  return new Promise<void>(resolve => {\n    setTimeout(resolve, ms);\n  });\n}\n","/**\n * @license\n * Copyright 2019 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nexport function bufferToBase64UrlSafe(array: Uint8Array): string {\n  const b64 = btoa(String.fromCharCode(...array));\n  return b64.replace(/\\+/g, '-').replace(/\\//g, '_');\n}\n","/**\n * @license\n * Copyright 2019 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { bufferToBase64UrlSafe } from './buffer-to-base64-url-safe';\n\nexport const VALID_FID_PATTERN = /^[cdef][\\w-]{21}$/;\nexport const INVALID_FID = '';\n\n/**\n * Generates a new FID using random values from Web Crypto API.\n * Returns an empty string if FID generation fails for any reason.\n */\nexport function generateFid(): string {\n  try {\n    // A valid FID has exactly 22 base64 characters, which is 132 bits, or 16.5\n    // bytes. our implementation generates a 17 byte array instead.\n    const fidByteArray = new Uint8Array(17);\n    const crypto =\n      self.crypto || ((self as unknown) as { msCrypto: Crypto }).msCrypto;\n    crypto.getRandomValues(fidByteArray);\n\n    // Replace the first 4 random bits with the constant FID header of 0b0111.\n    fidByteArray[0] = 0b01110000 + (fidByteArray[0] % 0b00010000);\n\n    const fid = encode(fidByteArray);\n\n    return VALID_FID_PATTERN.test(fid) ? fid : INVALID_FID;\n  } catch {\n    // FID generation errored\n    return INVALID_FID;\n  }\n}\n\n/** Converts a FID Uint8Array to a base64 string representation. */\nfunction encode(fidByteArray: Uint8Array): string {\n  const b64String = bufferToBase64UrlSafe(fidByteArray);\n\n  // Remove the 23rd character that was added because of the extra 4 bits at the\n  // end of our 17 byte array, and the '=' padding.\n  return b64String.substr(0, 22);\n}\n","/**\n * @license\n * Copyright 2019 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { AppConfig } from '../interfaces/app-config';\n\n/** Returns a string key that can be used to identify the app. */\nexport function getKey(appConfig: AppConfig): string {\n  return `${appConfig.appName}!${appConfig.appId}`;\n}\n","/**\n * @license\n * Copyright 2019 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { getKey } from '../util/get-key';\nimport { AppConfig } from '../interfaces/app-config';\nimport { IdChangeCallbackFn } from '../functions';\n\nconst fidChangeCallbacks: Map<string, Set<IdChangeCallbackFn>> = new Map();\n\n/**\n * Calls the onIdChange callbacks with the new FID value, and broadcasts the\n * change to other tabs.\n */\nexport function fidChanged(appConfig: AppConfig, fid: string): void {\n  const key = getKey(appConfig);\n\n  callFidChangeCallbacks(key, fid);\n  broadcastFidChange(key, fid);\n}\n\nexport function addCallback(\n  appConfig: AppConfig,\n  callback: IdChangeCallbackFn\n): void {\n  // Open the broadcast channel if it's not already open,\n  // to be able to listen to change events from other tabs.\n  getBroadcastChannel();\n\n  const key = getKey(appConfig);\n\n  let callbackSet = fidChangeCallbacks.get(key);\n  if (!callbackSet) {\n    callbackSet = new Set();\n    fidChangeCallbacks.set(key, callbackSet);\n  }\n  callbackSet.add(callback);\n}\n\nexport function removeCallback(\n  appConfig: AppConfig,\n  callback: IdChangeCallbackFn\n): void {\n  const key = getKey(appConfig);\n\n  const callbackSet = fidChangeCallbacks.get(key);\n\n  if (!callbackSet) {\n    return;\n  }\n\n  callbackSet.delete(callback);\n  if (callbackSet.size === 0) {\n    fidChangeCallbacks.delete(key);\n  }\n\n  // Close broadcast channel if there are no more callbacks.\n  closeBroadcastChannel();\n}\n\nfunction callFidChangeCallbacks(key: string, fid: string): void {\n  const callbacks = fidChangeCallbacks.get(key);\n  if (!callbacks) {\n    return;\n  }\n\n  for (const callback of callbacks) {\n    callback(fid);\n  }\n}\n\nfunction broadcastFidChange(key: string, fid: string): void {\n  const channel = getBroadcastChannel();\n  if (channel) {\n    channel.postMessage({ key, fid });\n  }\n  closeBroadcastChannel();\n}\n\nlet broadcastChannel: BroadcastChannel | null = null;\n/** Opens and returns a BroadcastChannel if it is supported by the browser. */\nfunction getBroadcastChannel(): BroadcastChannel | null {\n  if (!broadcastChannel && 'BroadcastChannel' in self) {\n    broadcastChannel = new BroadcastChannel('[Firebase] FID Change');\n    broadcastChannel.onmessage = e => {\n      callFidChangeCallbacks(e.data.key, e.data.fid);\n    };\n  }\n  return broadcastChannel;\n}\n\nfunction closeBroadcastChannel(): void {\n  if (fidChangeCallbacks.size === 0 && broadcastChannel) {\n    broadcastChannel.close();\n    broadcastChannel = null;\n  }\n}\n","/**\n * @license\n * Copyright 2019 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { DB, openDb } from 'idb';\nimport { AppConfig } from '../interfaces/app-config';\nimport { InstallationEntry } from '../interfaces/installation-entry';\nimport { getKey } from '../util/get-key';\nimport { fidChanged } from './fid-changed';\n\nconst DATABASE_NAME = 'firebase-installations-database';\nconst DATABASE_VERSION = 1;\nconst OBJECT_STORE_NAME = 'firebase-installations-store';\n\nlet dbPromise: Promise<DB> | null = null;\nfunction getDbPromise(): Promise<DB> {\n  if (!dbPromise) {\n    dbPromise = openDb(DATABASE_NAME, DATABASE_VERSION, upgradeDB => {\n      // We don't use 'break' in this switch statement, the fall-through\n      // behavior is what we want, because if there are multiple versions between\n      // the old version and the current version, we want ALL the migrations\n      // that correspond to those versions to run, not only the last one.\n      // eslint-disable-next-line default-case\n      switch (upgradeDB.oldVersion) {\n        case 0:\n          upgradeDB.createObjectStore(OBJECT_STORE_NAME);\n      }\n    });\n  }\n  return dbPromise;\n}\n\n/** Gets record(s) from the objectStore that match the given key. */\nexport async function get(\n  appConfig: AppConfig\n): Promise<InstallationEntry | undefined> {\n  const key = getKey(appConfig);\n  const db = await getDbPromise();\n  return db\n    .transaction(OBJECT_STORE_NAME)\n    .objectStore(OBJECT_STORE_NAME)\n    .get(key);\n}\n\n/** Assigns or overwrites the record for the given key with the given value. */\nexport async function set<ValueType extends InstallationEntry>(\n  appConfig: AppConfig,\n  value: ValueType\n): Promise<ValueType> {\n  const key = getKey(appConfig);\n  const db = await getDbPromise();\n  const tx = db.transaction(OBJECT_STORE_NAME, 'readwrite');\n  const objectStore = tx.objectStore(OBJECT_STORE_NAME);\n  const oldValue = await objectStore.get(key);\n  await objectStore.put(value, key);\n  await tx.complete;\n\n  if (!oldValue || oldValue.fid !== value.fid) {\n    fidChanged(appConfig, value.fid);\n  }\n\n  return value;\n}\n\n/** Removes record(s) from the objectStore that match the given key. */\nexport async function remove(appConfig: AppConfig): Promise<void> {\n  const key = getKey(appConfig);\n  const db = await getDbPromise();\n  const tx = db.transaction(OBJECT_STORE_NAME, 'readwrite');\n  await tx.objectStore(OBJECT_STORE_NAME).delete(key);\n  await tx.complete;\n}\n\n/**\n * Atomically updates a record with the result of updateFn, which gets\n * called with the current value. If newValue is undefined, the record is\n * deleted instead.\n * @return Updated value\n */\nexport async function update<ValueType extends InstallationEntry | undefined>(\n  appConfig: AppConfig,\n  updateFn: (previousValue: InstallationEntry | undefined) => ValueType\n): Promise<ValueType> {\n  const key = getKey(appConfig);\n  const db = await getDbPromise();\n  const tx = db.transaction(OBJECT_STORE_NAME, 'readwrite');\n  const store = tx.objectStore(OBJECT_STORE_NAME);\n  const oldValue: InstallationEntry | undefined = await store.get(key);\n  const newValue = updateFn(oldValue);\n\n  if (newValue === undefined) {\n    await store.delete(key);\n  } else {\n    await store.put(newValue, key);\n  }\n  await tx.complete;\n\n  if (newValue && (!oldValue || oldValue.fid !== newValue.fid)) {\n    fidChanged(appConfig, newValue.fid);\n  }\n\n  return newValue;\n}\n\nexport async function clear(): Promise<void> {\n  const db = await getDbPromise();\n  const tx = db.transaction(OBJECT_STORE_NAME, 'readwrite');\n  await tx.objectStore(OBJECT_STORE_NAME).clear();\n  await tx.complete;\n}\n","/**\n * @license\n * Copyright 2019 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { createInstallationRequest } from '../api/create-installation-request';\nimport { AppConfig } from '../interfaces/app-config';\nimport {\n  InProgressInstallationEntry,\n  InstallationEntry,\n  RegisteredInstallationEntry,\n  RequestStatus\n} from '../interfaces/installation-entry';\nimport { PENDING_TIMEOUT_MS } from '../util/constants';\nimport { ERROR_FACTORY, ErrorCode, isServerError } from '../util/errors';\nimport { sleep } from '../util/sleep';\nimport { generateFid, INVALID_FID } from './generate-fid';\nimport { remove, set, update } from './idb-manager';\n\nexport interface InstallationEntryWithRegistrationPromise {\n  installationEntry: InstallationEntry;\n  /** Exist iff the installationEntry is not registered. */\n  registrationPromise?: Promise<RegisteredInstallationEntry>;\n}\n\n/**\n * Updates and returns the InstallationEntry from the database.\n * Also triggers a registration request if it is necessary and possible.\n */\nexport async function getInstallationEntry(\n  appConfig: AppConfig\n): Promise<InstallationEntryWithRegistrationPromise> {\n  let registrationPromise: Promise<RegisteredInstallationEntry> | undefined;\n\n  const installationEntry = await update(appConfig, oldEntry => {\n    const installationEntry = updateOrCreateInstallationEntry(oldEntry);\n    const entryWithPromise = triggerRegistrationIfNecessary(\n      appConfig,\n      installationEntry\n    );\n    registrationPromise = entryWithPromise.registrationPromise;\n    return entryWithPromise.installationEntry;\n  });\n\n  if (installationEntry.fid === INVALID_FID) {\n    // FID generation failed. Waiting for the FID from the server.\n    return { installationEntry: await registrationPromise! };\n  }\n\n  return {\n    installationEntry,\n    registrationPromise\n  };\n}\n\n/**\n * Creates a new Installation Entry if one does not exist.\n * Also clears timed out pending requests.\n */\nfunction updateOrCreateInstallationEntry(\n  oldEntry: InstallationEntry | undefined\n): InstallationEntry {\n  const entry: InstallationEntry = oldEntry || {\n    fid: generateFid(),\n    registrationStatus: RequestStatus.NOT_STARTED\n  };\n\n  return clearTimedOutRequest(entry);\n}\n\n/**\n * If the Firebase Installation is not registered yet, this will trigger the\n * registration and return an InProgressInstallationEntry.\n *\n * If registrationPromise does not exist, the installationEntry is guaranteed\n * to be registered.\n */\nfunction triggerRegistrationIfNecessary(\n  appConfig: AppConfig,\n  installationEntry: InstallationEntry\n): InstallationEntryWithRegistrationPromise {\n  if (installationEntry.registrationStatus === RequestStatus.NOT_STARTED) {\n    if (!navigator.onLine) {\n      // Registration required but app is offline.\n      const registrationPromiseWithError = Promise.reject(\n        ERROR_FACTORY.create(ErrorCode.APP_OFFLINE)\n      );\n      return {\n        installationEntry,\n        registrationPromise: registrationPromiseWithError\n      };\n    }\n\n    // Try registering. Change status to IN_PROGRESS.\n    const inProgressEntry: InProgressInstallationEntry = {\n      fid: installationEntry.fid,\n      registrationStatus: RequestStatus.IN_PROGRESS,\n      registrationTime: Date.now()\n    };\n    const registrationPromise = registerInstallation(\n      appConfig,\n      inProgressEntry\n    );\n    return { installationEntry: inProgressEntry, registrationPromise };\n  } else if (\n    installationEntry.registrationStatus === RequestStatus.IN_PROGRESS\n  ) {\n    return {\n      installationEntry,\n      registrationPromise: waitUntilFidRegistration(appConfig)\n    };\n  } else {\n    return { installationEntry };\n  }\n}\n\n/** This will be executed only once for each new Firebase Installation. */\nasync function registerInstallation(\n  appConfig: AppConfig,\n  installationEntry: InProgressInstallationEntry\n): Promise<RegisteredInstallationEntry> {\n  try {\n    const registeredInstallationEntry = await createInstallationRequest(\n      appConfig,\n      installationEntry\n    );\n    return set(appConfig, registeredInstallationEntry);\n  } catch (e) {\n    if (isServerError(e) && e.customData.serverCode === 409) {\n      // Server returned a \"FID can not be used\" error.\n      // Generate a new ID next time.\n      await remove(appConfig);\n    } else {\n      // Registration failed. Set FID as not registered.\n      await set(appConfig, {\n        fid: installationEntry.fid,\n        registrationStatus: RequestStatus.NOT_STARTED\n      });\n    }\n    throw e;\n  }\n}\n\n/** Call if FID registration is pending in another request. */\nasync function waitUntilFidRegistration(\n  appConfig: AppConfig\n): Promise<RegisteredInstallationEntry> {\n  // Unfortunately, there is no way of reliably observing when a value in\n  // IndexedDB changes (yet, see https://github.com/WICG/indexed-db-observers),\n  // so we need to poll.\n\n  let entry: InstallationEntry = await updateInstallationRequest(appConfig);\n  while (entry.registrationStatus === RequestStatus.IN_PROGRESS) {\n    // createInstallation request still in progress.\n    await sleep(100);\n\n    entry = await updateInstallationRequest(appConfig);\n  }\n\n  if (entry.registrationStatus === RequestStatus.NOT_STARTED) {\n    // The request timed out or failed in a different call. Try again.\n    const {\n      installationEntry,\n      registrationPromise\n    } = await getInstallationEntry(appConfig);\n\n    if (registrationPromise) {\n      return registrationPromise;\n    } else {\n      // if there is no registrationPromise, entry is registered.\n      return installationEntry as RegisteredInstallationEntry;\n    }\n  }\n\n  return entry;\n}\n\n/**\n * Called only if there is a CreateInstallation request in progress.\n *\n * Updates the InstallationEntry in the DB based on the status of the\n * CreateInstallation request.\n *\n * Returns the updated InstallationEntry.\n */\nfunction updateInstallationRequest(\n  appConfig: AppConfig\n): Promise<InstallationEntry> {\n  return update(appConfig, oldEntry => {\n    if (!oldEntry) {\n      throw ERROR_FACTORY.create(ErrorCode.INSTALLATION_NOT_FOUND);\n    }\n    return clearTimedOutRequest(oldEntry);\n  });\n}\n\nfunction clearTimedOutRequest(entry: InstallationEntry): InstallationEntry {\n  if (hasInstallationRequestTimedOut(entry)) {\n    return {\n      fid: entry.fid,\n      registrationStatus: RequestStatus.NOT_STARTED\n    };\n  }\n\n  return entry;\n}\n\nfunction hasInstallationRequestTimedOut(\n  installationEntry: InstallationEntry\n): boolean {\n  return (\n    installationEntry.registrationStatus === RequestStatus.IN_PROGRESS &&\n    installationEntry.registrationTime + PENDING_TIMEOUT_MS < Date.now()\n  );\n}\n","/**\n * @license\n * Copyright 2019 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { GenerateAuthTokenResponse } from '../interfaces/api-response';\nimport { AppConfig } from '../interfaces/app-config';\nimport { FirebaseDependencies } from '../interfaces/firebase-dependencies';\nimport {\n  CompletedAuthToken,\n  RegisteredInstallationEntry\n} from '../interfaces/installation-entry';\nimport { PACKAGE_VERSION } from '../util/constants';\nimport {\n  extractAuthTokenInfoFromResponse,\n  getErrorFromResponse,\n  getHeadersWithAuth,\n  getInstallationsEndpoint,\n  retryIfServerError\n} from './common';\n\nexport async function generateAuthTokenRequest(\n  { appConfig, platformLoggerProvider }: FirebaseDependencies,\n  installationEntry: RegisteredInstallationEntry\n): Promise<CompletedAuthToken> {\n  const endpoint = getGenerateAuthTokenEndpoint(appConfig, installationEntry);\n\n  const headers = getHeadersWithAuth(appConfig, installationEntry);\n\n  // If platform logger exists, add the platform info string to the header.\n  const platformLogger = platformLoggerProvider.getImmediate({\n    optional: true\n  });\n  if (platformLogger) {\n    headers.append('x-firebase-client', platformLogger.getPlatformInfoString());\n  }\n\n  const body = {\n    installation: {\n      sdkVersion: PACKAGE_VERSION\n    }\n  };\n\n  const request: RequestInit = {\n    method: 'POST',\n    headers,\n    body: JSON.stringify(body)\n  };\n\n  const response = await retryIfServerError(() => fetch(endpoint, request));\n  if (response.ok) {\n    const responseValue: GenerateAuthTokenResponse = await response.json();\n    const completedAuthToken: CompletedAuthToken = extractAuthTokenInfoFromResponse(\n      responseValue\n    );\n    return completedAuthToken;\n  } else {\n    throw await getErrorFromResponse('Generate Auth Token', response);\n  }\n}\n\nfunction getGenerateAuthTokenEndpoint(\n  appConfig: AppConfig,\n  { fid }: RegisteredInstallationEntry\n): string {\n  return `${getInstallationsEndpoint(appConfig)}/${fid}/authTokens:generate`;\n}\n","/**\n * @license\n * Copyright 2019 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { generateAuthTokenRequest } from '../api/generate-auth-token-request';\nimport { AppConfig } from '../interfaces/app-config';\nimport { FirebaseDependencies } from '../interfaces/firebase-dependencies';\nimport {\n  AuthToken,\n  CompletedAuthToken,\n  InProgressAuthToken,\n  InstallationEntry,\n  RegisteredInstallationEntry,\n  RequestStatus\n} from '../interfaces/installation-entry';\nimport { PENDING_TIMEOUT_MS, TOKEN_EXPIRATION_BUFFER } from '../util/constants';\nimport { ERROR_FACTORY, ErrorCode, isServerError } from '../util/errors';\nimport { sleep } from '../util/sleep';\nimport { remove, set, update } from './idb-manager';\n\n/**\n * Returns a valid authentication token for the installation. Generates a new\n * token if one doesn't exist, is expired or about to expire.\n *\n * Should only be called if the Firebase Installation is registered.\n */\nexport async function refreshAuthToken(\n  dependencies: FirebaseDependencies,\n  forceRefresh = false\n): Promise<CompletedAuthToken> {\n  let tokenPromise: Promise<CompletedAuthToken> | undefined;\n  const entry = await update(dependencies.appConfig, oldEntry => {\n    if (!isEntryRegistered(oldEntry)) {\n      throw ERROR_FACTORY.create(ErrorCode.NOT_REGISTERED);\n    }\n\n    const oldAuthToken = oldEntry.authToken;\n    if (!forceRefresh && isAuthTokenValid(oldAuthToken)) {\n      // There is a valid token in the DB.\n      return oldEntry;\n    } else if (oldAuthToken.requestStatus === RequestStatus.IN_PROGRESS) {\n      // There already is a token request in progress.\n      tokenPromise = waitUntilAuthTokenRequest(dependencies, forceRefresh);\n      return oldEntry;\n    } else {\n      // No token or token expired.\n      if (!navigator.onLine) {\n        throw ERROR_FACTORY.create(ErrorCode.APP_OFFLINE);\n      }\n\n      const inProgressEntry = makeAuthTokenRequestInProgressEntry(oldEntry);\n      tokenPromise = fetchAuthTokenFromServer(dependencies, inProgressEntry);\n      return inProgressEntry;\n    }\n  });\n\n  const authToken = tokenPromise\n    ? await tokenPromise\n    : (entry.authToken as CompletedAuthToken);\n  return authToken;\n}\n\n/**\n * Call only if FID is registered and Auth Token request is in progress.\n *\n * Waits until the current pending request finishes. If the request times out,\n * tries once in this thread as well.\n */\nasync function waitUntilAuthTokenRequest(\n  dependencies: FirebaseDependencies,\n  forceRefresh: boolean\n): Promise<CompletedAuthToken> {\n  // Unfortunately, there is no way of reliably observing when a value in\n  // IndexedDB changes (yet, see https://github.com/WICG/indexed-db-observers),\n  // so we need to poll.\n\n  let entry = await updateAuthTokenRequest(dependencies.appConfig);\n  while (entry.authToken.requestStatus === RequestStatus.IN_PROGRESS) {\n    // generateAuthToken still in progress.\n    await sleep(100);\n\n    entry = await updateAuthTokenRequest(dependencies.appConfig);\n  }\n\n  const authToken = entry.authToken;\n  if (authToken.requestStatus === RequestStatus.NOT_STARTED) {\n    // The request timed out or failed in a different call. Try again.\n    return refreshAuthToken(dependencies, forceRefresh);\n  } else {\n    return authToken;\n  }\n}\n\n/**\n * Called only if there is a GenerateAuthToken request in progress.\n *\n * Updates the InstallationEntry in the DB based on the status of the\n * GenerateAuthToken request.\n *\n * Returns the updated InstallationEntry.\n */\nfunction updateAuthTokenRequest(\n  appConfig: AppConfig\n): Promise<RegisteredInstallationEntry> {\n  return update(appConfig, oldEntry => {\n    if (!isEntryRegistered(oldEntry)) {\n      throw ERROR_FACTORY.create(ErrorCode.NOT_REGISTERED);\n    }\n\n    const oldAuthToken = oldEntry.authToken;\n    if (hasAuthTokenRequestTimedOut(oldAuthToken)) {\n      return {\n        ...oldEntry,\n        authToken: { requestStatus: RequestStatus.NOT_STARTED }\n      };\n    }\n\n    return oldEntry;\n  });\n}\n\nasync function fetchAuthTokenFromServer(\n  dependencies: FirebaseDependencies,\n  installationEntry: RegisteredInstallationEntry\n): Promise<CompletedAuthToken> {\n  try {\n    const authToken = await generateAuthTokenRequest(\n      dependencies,\n      installationEntry\n    );\n    const updatedInstallationEntry: RegisteredInstallationEntry = {\n      ...installationEntry,\n      authToken\n    };\n    await set(dependencies.appConfig, updatedInstallationEntry);\n    return authToken;\n  } catch (e) {\n    if (\n      isServerError(e) &&\n      (e.customData.serverCode === 401 || e.customData.serverCode === 404)\n    ) {\n      // Server returned a \"FID not found\" or a \"Invalid authentication\" error.\n      // Generate a new ID next time.\n      await remove(dependencies.appConfig);\n    } else {\n      const updatedInstallationEntry: RegisteredInstallationEntry = {\n        ...installationEntry,\n        authToken: { requestStatus: RequestStatus.NOT_STARTED }\n      };\n      await set(dependencies.appConfig, updatedInstallationEntry);\n    }\n    throw e;\n  }\n}\n\nfunction isEntryRegistered(\n  installationEntry: InstallationEntry | undefined\n): installationEntry is RegisteredInstallationEntry {\n  return (\n    installationEntry !== undefined &&\n    installationEntry.registrationStatus === RequestStatus.COMPLETED\n  );\n}\n\nfunction isAuthTokenValid(authToken: AuthToken): boolean {\n  return (\n    authToken.requestStatus === RequestStatus.COMPLETED &&\n    !isAuthTokenExpired(authToken)\n  );\n}\n\nfunction isAuthTokenExpired(authToken: CompletedAuthToken): boolean {\n  const now = Date.now();\n  return (\n    now < authToken.creationTime ||\n    authToken.creationTime + authToken.expiresIn < now + TOKEN_EXPIRATION_BUFFER\n  );\n}\n\n/** Returns an updated InstallationEntry with an InProgressAuthToken. */\nfunction makeAuthTokenRequestInProgressEntry(\n  oldEntry: RegisteredInstallationEntry\n): RegisteredInstallationEntry {\n  const inProgressAuthToken: InProgressAuthToken = {\n    requestStatus: RequestStatus.IN_PROGRESS,\n    requestTime: Date.now()\n  };\n  return {\n    ...oldEntry,\n    authToken: inProgressAuthToken\n  };\n}\n\nfunction hasAuthTokenRequestTimedOut(authToken: AuthToken): boolean {\n  return (\n    authToken.requestStatus === RequestStatus.IN_PROGRESS &&\n    authToken.requestTime + PENDING_TIMEOUT_MS < Date.now()\n  );\n}\n","/**\n * @license\n * Copyright 2019 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { getInstallationEntry } from '../helpers/get-installation-entry';\nimport { refreshAuthToken } from '../helpers/refresh-auth-token';\nimport { FirebaseDependencies } from '../interfaces/firebase-dependencies';\n\nexport async function getId(\n  dependencies: FirebaseDependencies\n): Promise<string> {\n  const { installationEntry, registrationPromise } = await getInstallationEntry(\n    dependencies.appConfig\n  );\n\n  if (registrationPromise) {\n    registrationPromise.catch(console.error);\n  } else {\n    // If the installation is already registered, update the authentication\n    // token if needed.\n    refreshAuthToken(dependencies).catch(console.error);\n  }\n\n  return installationEntry.fid;\n}\n","/**\n * @license\n * Copyright 2019 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { getInstallationEntry } from '../helpers/get-installation-entry';\nimport { refreshAuthToken } from '../helpers/refresh-auth-token';\nimport { AppConfig } from '../interfaces/app-config';\nimport { FirebaseDependencies } from '../interfaces/firebase-dependencies';\n\nexport async function getToken(\n  dependencies: FirebaseDependencies,\n  forceRefresh = false\n): Promise<string> {\n  await completeInstallationRegistration(dependencies.appConfig);\n\n  // At this point we either have a Registered Installation in the DB, or we've\n  // already thrown an error.\n  const authToken = await refreshAuthToken(dependencies, forceRefresh);\n  return authToken.token;\n}\n\nasync function completeInstallationRegistration(\n  appConfig: AppConfig\n): Promise<void> {\n  const { registrationPromise } = await getInstallationEntry(appConfig);\n\n  if (registrationPromise) {\n    // A createInstallation request is in progress. Wait until it finishes.\n    await registrationPromise;\n  }\n}\n","/**\n * @license\n * Copyright 2019 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { AppConfig } from '../interfaces/app-config';\nimport { RegisteredInstallationEntry } from '../interfaces/installation-entry';\nimport {\n  getErrorFromResponse,\n  getHeadersWithAuth,\n  getInstallationsEndpoint,\n  retryIfServerError\n} from './common';\n\nexport async function deleteInstallationRequest(\n  appConfig: AppConfig,\n  installationEntry: RegisteredInstallationEntry\n): Promise<void> {\n  const endpoint = getDeleteEndpoint(appConfig, installationEntry);\n\n  const headers = getHeadersWithAuth(appConfig, installationEntry);\n  const request: RequestInit = {\n    method: 'DELETE',\n    headers\n  };\n\n  const response = await retryIfServerError(() => fetch(endpoint, request));\n  if (!response.ok) {\n    throw await getErrorFromResponse('Delete Installation', response);\n  }\n}\n\nfunction getDeleteEndpoint(\n  appConfig: AppConfig,\n  { fid }: RegisteredInstallationEntry\n): string {\n  return `${getInstallationsEndpoint(appConfig)}/${fid}`;\n}\n","/**\n * @license\n * Copyright 2019 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { deleteInstallationRequest } from '../api/delete-installation-request';\nimport { remove, update } from '../helpers/idb-manager';\nimport { FirebaseDependencies } from '../interfaces/firebase-dependencies';\nimport { RequestStatus } from '../interfaces/installation-entry';\nimport { ERROR_FACTORY, ErrorCode } from '../util/errors';\n\nexport async function deleteInstallation(\n  dependencies: FirebaseDependencies\n): Promise<void> {\n  const { appConfig } = dependencies;\n\n  const entry = await update(appConfig, oldEntry => {\n    if (oldEntry && oldEntry.registrationStatus === RequestStatus.NOT_STARTED) {\n      // Delete the unregistered entry without sending a deleteInstallation request.\n      return undefined;\n    }\n    return oldEntry;\n  });\n\n  if (entry) {\n    if (entry.registrationStatus === RequestStatus.IN_PROGRESS) {\n      // Can't delete while trying to register.\n      throw ERROR_FACTORY.create(ErrorCode.DELETE_PENDING_REGISTRATION);\n    } else if (entry.registrationStatus === RequestStatus.COMPLETED) {\n      if (!navigator.onLine) {\n        throw ERROR_FACTORY.create(ErrorCode.APP_OFFLINE);\n      } else {\n        await deleteInstallationRequest(appConfig, entry);\n        await remove(appConfig);\n      }\n    }\n  }\n}\n","/**\n * @license\n * Copyright 2019 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { addCallback, removeCallback } from '../helpers/fid-changed';\nimport { FirebaseDependencies } from '../interfaces/firebase-dependencies';\n\nexport type IdChangeCallbackFn = (installationId: string) => void;\nexport type IdChangeUnsubscribeFn = () => void;\n\n/**\n * Sets a new callback that will get called when Installation ID changes.\n * Returns an unsubscribe function that will remove the callback when called.\n */\nexport function onIdChange(\n  { appConfig }: FirebaseDependencies,\n  callback: IdChangeCallbackFn\n): IdChangeUnsubscribeFn {\n  addCallback(appConfig, callback);\n\n  return () => {\n    removeCallback(appConfig, callback);\n  };\n}\n","/**\n * @license\n * Copyright 2019 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { FirebaseApp, FirebaseOptions } from '@firebase/app-types';\nimport { FirebaseError } from '@firebase/util';\nimport { AppConfig } from '../interfaces/app-config';\nimport { ERROR_FACTORY, ErrorCode } from '../util/errors';\n\nexport function extractAppConfig(app: FirebaseApp): AppConfig {\n  if (!app || !app.options) {\n    throw getMissingValueError('App Configuration');\n  }\n\n  if (!app.name) {\n    throw getMissingValueError('App Name');\n  }\n\n  // Required app config keys\n  const configKeys: Array<keyof FirebaseOptions> = [\n    'projectId',\n    'apiKey',\n    'appId'\n  ];\n\n  for (const keyName of configKeys) {\n    if (!app.options[keyName]) {\n      throw getMissingValueError(keyName);\n    }\n  }\n\n  return {\n    appName: app.name,\n    projectId: app.options.projectId!,\n    apiKey: app.options.apiKey!,\n    appId: app.options.appId!\n  };\n}\n\nfunction getMissingValueError(valueName: string): FirebaseError {\n  return ERROR_FACTORY.create(ErrorCode.MISSING_APP_CONFIG_VALUES, {\n    valueName\n  });\n}\n","/**\n * @license\n * Copyright 2019 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport firebase from '@firebase/app';\nimport {\n  _FirebaseNamespace,\n  FirebaseService\n} from '@firebase/app-types/private';\nimport { Component, ComponentType } from '@firebase/component';\nimport { FirebaseInstallations } from '@firebase/installations-types';\nimport {\n  deleteInstallation,\n  getId,\n  getToken,\n  IdChangeCallbackFn,\n  IdChangeUnsubscribeFn,\n  onIdChange\n} from './functions';\nimport { extractAppConfig } from './helpers/extract-app-config';\nimport { FirebaseDependencies } from './interfaces/firebase-dependencies';\n\nimport { name, version } from '../package.json';\n\nexport function registerInstallations(instance: _FirebaseNamespace): void {\n  const installationsName = 'installations';\n\n  instance.INTERNAL.registerComponent(\n    new Component(\n      installationsName,\n      container => {\n        const app = container.getProvider('app').getImmediate();\n\n        // Throws if app isn't configured properly.\n        const appConfig = extractAppConfig(app);\n        const platformLoggerProvider = container.getProvider('platform-logger');\n        const dependencies: FirebaseDependencies = {\n          appConfig,\n          platformLoggerProvider\n        };\n\n        const installations: FirebaseInstallations & FirebaseService = {\n          app,\n          getId: () => getId(dependencies),\n          getToken: (forceRefresh?: boolean) =>\n            getToken(dependencies, forceRefresh),\n          delete: () => deleteInstallation(dependencies),\n          onIdChange: (callback: IdChangeCallbackFn): IdChangeUnsubscribeFn =>\n            onIdChange(dependencies, callback)\n        };\n        return installations;\n      },\n      ComponentType.PUBLIC\n    )\n  );\n\n  instance.registerVersion(name, version);\n}\n\nregisterInstallations(firebase as _FirebaseNamespace);\n\n/**\n * Define extension behavior of `registerInstallations`\n */\ndeclare module '@firebase/app-types' {\n  interface FirebaseNamespace {\n    installations(app?: FirebaseApp): FirebaseInstallations;\n  }\n  interface FirebaseApp {\n    installations(): FirebaseInstallations;\n  }\n}\n"]},"metadata":{},"sourceType":"module"}