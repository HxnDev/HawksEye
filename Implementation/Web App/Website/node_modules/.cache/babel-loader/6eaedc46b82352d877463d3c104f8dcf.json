{"ast":null,"code":"import '@firebase/installations';\nimport { Component } from '@firebase/component';\nimport { ErrorFactory } from '@firebase/util';\nimport { __spreadArray, __read, __awaiter, __generator, __assign, __values } from 'tslib';\nimport { deleteDb, openDb } from 'idb';\nimport firebase from '@firebase/app';\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\nvar _a;\n\nvar ERROR_MAP = (_a = {}, _a[\"missing-app-config-values\"\n/* MISSING_APP_CONFIG_VALUES */\n] = 'Missing App configuration value: \"{$valueName}\"', _a[\"only-available-in-window\"\n/* AVAILABLE_IN_WINDOW */\n] = 'This method is available in a Window context.', _a[\"only-available-in-sw\"\n/* AVAILABLE_IN_SW */\n] = 'This method is available in a service worker context.', _a[\"permission-default\"\n/* PERMISSION_DEFAULT */\n] = 'The notification permission was not granted and dismissed instead.', _a[\"permission-blocked\"\n/* PERMISSION_BLOCKED */\n] = 'The notification permission was not granted and blocked instead.', _a[\"unsupported-browser\"\n/* UNSUPPORTED_BROWSER */\n] = \"This browser doesn't support the API's required to use the firebase SDK.\", _a[\"failed-service-worker-registration\"\n/* FAILED_DEFAULT_REGISTRATION */\n] = 'We are unable to register the default service worker. {$browserErrorMessage}', _a[\"token-subscribe-failed\"\n/* TOKEN_SUBSCRIBE_FAILED */\n] = 'A problem occurred while subscribing the user to FCM: {$errorInfo}', _a[\"token-subscribe-no-token\"\n/* TOKEN_SUBSCRIBE_NO_TOKEN */\n] = 'FCM returned no token when subscribing the user to push.', _a[\"token-unsubscribe-failed\"\n/* TOKEN_UNSUBSCRIBE_FAILED */\n] = 'A problem occurred while unsubscribing the ' + 'user from FCM: {$errorInfo}', _a[\"token-update-failed\"\n/* TOKEN_UPDATE_FAILED */\n] = 'A problem occurred while updating the user from FCM: {$errorInfo}', _a[\"token-update-no-token\"\n/* TOKEN_UPDATE_NO_TOKEN */\n] = 'FCM returned no token when updating the user to push.', _a[\"use-sw-after-get-token\"\n/* USE_SW_AFTER_GET_TOKEN */\n] = 'The useServiceWorker() method may only be called once and must be ' + 'called before calling getToken() to ensure your service worker is used.', _a[\"invalid-sw-registration\"\n/* INVALID_SW_REGISTRATION */\n] = 'The input to useServiceWorker() must be a ServiceWorkerRegistration.', _a[\"invalid-bg-handler\"\n/* INVALID_BG_HANDLER */\n] = 'The input to setBackgroundMessageHandler() must be a function.', _a[\"invalid-vapid-key\"\n/* INVALID_VAPID_KEY */\n] = 'The public VAPID key must be a string.', _a[\"use-vapid-key-after-get-token\"\n/* USE_VAPID_KEY_AFTER_GET_TOKEN */\n] = 'The usePublicVapidKey() method may only be called once and must be ' + 'called before calling getToken() to ensure your VAPID key is used.', _a);\nvar ERROR_FACTORY = new ErrorFactory('messaging', 'Messaging', ERROR_MAP);\n/**\r\n * @license\r\n * Copyright 2019 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\nvar DEFAULT_SW_PATH = '/firebase-messaging-sw.js';\nvar DEFAULT_SW_SCOPE = '/firebase-cloud-messaging-push-scope';\nvar DEFAULT_VAPID_KEY = 'BDOU99-h67HcA6JeFXHbSNMu7e2yNNu3RzoMj8TM4W88jITfq7ZmPvIM1Iv-4_l2LxQcYwhqby2xGpWwzjfAnG4';\nvar ENDPOINT = 'https://fcmregistrations.googleapis.com/v1'; // Key of FCM Payload in Notification's data field.\n\nvar FCM_MSG = 'FCM_MSG';\nvar TAG = 'FirebaseMessaging: '; // Set to '1' if Analytics is enabled for the campaign\n\nvar CONSOLE_CAMPAIGN_ANALYTICS_ENABLED = 'google.c.a.e';\nvar CONSOLE_CAMPAIGN_ID = 'google.c.a.c_id';\nvar CONSOLE_CAMPAIGN_TIME = 'google.c.a.ts';\nvar CONSOLE_CAMPAIGN_NAME = 'google.c.a.c_l'; // Due to the fact that onBackgroundMessage can't be awaited (to support rxjs), a silent push\n// warning might be shown by the browser if the callback fails to completes by the end of onPush.\n// Experiments were ran to determine the majority onBackground message clock time. This brief\n// blocking time would allow majority of the onBackgroundMessage callback to finish.\n\nvar BACKGROUND_HANDLE_EXECUTION_TIME_LIMIT_MS = 1000; // Preparation time for client to initialize and set up the message handler.\n\nvar FOREGROUND_HANDLE_PREPARATION_TIME_MS = 3000;\n/**\r\n * @license\r\n * Copyright 2018 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except\r\n * in compliance with the License. You may obtain a copy of the License at\r\n *\r\n * http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software distributed under the License\r\n * is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express\r\n * or implied. See the License for the specific language governing permissions and limitations under\r\n * the License.\r\n */\n\nvar MessageType;\n\n(function (MessageType) {\n  MessageType[\"PUSH_RECEIVED\"] = \"push-received\";\n  MessageType[\"NOTIFICATION_CLICKED\"] = \"notification-clicked\";\n})(MessageType || (MessageType = {}));\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\n\nfunction arrayToBase64(array) {\n  var uint8Array = new Uint8Array(array);\n  var base64String = btoa(String.fromCharCode.apply(String, __spreadArray([], __read(uint8Array))));\n  return base64String.replace(/=/g, '').replace(/\\+/g, '-').replace(/\\//g, '_');\n}\n\nfunction base64ToArray(base64String) {\n  var padding = '='.repeat((4 - base64String.length % 4) % 4);\n  var base64 = (base64String + padding).replace(/\\-/g, '+').replace(/_/g, '/');\n  var rawData = atob(base64);\n  var outputArray = new Uint8Array(rawData.length);\n\n  for (var i = 0; i < rawData.length; ++i) {\n    outputArray[i] = rawData.charCodeAt(i);\n  }\n\n  return outputArray;\n}\n/**\r\n * @license\r\n * Copyright 2019 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\n\nvar OLD_DB_NAME = 'fcm_token_details_db';\n/**\r\n * The last DB version of 'fcm_token_details_db' was 4. This is one higher, so that the upgrade\r\n * callback is called for all versions of the old DB.\r\n */\n\nvar OLD_DB_VERSION = 5;\nvar OLD_OBJECT_STORE_NAME = 'fcm_token_object_Store';\n\nfunction migrateOldDatabase(senderId) {\n  return __awaiter(this, void 0, void 0, function () {\n    var databases, dbNames, tokenDetails, db;\n\n    var _this = this;\n\n    return __generator(this, function (_a) {\n      switch (_a.label) {\n        case 0:\n          if (!('databases' in indexedDB)) return [3\n          /*break*/\n          , 2];\n          return [4\n          /*yield*/\n          , indexedDB.databases()];\n\n        case 1:\n          databases = _a.sent();\n          dbNames = databases.map(function (db) {\n            return db.name;\n          });\n\n          if (!dbNames.includes(OLD_DB_NAME)) {\n            // old DB didn't exist, no need to open.\n            return [2\n            /*return*/\n            , null];\n          }\n\n          _a.label = 2;\n\n        case 2:\n          tokenDetails = null;\n          return [4\n          /*yield*/\n          , openDb(OLD_DB_NAME, OLD_DB_VERSION, function (db) {\n            return __awaiter(_this, void 0, void 0, function () {\n              var objectStore, value, oldDetails, oldDetails, oldDetails;\n\n              var _a;\n\n              return __generator(this, function (_b) {\n                switch (_b.label) {\n                  case 0:\n                    if (db.oldVersion < 2) {\n                      // Database too old, skip migration.\n                      return [2\n                      /*return*/\n                      ];\n                    }\n\n                    if (!db.objectStoreNames.contains(OLD_OBJECT_STORE_NAME)) {\n                      // Database did not exist. Nothing to do.\n                      return [2\n                      /*return*/\n                      ];\n                    }\n\n                    objectStore = db.transaction.objectStore(OLD_OBJECT_STORE_NAME);\n                    return [4\n                    /*yield*/\n                    , objectStore.index('fcmSenderId').get(senderId)];\n\n                  case 1:\n                    value = _b.sent();\n                    return [4\n                    /*yield*/\n                    , objectStore.clear()];\n\n                  case 2:\n                    _b.sent();\n\n                    if (!value) {\n                      // No entry in the database, nothing to migrate.\n                      return [2\n                      /*return*/\n                      ];\n                    }\n\n                    if (db.oldVersion === 2) {\n                      oldDetails = value;\n\n                      if (!oldDetails.auth || !oldDetails.p256dh || !oldDetails.endpoint) {\n                        return [2\n                        /*return*/\n                        ];\n                      }\n\n                      tokenDetails = {\n                        token: oldDetails.fcmToken,\n                        createTime: (_a = oldDetails.createTime) !== null && _a !== void 0 ? _a : Date.now(),\n                        subscriptionOptions: {\n                          auth: oldDetails.auth,\n                          p256dh: oldDetails.p256dh,\n                          endpoint: oldDetails.endpoint,\n                          swScope: oldDetails.swScope,\n                          vapidKey: typeof oldDetails.vapidKey === 'string' ? oldDetails.vapidKey : arrayToBase64(oldDetails.vapidKey)\n                        }\n                      };\n                    } else if (db.oldVersion === 3) {\n                      oldDetails = value;\n                      tokenDetails = {\n                        token: oldDetails.fcmToken,\n                        createTime: oldDetails.createTime,\n                        subscriptionOptions: {\n                          auth: arrayToBase64(oldDetails.auth),\n                          p256dh: arrayToBase64(oldDetails.p256dh),\n                          endpoint: oldDetails.endpoint,\n                          swScope: oldDetails.swScope,\n                          vapidKey: arrayToBase64(oldDetails.vapidKey)\n                        }\n                      };\n                    } else if (db.oldVersion === 4) {\n                      oldDetails = value;\n                      tokenDetails = {\n                        token: oldDetails.fcmToken,\n                        createTime: oldDetails.createTime,\n                        subscriptionOptions: {\n                          auth: arrayToBase64(oldDetails.auth),\n                          p256dh: arrayToBase64(oldDetails.p256dh),\n                          endpoint: oldDetails.endpoint,\n                          swScope: oldDetails.swScope,\n                          vapidKey: arrayToBase64(oldDetails.vapidKey)\n                        }\n                      };\n                    }\n\n                    return [2\n                    /*return*/\n                    ];\n                }\n              });\n            });\n          })];\n\n        case 3:\n          db = _a.sent();\n          db.close(); // Delete all old databases.\n\n          return [4\n          /*yield*/\n          , deleteDb(OLD_DB_NAME)];\n\n        case 4:\n          // Delete all old databases.\n          _a.sent();\n\n          return [4\n          /*yield*/\n          , deleteDb('fcm_vapid_details_db')];\n\n        case 5:\n          _a.sent();\n\n          return [4\n          /*yield*/\n          , deleteDb('undefined')];\n\n        case 6:\n          _a.sent();\n\n          return [2\n          /*return*/\n          , checkTokenDetails(tokenDetails) ? tokenDetails : null];\n      }\n    });\n  });\n}\n\nfunction checkTokenDetails(tokenDetails) {\n  if (!tokenDetails || !tokenDetails.subscriptionOptions) {\n    return false;\n  }\n\n  var subscriptionOptions = tokenDetails.subscriptionOptions;\n  return typeof tokenDetails.createTime === 'number' && tokenDetails.createTime > 0 && typeof tokenDetails.token === 'string' && tokenDetails.token.length > 0 && typeof subscriptionOptions.auth === 'string' && subscriptionOptions.auth.length > 0 && typeof subscriptionOptions.p256dh === 'string' && subscriptionOptions.p256dh.length > 0 && typeof subscriptionOptions.endpoint === 'string' && subscriptionOptions.endpoint.length > 0 && typeof subscriptionOptions.swScope === 'string' && subscriptionOptions.swScope.length > 0 && typeof subscriptionOptions.vapidKey === 'string' && subscriptionOptions.vapidKey.length > 0;\n}\n/**\r\n * @license\r\n * Copyright 2019 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n// Exported for tests.\n\n\nvar DATABASE_NAME = 'firebase-messaging-database';\nvar DATABASE_VERSION = 1;\nvar OBJECT_STORE_NAME = 'firebase-messaging-store';\nvar dbPromise = null;\n\nfunction getDbPromise() {\n  if (!dbPromise) {\n    dbPromise = openDb(DATABASE_NAME, DATABASE_VERSION, function (upgradeDb) {\n      // We don't use 'break' in this switch statement, the fall-through behavior is what we want,\n      // because if there are multiple versions between the old version and the current version, we\n      // want ALL the migrations that correspond to those versions to run, not only the last one.\n      // eslint-disable-next-line default-case\n      switch (upgradeDb.oldVersion) {\n        case 0:\n          upgradeDb.createObjectStore(OBJECT_STORE_NAME);\n      }\n    });\n  }\n\n  return dbPromise;\n}\n/** Gets record(s) from the objectStore that match the given key. */\n\n\nfunction dbGet(firebaseDependencies) {\n  return __awaiter(this, void 0, void 0, function () {\n    var key, db, tokenDetails, oldTokenDetails;\n    return __generator(this, function (_a) {\n      switch (_a.label) {\n        case 0:\n          key = getKey(firebaseDependencies);\n          return [4\n          /*yield*/\n          , getDbPromise()];\n\n        case 1:\n          db = _a.sent();\n          return [4\n          /*yield*/\n          , db.transaction(OBJECT_STORE_NAME).objectStore(OBJECT_STORE_NAME).get(key)];\n\n        case 2:\n          tokenDetails = _a.sent();\n          if (!tokenDetails) return [3\n          /*break*/\n          , 3];\n          return [2\n          /*return*/\n          , tokenDetails];\n\n        case 3:\n          return [4\n          /*yield*/\n          , migrateOldDatabase(firebaseDependencies.appConfig.senderId)];\n\n        case 4:\n          oldTokenDetails = _a.sent();\n          if (!oldTokenDetails) return [3\n          /*break*/\n          , 6];\n          return [4\n          /*yield*/\n          , dbSet(firebaseDependencies, oldTokenDetails)];\n\n        case 5:\n          _a.sent();\n\n          return [2\n          /*return*/\n          , oldTokenDetails];\n\n        case 6:\n          return [2\n          /*return*/\n          ];\n      }\n    });\n  });\n}\n/** Assigns or overwrites the record for the given key with the given value. */\n\n\nfunction dbSet(firebaseDependencies, tokenDetails) {\n  return __awaiter(this, void 0, void 0, function () {\n    var key, db, tx;\n    return __generator(this, function (_a) {\n      switch (_a.label) {\n        case 0:\n          key = getKey(firebaseDependencies);\n          return [4\n          /*yield*/\n          , getDbPromise()];\n\n        case 1:\n          db = _a.sent();\n          tx = db.transaction(OBJECT_STORE_NAME, 'readwrite');\n          return [4\n          /*yield*/\n          , tx.objectStore(OBJECT_STORE_NAME).put(tokenDetails, key)];\n\n        case 2:\n          _a.sent();\n\n          return [4\n          /*yield*/\n          , tx.complete];\n\n        case 3:\n          _a.sent();\n\n          return [2\n          /*return*/\n          , tokenDetails];\n      }\n    });\n  });\n}\n/** Removes record(s) from the objectStore that match the given key. */\n\n\nfunction dbRemove(firebaseDependencies) {\n  return __awaiter(this, void 0, void 0, function () {\n    var key, db, tx;\n    return __generator(this, function (_a) {\n      switch (_a.label) {\n        case 0:\n          key = getKey(firebaseDependencies);\n          return [4\n          /*yield*/\n          , getDbPromise()];\n\n        case 1:\n          db = _a.sent();\n          tx = db.transaction(OBJECT_STORE_NAME, 'readwrite');\n          return [4\n          /*yield*/\n          , tx.objectStore(OBJECT_STORE_NAME).delete(key)];\n\n        case 2:\n          _a.sent();\n\n          return [4\n          /*yield*/\n          , tx.complete];\n\n        case 3:\n          _a.sent();\n\n          return [2\n          /*return*/\n          ];\n      }\n    });\n  });\n}\n\nfunction getKey(_a) {\n  var appConfig = _a.appConfig;\n  return appConfig.appId;\n}\n/**\r\n * @license\r\n * Copyright 2019 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\n\nfunction requestGetToken(firebaseDependencies, subscriptionOptions) {\n  return __awaiter(this, void 0, void 0, function () {\n    var headers, body, subscribeOptions, responseData, response, err_1, message;\n    return __generator(this, function (_a) {\n      switch (_a.label) {\n        case 0:\n          return [4\n          /*yield*/\n          , getHeaders(firebaseDependencies)];\n\n        case 1:\n          headers = _a.sent();\n          body = getBody(subscriptionOptions);\n          subscribeOptions = {\n            method: 'POST',\n            headers: headers,\n            body: JSON.stringify(body)\n          };\n          _a.label = 2;\n\n        case 2:\n          _a.trys.push([2, 5,, 6]);\n\n          return [4\n          /*yield*/\n          , fetch(getEndpoint(firebaseDependencies.appConfig), subscribeOptions)];\n\n        case 3:\n          response = _a.sent();\n          return [4\n          /*yield*/\n          , response.json()];\n\n        case 4:\n          responseData = _a.sent();\n          return [3\n          /*break*/\n          , 6];\n\n        case 5:\n          err_1 = _a.sent();\n          throw ERROR_FACTORY.create(\"token-subscribe-failed\"\n          /* TOKEN_SUBSCRIBE_FAILED */\n          , {\n            errorInfo: err_1\n          });\n\n        case 6:\n          if (responseData.error) {\n            message = responseData.error.message;\n            throw ERROR_FACTORY.create(\"token-subscribe-failed\"\n            /* TOKEN_SUBSCRIBE_FAILED */\n            , {\n              errorInfo: message\n            });\n          }\n\n          if (!responseData.token) {\n            throw ERROR_FACTORY.create(\"token-subscribe-no-token\"\n            /* TOKEN_SUBSCRIBE_NO_TOKEN */\n            );\n          }\n\n          return [2\n          /*return*/\n          , responseData.token];\n      }\n    });\n  });\n}\n\nfunction requestUpdateToken(firebaseDependencies, tokenDetails) {\n  return __awaiter(this, void 0, void 0, function () {\n    var headers, body, updateOptions, responseData, response, err_2, message;\n    return __generator(this, function (_a) {\n      switch (_a.label) {\n        case 0:\n          return [4\n          /*yield*/\n          , getHeaders(firebaseDependencies)];\n\n        case 1:\n          headers = _a.sent();\n          body = getBody(tokenDetails.subscriptionOptions);\n          updateOptions = {\n            method: 'PATCH',\n            headers: headers,\n            body: JSON.stringify(body)\n          };\n          _a.label = 2;\n\n        case 2:\n          _a.trys.push([2, 5,, 6]);\n\n          return [4\n          /*yield*/\n          , fetch(getEndpoint(firebaseDependencies.appConfig) + \"/\" + tokenDetails.token, updateOptions)];\n\n        case 3:\n          response = _a.sent();\n          return [4\n          /*yield*/\n          , response.json()];\n\n        case 4:\n          responseData = _a.sent();\n          return [3\n          /*break*/\n          , 6];\n\n        case 5:\n          err_2 = _a.sent();\n          throw ERROR_FACTORY.create(\"token-update-failed\"\n          /* TOKEN_UPDATE_FAILED */\n          , {\n            errorInfo: err_2\n          });\n\n        case 6:\n          if (responseData.error) {\n            message = responseData.error.message;\n            throw ERROR_FACTORY.create(\"token-update-failed\"\n            /* TOKEN_UPDATE_FAILED */\n            , {\n              errorInfo: message\n            });\n          }\n\n          if (!responseData.token) {\n            throw ERROR_FACTORY.create(\"token-update-no-token\"\n            /* TOKEN_UPDATE_NO_TOKEN */\n            );\n          }\n\n          return [2\n          /*return*/\n          , responseData.token];\n      }\n    });\n  });\n}\n\nfunction requestDeleteToken(firebaseDependencies, token) {\n  return __awaiter(this, void 0, void 0, function () {\n    var headers, unsubscribeOptions, response, responseData, message, err_3;\n    return __generator(this, function (_a) {\n      switch (_a.label) {\n        case 0:\n          return [4\n          /*yield*/\n          , getHeaders(firebaseDependencies)];\n\n        case 1:\n          headers = _a.sent();\n          unsubscribeOptions = {\n            method: 'DELETE',\n            headers: headers\n          };\n          _a.label = 2;\n\n        case 2:\n          _a.trys.push([2, 5,, 6]);\n\n          return [4\n          /*yield*/\n          , fetch(getEndpoint(firebaseDependencies.appConfig) + \"/\" + token, unsubscribeOptions)];\n\n        case 3:\n          response = _a.sent();\n          return [4\n          /*yield*/\n          , response.json()];\n\n        case 4:\n          responseData = _a.sent();\n\n          if (responseData.error) {\n            message = responseData.error.message;\n            throw ERROR_FACTORY.create(\"token-unsubscribe-failed\"\n            /* TOKEN_UNSUBSCRIBE_FAILED */\n            , {\n              errorInfo: message\n            });\n          }\n\n          return [3\n          /*break*/\n          , 6];\n\n        case 5:\n          err_3 = _a.sent();\n          throw ERROR_FACTORY.create(\"token-unsubscribe-failed\"\n          /* TOKEN_UNSUBSCRIBE_FAILED */\n          , {\n            errorInfo: err_3\n          });\n\n        case 6:\n          return [2\n          /*return*/\n          ];\n      }\n    });\n  });\n}\n\nfunction getEndpoint(_a) {\n  var projectId = _a.projectId;\n  return ENDPOINT + \"/projects/\" + projectId + \"/registrations\";\n}\n\nfunction getHeaders(_a) {\n  var appConfig = _a.appConfig,\n      installations = _a.installations;\n  return __awaiter(this, void 0, void 0, function () {\n    var authToken;\n    return __generator(this, function (_b) {\n      switch (_b.label) {\n        case 0:\n          return [4\n          /*yield*/\n          , installations.getToken()];\n\n        case 1:\n          authToken = _b.sent();\n          return [2\n          /*return*/\n          , new Headers({\n            'Content-Type': 'application/json',\n            Accept: 'application/json',\n            'x-goog-api-key': appConfig.apiKey,\n            'x-goog-firebase-installations-auth': \"FIS \" + authToken\n          })];\n      }\n    });\n  });\n}\n\nfunction getBody(_a) {\n  var p256dh = _a.p256dh,\n      auth = _a.auth,\n      endpoint = _a.endpoint,\n      vapidKey = _a.vapidKey;\n  var body = {\n    web: {\n      endpoint: endpoint,\n      auth: auth,\n      p256dh: p256dh\n    }\n  };\n\n  if (vapidKey !== DEFAULT_VAPID_KEY) {\n    body.web.applicationPubKey = vapidKey;\n  }\n\n  return body;\n}\n/**\r\n * @license\r\n * Copyright 2019 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\n/** UpdateRegistration will be called once every week. */\n\n\nvar TOKEN_EXPIRATION_MS = 7 * 24 * 60 * 60 * 1000; // 7 days\n\nfunction getToken(firebaseDependencies, swRegistration, vapidKey) {\n  return __awaiter(this, void 0, void 0, function () {\n    var pushSubscription, tokenDetails, subscriptionOptions, e_1;\n    return __generator(this, function (_a) {\n      switch (_a.label) {\n        case 0:\n          if (Notification.permission !== 'granted') {\n            throw ERROR_FACTORY.create(\"permission-blocked\"\n            /* PERMISSION_BLOCKED */\n            );\n          }\n\n          return [4\n          /*yield*/\n          , getPushSubscription(swRegistration, vapidKey)];\n\n        case 1:\n          pushSubscription = _a.sent();\n          return [4\n          /*yield*/\n          , dbGet(firebaseDependencies)];\n\n        case 2:\n          tokenDetails = _a.sent();\n          subscriptionOptions = {\n            vapidKey: vapidKey,\n            swScope: swRegistration.scope,\n            endpoint: pushSubscription.endpoint,\n            auth: arrayToBase64(pushSubscription.getKey('auth')),\n            p256dh: arrayToBase64(pushSubscription.getKey('p256dh'))\n          };\n          if (!!tokenDetails) return [3\n          /*break*/\n          , 3]; // No token, get a new one.\n\n          return [2\n          /*return*/\n          , getNewToken(firebaseDependencies, subscriptionOptions)];\n\n        case 3:\n          if (!!isTokenValid(tokenDetails.subscriptionOptions, subscriptionOptions)) return [3\n          /*break*/\n          , 8];\n          _a.label = 4;\n\n        case 4:\n          _a.trys.push([4, 6,, 7]);\n\n          return [4\n          /*yield*/\n          , requestDeleteToken(firebaseDependencies, tokenDetails.token)];\n\n        case 5:\n          _a.sent();\n\n          return [3\n          /*break*/\n          , 7];\n\n        case 6:\n          e_1 = _a.sent(); // Suppress errors because of #2364\n\n          console.warn(e_1);\n          return [3\n          /*break*/\n          , 7];\n\n        case 7:\n          return [2\n          /*return*/\n          , getNewToken(firebaseDependencies, subscriptionOptions)];\n\n        case 8:\n          if (Date.now() >= tokenDetails.createTime + TOKEN_EXPIRATION_MS) {\n            // Weekly token refresh\n            return [2\n            /*return*/\n            , updateToken({\n              token: tokenDetails.token,\n              createTime: Date.now(),\n              subscriptionOptions: subscriptionOptions\n            }, firebaseDependencies, swRegistration)];\n          } else {\n            // Valid token, nothing to do.\n            return [2\n            /*return*/\n            , tokenDetails.token];\n          }\n\n        case 9:\n          return [2\n          /*return*/\n          ];\n      }\n    });\n  });\n}\n/**\r\n * This method deletes the token from the database, unsubscribes the token from FCM, and unregisters\r\n * the push subscription if it exists.\r\n */\n\n\nfunction deleteToken(firebaseDependencies, swRegistration) {\n  return __awaiter(this, void 0, void 0, function () {\n    var tokenDetails, pushSubscription;\n    return __generator(this, function (_a) {\n      switch (_a.label) {\n        case 0:\n          return [4\n          /*yield*/\n          , dbGet(firebaseDependencies)];\n\n        case 1:\n          tokenDetails = _a.sent();\n          if (!tokenDetails) return [3\n          /*break*/\n          , 4];\n          return [4\n          /*yield*/\n          , requestDeleteToken(firebaseDependencies, tokenDetails.token)];\n\n        case 2:\n          _a.sent();\n\n          return [4\n          /*yield*/\n          , dbRemove(firebaseDependencies)];\n\n        case 3:\n          _a.sent();\n\n          _a.label = 4;\n\n        case 4:\n          return [4\n          /*yield*/\n          , swRegistration.pushManager.getSubscription()];\n\n        case 5:\n          pushSubscription = _a.sent();\n\n          if (pushSubscription) {\n            return [2\n            /*return*/\n            , pushSubscription.unsubscribe()];\n          } // If there's no SW, consider it a success.\n\n\n          return [2\n          /*return*/\n          , true];\n      }\n    });\n  });\n}\n\nfunction updateToken(tokenDetails, firebaseDependencies, swRegistration) {\n  return __awaiter(this, void 0, void 0, function () {\n    var updatedToken, updatedTokenDetails, e_2;\n    return __generator(this, function (_a) {\n      switch (_a.label) {\n        case 0:\n          _a.trys.push([0, 3,, 5]);\n\n          return [4\n          /*yield*/\n          , requestUpdateToken(firebaseDependencies, tokenDetails)];\n\n        case 1:\n          updatedToken = _a.sent();\n          updatedTokenDetails = __assign(__assign({}, tokenDetails), {\n            token: updatedToken,\n            createTime: Date.now()\n          });\n          return [4\n          /*yield*/\n          , dbSet(firebaseDependencies, updatedTokenDetails)];\n\n        case 2:\n          _a.sent();\n\n          return [2\n          /*return*/\n          , updatedToken];\n\n        case 3:\n          e_2 = _a.sent();\n          return [4\n          /*yield*/\n          , deleteToken(firebaseDependencies, swRegistration)];\n\n        case 4:\n          _a.sent();\n\n          throw e_2;\n\n        case 5:\n          return [2\n          /*return*/\n          ];\n      }\n    });\n  });\n}\n\nfunction getNewToken(firebaseDependencies, subscriptionOptions) {\n  return __awaiter(this, void 0, void 0, function () {\n    var token, tokenDetails;\n    return __generator(this, function (_a) {\n      switch (_a.label) {\n        case 0:\n          return [4\n          /*yield*/\n          , requestGetToken(firebaseDependencies, subscriptionOptions)];\n\n        case 1:\n          token = _a.sent();\n          tokenDetails = {\n            token: token,\n            createTime: Date.now(),\n            subscriptionOptions: subscriptionOptions\n          };\n          return [4\n          /*yield*/\n          , dbSet(firebaseDependencies, tokenDetails)];\n\n        case 2:\n          _a.sent();\n\n          return [2\n          /*return*/\n          , tokenDetails.token];\n      }\n    });\n  });\n}\n/**\r\n * Gets a PushSubscription for the current user.\r\n */\n\n\nfunction getPushSubscription(swRegistration, vapidKey) {\n  return __awaiter(this, void 0, void 0, function () {\n    var subscription;\n    return __generator(this, function (_a) {\n      switch (_a.label) {\n        case 0:\n          return [4\n          /*yield*/\n          , swRegistration.pushManager.getSubscription()];\n\n        case 1:\n          subscription = _a.sent();\n\n          if (subscription) {\n            return [2\n            /*return*/\n            , subscription];\n          }\n\n          return [2\n          /*return*/\n          , swRegistration.pushManager.subscribe({\n            userVisibleOnly: true,\n            // Chrome <= 75 doesn't support base64-encoded VAPID key. For backward compatibility, VAPID key\n            // submitted to pushManager#subscribe must be of type Uint8Array.\n            applicationServerKey: base64ToArray(vapidKey)\n          })];\n      }\n    });\n  });\n}\n/**\r\n * Checks if the saved tokenDetails object matches the configuration provided.\r\n */\n\n\nfunction isTokenValid(dbOptions, currentOptions) {\n  var isVapidKeyEqual = currentOptions.vapidKey === dbOptions.vapidKey;\n  var isEndpointEqual = currentOptions.endpoint === dbOptions.endpoint;\n  var isAuthEqual = currentOptions.auth === dbOptions.auth;\n  var isP256dhEqual = currentOptions.p256dh === dbOptions.p256dh;\n  return isVapidKeyEqual && isEndpointEqual && isAuthEqual && isP256dhEqual;\n}\n/**\r\n * @license\r\n * Copyright 2020 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\n\nfunction externalizePayload(internalPayload) {\n  var payload = {\n    from: internalPayload.from,\n    // eslint-disable-next-line camelcase\n    collapseKey: internalPayload.collapse_key\n  };\n  propagateNotificationPayload(payload, internalPayload);\n  propagateDataPayload(payload, internalPayload);\n  propagateFcmOptions(payload, internalPayload);\n  return payload;\n}\n\nfunction propagateNotificationPayload(payload, messagePayloadInternal) {\n  if (!messagePayloadInternal.notification) {\n    return;\n  }\n\n  payload.notification = {};\n  var title = messagePayloadInternal.notification.title;\n\n  if (!!title) {\n    payload.notification.title = title;\n  }\n\n  var body = messagePayloadInternal.notification.body;\n\n  if (!!body) {\n    payload.notification.body = body;\n  }\n\n  var image = messagePayloadInternal.notification.image;\n\n  if (!!image) {\n    payload.notification.image = image;\n  }\n}\n\nfunction propagateDataPayload(payload, messagePayloadInternal) {\n  if (!messagePayloadInternal.data) {\n    return;\n  }\n\n  payload.data = messagePayloadInternal.data;\n}\n\nfunction propagateFcmOptions(payload, messagePayloadInternal) {\n  if (!messagePayloadInternal.fcmOptions) {\n    return;\n  }\n\n  payload.fcmOptions = {};\n  var link = messagePayloadInternal.fcmOptions.link;\n\n  if (!!link) {\n    payload.fcmOptions.link = link;\n  } // eslint-disable-next-line camelcase\n\n\n  var analyticsLabel = messagePayloadInternal.fcmOptions.analytics_label;\n\n  if (!!analyticsLabel) {\n    payload.fcmOptions.analyticsLabel = analyticsLabel;\n  }\n}\n/**\r\n * @license\r\n * Copyright 2019 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\n\nfunction isConsoleMessage(data) {\n  // This message has a campaign ID, meaning it was sent using the Firebase Console.\n  return typeof data === 'object' && !!data && CONSOLE_CAMPAIGN_ID in data;\n}\n/**\r\n * @license\r\n * Copyright 2019 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\n/** Returns a promise that resolves after given time passes. */\n\n\nfunction sleep(ms) {\n  return new Promise(function (resolve) {\n    setTimeout(resolve, ms);\n  });\n}\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\n\nvar SwController =\n/** @class */\nfunction () {\n  function SwController(firebaseDependencies) {\n    var _this = this;\n\n    this.firebaseDependencies = firebaseDependencies; // A boolean flag to determine wether an app is using onBackgroundMessage or\n    // setBackgroundMessageHandler. onBackgroundMessage will receive a MessagePayload regardless of if\n    // a notification is displayed. Whereas, setBackgroundMessageHandler will swallow the\n    // MessagePayload if a NotificationPayload is included.\n\n    this.isOnBackgroundMessageUsed = null;\n    this.vapidKey = null;\n    this.bgMessageHandler = null;\n    self.addEventListener('push', function (e) {\n      e.waitUntil(_this.onPush(e));\n    });\n    self.addEventListener('pushsubscriptionchange', function (e) {\n      e.waitUntil(_this.onSubChange(e));\n    });\n    self.addEventListener('notificationclick', function (e) {\n      e.waitUntil(_this.onNotificationClick(e));\n    });\n  }\n\n  Object.defineProperty(SwController.prototype, \"app\", {\n    get: function () {\n      return this.firebaseDependencies.app;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  /**\r\n   * @deprecated. Use onBackgroundMessage(nextOrObserver: NextFn<object> | Observer<object>):\r\n   * Unsubscribe instead.\r\n   *\r\n   * Calling setBackgroundMessageHandler will opt in to some specific behaviors.\r\n   *\r\n   * 1.) If a notification doesn't need to be shown due to a window already being visible, then push\r\n   * messages will be sent to the page. 2.) If a notification needs to be shown, and the message\r\n   * contains no notification data this method will be called and the promise it returns will be\r\n   * passed to event.waitUntil. If you do not set this callback then all push messages will let and\r\n   * the developer can handle them in a their own 'push' event callback\r\n   *\r\n   * @param callback The callback to be called when a push message is received and a notification\r\n   * must be shown. The callback will be given the data from the push message.\r\n   */\n\n  SwController.prototype.setBackgroundMessageHandler = function (callback) {\n    this.isOnBackgroundMessageUsed = false;\n\n    if (!callback || typeof callback !== 'function') {\n      throw ERROR_FACTORY.create(\"invalid-bg-handler\"\n      /* INVALID_BG_HANDLER */\n      );\n    }\n\n    this.bgMessageHandler = callback;\n  };\n\n  SwController.prototype.onBackgroundMessage = function (nextOrObserver) {\n    var _this = this;\n\n    this.isOnBackgroundMessageUsed = true;\n    this.bgMessageHandler = nextOrObserver;\n    return function () {\n      _this.bgMessageHandler = null;\n    };\n  }; // TODO: Remove getToken from SW Controller. Calling this from an old SW can cause all kinds of\n  // trouble.\n\n\n  SwController.prototype.getToken = function () {\n    var _a, _b;\n\n    return __awaiter(this, void 0, void 0, function () {\n      var tokenDetails;\n      return __generator(this, function (_c) {\n        switch (_c.label) {\n          case 0:\n            if (!!this.vapidKey) return [3\n            /*break*/\n            , 2];\n            return [4\n            /*yield*/\n            , dbGet(this.firebaseDependencies)];\n\n          case 1:\n            tokenDetails = _c.sent();\n            this.vapidKey = (_b = (_a = tokenDetails === null || tokenDetails === void 0 ? void 0 : tokenDetails.subscriptionOptions) === null || _a === void 0 ? void 0 : _a.vapidKey) !== null && _b !== void 0 ? _b : DEFAULT_VAPID_KEY;\n            _c.label = 2;\n\n          case 2:\n            return [2\n            /*return*/\n            , getToken(this.firebaseDependencies, self.registration, this.vapidKey)];\n        }\n      });\n    });\n  }; // TODO: Remove deleteToken from SW Controller. Calling this from an old SW can cause all kinds of\n  // trouble.\n\n\n  SwController.prototype.deleteToken = function () {\n    return deleteToken(this.firebaseDependencies, self.registration);\n  };\n\n  SwController.prototype.requestPermission = function () {\n    throw ERROR_FACTORY.create(\"only-available-in-window\"\n    /* AVAILABLE_IN_WINDOW */\n    );\n  }; // TODO: Remove this together with getToken from SW Controller.\n\n\n  SwController.prototype.usePublicVapidKey = function (vapidKey) {\n    if (this.vapidKey !== null) {\n      throw ERROR_FACTORY.create(\"use-vapid-key-after-get-token\"\n      /* USE_VAPID_KEY_AFTER_GET_TOKEN */\n      );\n    }\n\n    if (typeof vapidKey !== 'string' || vapidKey.length === 0) {\n      throw ERROR_FACTORY.create(\"invalid-vapid-key\"\n      /* INVALID_VAPID_KEY */\n      );\n    }\n\n    this.vapidKey = vapidKey;\n  };\n\n  SwController.prototype.useServiceWorker = function () {\n    throw ERROR_FACTORY.create(\"only-available-in-window\"\n    /* AVAILABLE_IN_WINDOW */\n    );\n  };\n\n  SwController.prototype.onMessage = function () {\n    throw ERROR_FACTORY.create(\"only-available-in-window\"\n    /* AVAILABLE_IN_WINDOW */\n    );\n  };\n\n  SwController.prototype.onTokenRefresh = function () {\n    throw ERROR_FACTORY.create(\"only-available-in-window\"\n    /* AVAILABLE_IN_WINDOW */\n    );\n  };\n  /**\r\n   * A handler for push events that shows notifications based on the content of the payload.\r\n   *\r\n   * The payload must be a JSON-encoded Object with a `notification` key. The value of the\r\n   * `notification` property will be used as the NotificationOptions object passed to\r\n   * showNotification. Additionally, the `title` property of the notification object will be used as\r\n   * the title.\r\n   *\r\n   * If there is no notification data in the payload then no notification will be shown.\r\n   */\n\n\n  SwController.prototype.onPush = function (event) {\n    return __awaiter(this, void 0, void 0, function () {\n      var internalPayload, clientList, isNotificationShown, payload;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            internalPayload = getMessagePayloadInternal(event);\n\n            if (!internalPayload) {\n              console.debug(TAG + 'failed to get parsed MessagePayload from the PushEvent. Skip handling the push.');\n              return [2\n              /*return*/\n              ];\n            }\n\n            return [4\n            /*yield*/\n            , getClientList()];\n\n          case 1:\n            clientList = _a.sent();\n\n            if (hasVisibleClients(clientList)) {\n              return [2\n              /*return*/\n              , sendMessagePayloadInternalToWindows(clientList, internalPayload)];\n            }\n\n            isNotificationShown = false;\n            if (!!!internalPayload.notification) return [3\n            /*break*/\n            , 3];\n            return [4\n            /*yield*/\n            , showNotification(wrapInternalPayload(internalPayload))];\n\n          case 2:\n            _a.sent();\n\n            isNotificationShown = true;\n            _a.label = 3;\n\n          case 3:\n            // MessagePayload is only passed to `onBackgroundMessage`. Skip passing MessagePayload for\n            // the legacy `setBackgroundMessageHandler` to preserve the SDK behaviors.\n            if (isNotificationShown === true && this.isOnBackgroundMessageUsed === false) {\n              return [2\n              /*return*/\n              ];\n            }\n\n            if (!!this.bgMessageHandler) {\n              payload = externalizePayload(internalPayload);\n\n              if (typeof this.bgMessageHandler === 'function') {\n                this.bgMessageHandler(payload);\n              } else {\n                this.bgMessageHandler.next(payload);\n              }\n            } // wait briefly to allow onBackgroundMessage to complete\n\n\n            return [4\n            /*yield*/\n            , sleep(BACKGROUND_HANDLE_EXECUTION_TIME_LIMIT_MS)];\n\n          case 4:\n            // wait briefly to allow onBackgroundMessage to complete\n            _a.sent();\n\n            return [2\n            /*return*/\n            ];\n        }\n      });\n    });\n  };\n\n  SwController.prototype.onSubChange = function (event) {\n    var _a, _b;\n\n    return __awaiter(this, void 0, void 0, function () {\n      var newSubscription, tokenDetails;\n      return __generator(this, function (_c) {\n        switch (_c.label) {\n          case 0:\n            newSubscription = event.newSubscription;\n            if (!!newSubscription) return [3\n            /*break*/\n            , 2]; // Subscription revoked, delete token\n\n            return [4\n            /*yield*/\n            , deleteToken(this.firebaseDependencies, self.registration)];\n\n          case 1:\n            // Subscription revoked, delete token\n            _c.sent();\n\n            return [2\n            /*return*/\n            ];\n\n          case 2:\n            return [4\n            /*yield*/\n            , dbGet(this.firebaseDependencies)];\n\n          case 3:\n            tokenDetails = _c.sent();\n            return [4\n            /*yield*/\n            , deleteToken(this.firebaseDependencies, self.registration)];\n\n          case 4:\n            _c.sent();\n\n            return [4\n            /*yield*/\n            , getToken(this.firebaseDependencies, self.registration, (_b = (_a = tokenDetails === null || tokenDetails === void 0 ? void 0 : tokenDetails.subscriptionOptions) === null || _a === void 0 ? void 0 : _a.vapidKey) !== null && _b !== void 0 ? _b : DEFAULT_VAPID_KEY)];\n\n          case 5:\n            _c.sent();\n\n            return [2\n            /*return*/\n            ];\n        }\n      });\n    });\n  };\n\n  SwController.prototype.onNotificationClick = function (event) {\n    var _a, _b;\n\n    return __awaiter(this, void 0, void 0, function () {\n      var internalPayload, link, url, originUrl, client;\n      return __generator(this, function (_c) {\n        switch (_c.label) {\n          case 0:\n            internalPayload = (_b = (_a = event.notification) === null || _a === void 0 ? void 0 : _a.data) === null || _b === void 0 ? void 0 : _b[FCM_MSG];\n\n            if (!internalPayload) {\n              return [2\n              /*return*/\n              ];\n            } else if (event.action) {\n              // User clicked on an action button. This will allow developers to act on action button clicks\n              // by using a custom onNotificationClick listener that they define.\n              return [2\n              /*return*/\n              ];\n            } // Prevent other listeners from receiving the event\n\n\n            event.stopImmediatePropagation();\n            event.notification.close();\n            link = getLink(internalPayload);\n\n            if (!link) {\n              return [2\n              /*return*/\n              ];\n            }\n\n            url = new URL(link, self.location.href);\n            originUrl = new URL(self.location.origin);\n\n            if (url.host !== originUrl.host) {\n              return [2\n              /*return*/\n              ];\n            }\n\n            return [4\n            /*yield*/\n            , getWindowClient(url)];\n\n          case 1:\n            client = _c.sent();\n            if (!!client) return [3\n            /*break*/\n            , 4];\n            return [4\n            /*yield*/\n            , self.clients.openWindow(link)];\n\n          case 2:\n            client = _c.sent(); // Wait three seconds for the client to initialize and set up the message handler so that it\n            // can receive the message.\n\n            return [4\n            /*yield*/\n            , sleep(FOREGROUND_HANDLE_PREPARATION_TIME_MS)];\n\n          case 3:\n            // Wait three seconds for the client to initialize and set up the message handler so that it\n            // can receive the message.\n            _c.sent();\n\n            return [3\n            /*break*/\n            , 6];\n\n          case 4:\n            return [4\n            /*yield*/\n            , client.focus()];\n\n          case 5:\n            client = _c.sent();\n            _c.label = 6;\n\n          case 6:\n            if (!client) {\n              // Window Client will not be returned if it's for a third party origin.\n              return [2\n              /*return*/\n              ];\n            }\n\n            internalPayload.messageType = MessageType.NOTIFICATION_CLICKED;\n            internalPayload.isFirebaseMessaging = true;\n            return [2\n            /*return*/\n            , client.postMessage(internalPayload)];\n        }\n      });\n    });\n  };\n\n  return SwController;\n}();\n\nfunction wrapInternalPayload(internalPayload) {\n  var _a;\n\n  var wrappedInternalPayload = __assign({}, internalPayload.notification); // Put the message payload under FCM_MSG name so we can identify the notification as being an FCM\n  // notification vs a notification from somewhere else (i.e. normal web push or developer generated\n  // notification).\n\n\n  wrappedInternalPayload.data = (_a = {}, _a[FCM_MSG] = internalPayload, _a);\n  return wrappedInternalPayload;\n}\n\nfunction getMessagePayloadInternal(_a) {\n  var data = _a.data;\n\n  if (!data) {\n    return null;\n  }\n\n  try {\n    return data.json();\n  } catch (err) {\n    // Not JSON so not an FCM message.\n    return null;\n  }\n}\n/**\r\n * @param url The URL to look for when focusing a client.\r\n * @return Returns an existing window client or a newly opened WindowClient.\r\n */\n\n\nfunction getWindowClient(url) {\n  return __awaiter(this, void 0, void 0, function () {\n    var clientList, clientList_1, clientList_1_1, client, clientUrl;\n\n    var e_1, _a;\n\n    return __generator(this, function (_b) {\n      switch (_b.label) {\n        case 0:\n          return [4\n          /*yield*/\n          , getClientList()];\n\n        case 1:\n          clientList = _b.sent();\n\n          try {\n            for (clientList_1 = __values(clientList), clientList_1_1 = clientList_1.next(); !clientList_1_1.done; clientList_1_1 = clientList_1.next()) {\n              client = clientList_1_1.value;\n              clientUrl = new URL(client.url, self.location.href);\n\n              if (url.host === clientUrl.host) {\n                return [2\n                /*return*/\n                , client];\n              }\n            }\n          } catch (e_1_1) {\n            e_1 = {\n              error: e_1_1\n            };\n          } finally {\n            try {\n              if (clientList_1_1 && !clientList_1_1.done && (_a = clientList_1.return)) _a.call(clientList_1);\n            } finally {\n              if (e_1) throw e_1.error;\n            }\n          }\n\n          return [2\n          /*return*/\n          , null];\n      }\n    });\n  });\n}\n/**\r\n * @returns If there is currently a visible WindowClient, this method will resolve to true,\r\n * otherwise false.\r\n */\n\n\nfunction hasVisibleClients(clientList) {\n  return clientList.some(function (client) {\n    return client.visibilityState === 'visible' && // Ignore chrome-extension clients as that matches the background pages of extensions, which\n    // are always considered visible for some reason.\n    !client.url.startsWith('chrome-extension://');\n  });\n}\n\nfunction sendMessagePayloadInternalToWindows(clientList, internalPayload) {\n  var e_2, _a;\n\n  internalPayload.isFirebaseMessaging = true;\n  internalPayload.messageType = MessageType.PUSH_RECEIVED;\n\n  try {\n    for (var clientList_2 = __values(clientList), clientList_2_1 = clientList_2.next(); !clientList_2_1.done; clientList_2_1 = clientList_2.next()) {\n      var client = clientList_2_1.value;\n      client.postMessage(internalPayload);\n    }\n  } catch (e_2_1) {\n    e_2 = {\n      error: e_2_1\n    };\n  } finally {\n    try {\n      if (clientList_2_1 && !clientList_2_1.done && (_a = clientList_2.return)) _a.call(clientList_2);\n    } finally {\n      if (e_2) throw e_2.error;\n    }\n  }\n}\n\nfunction getClientList() {\n  return self.clients.matchAll({\n    type: 'window',\n    includeUncontrolled: true // TS doesn't know that \"type: 'window'\" means it'll return WindowClient[]\n\n  });\n}\n\nfunction showNotification(notificationPayloadInternal) {\n  var _a; // Note: Firefox does not support the maxActions property.\n  // https://developer.mozilla.org/en-US/docs/Web/API/notification/maxActions\n\n\n  var actions = notificationPayloadInternal.actions;\n  var maxActions = Notification.maxActions;\n\n  if (actions && maxActions && actions.length > maxActions) {\n    console.warn(\"This browser only supports \" + maxActions + \" actions. The remaining actions will not be displayed.\");\n  }\n\n  return self.registration.showNotification(\n  /* title= */\n  (_a = notificationPayloadInternal.title) !== null && _a !== void 0 ? _a : '', notificationPayloadInternal);\n}\n\nfunction getLink(payload) {\n  var _a, _b, _c; // eslint-disable-next-line camelcase\n\n\n  var link = (_b = (_a = payload.fcmOptions) === null || _a === void 0 ? void 0 : _a.link) !== null && _b !== void 0 ? _b : (_c = payload.notification) === null || _c === void 0 ? void 0 : _c.click_action;\n\n  if (link) {\n    return link;\n  }\n\n  if (isConsoleMessage(payload.data)) {\n    // Notification created in the Firebase Console. Redirect to origin.\n    return self.location.origin;\n  } else {\n    return null;\n  }\n}\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\n\nvar WindowController =\n/** @class */\nfunction () {\n  function WindowController(firebaseDependencies) {\n    var _this = this;\n\n    this.firebaseDependencies = firebaseDependencies;\n    this.vapidKey = null;\n    this.onMessageCallback = null;\n    navigator.serviceWorker.addEventListener('message', function (e) {\n      return _this.messageEventListener(e);\n    });\n  }\n\n  Object.defineProperty(WindowController.prototype, \"app\", {\n    get: function () {\n      return this.firebaseDependencies.app;\n    },\n    enumerable: false,\n    configurable: true\n  });\n\n  WindowController.prototype.messageEventListener = function (event) {\n    return __awaiter(this, void 0, void 0, function () {\n      var internalPayload, dataPayload;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            internalPayload = event.data;\n\n            if (!internalPayload.isFirebaseMessaging) {\n              return [2\n              /*return*/\n              ];\n            } // onMessageCallback is either a function or observer/subscriber.\n            // TODO: in the modularization release, have onMessage handle type MessagePayload as supposed to\n            // the legacy payload where some fields are in snake cases.\n\n\n            if (this.onMessageCallback && internalPayload.messageType === MessageType.PUSH_RECEIVED) {\n              if (typeof this.onMessageCallback === 'function') {\n                this.onMessageCallback(stripInternalFields(Object.assign({}, internalPayload)));\n              } else {\n                this.onMessageCallback.next(Object.assign({}, internalPayload));\n              }\n            }\n\n            dataPayload = internalPayload.data;\n            if (!(isConsoleMessage(dataPayload) && dataPayload[CONSOLE_CAMPAIGN_ANALYTICS_ENABLED] === '1')) return [3\n            /*break*/\n            , 2];\n            return [4\n            /*yield*/\n            , this.logEvent(internalPayload.messageType, dataPayload)];\n\n          case 1:\n            _a.sent();\n\n            _a.label = 2;\n\n          case 2:\n            return [2\n            /*return*/\n            ];\n        }\n      });\n    });\n  };\n\n  WindowController.prototype.getVapidKey = function () {\n    return this.vapidKey;\n  };\n\n  WindowController.prototype.getSwReg = function () {\n    return this.swRegistration;\n  };\n\n  WindowController.prototype.getToken = function (options) {\n    return __awaiter(this, void 0, void 0, function () {\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            if (!(Notification.permission === 'default')) return [3\n            /*break*/\n            , 2];\n            return [4\n            /*yield*/\n            , Notification.requestPermission()];\n\n          case 1:\n            _a.sent();\n\n            _a.label = 2;\n\n          case 2:\n            if (Notification.permission !== 'granted') {\n              throw ERROR_FACTORY.create(\"permission-blocked\"\n              /* PERMISSION_BLOCKED */\n              );\n            }\n\n            return [4\n            /*yield*/\n            , this.updateVapidKey(options === null || options === void 0 ? void 0 : options.vapidKey)];\n\n          case 3:\n            _a.sent();\n\n            return [4\n            /*yield*/\n            , this.updateSwReg(options === null || options === void 0 ? void 0 : options.serviceWorkerRegistration)];\n\n          case 4:\n            _a.sent();\n\n            return [2\n            /*return*/\n            , getToken(this.firebaseDependencies, this.swRegistration, this.vapidKey)];\n        }\n      });\n    });\n  };\n\n  WindowController.prototype.updateVapidKey = function (vapidKey) {\n    return __awaiter(this, void 0, void 0, function () {\n      return __generator(this, function (_a) {\n        if (!!vapidKey) {\n          this.vapidKey = vapidKey;\n        } else if (!this.vapidKey) {\n          this.vapidKey = DEFAULT_VAPID_KEY;\n        }\n\n        return [2\n        /*return*/\n        ];\n      });\n    });\n  };\n\n  WindowController.prototype.updateSwReg = function (swRegistration) {\n    return __awaiter(this, void 0, void 0, function () {\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            if (!(!swRegistration && !this.swRegistration)) return [3\n            /*break*/\n            , 2];\n            return [4\n            /*yield*/\n            , this.registerDefaultSw()];\n\n          case 1:\n            _a.sent();\n\n            _a.label = 2;\n\n          case 2:\n            if (!swRegistration && !!this.swRegistration) {\n              return [2\n              /*return*/\n              ];\n            }\n\n            if (!(swRegistration instanceof ServiceWorkerRegistration)) {\n              throw ERROR_FACTORY.create(\"invalid-sw-registration\"\n              /* INVALID_SW_REGISTRATION */\n              );\n            }\n\n            this.swRegistration = swRegistration;\n            return [2\n            /*return*/\n            ];\n        }\n      });\n    });\n  };\n\n  WindowController.prototype.registerDefaultSw = function () {\n    return __awaiter(this, void 0, void 0, function () {\n      var _a, e_1;\n\n      return __generator(this, function (_b) {\n        switch (_b.label) {\n          case 0:\n            _b.trys.push([0, 2,, 3]);\n\n            _a = this;\n            return [4\n            /*yield*/\n            , navigator.serviceWorker.register(DEFAULT_SW_PATH, {\n              scope: DEFAULT_SW_SCOPE\n            })];\n\n          case 1:\n            _a.swRegistration = _b.sent(); // The timing when browser updates sw when sw has an update is unreliable by my experiment. It\n            // leads to version conflict when the SDK upgrades to a newer version in the main page, but sw\n            // is stuck with the old version. For example,\n            // https://github.com/firebase/firebase-js-sdk/issues/2590 The following line reliably updates\n            // sw if there was an update.\n\n            this.swRegistration.update().catch(function () {\n              /* it is non blocking and we don't care if it failed */\n            });\n            return [3\n            /*break*/\n            , 3];\n\n          case 2:\n            e_1 = _b.sent();\n            throw ERROR_FACTORY.create(\"failed-service-worker-registration\"\n            /* FAILED_DEFAULT_REGISTRATION */\n            , {\n              browserErrorMessage: e_1.message\n            });\n\n          case 3:\n            return [2\n            /*return*/\n            ];\n        }\n      });\n    });\n  };\n\n  WindowController.prototype.deleteToken = function () {\n    return __awaiter(this, void 0, void 0, function () {\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            if (!!this.swRegistration) return [3\n            /*break*/\n            , 2];\n            return [4\n            /*yield*/\n            , this.registerDefaultSw()];\n\n          case 1:\n            _a.sent();\n\n            _a.label = 2;\n\n          case 2:\n            return [2\n            /*return*/\n            , deleteToken(this.firebaseDependencies, this.swRegistration)];\n        }\n      });\n    });\n  };\n  /**\r\n   * Request permission if it is not currently granted.\r\n   *\r\n   * @return Resolves if the permission was granted, rejects otherwise.\r\n   *\r\n   * @deprecated Use Notification.requestPermission() instead.\r\n   * https://developer.mozilla.org/en-US/docs/Web/API/Notification/requestPermission\r\n   */\n\n\n  WindowController.prototype.requestPermission = function () {\n    return __awaiter(this, void 0, void 0, function () {\n      var permissionResult;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            if (Notification.permission === 'granted') {\n              return [2\n              /*return*/\n              ];\n            }\n\n            return [4\n            /*yield*/\n            , Notification.requestPermission()];\n\n          case 1:\n            permissionResult = _a.sent();\n\n            if (permissionResult === 'granted') {\n              return [2\n              /*return*/\n              ];\n            } else if (permissionResult === 'denied') {\n              throw ERROR_FACTORY.create(\"permission-blocked\"\n              /* PERMISSION_BLOCKED */\n              );\n            } else {\n              throw ERROR_FACTORY.create(\"permission-default\"\n              /* PERMISSION_DEFAULT */\n              );\n            }\n\n        }\n      });\n    });\n  };\n  /**\r\n   * @deprecated. Use getToken(options?: {vapidKey?: string; serviceWorkerRegistration?:\r\n   * ServiceWorkerRegistration;}): Promise<string> instead.\r\n   */\n\n\n  WindowController.prototype.usePublicVapidKey = function (vapidKey) {\n    if (this.vapidKey !== null) {\n      throw ERROR_FACTORY.create(\"use-vapid-key-after-get-token\"\n      /* USE_VAPID_KEY_AFTER_GET_TOKEN */\n      );\n    }\n\n    if (typeof vapidKey !== 'string' || vapidKey.length === 0) {\n      throw ERROR_FACTORY.create(\"invalid-vapid-key\"\n      /* INVALID_VAPID_KEY */\n      );\n    }\n\n    this.vapidKey = vapidKey;\n  };\n  /**\r\n   * @deprecated. Use getToken(options?: {vapidKey?: string; serviceWorkerRegistration?:\r\n   * ServiceWorkerRegistration;}): Promise<string> instead.\r\n   */\n\n\n  WindowController.prototype.useServiceWorker = function (swRegistration) {\n    if (!(swRegistration instanceof ServiceWorkerRegistration)) {\n      throw ERROR_FACTORY.create(\"invalid-sw-registration\"\n      /* INVALID_SW_REGISTRATION */\n      );\n    }\n\n    if (this.swRegistration) {\n      throw ERROR_FACTORY.create(\"use-sw-after-get-token\"\n      /* USE_SW_AFTER_GET_TOKEN */\n      );\n    }\n\n    this.swRegistration = swRegistration;\n  };\n  /**\r\n   * @param nextOrObserver An observer object or a function triggered on message.\r\n   *\r\n   * @return The unsubscribe function for the observer.\r\n   */\n\n\n  WindowController.prototype.onMessage = function (nextOrObserver) {\n    var _this = this;\n\n    this.onMessageCallback = nextOrObserver;\n    return function () {\n      _this.onMessageCallback = null;\n    };\n  };\n\n  WindowController.prototype.setBackgroundMessageHandler = function () {\n    throw ERROR_FACTORY.create(\"only-available-in-sw\"\n    /* AVAILABLE_IN_SW */\n    );\n  };\n\n  WindowController.prototype.onBackgroundMessage = function () {\n    throw ERROR_FACTORY.create(\"only-available-in-sw\"\n    /* AVAILABLE_IN_SW */\n    );\n  };\n  /**\r\n   * @deprecated No-op. It was initially designed with token rotation requests from server in mind.\r\n   * However, the plan to implement such feature was abandoned.\r\n   */\n\n\n  WindowController.prototype.onTokenRefresh = function () {\n    return function () {};\n  };\n\n  WindowController.prototype.logEvent = function (messageType, data) {\n    return __awaiter(this, void 0, void 0, function () {\n      var eventType, analytics;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            eventType = getEventType(messageType);\n            return [4\n            /*yield*/\n            , this.firebaseDependencies.analyticsProvider.get()];\n\n          case 1:\n            analytics = _a.sent();\n            analytics.logEvent(eventType, {\n              /* eslint-disable camelcase */\n              message_id: data[CONSOLE_CAMPAIGN_ID],\n              message_name: data[CONSOLE_CAMPAIGN_NAME],\n              message_time: data[CONSOLE_CAMPAIGN_TIME],\n              message_device_time: Math.floor(Date.now() / 1000)\n              /* eslint-enable camelcase */\n\n            });\n            return [2\n            /*return*/\n            ];\n        }\n      });\n    });\n  };\n\n  return WindowController;\n}();\n\nfunction getEventType(messageType) {\n  switch (messageType) {\n    case MessageType.NOTIFICATION_CLICKED:\n      return 'notification_open';\n\n    case MessageType.PUSH_RECEIVED:\n      return 'notification_foreground';\n\n    default:\n      throw new Error();\n  }\n}\n\nfunction stripInternalFields(internalPayload) {\n  delete internalPayload.messageType;\n  delete internalPayload.isFirebaseMessaging;\n  return internalPayload;\n}\n/**\r\n * @license\r\n * Copyright 2019 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\n\nfunction extractAppConfig(app) {\n  var e_1, _a;\n\n  if (!app || !app.options) {\n    throw getMissingValueError('App Configuration Object');\n  }\n\n  if (!app.name) {\n    throw getMissingValueError('App Name');\n  } // Required app config keys\n\n\n  var configKeys = ['projectId', 'apiKey', 'appId', 'messagingSenderId'];\n  var options = app.options;\n\n  try {\n    for (var configKeys_1 = __values(configKeys), configKeys_1_1 = configKeys_1.next(); !configKeys_1_1.done; configKeys_1_1 = configKeys_1.next()) {\n      var keyName = configKeys_1_1.value;\n\n      if (!options[keyName]) {\n        throw getMissingValueError(keyName);\n      }\n    }\n  } catch (e_1_1) {\n    e_1 = {\n      error: e_1_1\n    };\n  } finally {\n    try {\n      if (configKeys_1_1 && !configKeys_1_1.done && (_a = configKeys_1.return)) _a.call(configKeys_1);\n    } finally {\n      if (e_1) throw e_1.error;\n    }\n  }\n\n  return {\n    appName: app.name,\n    projectId: options.projectId,\n    apiKey: options.apiKey,\n    appId: options.appId,\n    senderId: options.messagingSenderId\n  };\n}\n\nfunction getMissingValueError(valueName) {\n  return ERROR_FACTORY.create(\"missing-app-config-values\"\n  /* MISSING_APP_CONFIG_VALUES */\n  , {\n    valueName: valueName\n  });\n}\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\n\nvar MESSAGING_NAME = 'messaging';\n\nfunction factoryMethod(container) {\n  // Dependencies.\n  var app = container.getProvider('app').getImmediate();\n  var appConfig = extractAppConfig(app);\n  var installations = container.getProvider('installations').getImmediate();\n  var analyticsProvider = container.getProvider('analytics-internal');\n  var firebaseDependencies = {\n    app: app,\n    appConfig: appConfig,\n    installations: installations,\n    analyticsProvider: analyticsProvider\n  };\n\n  if (!isSupported()) {\n    throw ERROR_FACTORY.create(\"unsupported-browser\"\n    /* UNSUPPORTED_BROWSER */\n    );\n  }\n\n  if (self && 'ServiceWorkerGlobalScope' in self) {\n    // Running in ServiceWorker context\n    return new SwController(firebaseDependencies);\n  } else {\n    // Assume we are in the window context.\n    return new WindowController(firebaseDependencies);\n  }\n}\n\nvar NAMESPACE_EXPORTS = {\n  isSupported: isSupported\n};\nfirebase.INTERNAL.registerComponent(new Component(MESSAGING_NAME, factoryMethod, \"PUBLIC\"\n/* PUBLIC */\n).setServiceProps(NAMESPACE_EXPORTS));\n\nfunction isSupported() {\n  if (self && 'ServiceWorkerGlobalScope' in self) {\n    // Running in ServiceWorker context\n    return isSWControllerSupported();\n  } else {\n    // Assume we are in the window context.\n    return isWindowControllerSupported();\n  }\n}\n/**\r\n * Checks to see if the required APIs exist.\r\n */\n\n\nfunction isWindowControllerSupported() {\n  return 'indexedDB' in window && indexedDB !== null && navigator.cookieEnabled && 'serviceWorker' in navigator && 'PushManager' in window && 'Notification' in window && 'fetch' in window && ServiceWorkerRegistration.prototype.hasOwnProperty('showNotification') && PushSubscription.prototype.hasOwnProperty('getKey');\n}\n/**\r\n * Checks to see if the required APIs exist within SW Context.\r\n */\n\n\nfunction isSWControllerSupported() {\n  return 'indexedDB' in self && indexedDB !== null && 'PushManager' in self && 'Notification' in self && ServiceWorkerRegistration.prototype.hasOwnProperty('showNotification') && PushSubscription.prototype.hasOwnProperty('getKey');\n}","map":{"version":3,"mappings":"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","names":["ERROR_MAP","_a","ERROR_FACTORY","ErrorFactory","DEFAULT_SW_PATH","DEFAULT_SW_SCOPE","DEFAULT_VAPID_KEY","ENDPOINT","FCM_MSG","TAG","CONSOLE_CAMPAIGN_ANALYTICS_ENABLED","CONSOLE_CAMPAIGN_ID","CONSOLE_CAMPAIGN_TIME","CONSOLE_CAMPAIGN_NAME","BACKGROUND_HANDLE_EXECUTION_TIME_LIMIT_MS","FOREGROUND_HANDLE_PREPARATION_TIME_MS","MessageType","arrayToBase64","array","uint8Array","Uint8Array","base64String","btoa","String","fromCharCode","apply","__spreadArray","replace","base64ToArray","padding","repeat","length","base64","rawData","atob","outputArray","i","charCodeAt","OLD_DB_NAME","OLD_DB_VERSION","OLD_OBJECT_STORE_NAME","migrateOldDatabase","senderId","indexedDB","databases","dbNames","map","name","includes","tokenDetails","openDb","db","oldVersion","objectStoreNames","contains","objectStore","transaction","index","get","value","_b","clear","oldDetails","auth","p256dh","endpoint","token","fcmToken","createTime","Date","now","subscriptionOptions","swScope","vapidKey","close","deleteDb","checkTokenDetails","DATABASE_NAME","DATABASE_VERSION","OBJECT_STORE_NAME","dbPromise","getDbPromise","upgradeDb","createObjectStore","dbGet","firebaseDependencies","key","getKey","appConfig","oldTokenDetails","dbSet","tx","put","complete","dbRemove","delete","appId","requestGetToken","getHeaders","headers","body","getBody","subscribeOptions","method","JSON","stringify","fetch","getEndpoint","response","json","responseData","create","errorInfo","err_1","error","message","requestUpdateToken","updateOptions","err_2","requestDeleteToken","unsubscribeOptions","err_3","projectId","installations","getToken","authToken","Headers","Accept","apiKey","web","applicationPubKey","TOKEN_EXPIRATION_MS","swRegistration","Notification","permission","getPushSubscription","pushSubscription","scope","getNewToken","isTokenValid","console","warn","e_1","updateToken","deleteToken","pushManager","getSubscription","unsubscribe","updatedToken","updatedTokenDetails","e_2","subscription","subscribe","userVisibleOnly","applicationServerKey","dbOptions","currentOptions","isVapidKeyEqual","isEndpointEqual","isAuthEqual","isP256dhEqual","externalizePayload","internalPayload","payload","from","collapseKey","collapse_key","propagateNotificationPayload","propagateDataPayload","propagateFcmOptions","messagePayloadInternal","notification","title","image","data","fcmOptions","link","analyticsLabel","analytics_label","isConsoleMessage","sleep","ms","Promise","setTimeout","resolve","self","addEventListener","e","waitUntil","_this","onPush","onSubChange","onNotificationClick","Object","SwController","app","callback","isOnBackgroundMessageUsed","bgMessageHandler","nextOrObserver","_c","registration","event","getMessagePayloadInternal","debug","getClientList","clientList","hasVisibleClients","sendMessagePayloadInternalToWindows","isNotificationShown","showNotification","wrapInternalPayload","next","newSubscription","action","stopImmediatePropagation","getLink","url","URL","location","href","originUrl","origin","host","getWindowClient","client","clients","openWindow","focus","messageType","NOTIFICATION_CLICKED","isFirebaseMessaging","postMessage","wrappedInternalPayload","err","clientList_1","clientList_1_1","clientUrl","some","visibilityState","startsWith","PUSH_RECEIVED","clientList_2_1","matchAll","type","includeUncontrolled","notificationPayloadInternal","actions","maxActions","click_action","navigator","serviceWorker","messageEventListener","WindowController","onMessageCallback","stripInternalFields","assign","dataPayload","logEvent","options","requestPermission","updateVapidKey","updateSwReg","serviceWorkerRegistration","registerDefaultSw","ServiceWorkerRegistration","register","update","catch","browserErrorMessage","permissionResult","eventType","getEventType","analyticsProvider","analytics","message_id","message_name","message_time","message_device_time","Math","floor","Error","extractAppConfig","getMissingValueError","configKeys","configKeys_1_1","keyName","appName","messagingSenderId","valueName","MESSAGING_NAME","factoryMethod","container","getProvider","getImmediate","isSupported","NAMESPACE_EXPORTS","firebase","INTERNAL","registerComponent","Component","setServiceProps","isSWControllerSupported","isWindowControllerSupported","window","cookieEnabled","prototype","hasOwnProperty","PushSubscription"],"sources":["E:\\FYP\\HospitalAid\\Implementation\\Web App\\Website\\node_modules\\@firebase\\messaging\\src\\util\\errors.ts","E:\\FYP\\HospitalAid\\Implementation\\Web App\\Website\\node_modules\\@firebase\\messaging\\src\\util\\constants.ts","E:\\FYP\\HospitalAid\\Implementation\\Web App\\Website\\node_modules\\@firebase\\messaging\\src\\interfaces\\internal-message-payload.ts","E:\\FYP\\HospitalAid\\Implementation\\Web App\\Website\\node_modules\\@firebase\\messaging\\src\\helpers\\array-base64-translator.ts","E:\\FYP\\HospitalAid\\Implementation\\Web App\\Website\\node_modules\\@firebase\\messaging\\src\\helpers\\migrate-old-database.ts","E:\\FYP\\HospitalAid\\Implementation\\Web App\\Website\\node_modules\\@firebase\\messaging\\src\\helpers\\idb-manager.ts","E:\\FYP\\HospitalAid\\Implementation\\Web App\\Website\\node_modules\\@firebase\\messaging\\src\\core\\api.ts","E:\\FYP\\HospitalAid\\Implementation\\Web App\\Website\\node_modules\\@firebase\\messaging\\src\\core\\token-management.ts","E:\\FYP\\HospitalAid\\Implementation\\Web App\\Website\\node_modules\\@firebase\\messaging\\src\\helpers\\externalizePayload.ts","E:\\FYP\\HospitalAid\\Implementation\\Web App\\Website\\node_modules\\@firebase\\messaging\\src\\helpers\\is-console-message.ts","E:\\FYP\\HospitalAid\\Implementation\\Web App\\Website\\node_modules\\@firebase\\messaging\\src\\helpers\\sleep.ts","E:\\FYP\\HospitalAid\\Implementation\\Web App\\Website\\node_modules\\@firebase\\messaging\\src\\controllers\\sw-controller.ts","E:\\FYP\\HospitalAid\\Implementation\\Web App\\Website\\node_modules\\@firebase\\messaging\\src\\controllers\\window-controller.ts","E:\\FYP\\HospitalAid\\Implementation\\Web App\\Website\\node_modules\\@firebase\\messaging\\src\\helpers\\extract-app-config.ts","E:\\FYP\\HospitalAid\\Implementation\\Web App\\Website\\node_modules\\@firebase\\messaging\\src\\index.ts"],"sourcesContent":["/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { ErrorFactory, ErrorMap } from '@firebase/util';\n\nexport const enum ErrorCode {\n  MISSING_APP_CONFIG_VALUES = 'missing-app-config-values',\n  AVAILABLE_IN_WINDOW = 'only-available-in-window',\n  AVAILABLE_IN_SW = 'only-available-in-sw',\n  PERMISSION_DEFAULT = 'permission-default',\n  PERMISSION_BLOCKED = 'permission-blocked',\n  UNSUPPORTED_BROWSER = 'unsupported-browser',\n  FAILED_DEFAULT_REGISTRATION = 'failed-service-worker-registration',\n  TOKEN_SUBSCRIBE_FAILED = 'token-subscribe-failed',\n  TOKEN_SUBSCRIBE_NO_TOKEN = 'token-subscribe-no-token',\n  TOKEN_UNSUBSCRIBE_FAILED = 'token-unsubscribe-failed',\n  TOKEN_UPDATE_FAILED = 'token-update-failed',\n  TOKEN_UPDATE_NO_TOKEN = 'token-update-no-token',\n  INVALID_BG_HANDLER = 'invalid-bg-handler',\n  USE_SW_AFTER_GET_TOKEN = 'use-sw-after-get-token',\n  INVALID_SW_REGISTRATION = 'invalid-sw-registration',\n  USE_VAPID_KEY_AFTER_GET_TOKEN = 'use-vapid-key-after-get-token',\n  INVALID_VAPID_KEY = 'invalid-vapid-key'\n}\n\nexport const ERROR_MAP: ErrorMap<ErrorCode> = {\n  [ErrorCode.MISSING_APP_CONFIG_VALUES]:\n    'Missing App configuration value: \"{$valueName}\"',\n  [ErrorCode.AVAILABLE_IN_WINDOW]:\n    'This method is available in a Window context.',\n  [ErrorCode.AVAILABLE_IN_SW]:\n    'This method is available in a service worker context.',\n  [ErrorCode.PERMISSION_DEFAULT]:\n    'The notification permission was not granted and dismissed instead.',\n  [ErrorCode.PERMISSION_BLOCKED]:\n    'The notification permission was not granted and blocked instead.',\n  [ErrorCode.UNSUPPORTED_BROWSER]:\n    \"This browser doesn't support the API's required to use the firebase SDK.\",\n  [ErrorCode.FAILED_DEFAULT_REGISTRATION]:\n    'We are unable to register the default service worker. {$browserErrorMessage}',\n  [ErrorCode.TOKEN_SUBSCRIBE_FAILED]:\n    'A problem occurred while subscribing the user to FCM: {$errorInfo}',\n  [ErrorCode.TOKEN_SUBSCRIBE_NO_TOKEN]:\n    'FCM returned no token when subscribing the user to push.',\n  [ErrorCode.TOKEN_UNSUBSCRIBE_FAILED]:\n    'A problem occurred while unsubscribing the ' +\n    'user from FCM: {$errorInfo}',\n  [ErrorCode.TOKEN_UPDATE_FAILED]:\n    'A problem occurred while updating the user from FCM: {$errorInfo}',\n  [ErrorCode.TOKEN_UPDATE_NO_TOKEN]:\n    'FCM returned no token when updating the user to push.',\n  [ErrorCode.USE_SW_AFTER_GET_TOKEN]:\n    'The useServiceWorker() method may only be called once and must be ' +\n    'called before calling getToken() to ensure your service worker is used.',\n  [ErrorCode.INVALID_SW_REGISTRATION]:\n    'The input to useServiceWorker() must be a ServiceWorkerRegistration.',\n  [ErrorCode.INVALID_BG_HANDLER]:\n    'The input to setBackgroundMessageHandler() must be a function.',\n  [ErrorCode.INVALID_VAPID_KEY]: 'The public VAPID key must be a string.',\n  [ErrorCode.USE_VAPID_KEY_AFTER_GET_TOKEN]:\n    'The usePublicVapidKey() method may only be called once and must be ' +\n    'called before calling getToken() to ensure your VAPID key is used.'\n};\n\ninterface ErrorParams {\n  [ErrorCode.MISSING_APP_CONFIG_VALUES]: {\n    valueName: string;\n  };\n  [ErrorCode.FAILED_DEFAULT_REGISTRATION]: { browserErrorMessage: string };\n  [ErrorCode.TOKEN_SUBSCRIBE_FAILED]: { errorInfo: string };\n  [ErrorCode.TOKEN_UNSUBSCRIBE_FAILED]: { errorInfo: string };\n  [ErrorCode.TOKEN_UPDATE_FAILED]: { errorInfo: string };\n}\n\nexport const ERROR_FACTORY = new ErrorFactory<ErrorCode, ErrorParams>(\n  'messaging',\n  'Messaging',\n  ERROR_MAP\n);\n","/**\n * @license\n * Copyright 2019 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nexport const DEFAULT_SW_PATH = '/firebase-messaging-sw.js';\nexport const DEFAULT_SW_SCOPE = '/firebase-cloud-messaging-push-scope';\n\nexport const DEFAULT_VAPID_KEY =\n  'BDOU99-h67HcA6JeFXHbSNMu7e2yNNu3RzoMj8TM4W88jITfq7ZmPvIM1Iv-4_l2LxQcYwhqby2xGpWwzjfAnG4';\n\nexport const ENDPOINT = 'https://fcmregistrations.googleapis.com/v1';\n\n// Key of FCM Payload in Notification's data field.\nexport const FCM_MSG = 'FCM_MSG';\nexport const TAG = 'FirebaseMessaging: ';\n\n// Set to '1' if Analytics is enabled for the campaign\nexport const CONSOLE_CAMPAIGN_ANALYTICS_ENABLED = 'google.c.a.e';\nexport const CONSOLE_CAMPAIGN_ID = 'google.c.a.c_id';\nexport const CONSOLE_CAMPAIGN_TIME = 'google.c.a.ts';\nexport const CONSOLE_CAMPAIGN_NAME = 'google.c.a.c_l';\n\n// Due to the fact that onBackgroundMessage can't be awaited (to support rxjs), a silent push\n// warning might be shown by the browser if the callback fails to completes by the end of onPush.\n// Experiments were ran to determine the majority onBackground message clock time. This brief\n// blocking time would allow majority of the onBackgroundMessage callback to finish.\nexport const BACKGROUND_HANDLE_EXECUTION_TIME_LIMIT_MS = 1000;\n\n// Preparation time for client to initialize and set up the message handler.\nexport const FOREGROUND_HANDLE_PREPARATION_TIME_MS = 3000;\n","/**\n * @license\n * Copyright 2018 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except\n * in compliance with the License. You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under the License\n * is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express\n * or implied. See the License for the specific language governing permissions and limitations under\n * the License.\n */\n\nimport {\n  CONSOLE_CAMPAIGN_ANALYTICS_ENABLED,\n  CONSOLE_CAMPAIGN_ID,\n  CONSOLE_CAMPAIGN_NAME,\n  CONSOLE_CAMPAIGN_TIME\n} from '../util/constants';\n\nexport interface MessagePayloadInternal {\n  notification?: NotificationPayloadInternal;\n  data?: unknown;\n  fcmOptions?: FcmOptionsInternal;\n  messageType?: MessageType;\n  isFirebaseMessaging?: boolean;\n  from: string;\n  // eslint-disable-next-line camelcase\n  collapse_key: string;\n}\n\nexport interface NotificationPayloadInternal extends NotificationOptions {\n  title: string;\n  // Supported in the Legacy Send API.\n  // See:https://firebase.google.com/docs/cloud-messaging/xmpp-server-ref.\n  // eslint-disable-next-line camelcase\n  click_action?: string;\n}\n\n// Defined in\n// https://firebase.google.com/docs/reference/fcm/rest/v1/projects.messages#webpushfcmoptions. Note\n// that the keys are sent to the clients in snake cases which we need to convert to camel so it can\n// be exposed as a type to match the Firebase API convention.\nexport interface FcmOptionsInternal {\n  link?: string;\n\n  // eslint-disable-next-line camelcase\n  analytics_label?: string;\n}\n\nexport enum MessageType {\n  PUSH_RECEIVED = 'push-received',\n  NOTIFICATION_CLICKED = 'notification-clicked'\n}\n\n/** Additional data of a message sent from the FN Console. */\nexport interface ConsoleMessageData {\n  [CONSOLE_CAMPAIGN_ID]: string;\n  [CONSOLE_CAMPAIGN_TIME]: string;\n  [CONSOLE_CAMPAIGN_NAME]?: string;\n  [CONSOLE_CAMPAIGN_ANALYTICS_ENABLED]?: '1';\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nexport function arrayToBase64(array: Uint8Array | ArrayBuffer): string {\n  const uint8Array = new Uint8Array(array);\n  const base64String = btoa(String.fromCharCode(...uint8Array));\n  return base64String.replace(/=/g, '').replace(/\\+/g, '-').replace(/\\//g, '_');\n}\n\nexport function base64ToArray(base64String: string): Uint8Array {\n  const padding = '='.repeat((4 - (base64String.length % 4)) % 4);\n  const base64 = (base64String + padding)\n    .replace(/\\-/g, '+')\n    .replace(/_/g, '/');\n\n  const rawData = atob(base64);\n  const outputArray = new Uint8Array(rawData.length);\n\n  for (let i = 0; i < rawData.length; ++i) {\n    outputArray[i] = rawData.charCodeAt(i);\n  }\n  return outputArray;\n}\n","/**\n * @license\n * Copyright 2019 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { deleteDb, openDb } from 'idb';\n\nimport { TokenDetails } from '../interfaces/token-details';\nimport { arrayToBase64 } from './array-base64-translator';\n\n// https://github.com/firebase/firebase-js-sdk/blob/7857c212f944a2a9eb421fd4cb7370181bc034b5/packages/messaging/src/interfaces/token-details.ts\nexport interface V2TokenDetails {\n  fcmToken: string;\n  swScope: string;\n  vapidKey: string | Uint8Array;\n  subscription: PushSubscription;\n  fcmSenderId: string;\n  fcmPushSet: string;\n  createTime?: number;\n  endpoint?: string;\n  auth?: string;\n  p256dh?: string;\n}\n\n// https://github.com/firebase/firebase-js-sdk/blob/6b5b15ce4ea3df5df5df8a8b33a4e41e249c7715/packages/messaging/src/interfaces/token-details.ts\nexport interface V3TokenDetails {\n  fcmToken: string;\n  swScope: string;\n  vapidKey: Uint8Array;\n  fcmSenderId: string;\n  fcmPushSet: string;\n  endpoint: string;\n  auth: ArrayBuffer;\n  p256dh: ArrayBuffer;\n  createTime: number;\n}\n\n// https://github.com/firebase/firebase-js-sdk/blob/9567dba664732f681fa7fe60f5b7032bb1daf4c9/packages/messaging/src/interfaces/token-details.ts\nexport interface V4TokenDetails {\n  fcmToken: string;\n  swScope: string;\n  vapidKey: Uint8Array;\n  fcmSenderId: string;\n  endpoint: string;\n  auth: ArrayBufferLike;\n  p256dh: ArrayBufferLike;\n  createTime: number;\n}\n\nconst OLD_DB_NAME = 'fcm_token_details_db';\n/**\n * The last DB version of 'fcm_token_details_db' was 4. This is one higher, so that the upgrade\n * callback is called for all versions of the old DB.\n */\nconst OLD_DB_VERSION = 5;\nconst OLD_OBJECT_STORE_NAME = 'fcm_token_object_Store';\n\nexport async function migrateOldDatabase(\n  senderId: string\n): Promise<TokenDetails | null> {\n  if ('databases' in indexedDB) {\n    // indexedDb.databases() is an IndexedDB v3 API and does not exist in all browsers. TODO: Remove\n    // typecast when it lands in TS types.\n    const databases = await (indexedDB as {\n      databases(): Promise<Array<{ name: string; version: number }>>;\n    }).databases();\n    const dbNames = databases.map(db => db.name);\n\n    if (!dbNames.includes(OLD_DB_NAME)) {\n      // old DB didn't exist, no need to open.\n      return null;\n    }\n  }\n\n  let tokenDetails: TokenDetails | null = null;\n\n  const db = await openDb(OLD_DB_NAME, OLD_DB_VERSION, async db => {\n    if (db.oldVersion < 2) {\n      // Database too old, skip migration.\n      return;\n    }\n\n    if (!db.objectStoreNames.contains(OLD_OBJECT_STORE_NAME)) {\n      // Database did not exist. Nothing to do.\n      return;\n    }\n\n    const objectStore = db.transaction.objectStore(OLD_OBJECT_STORE_NAME);\n    const value = await objectStore.index('fcmSenderId').get(senderId);\n    await objectStore.clear();\n\n    if (!value) {\n      // No entry in the database, nothing to migrate.\n      return;\n    }\n\n    if (db.oldVersion === 2) {\n      const oldDetails = value as V2TokenDetails;\n\n      if (!oldDetails.auth || !oldDetails.p256dh || !oldDetails.endpoint) {\n        return;\n      }\n\n      tokenDetails = {\n        token: oldDetails.fcmToken,\n        createTime: oldDetails.createTime ?? Date.now(),\n        subscriptionOptions: {\n          auth: oldDetails.auth,\n          p256dh: oldDetails.p256dh,\n          endpoint: oldDetails.endpoint,\n          swScope: oldDetails.swScope,\n          vapidKey:\n            typeof oldDetails.vapidKey === 'string'\n              ? oldDetails.vapidKey\n              : arrayToBase64(oldDetails.vapidKey)\n        }\n      };\n    } else if (db.oldVersion === 3) {\n      const oldDetails = value as V3TokenDetails;\n\n      tokenDetails = {\n        token: oldDetails.fcmToken,\n        createTime: oldDetails.createTime,\n        subscriptionOptions: {\n          auth: arrayToBase64(oldDetails.auth),\n          p256dh: arrayToBase64(oldDetails.p256dh),\n          endpoint: oldDetails.endpoint,\n          swScope: oldDetails.swScope,\n          vapidKey: arrayToBase64(oldDetails.vapidKey)\n        }\n      };\n    } else if (db.oldVersion === 4) {\n      const oldDetails = value as V4TokenDetails;\n\n      tokenDetails = {\n        token: oldDetails.fcmToken,\n        createTime: oldDetails.createTime,\n        subscriptionOptions: {\n          auth: arrayToBase64(oldDetails.auth),\n          p256dh: arrayToBase64(oldDetails.p256dh),\n          endpoint: oldDetails.endpoint,\n          swScope: oldDetails.swScope,\n          vapidKey: arrayToBase64(oldDetails.vapidKey)\n        }\n      };\n    }\n  });\n  db.close();\n\n  // Delete all old databases.\n  await deleteDb(OLD_DB_NAME);\n  await deleteDb('fcm_vapid_details_db');\n  await deleteDb('undefined');\n\n  return checkTokenDetails(tokenDetails) ? tokenDetails : null;\n}\n\nfunction checkTokenDetails(\n  tokenDetails: TokenDetails | null\n): tokenDetails is TokenDetails {\n  if (!tokenDetails || !tokenDetails.subscriptionOptions) {\n    return false;\n  }\n  const { subscriptionOptions } = tokenDetails;\n  return (\n    typeof tokenDetails.createTime === 'number' &&\n    tokenDetails.createTime > 0 &&\n    typeof tokenDetails.token === 'string' &&\n    tokenDetails.token.length > 0 &&\n    typeof subscriptionOptions.auth === 'string' &&\n    subscriptionOptions.auth.length > 0 &&\n    typeof subscriptionOptions.p256dh === 'string' &&\n    subscriptionOptions.p256dh.length > 0 &&\n    typeof subscriptionOptions.endpoint === 'string' &&\n    subscriptionOptions.endpoint.length > 0 &&\n    typeof subscriptionOptions.swScope === 'string' &&\n    subscriptionOptions.swScope.length > 0 &&\n    typeof subscriptionOptions.vapidKey === 'string' &&\n    subscriptionOptions.vapidKey.length > 0\n  );\n}\n","/**\n * @license\n * Copyright 2019 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { DB, deleteDb, openDb } from 'idb';\n\nimport { FirebaseInternalDependencies } from '../interfaces/internal-dependencies';\nimport { TokenDetails } from '../interfaces/token-details';\nimport { migrateOldDatabase } from './migrate-old-database';\n\n// Exported for tests.\nexport const DATABASE_NAME = 'firebase-messaging-database';\nconst DATABASE_VERSION = 1;\nconst OBJECT_STORE_NAME = 'firebase-messaging-store';\n\nlet dbPromise: Promise<DB> | null = null;\nfunction getDbPromise(): Promise<DB> {\n  if (!dbPromise) {\n    dbPromise = openDb(DATABASE_NAME, DATABASE_VERSION, upgradeDb => {\n      // We don't use 'break' in this switch statement, the fall-through behavior is what we want,\n      // because if there are multiple versions between the old version and the current version, we\n      // want ALL the migrations that correspond to those versions to run, not only the last one.\n      // eslint-disable-next-line default-case\n      switch (upgradeDb.oldVersion) {\n        case 0:\n          upgradeDb.createObjectStore(OBJECT_STORE_NAME);\n      }\n    });\n  }\n  return dbPromise;\n}\n\n/** Gets record(s) from the objectStore that match the given key. */\nexport async function dbGet(\n  firebaseDependencies: FirebaseInternalDependencies\n): Promise<TokenDetails | undefined> {\n  const key = getKey(firebaseDependencies);\n  const db = await getDbPromise();\n  const tokenDetails = await db\n    .transaction(OBJECT_STORE_NAME)\n    .objectStore(OBJECT_STORE_NAME)\n    .get(key);\n\n  if (tokenDetails) {\n    return tokenDetails;\n  } else {\n    // Check if there is a tokenDetails object in the old DB.\n    const oldTokenDetails = await migrateOldDatabase(\n      firebaseDependencies.appConfig.senderId\n    );\n    if (oldTokenDetails) {\n      await dbSet(firebaseDependencies, oldTokenDetails);\n      return oldTokenDetails;\n    }\n  }\n}\n\n/** Assigns or overwrites the record for the given key with the given value. */\nexport async function dbSet(\n  firebaseDependencies: FirebaseInternalDependencies,\n  tokenDetails: TokenDetails\n): Promise<TokenDetails> {\n  const key = getKey(firebaseDependencies);\n  const db = await getDbPromise();\n  const tx = db.transaction(OBJECT_STORE_NAME, 'readwrite');\n  await tx.objectStore(OBJECT_STORE_NAME).put(tokenDetails, key);\n  await tx.complete;\n  return tokenDetails;\n}\n\n/** Removes record(s) from the objectStore that match the given key. */\nexport async function dbRemove(\n  firebaseDependencies: FirebaseInternalDependencies\n): Promise<void> {\n  const key = getKey(firebaseDependencies);\n  const db = await getDbPromise();\n  const tx = db.transaction(OBJECT_STORE_NAME, 'readwrite');\n  await tx.objectStore(OBJECT_STORE_NAME).delete(key);\n  await tx.complete;\n}\n\n/** Deletes the DB. Useful for tests. */\nexport async function dbDelete(): Promise<void> {\n  if (dbPromise) {\n    (await dbPromise).close();\n    await deleteDb(DATABASE_NAME);\n    dbPromise = null;\n  }\n}\n\nfunction getKey({ appConfig }: FirebaseInternalDependencies): string {\n  return appConfig.appId;\n}\n","/**\n * @license\n * Copyright 2019 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { DEFAULT_VAPID_KEY, ENDPOINT } from '../util/constants';\nimport { ERROR_FACTORY, ErrorCode } from '../util/errors';\nimport { SubscriptionOptions, TokenDetails } from '../interfaces/token-details';\n\nimport { AppConfig } from '../interfaces/app-config';\nimport { FirebaseInternalDependencies } from '../interfaces/internal-dependencies';\n\nexport interface ApiResponse {\n  token?: string;\n  error?: { message: string };\n}\n\nexport interface ApiRequestBody {\n  web: {\n    endpoint: string;\n    p256dh: string;\n    auth: string;\n    applicationPubKey?: string;\n  };\n}\n\nexport async function requestGetToken(\n  firebaseDependencies: FirebaseInternalDependencies,\n  subscriptionOptions: SubscriptionOptions\n): Promise<string> {\n  const headers = await getHeaders(firebaseDependencies);\n  const body = getBody(subscriptionOptions);\n\n  const subscribeOptions = {\n    method: 'POST',\n    headers,\n    body: JSON.stringify(body)\n  };\n\n  let responseData: ApiResponse;\n  try {\n    const response = await fetch(\n      getEndpoint(firebaseDependencies.appConfig),\n      subscribeOptions\n    );\n    responseData = await response.json();\n  } catch (err) {\n    throw ERROR_FACTORY.create(ErrorCode.TOKEN_SUBSCRIBE_FAILED, {\n      errorInfo: err\n    });\n  }\n\n  if (responseData.error) {\n    const message = responseData.error.message;\n    throw ERROR_FACTORY.create(ErrorCode.TOKEN_SUBSCRIBE_FAILED, {\n      errorInfo: message\n    });\n  }\n\n  if (!responseData.token) {\n    throw ERROR_FACTORY.create(ErrorCode.TOKEN_SUBSCRIBE_NO_TOKEN);\n  }\n\n  return responseData.token;\n}\n\nexport async function requestUpdateToken(\n  firebaseDependencies: FirebaseInternalDependencies,\n  tokenDetails: TokenDetails\n): Promise<string> {\n  const headers = await getHeaders(firebaseDependencies);\n  const body = getBody(tokenDetails.subscriptionOptions!);\n\n  const updateOptions = {\n    method: 'PATCH',\n    headers,\n    body: JSON.stringify(body)\n  };\n\n  let responseData: ApiResponse;\n  try {\n    const response = await fetch(\n      `${getEndpoint(firebaseDependencies.appConfig)}/${tokenDetails.token}`,\n      updateOptions\n    );\n    responseData = await response.json();\n  } catch (err) {\n    throw ERROR_FACTORY.create(ErrorCode.TOKEN_UPDATE_FAILED, {\n      errorInfo: err\n    });\n  }\n\n  if (responseData.error) {\n    const message = responseData.error.message;\n    throw ERROR_FACTORY.create(ErrorCode.TOKEN_UPDATE_FAILED, {\n      errorInfo: message\n    });\n  }\n\n  if (!responseData.token) {\n    throw ERROR_FACTORY.create(ErrorCode.TOKEN_UPDATE_NO_TOKEN);\n  }\n\n  return responseData.token;\n}\n\nexport async function requestDeleteToken(\n  firebaseDependencies: FirebaseInternalDependencies,\n  token: string\n): Promise<void> {\n  const headers = await getHeaders(firebaseDependencies);\n\n  const unsubscribeOptions = {\n    method: 'DELETE',\n    headers\n  };\n\n  try {\n    const response = await fetch(\n      `${getEndpoint(firebaseDependencies.appConfig)}/${token}`,\n      unsubscribeOptions\n    );\n    const responseData: ApiResponse = await response.json();\n    if (responseData.error) {\n      const message = responseData.error.message;\n      throw ERROR_FACTORY.create(ErrorCode.TOKEN_UNSUBSCRIBE_FAILED, {\n        errorInfo: message\n      });\n    }\n  } catch (err) {\n    throw ERROR_FACTORY.create(ErrorCode.TOKEN_UNSUBSCRIBE_FAILED, {\n      errorInfo: err\n    });\n  }\n}\n\nfunction getEndpoint({ projectId }: AppConfig): string {\n  return `${ENDPOINT}/projects/${projectId!}/registrations`;\n}\n\nasync function getHeaders({\n  appConfig,\n  installations\n}: FirebaseInternalDependencies): Promise<Headers> {\n  const authToken = await installations.getToken();\n\n  return new Headers({\n    'Content-Type': 'application/json',\n    Accept: 'application/json',\n    'x-goog-api-key': appConfig.apiKey!,\n    'x-goog-firebase-installations-auth': `FIS ${authToken}`\n  });\n}\n\nfunction getBody({\n  p256dh,\n  auth,\n  endpoint,\n  vapidKey\n}: SubscriptionOptions): ApiRequestBody {\n  const body: ApiRequestBody = {\n    web: {\n      endpoint,\n      auth,\n      p256dh\n    }\n  };\n\n  if (vapidKey !== DEFAULT_VAPID_KEY) {\n    body.web.applicationPubKey = vapidKey;\n  }\n\n  return body;\n}\n","/**\n * @license\n * Copyright 2019 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { ERROR_FACTORY, ErrorCode } from '../util/errors';\nimport { SubscriptionOptions, TokenDetails } from '../interfaces/token-details';\nimport {\n  arrayToBase64,\n  base64ToArray\n} from '../helpers/array-base64-translator';\nimport { dbGet, dbRemove, dbSet } from '../helpers/idb-manager';\nimport { requestDeleteToken, requestGetToken, requestUpdateToken } from './api';\n\nimport { FirebaseInternalDependencies } from '../interfaces/internal-dependencies';\n\n/** UpdateRegistration will be called once every week. */\nconst TOKEN_EXPIRATION_MS = 7 * 24 * 60 * 60 * 1000; // 7 days\n\nexport async function getToken(\n  firebaseDependencies: FirebaseInternalDependencies,\n  swRegistration: ServiceWorkerRegistration,\n  vapidKey: string\n): Promise<string> {\n  if (Notification.permission !== 'granted') {\n    throw ERROR_FACTORY.create(ErrorCode.PERMISSION_BLOCKED);\n  }\n\n  // If a PushSubscription exists it's returned, otherwise a new subscription is generated and\n  // returned.\n  const pushSubscription = await getPushSubscription(swRegistration, vapidKey);\n  const tokenDetails = await dbGet(firebaseDependencies);\n\n  const subscriptionOptions: SubscriptionOptions = {\n    vapidKey,\n    swScope: swRegistration.scope,\n    endpoint: pushSubscription.endpoint,\n    auth: arrayToBase64(pushSubscription.getKey('auth')!),\n    p256dh: arrayToBase64(pushSubscription.getKey('p256dh')!)\n  };\n\n  if (!tokenDetails) {\n    // No token, get a new one.\n    return getNewToken(firebaseDependencies, subscriptionOptions);\n  } else if (\n    !isTokenValid(tokenDetails.subscriptionOptions!, subscriptionOptions)\n  ) {\n    // Invalid token, get a new one.\n    try {\n      await requestDeleteToken(firebaseDependencies, tokenDetails.token);\n    } catch (e) {\n      // Suppress errors because of #2364\n      console.warn(e);\n    }\n\n    return getNewToken(firebaseDependencies, subscriptionOptions);\n  } else if (Date.now() >= tokenDetails.createTime + TOKEN_EXPIRATION_MS) {\n    // Weekly token refresh\n    return updateToken(\n      {\n        token: tokenDetails.token,\n        createTime: Date.now(),\n        subscriptionOptions\n      },\n      firebaseDependencies,\n      swRegistration\n    );\n  } else {\n    // Valid token, nothing to do.\n    return tokenDetails.token;\n  }\n}\n\n/**\n * This method deletes the token from the database, unsubscribes the token from FCM, and unregisters\n * the push subscription if it exists.\n */\nexport async function deleteToken(\n  firebaseDependencies: FirebaseInternalDependencies,\n  swRegistration: ServiceWorkerRegistration\n): Promise<boolean> {\n  const tokenDetails = await dbGet(firebaseDependencies);\n  if (tokenDetails) {\n    await requestDeleteToken(firebaseDependencies, tokenDetails.token);\n    await dbRemove(firebaseDependencies);\n  }\n\n  // Unsubscribe from the push subscription.\n  const pushSubscription = await swRegistration.pushManager.getSubscription();\n  if (pushSubscription) {\n    return pushSubscription.unsubscribe();\n  }\n\n  // If there's no SW, consider it a success.\n  return true;\n}\n\nasync function updateToken(\n  tokenDetails: TokenDetails,\n  firebaseDependencies: FirebaseInternalDependencies,\n  swRegistration: ServiceWorkerRegistration\n): Promise<string> {\n  try {\n    const updatedToken = await requestUpdateToken(\n      firebaseDependencies,\n      tokenDetails\n    );\n\n    const updatedTokenDetails: TokenDetails = {\n      ...tokenDetails,\n      token: updatedToken,\n      createTime: Date.now()\n    };\n\n    await dbSet(firebaseDependencies, updatedTokenDetails);\n    return updatedToken;\n  } catch (e) {\n    await deleteToken(firebaseDependencies, swRegistration);\n    throw e;\n  }\n}\n\nasync function getNewToken(\n  firebaseDependencies: FirebaseInternalDependencies,\n  subscriptionOptions: SubscriptionOptions\n): Promise<string> {\n  const token = await requestGetToken(\n    firebaseDependencies,\n    subscriptionOptions\n  );\n  const tokenDetails: TokenDetails = {\n    token,\n    createTime: Date.now(),\n    subscriptionOptions\n  };\n  await dbSet(firebaseDependencies, tokenDetails);\n  return tokenDetails.token;\n}\n\n/**\n * Gets a PushSubscription for the current user.\n */\nasync function getPushSubscription(\n  swRegistration: ServiceWorkerRegistration,\n  vapidKey: string\n): Promise<PushSubscription> {\n  const subscription = await swRegistration.pushManager.getSubscription();\n  if (subscription) {\n    return subscription;\n  }\n  return swRegistration.pushManager.subscribe({\n    userVisibleOnly: true,\n    // Chrome <= 75 doesn't support base64-encoded VAPID key. For backward compatibility, VAPID key\n    // submitted to pushManager#subscribe must be of type Uint8Array.\n    applicationServerKey: base64ToArray(vapidKey)\n  });\n}\n\n/**\n * Checks if the saved tokenDetails object matches the configuration provided.\n */\nfunction isTokenValid(\n  dbOptions: SubscriptionOptions,\n  currentOptions: SubscriptionOptions\n): boolean {\n  const isVapidKeyEqual = currentOptions.vapidKey === dbOptions.vapidKey;\n  const isEndpointEqual = currentOptions.endpoint === dbOptions.endpoint;\n  const isAuthEqual = currentOptions.auth === dbOptions.auth;\n  const isP256dhEqual = currentOptions.p256dh === dbOptions.p256dh;\n\n  return isVapidKeyEqual && isEndpointEqual && isAuthEqual && isP256dhEqual;\n}\n","/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { MessagePayload } from '@firebase/messaging-types';\nimport { MessagePayloadInternal } from '../interfaces/internal-message-payload';\n\nexport function externalizePayload(\n  internalPayload: MessagePayloadInternal\n): MessagePayload {\n  const payload: MessagePayload = {\n    from: internalPayload.from,\n    // eslint-disable-next-line camelcase\n    collapseKey: internalPayload.collapse_key\n  } as MessagePayload;\n\n  propagateNotificationPayload(payload, internalPayload);\n  propagateDataPayload(payload, internalPayload);\n  propagateFcmOptions(payload, internalPayload);\n\n  return payload;\n}\n\nfunction propagateNotificationPayload(\n  payload: MessagePayload,\n  messagePayloadInternal: MessagePayloadInternal\n): void {\n  if (!messagePayloadInternal.notification) {\n    return;\n  }\n\n  payload.notification = {};\n\n  const title = messagePayloadInternal.notification!.title;\n  if (!!title) {\n    payload.notification!.title = title;\n  }\n\n  const body = messagePayloadInternal.notification!.body;\n  if (!!body) {\n    payload.notification!.body = body;\n  }\n\n  const image = messagePayloadInternal.notification!.image;\n  if (!!image) {\n    payload.notification!.image = image;\n  }\n}\n\nfunction propagateDataPayload(\n  payload: MessagePayload,\n  messagePayloadInternal: MessagePayloadInternal\n): void {\n  if (!messagePayloadInternal.data) {\n    return;\n  }\n\n  payload.data = messagePayloadInternal.data as { [key: string]: string };\n}\n\nfunction propagateFcmOptions(\n  payload: MessagePayload,\n  messagePayloadInternal: MessagePayloadInternal\n): void {\n  if (!messagePayloadInternal.fcmOptions) {\n    return;\n  }\n\n  payload.fcmOptions = {};\n\n  const link = messagePayloadInternal.fcmOptions!.link;\n  if (!!link) {\n    payload.fcmOptions!.link = link;\n  }\n\n  // eslint-disable-next-line camelcase\n  const analyticsLabel = messagePayloadInternal.fcmOptions!.analytics_label;\n  if (!!analyticsLabel) {\n    payload.fcmOptions!.analyticsLabel = analyticsLabel;\n  }\n}\n","/**\n * @license\n * Copyright 2019 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { CONSOLE_CAMPAIGN_ID } from '../util/constants';\nimport { ConsoleMessageData } from '../interfaces/internal-message-payload';\n\nexport function isConsoleMessage(data: unknown): data is ConsoleMessageData {\n  // This message has a campaign ID, meaning it was sent using the Firebase Console.\n  return typeof data === 'object' && !!data && CONSOLE_CAMPAIGN_ID in data;\n}\n","/**\n * @license\n * Copyright 2019 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/** Returns a promise that resolves after given time passes. */\nexport function sleep(ms: number): Promise<void> {\n  return new Promise<void>(resolve => {\n    setTimeout(resolve, ms);\n  });\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {\n  BACKGROUND_HANDLE_EXECUTION_TIME_LIMIT_MS,\n  DEFAULT_VAPID_KEY,\n  FCM_MSG,\n  FOREGROUND_HANDLE_PREPARATION_TIME_MS,\n  TAG\n} from '../util/constants';\nimport { ERROR_FACTORY, ErrorCode } from '../util/errors';\nimport { FirebaseMessaging, MessagePayload } from '@firebase/messaging-types';\nimport {\n  MessagePayloadInternal,\n  MessageType,\n  NotificationPayloadInternal\n} from '../interfaces/internal-message-payload';\nimport { NextFn, Observer, Unsubscribe } from '@firebase/util';\nimport { deleteToken, getToken } from '../core/token-management';\n\nimport { FirebaseApp } from '@firebase/app-types';\nimport { FirebaseInternalDependencies } from '../interfaces/internal-dependencies';\nimport { FirebaseService } from '@firebase/app-types/private';\nimport { dbGet } from '../helpers/idb-manager';\nimport { externalizePayload } from '../helpers/externalizePayload';\nimport { isConsoleMessage } from '../helpers/is-console-message';\nimport { sleep } from '../helpers/sleep';\n\n// Let TS know that this is a service worker\ndeclare const self: ServiceWorkerGlobalScope;\n\nexport type BgMessageHandler = (payload: MessagePayload) => unknown;\n\nexport class SwController implements FirebaseMessaging, FirebaseService {\n  // A boolean flag to determine wether an app is using onBackgroundMessage or\n  // setBackgroundMessageHandler. onBackgroundMessage will receive a MessagePayload regardless of if\n  // a notification is displayed. Whereas, setBackgroundMessageHandler will swallow the\n  // MessagePayload if a NotificationPayload is included.\n  private isOnBackgroundMessageUsed: boolean | null = null;\n  private vapidKey: string | null = null;\n  private bgMessageHandler:\n    | null\n    | BgMessageHandler\n    | NextFn<MessagePayload>\n    | Observer<MessagePayload> = null;\n\n  constructor(\n    private readonly firebaseDependencies: FirebaseInternalDependencies\n  ) {\n    self.addEventListener('push', e => {\n      e.waitUntil(this.onPush(e));\n    });\n    self.addEventListener('pushsubscriptionchange', e => {\n      e.waitUntil(this.onSubChange(e));\n    });\n    self.addEventListener('notificationclick', e => {\n      e.waitUntil(this.onNotificationClick(e));\n    });\n  }\n\n  get app(): FirebaseApp {\n    return this.firebaseDependencies.app;\n  }\n\n  /**\n   * @deprecated. Use onBackgroundMessage(nextOrObserver: NextFn<object> | Observer<object>):\n   * Unsubscribe instead.\n   *\n   * Calling setBackgroundMessageHandler will opt in to some specific behaviors.\n   *\n   * 1.) If a notification doesn't need to be shown due to a window already being visible, then push\n   * messages will be sent to the page. 2.) If a notification needs to be shown, and the message\n   * contains no notification data this method will be called and the promise it returns will be\n   * passed to event.waitUntil. If you do not set this callback then all push messages will let and\n   * the developer can handle them in a their own 'push' event callback\n   *\n   * @param callback The callback to be called when a push message is received and a notification\n   * must be shown. The callback will be given the data from the push message.\n   */\n  setBackgroundMessageHandler(callback: BgMessageHandler): void {\n    this.isOnBackgroundMessageUsed = false;\n\n    if (!callback || typeof callback !== 'function') {\n      throw ERROR_FACTORY.create(ErrorCode.INVALID_BG_HANDLER);\n    }\n\n    this.bgMessageHandler = callback;\n  }\n\n  onBackgroundMessage(\n    nextOrObserver: NextFn<MessagePayload> | Observer<MessagePayload>\n  ): Unsubscribe {\n    this.isOnBackgroundMessageUsed = true;\n    this.bgMessageHandler = nextOrObserver;\n\n    return () => {\n      this.bgMessageHandler = null;\n    };\n  }\n\n  // TODO: Remove getToken from SW Controller. Calling this from an old SW can cause all kinds of\n  // trouble.\n  async getToken(): Promise<string> {\n    if (!this.vapidKey) {\n      // Call getToken using the current VAPID key if there already is a token. This is needed\n      // because usePublicVapidKey was not available in SW. It will be removed when vapidKey becomes\n      // a parameter of getToken, or when getToken is removed from SW.\n      const tokenDetails = await dbGet(this.firebaseDependencies);\n      this.vapidKey =\n        tokenDetails?.subscriptionOptions?.vapidKey ?? DEFAULT_VAPID_KEY;\n    }\n\n    return getToken(\n      this.firebaseDependencies,\n      self.registration,\n      this.vapidKey\n    );\n  }\n\n  // TODO: Remove deleteToken from SW Controller. Calling this from an old SW can cause all kinds of\n  // trouble.\n  deleteToken(): Promise<boolean> {\n    return deleteToken(this.firebaseDependencies, self.registration);\n  }\n\n  requestPermission(): Promise<void> {\n    throw ERROR_FACTORY.create(ErrorCode.AVAILABLE_IN_WINDOW);\n  }\n\n  // TODO: Remove this together with getToken from SW Controller.\n  usePublicVapidKey(vapidKey: string): void {\n    if (this.vapidKey !== null) {\n      throw ERROR_FACTORY.create(ErrorCode.USE_VAPID_KEY_AFTER_GET_TOKEN);\n    }\n\n    if (typeof vapidKey !== 'string' || vapidKey.length === 0) {\n      throw ERROR_FACTORY.create(ErrorCode.INVALID_VAPID_KEY);\n    }\n\n    this.vapidKey = vapidKey;\n  }\n\n  useServiceWorker(): void {\n    throw ERROR_FACTORY.create(ErrorCode.AVAILABLE_IN_WINDOW);\n  }\n\n  onMessage(): Unsubscribe {\n    throw ERROR_FACTORY.create(ErrorCode.AVAILABLE_IN_WINDOW);\n  }\n\n  onTokenRefresh(): Unsubscribe {\n    throw ERROR_FACTORY.create(ErrorCode.AVAILABLE_IN_WINDOW);\n  }\n\n  /**\n   * A handler for push events that shows notifications based on the content of the payload.\n   *\n   * The payload must be a JSON-encoded Object with a `notification` key. The value of the\n   * `notification` property will be used as the NotificationOptions object passed to\n   * showNotification. Additionally, the `title` property of the notification object will be used as\n   * the title.\n   *\n   * If there is no notification data in the payload then no notification will be shown.\n   */\n  async onPush(event: PushEvent): Promise<void> {\n    const internalPayload = getMessagePayloadInternal(event);\n    if (!internalPayload) {\n      console.debug(\n        TAG +\n          'failed to get parsed MessagePayload from the PushEvent. Skip handling the push.'\n      );\n      return;\n    }\n\n    // foreground handling: eventually passed to onMessage hook\n    const clientList = await getClientList();\n    if (hasVisibleClients(clientList)) {\n      return sendMessagePayloadInternalToWindows(clientList, internalPayload);\n    }\n\n    // background handling: display and pass to onBackgroundMessage hook\n    let isNotificationShown = false;\n    if (!!internalPayload.notification) {\n      await showNotification(wrapInternalPayload(internalPayload));\n      isNotificationShown = true;\n    }\n\n    // MessagePayload is only passed to `onBackgroundMessage`. Skip passing MessagePayload for\n    // the legacy `setBackgroundMessageHandler` to preserve the SDK behaviors.\n    if (\n      isNotificationShown === true &&\n      this.isOnBackgroundMessageUsed === false\n    ) {\n      return;\n    }\n\n    if (!!this.bgMessageHandler) {\n      const payload = externalizePayload(internalPayload);\n\n      if (typeof this.bgMessageHandler === 'function') {\n        this.bgMessageHandler(payload);\n      } else {\n        this.bgMessageHandler.next(payload);\n      }\n    }\n\n    // wait briefly to allow onBackgroundMessage to complete\n    await sleep(BACKGROUND_HANDLE_EXECUTION_TIME_LIMIT_MS);\n  }\n\n  async onSubChange(event: PushSubscriptionChangeEvent): Promise<void> {\n    const { newSubscription } = event;\n    if (!newSubscription) {\n      // Subscription revoked, delete token\n      await deleteToken(this.firebaseDependencies, self.registration);\n      return;\n    }\n\n    const tokenDetails = await dbGet(this.firebaseDependencies);\n    await deleteToken(this.firebaseDependencies, self.registration);\n    await getToken(\n      this.firebaseDependencies,\n      self.registration,\n      tokenDetails?.subscriptionOptions?.vapidKey ?? DEFAULT_VAPID_KEY\n    );\n  }\n\n  async onNotificationClick(event: NotificationEvent): Promise<void> {\n    const internalPayload: MessagePayloadInternal =\n      event.notification?.data?.[FCM_MSG];\n\n    if (!internalPayload) {\n      return;\n    } else if (event.action) {\n      // User clicked on an action button. This will allow developers to act on action button clicks\n      // by using a custom onNotificationClick listener that they define.\n      return;\n    }\n\n    // Prevent other listeners from receiving the event\n    event.stopImmediatePropagation();\n    event.notification.close();\n\n    // Note clicking on a notification with no link set will focus the Chrome's current tab.\n    const link = getLink(internalPayload);\n    if (!link) {\n      return;\n    }\n\n    // FM should only open/focus links from app's origin.\n    const url = new URL(link, self.location.href);\n    const originUrl = new URL(self.location.origin);\n\n    if (url.host !== originUrl.host) {\n      return;\n    }\n\n    let client = await getWindowClient(url);\n\n    if (!client) {\n      client = await self.clients.openWindow(link);\n\n      // Wait three seconds for the client to initialize and set up the message handler so that it\n      // can receive the message.\n      await sleep(FOREGROUND_HANDLE_PREPARATION_TIME_MS);\n    } else {\n      client = await client.focus();\n    }\n\n    if (!client) {\n      // Window Client will not be returned if it's for a third party origin.\n      return;\n    }\n\n    internalPayload.messageType = MessageType.NOTIFICATION_CLICKED;\n    internalPayload.isFirebaseMessaging = true;\n    return client.postMessage(internalPayload);\n  }\n}\n\nfunction wrapInternalPayload(\n  internalPayload: MessagePayloadInternal\n): NotificationPayloadInternal {\n  const wrappedInternalPayload: NotificationPayloadInternal = {\n    ...((internalPayload.notification as unknown) as NotificationPayloadInternal)\n  };\n\n  // Put the message payload under FCM_MSG name so we can identify the notification as being an FCM\n  // notification vs a notification from somewhere else (i.e. normal web push or developer generated\n  // notification).\n  wrappedInternalPayload.data = {\n    [FCM_MSG]: internalPayload\n  };\n\n  return wrappedInternalPayload;\n}\n\nfunction getMessagePayloadInternal({\n  data\n}: PushEvent): MessagePayloadInternal | null {\n  if (!data) {\n    return null;\n  }\n\n  try {\n    return data.json();\n  } catch (err) {\n    // Not JSON so not an FCM message.\n    return null;\n  }\n}\n\n/**\n * @param url The URL to look for when focusing a client.\n * @return Returns an existing window client or a newly opened WindowClient.\n */\nasync function getWindowClient(url: URL): Promise<WindowClient | null> {\n  const clientList = await getClientList();\n\n  for (const client of clientList) {\n    const clientUrl = new URL(client.url, self.location.href);\n\n    if (url.host === clientUrl.host) {\n      return client;\n    }\n  }\n\n  return null;\n}\n\n/**\n * @returns If there is currently a visible WindowClient, this method will resolve to true,\n * otherwise false.\n */\nfunction hasVisibleClients(clientList: WindowClient[]): boolean {\n  return clientList.some(\n    client =>\n      client.visibilityState === 'visible' &&\n      // Ignore chrome-extension clients as that matches the background pages of extensions, which\n      // are always considered visible for some reason.\n      !client.url.startsWith('chrome-extension://')\n  );\n}\n\nfunction sendMessagePayloadInternalToWindows(\n  clientList: WindowClient[],\n  internalPayload: MessagePayloadInternal\n): void {\n  internalPayload.isFirebaseMessaging = true;\n  internalPayload.messageType = MessageType.PUSH_RECEIVED;\n\n  for (const client of clientList) {\n    client.postMessage(internalPayload);\n  }\n}\n\nfunction getClientList(): Promise<WindowClient[]> {\n  return self.clients.matchAll({\n    type: 'window',\n    includeUncontrolled: true\n    // TS doesn't know that \"type: 'window'\" means it'll return WindowClient[]\n  }) as Promise<WindowClient[]>;\n}\n\nfunction showNotification(\n  notificationPayloadInternal: NotificationPayloadInternal\n): Promise<void> {\n  // Note: Firefox does not support the maxActions property.\n  // https://developer.mozilla.org/en-US/docs/Web/API/notification/maxActions\n  const { actions } = notificationPayloadInternal;\n  const { maxActions } = Notification;\n  if (actions && maxActions && actions.length > maxActions) {\n    console.warn(\n      `This browser only supports ${maxActions} actions. The remaining actions will not be displayed.`\n    );\n  }\n\n  return self.registration.showNotification(\n    /* title= */ notificationPayloadInternal.title ?? '',\n    notificationPayloadInternal\n  );\n}\n\nfunction getLink(payload: MessagePayloadInternal): string | null {\n  // eslint-disable-next-line camelcase\n  const link = payload.fcmOptions?.link ?? payload.notification?.click_action;\n  if (link) {\n    return link;\n  }\n\n  if (isConsoleMessage(payload.data)) {\n    // Notification created in the Firebase Console. Redirect to origin.\n    return self.location.origin;\n  } else {\n    return null;\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {\n  CONSOLE_CAMPAIGN_ANALYTICS_ENABLED,\n  CONSOLE_CAMPAIGN_ID,\n  CONSOLE_CAMPAIGN_NAME,\n  CONSOLE_CAMPAIGN_TIME,\n  DEFAULT_SW_PATH,\n  DEFAULT_SW_SCOPE,\n  DEFAULT_VAPID_KEY\n} from '../util/constants';\nimport {\n  ConsoleMessageData,\n  MessagePayloadInternal,\n  MessageType\n} from '../interfaces/internal-message-payload';\nimport { ERROR_FACTORY, ErrorCode } from '../util/errors';\nimport { NextFn, Observer, Unsubscribe } from '@firebase/util';\nimport { deleteToken, getToken } from '../core/token-management';\n\nimport { FirebaseApp } from '@firebase/app-types';\nimport { FirebaseInternalDependencies } from '../interfaces/internal-dependencies';\nimport { FirebaseMessaging } from '@firebase/messaging-types';\nimport { FirebaseService } from '@firebase/app-types/private';\nimport { isConsoleMessage } from '../helpers/is-console-message';\n\nexport class WindowController implements FirebaseMessaging, FirebaseService {\n  private vapidKey: string | null = null;\n  private swRegistration?: ServiceWorkerRegistration;\n  private onMessageCallback: NextFn<object> | Observer<object> | null = null;\n\n  constructor(\n    private readonly firebaseDependencies: FirebaseInternalDependencies\n  ) {\n    navigator.serviceWorker.addEventListener('message', e =>\n      this.messageEventListener(e)\n    );\n  }\n\n  get app(): FirebaseApp {\n    return this.firebaseDependencies.app;\n  }\n\n  private async messageEventListener(event: MessageEvent): Promise<void> {\n    const internalPayload = event.data as MessagePayloadInternal;\n\n    if (!internalPayload.isFirebaseMessaging) {\n      return;\n    }\n\n    // onMessageCallback is either a function or observer/subscriber.\n    // TODO: in the modularization release, have onMessage handle type MessagePayload as supposed to\n    // the legacy payload where some fields are in snake cases.\n    if (\n      this.onMessageCallback &&\n      internalPayload.messageType === MessageType.PUSH_RECEIVED\n    ) {\n      if (typeof this.onMessageCallback === 'function') {\n        this.onMessageCallback(\n          stripInternalFields(Object.assign({}, internalPayload))\n        );\n      } else {\n        this.onMessageCallback.next(Object.assign({}, internalPayload));\n      }\n    }\n\n    const dataPayload = internalPayload.data;\n\n    if (\n      isConsoleMessage(dataPayload) &&\n      dataPayload[CONSOLE_CAMPAIGN_ANALYTICS_ENABLED] === '1'\n    ) {\n      await this.logEvent(internalPayload.messageType!, dataPayload);\n    }\n  }\n\n  getVapidKey(): string | null {\n    return this.vapidKey;\n  }\n\n  getSwReg(): ServiceWorkerRegistration | undefined {\n    return this.swRegistration;\n  }\n\n  async getToken(options?: {\n    vapidKey?: string;\n    serviceWorkerRegistration?: ServiceWorkerRegistration;\n  }): Promise<string> {\n    if (Notification.permission === 'default') {\n      await Notification.requestPermission();\n    }\n\n    if (Notification.permission !== 'granted') {\n      throw ERROR_FACTORY.create(ErrorCode.PERMISSION_BLOCKED);\n    }\n\n    await this.updateVapidKey(options?.vapidKey);\n    await this.updateSwReg(options?.serviceWorkerRegistration);\n\n    return getToken(\n      this.firebaseDependencies,\n      this.swRegistration!,\n      this.vapidKey!\n    );\n  }\n\n  async updateVapidKey(vapidKey?: string | undefined): Promise<void> {\n    if (!!vapidKey) {\n      this.vapidKey = vapidKey;\n    } else if (!this.vapidKey) {\n      this.vapidKey = DEFAULT_VAPID_KEY;\n    }\n  }\n\n  async updateSwReg(\n    swRegistration?: ServiceWorkerRegistration | undefined\n  ): Promise<void> {\n    if (!swRegistration && !this.swRegistration) {\n      await this.registerDefaultSw();\n    }\n\n    if (!swRegistration && !!this.swRegistration) {\n      return;\n    }\n\n    if (!(swRegistration instanceof ServiceWorkerRegistration)) {\n      throw ERROR_FACTORY.create(ErrorCode.INVALID_SW_REGISTRATION);\n    }\n\n    this.swRegistration = swRegistration;\n  }\n\n  private async registerDefaultSw(): Promise<void> {\n    try {\n      this.swRegistration = await navigator.serviceWorker.register(\n        DEFAULT_SW_PATH,\n        {\n          scope: DEFAULT_SW_SCOPE\n        }\n      );\n\n      // The timing when browser updates sw when sw has an update is unreliable by my experiment. It\n      // leads to version conflict when the SDK upgrades to a newer version in the main page, but sw\n      // is stuck with the old version. For example,\n      // https://github.com/firebase/firebase-js-sdk/issues/2590 The following line reliably updates\n      // sw if there was an update.\n      this.swRegistration.update().catch(() => {\n        /* it is non blocking and we don't care if it failed */\n      });\n    } catch (e) {\n      throw ERROR_FACTORY.create(ErrorCode.FAILED_DEFAULT_REGISTRATION, {\n        browserErrorMessage: e.message\n      });\n    }\n  }\n\n  async deleteToken(): Promise<boolean> {\n    if (!this.swRegistration) {\n      await this.registerDefaultSw();\n    }\n\n    return deleteToken(this.firebaseDependencies, this.swRegistration!);\n  }\n\n  /**\n   * Request permission if it is not currently granted.\n   *\n   * @return Resolves if the permission was granted, rejects otherwise.\n   *\n   * @deprecated Use Notification.requestPermission() instead.\n   * https://developer.mozilla.org/en-US/docs/Web/API/Notification/requestPermission\n   */\n  async requestPermission(): Promise<void> {\n    if (Notification.permission === 'granted') {\n      return;\n    }\n\n    const permissionResult = await Notification.requestPermission();\n    if (permissionResult === 'granted') {\n      return;\n    } else if (permissionResult === 'denied') {\n      throw ERROR_FACTORY.create(ErrorCode.PERMISSION_BLOCKED);\n    } else {\n      throw ERROR_FACTORY.create(ErrorCode.PERMISSION_DEFAULT);\n    }\n  }\n\n  /**\n   * @deprecated. Use getToken(options?: {vapidKey?: string; serviceWorkerRegistration?:\n   * ServiceWorkerRegistration;}): Promise<string> instead.\n   */\n  usePublicVapidKey(vapidKey: string): void {\n    if (this.vapidKey !== null) {\n      throw ERROR_FACTORY.create(ErrorCode.USE_VAPID_KEY_AFTER_GET_TOKEN);\n    }\n\n    if (typeof vapidKey !== 'string' || vapidKey.length === 0) {\n      throw ERROR_FACTORY.create(ErrorCode.INVALID_VAPID_KEY);\n    }\n\n    this.vapidKey = vapidKey;\n  }\n\n  /**\n   * @deprecated. Use getToken(options?: {vapidKey?: string; serviceWorkerRegistration?:\n   * ServiceWorkerRegistration;}): Promise<string> instead.\n   */\n  useServiceWorker(swRegistration: ServiceWorkerRegistration): void {\n    if (!(swRegistration instanceof ServiceWorkerRegistration)) {\n      throw ERROR_FACTORY.create(ErrorCode.INVALID_SW_REGISTRATION);\n    }\n\n    if (this.swRegistration) {\n      throw ERROR_FACTORY.create(ErrorCode.USE_SW_AFTER_GET_TOKEN);\n    }\n\n    this.swRegistration = swRegistration;\n  }\n\n  /**\n   * @param nextOrObserver An observer object or a function triggered on message.\n   *\n   * @return The unsubscribe function for the observer.\n   */\n  onMessage(nextOrObserver: NextFn<object> | Observer<object>): Unsubscribe {\n    this.onMessageCallback = nextOrObserver;\n\n    return () => {\n      this.onMessageCallback = null;\n    };\n  }\n\n  setBackgroundMessageHandler(): void {\n    throw ERROR_FACTORY.create(ErrorCode.AVAILABLE_IN_SW);\n  }\n\n  onBackgroundMessage(): Unsubscribe {\n    throw ERROR_FACTORY.create(ErrorCode.AVAILABLE_IN_SW);\n  }\n\n  /**\n   * @deprecated No-op. It was initially designed with token rotation requests from server in mind.\n   * However, the plan to implement such feature was abandoned.\n   */\n  onTokenRefresh(): Unsubscribe {\n    return () => {};\n  }\n\n  private async logEvent(\n    messageType: MessageType,\n    data: ConsoleMessageData\n  ): Promise<void> {\n    const eventType = getEventType(messageType);\n    const analytics = await this.firebaseDependencies.analyticsProvider.get();\n    analytics.logEvent(eventType, {\n      /* eslint-disable camelcase */\n      message_id: data[CONSOLE_CAMPAIGN_ID],\n      message_name: data[CONSOLE_CAMPAIGN_NAME],\n      message_time: data[CONSOLE_CAMPAIGN_TIME],\n      message_device_time: Math.floor(Date.now() / 1000)\n      /* eslint-enable camelcase */\n    });\n  }\n}\n\nfunction getEventType(messageType: MessageType): string {\n  switch (messageType) {\n    case MessageType.NOTIFICATION_CLICKED:\n      return 'notification_open';\n    case MessageType.PUSH_RECEIVED:\n      return 'notification_foreground';\n    default:\n      throw new Error();\n  }\n}\n\nfunction stripInternalFields(\n  internalPayload: MessagePayloadInternal\n): MessagePayloadInternal {\n  delete internalPayload.messageType;\n  delete internalPayload.isFirebaseMessaging;\n  return internalPayload;\n}\n","/**\n * @license\n * Copyright 2019 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { ERROR_FACTORY, ErrorCode } from '../util/errors';\nimport { FirebaseApp, FirebaseOptions } from '@firebase/app-types';\n\nimport { AppConfig } from '../interfaces/app-config';\nimport { FirebaseError } from '@firebase/util';\n\nexport function extractAppConfig(app: FirebaseApp): AppConfig {\n  if (!app || !app.options) {\n    throw getMissingValueError('App Configuration Object');\n  }\n\n  if (!app.name) {\n    throw getMissingValueError('App Name');\n  }\n\n  // Required app config keys\n  const configKeys: ReadonlyArray<keyof FirebaseOptions> = [\n    'projectId',\n    'apiKey',\n    'appId',\n    'messagingSenderId'\n  ];\n\n  const { options } = app;\n  for (const keyName of configKeys) {\n    if (!options[keyName]) {\n      throw getMissingValueError(keyName);\n    }\n  }\n\n  return {\n    appName: app.name,\n    projectId: options.projectId!,\n    apiKey: options.apiKey!,\n    appId: options.appId!,\n    senderId: options.messagingSenderId!\n  };\n}\n\nfunction getMissingValueError(valueName: string): FirebaseError {\n  return ERROR_FACTORY.create(ErrorCode.MISSING_APP_CONFIG_VALUES, {\n    valueName\n  });\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport '@firebase/installations';\n\nimport {\n  Component,\n  ComponentContainer,\n  ComponentType\n} from '@firebase/component';\nimport { ERROR_FACTORY, ErrorCode } from './util/errors';\nimport {\n  FirebaseService,\n  _FirebaseNamespace\n} from '@firebase/app-types/private';\n\nimport { FirebaseInternalDependencies } from './interfaces/internal-dependencies';\nimport { FirebaseMessaging } from '@firebase/messaging-types';\nimport { SwController } from './controllers/sw-controller';\nimport { WindowController } from './controllers/window-controller';\nimport { extractAppConfig } from './helpers/extract-app-config';\nimport firebase from '@firebase/app';\n\nconst MESSAGING_NAME = 'messaging';\nfunction factoryMethod(\n  container: ComponentContainer\n): FirebaseService & FirebaseMessaging {\n  // Dependencies.\n  const app = container.getProvider('app').getImmediate();\n  const appConfig = extractAppConfig(app);\n  const installations = container.getProvider('installations').getImmediate();\n  const analyticsProvider = container.getProvider('analytics-internal');\n\n  const firebaseDependencies: FirebaseInternalDependencies = {\n    app,\n    appConfig,\n    installations,\n    analyticsProvider\n  };\n\n  if (!isSupported()) {\n    throw ERROR_FACTORY.create(ErrorCode.UNSUPPORTED_BROWSER);\n  }\n\n  if (self && 'ServiceWorkerGlobalScope' in self) {\n    // Running in ServiceWorker context\n    return new SwController(firebaseDependencies);\n  } else {\n    // Assume we are in the window context.\n    return new WindowController(firebaseDependencies);\n  }\n}\n\nconst NAMESPACE_EXPORTS = {\n  isSupported\n};\n\n(firebase as _FirebaseNamespace).INTERNAL.registerComponent(\n  new Component(\n    MESSAGING_NAME,\n    factoryMethod,\n    ComponentType.PUBLIC\n  ).setServiceProps(NAMESPACE_EXPORTS)\n);\n\n/**\n * Define extension behavior of `registerMessaging`\n */\ndeclare module '@firebase/app-types' {\n  interface FirebaseNamespace {\n    messaging: {\n      (app?: FirebaseApp): FirebaseMessaging;\n      isSupported(): boolean;\n    };\n  }\n  interface FirebaseApp {\n    messaging(): FirebaseMessaging;\n  }\n}\n\nfunction isSupported(): boolean {\n  if (self && 'ServiceWorkerGlobalScope' in self) {\n    // Running in ServiceWorker context\n    return isSWControllerSupported();\n  } else {\n    // Assume we are in the window context.\n    return isWindowControllerSupported();\n  }\n}\n\n/**\n * Checks to see if the required APIs exist.\n */\nfunction isWindowControllerSupported(): boolean {\n  return (\n    'indexedDB' in window &&\n    indexedDB !== null &&\n    navigator.cookieEnabled &&\n    'serviceWorker' in navigator &&\n    'PushManager' in window &&\n    'Notification' in window &&\n    'fetch' in window &&\n    ServiceWorkerRegistration.prototype.hasOwnProperty('showNotification') &&\n    PushSubscription.prototype.hasOwnProperty('getKey')\n  );\n}\n\n/**\n * Checks to see if the required APIs exist within SW Context.\n */\nfunction isSWControllerSupported(): boolean {\n  return (\n    'indexedDB' in self &&\n    indexedDB !== null &&\n    'PushManager' in self &&\n    'Notification' in self &&\n    ServiceWorkerRegistration.prototype.hasOwnProperty('showNotification') &&\n    PushSubscription.prototype.hasOwnProperty('getKey')\n  );\n}\n"]},"metadata":{},"sourceType":"module"}